{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1346,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":347},\"exp\":{\"hacking\":2896623760.0527,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":26890831.555705987},\"mults\":{\"hacking_chance\":2.1891348471842265,\"hacking_speed\":2.032640228079983,\"hacking_money\":2.075864831384754,\"hacking_grow\":1.8050998533780476,\"hacking\":2.7073076825971394,\"hacking_exp\":3.8601744472015223,\"strength\":1.6713887531278218,\"strength_exp\":2.114306772706694,\"defense\":1.6713887531278218,\"defense_exp\":2.114306772706694,\"dexterity\":1.7549581907842118,\"dexterity_exp\":2.114306772706694,\"agility\":1.7549581907842118,\"agility_exp\":2.114306772706694,\"charisma\":1.838527628440604,\"charisma_exp\":2.114306772706694,\"hacknet_node_money\":1.6713887531278218,\"hacknet_node_purchase_cost\":0.59830485165621,\"hacknet_node_ram_cost\":0.59830485165621,\"hacknet_node_core_cost\":0.59830485165621,\"hacknet_node_level_cost\":0.59830485165621,\"company_rep\":2.426856469541597,\"faction_rep\":1.838527628440604,\"work_money\":1.6713887531278218,\"crime_success\":1.6713887531278218,\"crime_money\":1.6713887531278218,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\"],\"factionInvitations\":[\"Sector-12\",\"CyberSec\",\"NiteSec\",\"BitRunners\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Tian Di Hui\",\"New Tokyo\",\"Shadows of Anarchy\"]},\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":377400052177148.8,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-141120,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":378842131517158.4,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":377400052176035.8,\"work\":0,\"servers\":-1441792000000,\"other\":-287200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-638208,\"codingcontract\":525000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":633953566639098.2,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":429216154807360.25,\"work\":0,\"servers\":-149922475596187.6,\"other\":-863200000,\"augmentations\":-54814597397390.33}},\"playtimeSinceLastAug\":5488000,\"playtimeSinceLastBitnode\":23366000,\"lastAugReset\":1702337443977,\"lastNodeReset\":1702319565989,\"purchasedServers\":[\"PS-01\",\"PS-02\",\"PS-03\",\"PS-04\",\"PS-05\",\"PS-06\",\"PS-07\",\"PS-08\",\"PS-09\",\"PS-10\",\"PS-11\",\"PS-12\",\"PS-13\",\"PS-14\",\"PS-15\",\"PS-16\",\"PS-17\",\"PS-18\",\"PS-19\",\"PS-20\",\"PS-21\",\"PS-22\",\"PS-23\",\"PS-24\",\"PS-25\"],\"scriptProdSinceLastAug\":378751432915667.2,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,2],[4,1],[5,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1701145827995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1701202374276},{\"ID\":\"TOR\",\"unlockedOn\":1701204414269},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1701204774270},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1701208374382},{\"ID\":\"TRAVEL\",\"unlockedOn\":1701242031010},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1701271371001},{\"ID\":\"NITESEC\",\"unlockedOn\":1701280769859},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1701284874684},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701300894746},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1701302696087},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1701302696090},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1701302696092},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1701307089796},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1701324411006},{\"ID\":\"DONATION\",\"unlockedOn\":1701385029644},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701389755155},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1701394988151},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1701397071007},{\"ID\":\"SF1.1\",\"unlockedOn\":1701404107814},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701475371158},{\"ID\":\"FROZE\",\"unlockedOn\":1701651553761},{\"ID\":\"SF4.1\",\"unlockedOn\":1701668013083},{\"ID\":\"SF5.1\",\"unlockedOn\":1701890115524},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1702033193607},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1702333219049}],\"terminalCommandHistory\":[\"eval\",\"sb\",\"eval\",\"sh sigma-cosmetics \",\"sb\",\"t\",\"kh\",\"eva\",\"eval\",\"sb\",\"eval\",\"sh rho-construction \",\"eval\",\"exp\",\"ka\",\"exp\",\"eval\",\"exp\",\"ka\",\"exp\",\"exit\",\"ka\",\"exit\",\"exp\",\"ka\",\"exp\",\"ka\",\"eval\",\"sh rho-construction \",\"./hud.js \",\"kill hud.js \",\"./hud.js \",\"kill hud.js \",\"alias hud=\\\"./hud.js\\\"\",\"alias khud=\\\"kill hud.js\\\"\",\"hud\",\"khud\",\"hud\",\"khud\",\"hud\",\"./clock.js \",\"kill clock.js \",\"./clock.js \",\"khud\",\"bs b\",\"eval\",\"sh rho-construction \",\"hud\",\"clear\",\"hud\"],\"lastUpdate\":1702342932381,\"lastSave\":1702342932055,\"totalPlaytime\":1201899800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":26677,\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"68b2bba17d5b1\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"50.8.4.7\",\"isConnectedTo\":true,\"maxRam\":1048576,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"util.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HGW_RAM = 1.75;\\r\\nexport const GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nexport const WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nexport const HOME_RESERVE = 512;\\r\\nexport function getAllServers(ns) {\\r\\n    const servers = new Set();\\r\\n    const queue = ['home'];\\r\\n    // eslint-disable-next-line no-constant-condition\\r\\n    while (true) {\\r\\n        const host = queue.pop();\\r\\n        if (host === undefined)\\r\\n            break;\\r\\n        servers.add(host);\\r\\n        const connectedServers = ns.scan(host);\\r\\n        queue.push(...connectedServers.filter(server => !servers.has(server)));\\r\\n    }\\r\\n    return Array.from(servers);\\r\\n}\\r\\n// returns growth multiplier when executing grow with the given number of threads\\r\\nexport function invGrowthAnalyze(ns, target, threads, max, min) {\\r\\n    if (ns.getServerMaxMoney(target) === ns.getServerMoneyAvailable(target))\\r\\n        return 1;\\r\\n    // if (min !== undefined && min <= 1) return 1;\\r\\n    max = max || ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1);\\r\\n    min = min || 1.000001;\\r\\n    if (Math.round(min * 100000) >= Math.round(max * 100000))\\r\\n        return min;\\r\\n    const mid = min + ((max - min) / 2);\\r\\n    // ns.tprintf(`min:${min}|mid:${mid}|max:${max}`);\\r\\n    const ga = Math.floor(ns.growthAnalyze(target, mid));\\r\\n    // ns.tprintf(`ga:${ga}`);\\r\\n    if (ga === threads)\\r\\n        return mid;\\r\\n    if (ga > threads)\\r\\n        return invGrowthAnalyze(ns, target, threads, mid, min);\\r\\n    return invGrowthAnalyze(ns, target, threads, max, mid);\\r\\n}\\r\\nexport function formatTime(time, showms = false) {\\r\\n    const ms = time % 1000;\\r\\n    const seconds = Math.floor(time / 1000) % 60;\\r\\n    const minutes = Math.floor(time / 1000 / 60) % 60;\\r\\n    const hours = Math.floor(time / 1000 / 60 / 60);\\r\\n    if (showms)\\r\\n        return `${(minutes > 0 ? minutes.toFixed(0) + ':' : '')}${seconds.toFixed(0).padStart(2, '0')}.${ms.toFixed(0).padStart(3, '0')}`;\\r\\n    return `${(hours > 0 ? hours.toFixed(0) + ':' : '')}${((minutes > 0 || hours > 0) ? minutes.toFixed(0).padStart(2, '0') + ':' : '')}${seconds.toFixed(0).padStart(2, '0')}`;\\r\\n}\\r\\nexport function getSlaves(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    return servers.filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s)).sort((a, b) => getSlaveThreads(ns, b) - getSlaveThreads(ns, a));\\r\\n}\\r\\nexport function getTotalThreads(ns, slaves, homeReserve = HOME_RESERVE) {\\r\\n    if (homeReserve > ns.getServerMaxRam('home'))\\r\\n        homeReserve = ns.getServerMaxRam('home');\\r\\n    let totalThreads = slaves.reduce((count, slave) => count + Math.floor(ns.getServerMaxRam(slave) / HGW_RAM), 0);\\r\\n    if (slaves.includes('home')) {\\r\\n        totalThreads -= Math.ceil(homeReserve / HGW_RAM);\\r\\n    }\\r\\n    return totalThreads;\\r\\n}\\r\\nexport function getSlaveThreads(ns, slave, homeReserve = HOME_RESERVE) {\\r\\n    if (homeReserve > ns.getServerMaxRam('home'))\\r\\n        homeReserve = ns.getServerMaxRam('home');\\r\\n    let slaveThreads = Math.floor(ns.getServerMaxRam(slave) / HGW_RAM);\\r\\n    if (slave === 'home') {\\r\\n        slaveThreads -= Math.ceil(homeReserve / HGW_RAM);\\r\\n        slaveThreads = Math.max(0, slaveThreads);\\r\\n    }\\r\\n    return slaveThreads;\\r\\n}\\r\\nexport async function doHackWeakenGrowWeaken(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\r\\n    const current = ns.getServerMoneyAvailable(target);\\r\\n    let hackThreads = 1;\\r\\n    let maxGain = 0;\\r\\n    let finalHackThreads = 0;\\r\\n    while (true) {\\r\\n        const hackPercent = ns.hackAnalyze(target) * hackThreads;\\r\\n        if (hackPercent > .9)\\r\\n            break;\\r\\n        const future = current - (current * hackPercent);\\r\\n        const growMult = current / future;\\r\\n        const growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        const gain = current - future;\\r\\n        const hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / WEAK_SEC);\\r\\n        const gwT = Math.ceil(growThreads / (WEAK_SEC / GROW_SEC));\\r\\n        const totalHWGWThreads = hackThreads + hackWeakenThreads + growThreads + gwT;\\r\\n        if (totalHWGWThreads > totalThreads)\\r\\n            break;\\r\\n        if (gain > maxGain) {\\r\\n            maxGain = gain;\\r\\n            finalHackThreads = hackThreads;\\r\\n        }\\r\\n        hackThreads++;\\r\\n    }\\r\\n    hackThreads = finalHackThreads;\\r\\n    const hackPercent = ns.hackAnalyze(target) * hackThreads;\\r\\n    const future = current - (current * hackPercent);\\r\\n    const growMult = current / future;\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n    const gain = current - future;\\r\\n    let hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / WEAK_SEC);\\r\\n    let growWeakenThreads = Math.ceil(growThreads / (WEAK_SEC / GROW_SEC));\\r\\n    const totalHWGWThreads = hackThreads + hackWeakenThreads + growThreads + growWeakenThreads;\\r\\n    const curStr = ns.formatNumber(current, 3, 1000, true);\\r\\n    const futStr = ns.formatNumber(future, 3, 1000, true);\\r\\n    const resStr = ns.formatNumber(future * growMult, 3, 1000, true);\\r\\n    const gainStr = ns.formatNumber(gain, 3, 1000, true);\\r\\n    // hack finish first, then hw, then grow, then gw\\r\\n    const hackMSBuf = weakTime - hackTime - 200;\\r\\n    const hackWeakMSBuf = 0;\\r\\n    const growMSBuf = (weakTime - growTime) + 200;\\r\\n    const growWeakMSBuf = 400;\\r\\n    ns.tprintf(`current:${curStr}|future:${futStr}|growMult:${growMult}|result:${resStr}|gain:${gainStr}|tot:${totalHWGWThreads}|${formatTime(weakTime + growWeakMSBuf)}`);\\r\\n    for (const s of slaves) {\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        const slaveHackThreads = Math.min(slaveThreads, hackThreads);\\r\\n        slaveThreads -= slaveHackThreads;\\r\\n        hackThreads -= slaveHackThreads;\\r\\n        const slaveHackWeakenThreads = Math.min(slaveThreads, hackWeakenThreads);\\r\\n        slaveThreads -= slaveHackWeakenThreads;\\r\\n        hackWeakenThreads -= slaveHackWeakenThreads;\\r\\n        const slaveGrowThreads = Math.min(slaveThreads, growThreads);\\r\\n        slaveThreads -= slaveGrowThreads;\\r\\n        growThreads -= slaveGrowThreads;\\r\\n        const slaveWeakenGrowThreads = Math.min(slaveThreads, growWeakenThreads);\\r\\n        slaveThreads -= slaveWeakenGrowThreads;\\r\\n        growWeakenThreads -= slaveWeakenGrowThreads;\\r\\n        if (slaveHackThreads > 0)\\r\\n            ns.exec('hack.js', s, slaveHackThreads, target, hackMSBuf);\\r\\n        if (slaveHackWeakenThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveHackWeakenThreads, target, hackWeakMSBuf);\\r\\n        if (slaveGrowThreads > 0)\\r\\n            ns.exec('grow.js', s, slaveGrowThreads, target, growMSBuf);\\r\\n        if (slaveWeakenGrowThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveWeakenGrowThreads, target, growWeakMSBuf);\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function doGrowWeaken(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const growMSBuf = weakTime - growTime;\\r\\n    // run 1 weaken thread for every 12.5 grow threads;\\r\\n    let weakenThreads = Math.ceil(totalThreads / (WEAK_SEC / GROW_SEC));\\r\\n    let growThreads = totalThreads - weakenThreads;\\r\\n    const availableMoney = ns.getServerMoneyAvailable(target);\\r\\n    const maxMoney = ns.getServerMaxMoney(target);\\r\\n    const growResult = invGrowthAnalyze(ns, target, growThreads) * availableMoney;\\r\\n    ns.tprintf(`Growing ${target} sec:${ns.getServerSecurityLevel(target)}|wt:${weakenThreads}|gt:${growThreads} ${ns.formatNumber(availableMoney, 3, 1000, true)} => ${ns.formatNumber(growResult, 3, 1000, true)} / ${ns.formatNumber(maxMoney, 3, 1000, true)} ${formatTime(weakTime + 200)}`);\\r\\n    for (const s of slaves) {\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        const slaveWeakenThreads = Math.min(slaveThreads, weakenThreads);\\r\\n        slaveThreads -= slaveWeakenThreads;\\r\\n        weakenThreads -= slaveWeakenThreads;\\r\\n        const slaveGrowThreads = Math.min(slaveThreads, growThreads);\\r\\n        slaveThreads -= slaveGrowThreads;\\r\\n        growThreads -= slaveGrowThreads;\\r\\n        if (slaveWeakenThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveWeakenThreads, target, 200);\\r\\n        if (slaveGrowThreads > 0)\\r\\n            ns.exec('grow.js', s, slaveGrowThreads, target, growMSBuf);\\r\\n    }\\r\\n    if (weakenThreads > 0)\\r\\n        ns.tprint(`WARNING [doGrowWeaken]: ${weakenThreads} Weaken Threads unaccounted`);\\r\\n    if (growThreads > 0)\\r\\n        ns.tprint(`WARNING [doGrowWeaken]: ${growThreads} Grow Threads unaccounted`);\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function doWeaken(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    const weakenPerRound = totalThreads * 0.05;\\r\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const currentSec = ns.getServerSecurityLevel(target);\\r\\n    const targetSec = Math.max(currentSec - weakenPerRound, ns.getServerMinSecurityLevel(target));\\r\\n    ns.tprintf(`Weakening ${target} ${currentSec.toFixed(2)} => ${targetSec} / ${ns.getServerMinSecurityLevel(target)} ${formatTime(weakTime + 200)}`);\\r\\n    let weakenThreads = Math.min(Math.ceil((currentSec - targetSec) / WEAK_SEC), totalThreads);\\r\\n    for (const s of slaves) {\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        const slaveWeakenThreads = Math.min(slaveThreads, weakenThreads);\\r\\n        slaveThreads -= slaveWeakenThreads;\\r\\n        weakenThreads -= slaveWeakenThreads;\\r\\n        if (slaveWeakenThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveWeakenThreads, target, 200);\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function waitForHGWScripts(ns, slaves) {\\r\\n    while (slaves.some(s => ns.ps(s).some(script => script.filename === 'hack.js' || script.filename === 'grow.js' || script.filename === 'weaken.js')))\\r\\n        await ns.sleep(20);\\r\\n}\\r\\nexport const ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n    \\\"Shadows of Anarchy\\\",\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDNUIsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUMzRSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7QUFFaEMsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFNO0lBQ2xDLE1BQU0sT0FBTyxHQUFnQixJQUFJLEdBQUcsRUFBVSxDQUFDO0lBQy9DLE1BQU0sS0FBSyxHQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakMsaURBQWlEO0lBQ2pELE9BQU0sSUFBSSxFQUFFO1FBQ1YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxNQUFNO1FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxpRkFBaUY7QUFDakYsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQU0sRUFBRSxNQUFjLEVBQUUsT0FBZSxFQUFFLEdBQVksRUFBRSxHQUFZO0lBQ2xHLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRiwrQ0FBK0M7SUFFL0MsR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckYsR0FBRyxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUM7SUFFdEIsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUVoRSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVwQyxrREFBa0Q7SUFFbEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXJELDBCQUEwQjtJQUUxQixJQUFJLEVBQUUsS0FBSyxPQUFPO1FBQUUsT0FBTyxHQUFHLENBQUM7SUFFL0IsSUFBSSxFQUFFLEdBQUcsT0FBTztRQUFFLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXpFLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVksRUFBRSxNQUFNLEdBQUcsS0FBSztJQUNyRCxNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxHQUFHLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUVwSSxPQUFPLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztBQUM5SyxDQUFD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QU0sQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFDLENBQUM7UUFDakosTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDMUIsWUFBWTtJQUNaLFVBQVU7SUFDVixjQUFjO0lBQ2QsT0FBTztJQUNQLFVBQVU7SUFDVixzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLEtBQUs7SUFDTCxxQkFBcUI7SUFDckIsc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWix3QkFBd0I7SUFDeEIsNkJBQTZCO0lBQzdCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLHVCQUF1QjtJQUN2QixlQUFlO0lBQ2YsZUFBZTtJQUNmLFlBQVk7SUFDWixTQUFTO0lBQ1QsYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhO0lBQ2IsVUFBVTtJQUNWLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0Isb0JBQW9CO0NBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBIR1dfUkFNID0gMS43NTtcclxuZXhwb3J0IGNvbnN0IEdST1dfU0VDID0gMC4wMDQ7IC8vIG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eSgxLCAnb21lZ2EtbmV0Jyk7XHJcbmV4cG9ydCBjb25zdCBXRUFLX1NFQyA9IDAuMDU7IC8vIG5zLndlYWtlbkFuYWx5emUoMSk7XHJcbmV4cG9ydCBjb25zdCBIT01FX1JFU0VSVkUgPSA1MTI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsU2VydmVycyhuczogTlMpOiBzdHJpbmdbXSB7XHJcbiAgY29uc3Qgc2VydmVyczogU2V0PHN0cmluZz4gPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICBjb25zdCBxdWV1ZTogc3RyaW5nW10gPSBbJ2hvbWUnXTtcclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxyXG4gIHdoaWxlKHRydWUpIHtcclxuICAgIGNvbnN0IGhvc3QgPSBxdWV1ZS5wb3AoKTtcclxuICAgIGlmIChob3N0ID09PSB1bmRlZmluZWQpIGJyZWFrO1xyXG5cclxuICAgIHNlcnZlcnMuYWRkKGhvc3QpO1xyXG4gICAgY29uc3QgY29ubmVjdGVkU2VydmVycyA9IG5zLnNjYW4oaG9zdCk7XHJcbiAgICBxdWV1ZS5wdXNoKC4uLmNvbm5lY3RlZFNlcnZlcnMuZmlsdGVyKHNlcnZlciA9PiAhc2VydmVycy5oYXMoc2VydmVyKSkpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEFycmF5LmZyb20oc2VydmVycyk7XHJcbn1cclxuXHJcbi8vIHJldHVybnMgZ3Jvd3RoIG11bHRpcGxpZXIgd2hlbiBleGVjdXRpbmcgZ3JvdyB3aXRoIHRoZSBnaXZlbiBudW1iZXIgb2YgdGhyZWFkc1xyXG5leHBvcnQgZnVuY3Rpb24gaW52R3Jvd3RoQW5hbHl6ZShuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlYWRzOiBudW1iZXIsIG1heD86IG51bWJlciwgbWluPzogbnVtYmVyKTogbnVtYmVyIHtcclxuICBpZiAobnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSA9PT0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSkgcmV0dXJuIDE7XHJcbiAgLy8gaWYgKG1pbiAhPT0gdW5kZWZpbmVkICYmIG1pbiA8PSAxKSByZXR1cm4gMTtcclxuXHJcbiAgbWF4ID0gbWF4IHx8IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkgLyAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSArIDEpO1xyXG4gIG1pbiA9IG1pbiB8fCAxLjAwMDAwMTtcclxuICBcclxuICBpZihNYXRoLnJvdW5kKG1pbioxMDAwMDApID49IE1hdGgucm91bmQobWF4KjEwMDAwMCkpIHJldHVybiBtaW47XHJcbiAgXHJcbiAgY29uc3QgbWlkID0gbWluICsgKChtYXggLSBtaW4pIC8gMik7XHJcblxyXG4gIC8vIG5zLnRwcmludGYoYG1pbjoke21pbn18bWlkOiR7bWlkfXxtYXg6JHttYXh9YCk7XHJcbiAgXHJcbiAgY29uc3QgZ2EgPSBNYXRoLmZsb29yKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBtaWQpKTtcclxuICBcclxuICAvLyBucy50cHJpbnRmKGBnYToke2dhfWApO1xyXG5cclxuICBpZiAoZ2EgPT09IHRocmVhZHMpIHJldHVybiBtaWQ7XHJcblxyXG4gIGlmIChnYSA+IHRocmVhZHMpIHJldHVybiBpbnZHcm93dGhBbmFseXplKG5zLCB0YXJnZXQsIHRocmVhZHMsIG1pZCwgbWluKTtcclxuXHJcbiAgcmV0dXJuIGludkdyb3d0aEFuYWx5emUobnMsIHRhcmdldCwgdGhyZWFkcywgbWF4LCBtaWQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZSh0aW1lOiBudW1iZXIsIHNob3dtcyA9IGZhbHNlKTogc3RyaW5nIHtcclxuICBjb25zdCBtcyA9IHRpbWUgJSAxMDAwO1xyXG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKHRpbWUgLyAxMDAwKSAlIDYwO1xyXG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRpbWUgLyAxMDAwIC8gNjApICUgNjA7XHJcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHRpbWUgLyAxMDAwIC8gNjAgLyA2MCk7XHJcblxyXG4gIGlmIChzaG93bXMpXHJcbiAgICByZXR1cm4gYCR7KG1pbnV0ZXMgPiAwID8gbWludXRlcy50b0ZpeGVkKDApICsgJzonIDogJycpfSR7c2Vjb25kcy50b0ZpeGVkKDApLnBhZFN0YXJ0KDIsICcwJyl9LiR7bXMudG9GaXhlZCgwKS5wYWRTdGFydCgzLCAnMCcpfWA7XHJcbiAgXHJcbiAgcmV0dXJuIGAkeyhob3VycyA+IDAgPyBob3Vycy50b0ZpeGVkKDApICsgJzonIDogJycpfSR7KChtaW51dGVzID4gMCB8fCBob3VycyA+IDApID8gbWludXRlcy50b0ZpeGVkKDApLnBhZFN0YXJ0KDIsICcwJykgKyAnOicgOiAnJyl9JHtzZWNvbmRzLnRvRml4ZWQoMCkucGFkU3RhcnQoMiwgJzAnKX1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xhdmVzKG5zOiBOUykge1xyXG4gIGNvbnN0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKTtcclxuICByZXR1cm4gc2VydmVycy5maWx0ZXIocyA9PiBucy5nZXRTZXJ2ZXJNYXhSYW0ocykgPiAwICYmIG5zLmhhc1Jvb3RBY2Nlc3MocykpLnNvcnQoKGEsIGIpID0+IGdldFNsYXZlVGhyZWFkcyhucywgYikgLSBnZXRTbGF2ZVRocmVhZHMobnMsIGEpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvdGFsVGhyZWFkcyhuczogTlMsIHNsYXZlczogc3RyaW5nW10sIGhvbWVSZXNlcnZlID0gSE9NRV9SRVNFUlZFKSB7XHJcbiAgaWYgKGhvbWVSZXNlcnZlID4gbnMuZ2V0U2VydmVyTWF4UmFtKCdob21lJykpIGhvbWVSZXNlcnZlID0gbnMuZ2V0U2VydmVyTWF4UmFtKCdob21lJyk7XHJcbiAgbGV0IHRvdGFsVGhyZWFkcyA9IHNsYXZlcy5yZWR1Y2UoKGNvdW50LCBzbGF2ZSkgPT4gY291bnQgKyBNYXRoLmZsb29yKG5zLmdldFNlcnZlck1heFJhbShzbGF2ZSkgLyBIR1dfUkFNKSwgMCk7XHJcblxyXG4gIGlmKHNsYXZlcy5pbmNsdWRlcygnaG9tZScpKSB7XHJcbiAgICB0b3RhbFRocmVhZHMgLT0gTWF0aC5jZWlsKGhvbWVSZXNlcnZlIC8gSEdXX1JBTSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdG90YWxUaHJlYWRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xhdmVUaHJlYWRzKG5zOiBOUywgc2xhdmU6IHN0cmluZywgaG9tZVJlc2VydmUgPSBIT01FX1JFU0VSVkUpIHtcclxuICBpZiAoaG9tZVJlc2VydmUgPiBucy5nZXRTZXJ2ZXJNYXhSYW0oJ2hvbWUnKSkgaG9tZVJlc2VydmUgPSBucy5nZXRTZXJ2ZXJNYXhSYW0oJ2hvbWUnKTtcclxuICBsZXQgc2xhdmVUaHJlYWRzID0gTWF0aC5mbG9vcihucy5nZXRTZXJ2ZXJNYXhSYW0oc2xhdmUpIC8gSEdXX1JBTSk7XHJcbiAgaWYgKHNsYXZlID09PSAnaG9tZScpIHtcclxuICAgIHNsYXZlVGhyZWFkcyAtPSBNYXRoLmNlaWwoaG9tZVJlc2VydmUgLyBIR1dfUkFNKVxyXG4gICAgc2xhdmVUaHJlYWRzID0gTWF0aC5tYXgoMCwgc2xhdmVUaHJlYWRzKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzbGF2ZVRocmVhZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb0hhY2tXZWFrZW5Hcm93V2Vha2VuKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gIGNvbnN0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgY29uc3Qgd2Vha1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBncm93VGltZSA9IE1hdGguY2VpbChucy5nZXRHcm93VGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBoYWNrVGltZSA9IE1hdGguY2VpbChucy5nZXRIYWNrVGltZSh0YXJnZXQpKTtcclxuXHJcbiAgY29uc3QgY3VycmVudCA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XHJcbiAgbGV0IGhhY2tUaHJlYWRzID0gMTtcclxuICBsZXQgbWF4R2FpbiA9IDA7XHJcbiAgbGV0IGZpbmFsSGFja1RocmVhZHMgPSAwO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBjb25zdCBoYWNrUGVyY2VudCA9IG5zLmhhY2tBbmFseXplKHRhcmdldCkgKiBoYWNrVGhyZWFkcztcclxuICAgIGlmIChoYWNrUGVyY2VudCA+IC45KSBicmVhaztcclxuXHJcbiAgICBjb25zdCBmdXR1cmUgPSBjdXJyZW50IC0gKGN1cnJlbnQgKiBoYWNrUGVyY2VudCk7XHJcbiAgICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XHJcbiAgICBjb25zdCBncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgZ3Jvd011bHQpKTtcclxuICAgIGNvbnN0IGdhaW4gPSBjdXJyZW50IC0gZnV0dXJlO1xyXG5cclxuICAgIGNvbnN0IGhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoaGFja1RocmVhZHMsIHRhcmdldCkgLyBXRUFLX1NFQyk7XHJcbiAgICBjb25zdCBnd1QgPSBNYXRoLmNlaWwoZ3Jvd1RocmVhZHMgLyAoV0VBS19TRUMgLyBHUk9XX1NFQykpO1xyXG4gICAgY29uc3QgdG90YWxIV0dXVGhyZWFkcyA9IGhhY2tUaHJlYWRzK2hhY2tXZWFrZW5UaHJlYWRzK2dyb3dUaHJlYWRzK2d3VDtcclxuICAgIGlmICh0b3RhbEhXR1dUaHJlYWRzID4gdG90YWxUaHJlYWRzKSBicmVhaztcclxuXHJcbiAgICBpZiAoZ2FpbiA+IG1heEdhaW4pIHtcclxuICAgICAgbWF4R2FpbiA9IGdhaW47XHJcbiAgICAgIGZpbmFsSGFja1RocmVhZHMgPSBoYWNrVGhyZWFkcztcclxuICAgIH1cclxuICAgIFxyXG4gICAgaGFja1RocmVhZHMrKztcclxuICB9XHJcblxyXG4gIGhhY2tUaHJlYWRzID0gZmluYWxIYWNrVGhyZWFkcztcclxuICBjb25zdCBoYWNrUGVyY2VudCA9IG5zLmhhY2tBbmFseXplKHRhcmdldCkgKiBoYWNrVGhyZWFkcztcclxuICBjb25zdCBmdXR1cmUgPSBjdXJyZW50IC0gKGN1cnJlbnQgKiBoYWNrUGVyY2VudCk7XHJcbiAgY29uc3QgZ3Jvd011bHQgPSBjdXJyZW50IC8gZnV0dXJlO1xyXG4gIGxldCBncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgZ3Jvd011bHQpKTtcclxuICBjb25zdCBnYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuXHJcbiAgbGV0IGhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoaGFja1RocmVhZHMsIHRhcmdldCkgLyBXRUFLX1NFQyk7XHJcbiAgbGV0IGdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKGdyb3dUaHJlYWRzIC8gKFdFQUtfU0VDIC8gR1JPV19TRUMpKTtcclxuICBjb25zdCB0b3RhbEhXR1dUaHJlYWRzID0gaGFja1RocmVhZHMraGFja1dlYWtlblRocmVhZHMrZ3Jvd1RocmVhZHMrZ3Jvd1dlYWtlblRocmVhZHM7XHJcblxyXG4gIGNvbnN0IGN1clN0ciA9IG5zLmZvcm1hdE51bWJlcihjdXJyZW50LCAzLCAxMDAwLCB0cnVlKTtcclxuICBjb25zdCBmdXRTdHIgPSBucy5mb3JtYXROdW1iZXIoZnV0dXJlLCAzLCAxMDAwLCB0cnVlKTtcclxuICBjb25zdCByZXNTdHIgPSBucy5mb3JtYXROdW1iZXIoZnV0dXJlKmdyb3dNdWx0LCAzLCAxMDAwLCB0cnVlKTtcclxuICBjb25zdCBnYWluU3RyID0gbnMuZm9ybWF0TnVtYmVyKGdhaW4sIDMsIDEwMDAsIHRydWUpO1xyXG5cclxuICAvLyBoYWNrIGZpbmlzaCBmaXJzdCwgdGhlbiBodywgdGhlbiBncm93LCB0aGVuIGd3XHJcbiAgY29uc3QgaGFja01TQnVmID0gd2Vha1RpbWUgLSBoYWNrVGltZSAtIDIwMDtcclxuICBjb25zdCBoYWNrV2Vha01TQnVmID0gMDtcclxuICBjb25zdCBncm93TVNCdWYgPSAod2Vha1RpbWUgLSBncm93VGltZSkgKyAyMDA7XHJcbiAgY29uc3QgZ3Jvd1dlYWtNU0J1ZiA9IDQwMDtcclxuXHJcbiAgbnMudHByaW50ZihgY3VycmVudDoke2N1clN0cn18ZnV0dXJlOiR7ZnV0U3RyfXxncm93TXVsdDoke2dyb3dNdWx0fXxyZXN1bHQ6JHtyZXNTdHJ9fGdhaW46JHtnYWluU3RyfXx0b3Q6JHt0b3RhbEhXR1dUaHJlYWRzfXwke2Zvcm1hdFRpbWUod2Vha1RpbWUrZ3Jvd1dlYWtNU0J1Zil9YCk7XHJcbiAgXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XHJcblxyXG4gICAgY29uc3Qgc2xhdmVIYWNrVGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgaGFja1RocmVhZHMpO1xyXG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlSGFja1RocmVhZHM7XHJcbiAgICBoYWNrVGhyZWFkcyAtPSBzbGF2ZUhhY2tUaHJlYWRzO1xyXG5cclxuICAgIGNvbnN0IHNsYXZlSGFja1dlYWtlblRocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIGhhY2tXZWFrZW5UaHJlYWRzKTtcclxuICAgIHNsYXZlVGhyZWFkcyAtPSBzbGF2ZUhhY2tXZWFrZW5UaHJlYWRzO1xyXG4gICAgaGFja1dlYWtlblRocmVhZHMgLT0gc2xhdmVIYWNrV2Vha2VuVGhyZWFkcztcclxuXHJcbiAgICBjb25zdCBzbGF2ZUdyb3dUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBncm93VGhyZWFkcyk7XHJcbiAgICBzbGF2ZVRocmVhZHMgLT0gc2xhdmVHcm93VGhyZWFkcztcclxuICAgIGdyb3dUaHJlYWRzIC09IHNsYXZlR3Jvd1RocmVhZHM7XHJcblxyXG4gICAgY29uc3Qgc2xhdmVXZWFrZW5Hcm93VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgZ3Jvd1dlYWtlblRocmVhZHMpO1xyXG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlV2Vha2VuR3Jvd1RocmVhZHM7XHJcbiAgICBncm93V2Vha2VuVGhyZWFkcyAtPSBzbGF2ZVdlYWtlbkdyb3dUaHJlYWRzO1xyXG5cclxuICAgIGlmIChzbGF2ZUhhY2tUaHJlYWRzID4gMCkgbnMuZXhlYygnaGFjay5qcycsIHMsIHNsYXZlSGFja1RocmVhZHMsIHRhcmdldCwgaGFja01TQnVmKTtcclxuICAgIGlmIChzbGF2ZUhhY2tXZWFrZW5UaHJlYWRzID4gMCkgbnMuZXhlYygnd2Vha2VuLmpzJywgcywgc2xhdmVIYWNrV2Vha2VuVGhyZWFkcywgdGFyZ2V0LCBoYWNrV2Vha01TQnVmKTtcclxuICAgIGlmIChzbGF2ZUdyb3dUaHJlYWRzID4gMCkgbnMuZXhlYygnZ3Jvdy5qcycsIHMsIHNsYXZlR3Jvd1RocmVhZHMsIHRhcmdldCwgZ3Jvd01TQnVmKTtcclxuICAgIGlmIChzbGF2ZVdlYWtlbkdyb3dUaHJlYWRzID4gMCkgbnMuZXhlYygnd2Vha2VuLmpzJywgcywgc2xhdmVXZWFrZW5Hcm93VGhyZWFkcywgdGFyZ2V0LCBncm93V2Vha01TQnVmKTtcclxuICB9XHJcblxyXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9Hcm93V2Vha2VuKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gIGNvbnN0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgY29uc3Qgd2Vha1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBncm93VGltZSA9IE1hdGguY2VpbChucy5nZXRHcm93VGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBncm93TVNCdWYgPSB3ZWFrVGltZSAtIGdyb3dUaW1lO1xyXG5cclxuICAvLyBydW4gMSB3ZWFrZW4gdGhyZWFkIGZvciBldmVyeSAxMi41IGdyb3cgdGhyZWFkcztcclxuICBsZXQgd2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCh0b3RhbFRocmVhZHMgLyAoV0VBS19TRUMgLyBHUk9XX1NFQykpO1xyXG4gIGxldCBncm93VGhyZWFkcyA9IHRvdGFsVGhyZWFkcyAtIHdlYWtlblRocmVhZHM7XHJcblxyXG4gIGNvbnN0IGF2YWlsYWJsZU1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcclxuICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcbiAgY29uc3QgZ3Jvd1Jlc3VsdCA9IGludkdyb3d0aEFuYWx5emUobnMsIHRhcmdldCwgZ3Jvd1RocmVhZHMpICogYXZhaWxhYmxlTW9uZXk7XHJcblxyXG4gIG5zLnRwcmludGYoYEdyb3dpbmcgJHt0YXJnZXR9IHNlYzoke25zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KX18d3Q6JHt3ZWFrZW5UaHJlYWRzfXxndDoke2dyb3dUaHJlYWRzfSAke25zLmZvcm1hdE51bWJlcihhdmFpbGFibGVNb25leSwgMywgMTAwMCwgdHJ1ZSl9ID0+ICR7bnMuZm9ybWF0TnVtYmVyKGdyb3dSZXN1bHQsIDMsIDEwMDAsIHRydWUpfSAvICR7bnMuZm9ybWF0TnVtYmVyKG1heE1vbmV5LCAzLCAxMDAwLCB0cnVlKX0gJHtmb3JtYXRUaW1lKHdlYWtUaW1lKzIwMCl9YCk7XHJcblxyXG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcclxuICAgIGxldCBzbGF2ZVRocmVhZHMgPSBnZXRTbGF2ZVRocmVhZHMobnMsIHMpO1xyXG5cclxuICAgIGNvbnN0IHNsYXZlV2Vha2VuVGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgd2Vha2VuVGhyZWFkcyk7XHJcbiAgICBzbGF2ZVRocmVhZHMgLT0gc2xhdmVXZWFrZW5UaHJlYWRzO1xyXG4gICAgd2Vha2VuVGhyZWFkcyAtPSBzbGF2ZVdlYWtlblRocmVhZHM7XHJcbiAgICBjb25zdCBzbGF2ZUdyb3dUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBncm93VGhyZWFkcyk7XHJcbiAgICBzbGF2ZVRocmVhZHMgLT0gc2xhdmVHcm93VGhyZWFkcztcclxuICAgIGdyb3dUaHJlYWRzIC09IHNsYXZlR3Jvd1RocmVhZHM7XHJcblxyXG4gICAgaWYgKHNsYXZlV2Vha2VuVGhyZWFkcyA+IDApIG5zLmV4ZWMoJ3dlYWtlbi5qcycsIHMsIHNsYXZlV2Vha2VuVGhyZWFkcywgdGFyZ2V0LCAyMDApO1xyXG4gICAgaWYgKHNsYXZlR3Jvd1RocmVhZHMgPiAwKSBucy5leGVjKCdncm93LmpzJywgcywgc2xhdmVHcm93VGhyZWFkcywgdGFyZ2V0LCBncm93TVNCdWYpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHdlYWtlblRocmVhZHMgPiAwKSBucy50cHJpbnQoYFdBUk5JTkcgW2RvR3Jvd1dlYWtlbl06ICR7d2Vha2VuVGhyZWFkc30gV2Vha2VuIFRocmVhZHMgdW5hY2NvdW50ZWRgKTtcclxuICBpZiAoZ3Jvd1RocmVhZHMgPiAwKSBucy50cHJpbnQoYFdBUk5JTkcgW2RvR3Jvd1dlYWtlbl06ICR7Z3Jvd1RocmVhZHN9IEdyb3cgVGhyZWFkcyB1bmFjY291bnRlZGApO1xyXG5cclxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvV2Vha2VuKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gIGNvbnN0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuICBjb25zdCB3ZWFrZW5QZXJSb3VuZCA9IHRvdGFsVGhyZWFkcyAqIDAuMDU7XHJcblxyXG4gIGNvbnN0IHdlYWtUaW1lID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XHJcblxyXG4gIGNvbnN0IGN1cnJlbnRTZWMgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCk7XHJcbiAgY29uc3QgdGFyZ2V0U2VjID0gTWF0aC5tYXgoY3VycmVudFNlYyAtIHdlYWtlblBlclJvdW5kLCBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCkpO1xyXG4gIG5zLnRwcmludGYoYFdlYWtlbmluZyAke3RhcmdldH0gJHtjdXJyZW50U2VjLnRvRml4ZWQoMil9ID0+ICR7dGFyZ2V0U2VjfSAvICR7bnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpfSAke2Zvcm1hdFRpbWUod2Vha1RpbWUrMjAwKX1gKTtcclxuXHJcbiAgbGV0IHdlYWtlblRocmVhZHMgPSBNYXRoLm1pbihNYXRoLmNlaWwoKGN1cnJlbnRTZWMgLSB0YXJnZXRTZWMpIC8gV0VBS19TRUMpLCB0b3RhbFRocmVhZHMpO1xyXG5cclxuICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XHJcbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcclxuXHJcbiAgICBjb25zdCBzbGF2ZVdlYWtlblRocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIHdlYWtlblRocmVhZHMpO1xyXG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlV2Vha2VuVGhyZWFkcztcclxuICAgIHdlYWtlblRocmVhZHMgLT0gc2xhdmVXZWFrZW5UaHJlYWRzO1xyXG5cclxuICAgIGlmIChzbGF2ZVdlYWtlblRocmVhZHMgPiAwKSBucy5leGVjKCd3ZWFrZW4uanMnLCBzLCBzbGF2ZVdlYWtlblRocmVhZHMsIHRhcmdldCwgMjAwKTtcclxuICB9XHJcblxyXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvckhHV1NjcmlwdHMobnM6IE5TLCBzbGF2ZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgd2hpbGUgKHNsYXZlcy5zb21lKHMgPT4gbnMucHMocykuc29tZShzY3JpcHQgPT4gc2NyaXB0LmZpbGVuYW1lID09PSAnaGFjay5qcycgfHwgc2NyaXB0LmZpbGVuYW1lID09PSAnZ3Jvdy5qcycgfHwgc2NyaXB0LmZpbGVuYW1lID09PSAnd2Vha2VuLmpzJykpKVxyXG4gICAgYXdhaXQgbnMuc2xlZXAoMjApO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQUxMX0ZBQ1RJT05TID0gW1xyXG4gIFwiSWxsdW1pbmF0aVwiLFxyXG4gIFwiRGFlZGFsdXNcIixcclxuICBcIlRoZSBDb3ZlbmFudFwiLFxyXG4gIFwiRUNvcnBcIixcclxuICBcIk1lZ2FDb3JwXCIsXHJcbiAgXCJCYWNobWFuICYgQXNzb2NpYXRlc1wiLFxyXG4gIFwiQmxhZGUgSW5kdXN0cmllc1wiLFxyXG4gIFwiTldPXCIsXHJcbiAgXCJDbGFya2UgSW5jb3Jwb3JhdGVkXCIsXHJcbiAgXCJPbW5pVGVrIEluY29ycG9yYXRlZFwiLFxyXG4gIFwiRm91ciBTaWdtYVwiLFxyXG4gIFwiS3VhaUdvbmcgSW50ZXJuYXRpb25hbFwiLFxyXG4gIFwiRnVsY3J1bSBTZWNyZXQgVGVjaG5vbG9naWVzXCIsXHJcbiAgXCJCaXRSdW5uZXJzXCIsXHJcbiAgXCJUaGUgQmxhY2sgSGFuZFwiLFxyXG4gIFwiTml0ZVNlY1wiLFxyXG4gIFwiQWV2dW1cIixcclxuICBcIkNob25ncWluZ1wiLFxyXG4gIFwiSXNoaW1hXCIsXHJcbiAgXCJOZXcgVG9reW9cIixcclxuICBcIlNlY3Rvci0xMlwiLFxyXG4gIFwiVm9saGF2ZW5cIixcclxuICBcIlNwZWFrZXJzIGZvciB0aGUgRGVhZFwiLFxyXG4gIFwiVGhlIERhcmsgQXJteVwiLFxyXG4gIFwiVGhlIFN5bmRpY2F0ZVwiLFxyXG4gIFwiU2lsaG91ZXR0ZVwiLFxyXG4gIFwiVGV0cmFkc1wiLFxyXG4gIFwiU2x1bSBTbmFrZXNcIixcclxuICBcIk5ldGJ1cm5lcnNcIixcclxuICBcIlRpYW4gRGkgSHVpXCIsXHJcbiAgXCJDeWJlclNlY1wiLFxyXG4gIFwiQmxhZGVidXJuZXJzXCIsXHJcbiAgXCJDaHVyY2ggb2YgdGhlIE1hY2hpbmUgR29kXCIsXHJcbiAgXCJTaGFkb3dzIG9mIEFuYXJjaHlcIixcclxuXTsiXX0=\",\"filename\":\"util.js\",\"server\":\"home\"}}],[\"augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint, DefaultStyle, PrintTable } from \\\"./tables\\\";\\r\\nimport { ALL_FACTIONS } from \\\"./util\\\";\\r\\nfunction setCharAt(str, index, chr) {\\r\\n    if (index > str.length - 1)\\r\\n        return str;\\r\\n    return str.substring(0, index) + chr + str.substring(index + 1);\\r\\n}\\r\\nclass Aug {\\r\\n    name;\\r\\n    faction;\\r\\n    installed;\\r\\n    purchased;\\r\\n    price;\\r\\n    requiredRep;\\r\\n    purchasable;\\r\\n    affordable;\\r\\n    preqreqs;\\r\\n    multipliers;\\r\\n    affected;\\r\\n    categories;\\r\\n    isHack;\\r\\n    isUseful;\\r\\n    constructor(ns, name, faction) {\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.installed = ns.singularity.getOwnedAugmentations(false).indexOf(name) !== -1;\\r\\n        this.purchased = ns.singularity.getOwnedAugmentations(true).indexOf(name) !== -1;\\r\\n        this.price = ns.singularity.getAugmentationBasePrice(name);\\r\\n        this.requiredRep = ns.singularity.getAugmentationRepReq(name);\\r\\n        try {\\r\\n            this.purchasable = this.requiredRep <= ns.singularity.getFactionRep(ns.getPlayer().factions.filter(f => f === faction)[0]);\\r\\n        }\\r\\n        catch (e) {\\r\\n            this.purchasable = false;\\r\\n        }\\r\\n        this.affordable = this.price <= ns.getServerMoneyAvailable('home');\\r\\n        this.preqreqs = ns.singularity.getAugmentationPrereq(name);\\r\\n        this.multipliers = ns.singularity.getAugmentationStats(name);\\r\\n        this.affected = [];\\r\\n        this.updateAffected();\\r\\n        this.categories = [];\\r\\n        this.updateCategories();\\r\\n        // remove already purchased prereqs and sort them in descending price order\\r\\n        this.preqreqs.filter(a => !ns.singularity.getOwnedAugmentations(true).includes(a)).sort((a, b) => ns.singularity.getAugmentationBasePrice(b) - ns.singularity.getAugmentationBasePrice(a));\\r\\n        this.isHack = this.categories.includes('hack');\\r\\n        this.isUseful = this.categories.includes('hack') || this.categories.includes('charisma') || this.categories.includes('company') || this.categories.includes('faction') || this.categories.includes('program') || this.categories.includes('special');\\r\\n    }\\r\\n    updateCategories() {\\r\\n        this.categories = [];\\r\\n        if (this.faction === `Church of the Machine God` && this.name !== 'NeuroFlux Governor') {\\r\\n            this.categories.push('stanek');\\r\\n            return;\\r\\n        }\\r\\n        if (this.affected.some((a) => [`hacking`, `hacking_exp`, `hacking_chance`, `hacking_speed`, `hacking_money`, `hacking_grow`].includes(a)))\\r\\n            this.categories.push('hack');\\r\\n        if (this.affected.some((a) => [`strength`, `strength_exp`, `defense`, `defense_exp`, `dexterity`, `dexterity_exp`, `agility`, `agility_exp`].includes(a)))\\r\\n            this.categories.push('combat');\\r\\n        if (this.affected.some((a) => [`charisma`, `charisma_exp`].includes(a)))\\r\\n            this.categories.push('charisma');\\r\\n        if (this.affected.some((a) => [`company_rep`].includes(a)))\\r\\n            this.categories.push('company');\\r\\n        if (this.affected.some((a) => [`faction_rep`].includes(a)))\\r\\n            this.categories.push('faction');\\r\\n        if (this.affected.some((a) => [`crime_money`, `crime_success`].includes(a)))\\r\\n            this.categories.push('crime');\\r\\n        if (this.affected.some((a) => [`hacknet_node_money`, `hacknet_node_purchase_cost`, `hacknet_node_ram_cost`, `hacknet_node_core_cost`, `hacknet_node_level_cost`].includes(a)))\\r\\n            this.categories.push('hacknet');\\r\\n        if (this.affected.some((a) => [`bladeburner_max_stamina`, `bladeburner_stamina_gain`, `bladeburner_analysis`, `bladeburner_success_chance`].includes(a))\\r\\n            || this.name === `The Blade's Simulacrum`)\\r\\n            this.categories.push('bladeburner');\\r\\n        if ([`CashRoot Starter Kit`, `BitRunners Neurolink`, `PCMatrix`].includes(this.name))\\r\\n            this.categories.push('program');\\r\\n        if (this.faction === `Shadows of Anarchy` && this.name !== 'NeuroFlux Governor')\\r\\n            this.categories.push('infiltration');\\r\\n        if (this.categories.length === 0)\\r\\n            this.categories.push('special');\\r\\n    }\\r\\n    shortCategories() {\\r\\n        let ret = '            ';\\r\\n        if (this.categories.includes('hack'))\\r\\n            ret = setCharAt(ret, 0, 'H');\\r\\n        if (this.categories.includes('combat'))\\r\\n            ret = setCharAt(ret, 1, 'C');\\r\\n        if (this.categories.includes('charisma'))\\r\\n            ret = setCharAt(ret, 2, 'c');\\r\\n        if (this.categories.includes('company'))\\r\\n            ret = setCharAt(ret, 3, 'W');\\r\\n        if (this.categories.includes('faction'))\\r\\n            ret = setCharAt(ret, 4, 'F');\\r\\n        if (this.categories.includes('crime'))\\r\\n            ret = setCharAt(ret, 5, 'X');\\r\\n        if (this.categories.includes('hacknet'))\\r\\n            ret = setCharAt(ret, 6, 'N');\\r\\n        if (this.categories.includes('bladeburner'))\\r\\n            ret = setCharAt(ret, 7, 'B');\\r\\n        if (this.categories.includes('program'))\\r\\n            ret = setCharAt(ret, 8, 'P');\\r\\n        if (this.categories.includes('infiltration'))\\r\\n            ret = setCharAt(ret, 9, 'I');\\r\\n        if (this.categories.includes('stanek'))\\r\\n            ret = setCharAt(ret, 10, 's');\\r\\n        if (this.categories.includes('special'))\\r\\n            ret = setCharAt(ret, 11, 'S');\\r\\n        return ret;\\r\\n    }\\r\\n    updateAffected() {\\r\\n        this.affected = [];\\r\\n        if (this.multipliers.strength !== 1)\\r\\n            this.affected.push(`strength`);\\r\\n        if (this.multipliers.strength_exp !== 1)\\r\\n            this.affected.push(`strength_exp`);\\r\\n        if (this.multipliers.defense !== 1)\\r\\n            this.affected.push(`defense`);\\r\\n        if (this.multipliers.defense_exp !== 1)\\r\\n            this.affected.push(`defense_exp`);\\r\\n        if (this.multipliers.dexterity !== 1)\\r\\n            this.affected.push(`dexterity`);\\r\\n        if (this.multipliers.dexterity_exp !== 1)\\r\\n            this.affected.push(`dexterity_exp`);\\r\\n        if (this.multipliers.agility !== 1)\\r\\n            this.affected.push(`agility`);\\r\\n        if (this.multipliers.agility_exp !== 1)\\r\\n            this.affected.push(`agility_exp`);\\r\\n        if (this.multipliers.charisma !== 1)\\r\\n            this.affected.push(`charisma`);\\r\\n        if (this.multipliers.charisma_exp !== 1)\\r\\n            this.affected.push(`charisma_exp`);\\r\\n        if (this.multipliers.hacking !== 1)\\r\\n            this.affected.push(`hacking`);\\r\\n        if (this.multipliers.hacking_exp !== 1)\\r\\n            this.affected.push(`hacking_exp`);\\r\\n        if (this.multipliers.hacking_chance !== 1)\\r\\n            this.affected.push(`hacking_chance`);\\r\\n        if (this.multipliers.hacking_speed !== 1)\\r\\n            this.affected.push(`hacking_speed`);\\r\\n        if (this.multipliers.hacking_money !== 1)\\r\\n            this.affected.push(`hacking_money`);\\r\\n        if (this.multipliers.hacking_grow !== 1)\\r\\n            this.affected.push(`hacking_grow`);\\r\\n        if (this.multipliers.company_rep !== 1)\\r\\n            this.affected.push(`company_rep`);\\r\\n        if (this.multipliers.work_money !== 1)\\r\\n            this.affected.push(`work_money`);\\r\\n        if (this.multipliers.faction_rep !== 1)\\r\\n            this.affected.push(`faction_rep`);\\r\\n        if (this.multipliers.crime_money !== 1)\\r\\n            this.affected.push(`crime_money`);\\r\\n        if (this.multipliers.crime_success !== 1)\\r\\n            this.affected.push(`crime_success`);\\r\\n        if (this.multipliers.hacknet_node_money !== 1)\\r\\n            this.affected.push(`hacknet_node_money`);\\r\\n        if (this.multipliers.hacknet_node_purchase_cost !== 1)\\r\\n            this.affected.push(`hacknet_node_purchase_cost`);\\r\\n        if (this.multipliers.hacknet_node_ram_cost !== 1)\\r\\n            this.affected.push(`hacknet_node_ram_cost`);\\r\\n        if (this.multipliers.hacknet_node_core_cost !== 1)\\r\\n            this.affected.push(`hacknet_node_core_cost`);\\r\\n        if (this.multipliers.hacknet_node_level_cost !== 1)\\r\\n            this.affected.push(`hacknet_node_level_cost`);\\r\\n        if (this.multipliers.bladeburner_max_stamina !== 1)\\r\\n            this.affected.push(`bladeburner_max_stamina`);\\r\\n        if (this.multipliers.bladeburner_stamina_gain !== 1)\\r\\n            this.affected.push(`bladeburner_stamina_gain`);\\r\\n        if (this.multipliers.bladeburner_analysis !== 1)\\r\\n            this.affected.push(`bladeburner_analysis`);\\r\\n        if (this.multipliers.bladeburner_success_chance !== 1)\\r\\n            this.affected.push(`bladeburner_success_chance`);\\r\\n    }\\r\\n    printMultipliers(ns) {\\r\\n        ns.tprintf(`${this.name}: ${this.categories.join(', ')}`);\\r\\n    }\\r\\n    printMultipliers2(ns) {\\r\\n        const mults = [];\\r\\n        if (this.multipliers.hacking !== 1)\\r\\n            mults.push(`hacking: ${this.multipliers.hacking}`);\\r\\n        if (this.multipliers.strength !== 1)\\r\\n            mults.push(`strength: ${this.multipliers.strength}`);\\r\\n        if (this.multipliers.defense !== 1)\\r\\n            mults.push(`defense: ${this.multipliers.defense}`);\\r\\n        if (this.multipliers.dexterity !== 1)\\r\\n            mults.push(`dexterity: ${this.multipliers.dexterity}`);\\r\\n        if (this.multipliers.agility !== 1)\\r\\n            mults.push(`agility: ${this.multipliers.agility}`);\\r\\n        if (this.multipliers.charisma !== 1)\\r\\n            mults.push(`charisma: ${this.multipliers.charisma}`);\\r\\n        if (this.multipliers.hacking_exp !== 1)\\r\\n            mults.push(`hacking_exp: ${this.multipliers.hacking_exp}`);\\r\\n        if (this.multipliers.strength_exp !== 1)\\r\\n            mults.push(`strength_exp: ${this.multipliers.strength_exp}`);\\r\\n        if (this.multipliers.defense_exp !== 1)\\r\\n            mults.push(`defense_exp: ${this.multipliers.defense_exp}`);\\r\\n        if (this.multipliers.dexterity_exp !== 1)\\r\\n            mults.push(`dexterity_exp: ${this.multipliers.dexterity_exp}`);\\r\\n        if (this.multipliers.agility_exp !== 1)\\r\\n            mults.push(`agility_exp: ${this.multipliers.agility_exp}`);\\r\\n        if (this.multipliers.charisma_exp !== 1)\\r\\n            mults.push(`charisma_exp: ${this.multipliers.charisma_exp}`);\\r\\n        if (this.multipliers.hacking_chance !== 1)\\r\\n            mults.push(`hacking_chance: ${this.multipliers.hacking_chance}`);\\r\\n        if (this.multipliers.hacking_speed !== 1)\\r\\n            mults.push(`hacking_speed: ${this.multipliers.hacking_speed}`);\\r\\n        if (this.multipliers.hacking_money !== 1)\\r\\n            mults.push(`hacking_money: ${this.multipliers.hacking_money}`);\\r\\n        if (this.multipliers.hacking_grow !== 1)\\r\\n            mults.push(`hacking_grow: ${this.multipliers.hacking_grow}`);\\r\\n        if (this.multipliers.company_rep !== 1)\\r\\n            mults.push(`company_rep: ${this.multipliers.company_rep}`);\\r\\n        if (this.multipliers.faction_rep !== 1)\\r\\n            mults.push(`faction_rep: ${this.multipliers.faction_rep}`);\\r\\n        if (this.multipliers.crime_money !== 1)\\r\\n            mults.push(`crime_money: ${this.multipliers.crime_money}`);\\r\\n        if (this.multipliers.crime_success !== 1)\\r\\n            mults.push(`crime_success: ${this.multipliers.crime_success}`);\\r\\n        if (this.multipliers.work_money !== 1)\\r\\n            mults.push(`work_money: ${this.multipliers.work_money}`);\\r\\n        if (this.multipliers.hacknet_node_money !== 1)\\r\\n            mults.push(`hacknet_node_money: ${this.multipliers.hacknet_node_money}`);\\r\\n        if (this.multipliers.hacknet_node_purchase_cost !== 1)\\r\\n            mults.push(`hacknet_node_purchase_cost: ${this.multipliers.hacknet_node_purchase_cost}`);\\r\\n        if (this.multipliers.hacknet_node_ram_cost !== 1)\\r\\n            mults.push(`hacknet_node_ram_cost: ${this.multipliers.hacknet_node_ram_cost}`);\\r\\n        if (this.multipliers.hacknet_node_core_cost !== 1)\\r\\n            mults.push(`hacknet_node_core_cost: ${this.multipliers.hacknet_node_core_cost}`);\\r\\n        if (this.multipliers.hacknet_node_level_cost !== 1)\\r\\n            mults.push(`hacknet_node_level_cost: ${this.multipliers.hacknet_node_level_cost}`);\\r\\n        if (this.multipliers.bladeburner_max_stamina !== 1)\\r\\n            mults.push(`bladeburner_max_stamina: ${this.multipliers.bladeburner_max_stamina}`);\\r\\n        if (this.multipliers.bladeburner_stamina_gain !== 1)\\r\\n            mults.push(`bladeburner_stamina_gain: ${this.multipliers.bladeburner_stamina_gain}`);\\r\\n        if (this.multipliers.bladeburner_analysis !== 1)\\r\\n            mults.push(`bladeburner_analysis: ${this.multipliers.bladeburner_analysis}`);\\r\\n        if (this.multipliers.bladeburner_success_chance !== 1)\\r\\n            mults.push(`bladeburner_success_chance: ${this.multipliers.bladeburner_success_chance}`);\\r\\n        ns.tprintf(`${this.name}: ${mults.join(', ')}`);\\r\\n    }\\r\\n    canBuy() {\\r\\n        if (this.purchased)\\r\\n            return false;\\r\\n        return (this.purchasable && this.affordable);\\r\\n    }\\r\\n    augColor() {\\r\\n        if (this.purchased)\\r\\n            return 'green';\\r\\n        if (this.purchasable && this.affordable)\\r\\n            return 'Gold1';\\r\\n        return 'white';\\r\\n    }\\r\\n    tableData(ns) {\\r\\n        return [\\r\\n            { color: this.augColor(), text: ` ${this.name}` },\\r\\n            { color: this.augColor(), text: ` ${this.faction}` },\\r\\n            { color: this.augColor(), text: `${this.installed ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.purchased ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.price, 1, 1000, true).padStart(8) },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.requiredRep, 3, 1000, true).padStart(10) },\\r\\n            { color: this.augColor(), text: `${this.purchasable ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.affordable ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.canBuy() ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.preqreqs.length}`.padStart(4) },\\r\\n            { color: this.augColor(), text: ` ${this.shortCategories()}` }\\r\\n        ];\\r\\n    }\\r\\n    static tableCols() {\\r\\n        return [\\r\\n            { header: ' Augmentations', width: 56 },\\r\\n            { header: ' Faction', width: 29 },\\r\\n            { header: ' INS', width: 5 },\\r\\n            { header: ' HAS', width: 5 },\\r\\n            { header: '   Price', width: 9 },\\r\\n            { header: '       Rep', width: 11 },\\r\\n            { header: ' PUR', width: 5 },\\r\\n            { header: ' AFF', width: 5 },\\r\\n            { header: ' BUY', width: 5 },\\r\\n            { header: ' PRE', width: 5 },\\r\\n            { header: ' CATEGORIES', width: 14 },\\r\\n        ];\\r\\n    }\\r\\n    shortTableData(ns) {\\r\\n        return [\\r\\n            { color: this.augColor(), text: ` ${this.name}` },\\r\\n            { color: this.augColor(), text: ` ${this.faction}` },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.price, 1, 1000, true).padStart(8) },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.requiredRep, 3, 1000, true).padStart(10) },\\r\\n            { color: this.augColor(), text: `${this.preqreqs.length}`.padStart(4) }\\r\\n        ];\\r\\n    }\\r\\n    static shortTableCols() {\\r\\n        return [\\r\\n            { header: ' Augmentations', width: 56 },\\r\\n            { header: ' Faction', width: 29 },\\r\\n            { header: '   Price', width: 9 },\\r\\n            { header: '       Rep', width: 11 },\\r\\n            { header: ' PRE', width: 5 },\\r\\n        ];\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    // const lvl11SrcFileCheck = ns.singularity.getOwnedSourceFiles().filter(s => s.n === 11);\\r\\n    // const lvl11SrcFileLevel = lvl11SrcFileCheck.length > 0 ? lvl11SrcFileCheck[0].lvl : 0;\\r\\n    // const augPriceMultiplier = 1.9 * [1, 0.96, 0.94, 0.93][lvl11SrcFileLevel];\\r\\n    const augPriceMultiplier = 1.9;\\r\\n    const nfgPriceMultiplier = 1.14;\\r\\n    let augs = [];\\r\\n    for (const faction of ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))) {\\r\\n        if (ns.singularity.getFactionRep(faction) === 0)\\r\\n            continue;\\r\\n        const factionAugs = ns.singularity.getAugmentationsFromFaction(faction);\\r\\n        for (const aug of factionAugs) {\\r\\n            if (!augs.some(a => a.name === aug))\\r\\n                augs.push(new Aug(ns, aug, faction));\\r\\n        }\\r\\n    }\\r\\n    //augs = augs.filter(a => a.canBuy() || a.purchased).sort((a, b) => b.price - a.price);\\r\\n    //augs = augs.filter(a => a.isUseful);\\r\\n    augs = augs.sort((a, b) => b.price - a.price);\\r\\n    //augs = augs.filter(a => a.isHack);\\r\\n    augs = augs.filter(a => a.name !== \\\"NeuroFlux Governor\\\");\\r\\n    // shift prereqs higher in the list if they're in the list. If they're not in the list, remove the aug with prereqs\\r\\n    for (let i = 0; i < augs.length; ++i) {\\r\\n        const aug = augs[i];\\r\\n        if (aug.preqreqs.length > 0) {\\r\\n            let foundPrereq = false;\\r\\n            let movedPrereq = false;\\r\\n            for (let j = 0; j < aug.preqreqs.length; ++j) {\\r\\n                const prereq = aug.preqreqs[j];\\r\\n                const prereqIndex = augs.findIndex(a => a.name === prereq);\\r\\n                if (prereqIndex === -1)\\r\\n                    break;\\r\\n                foundPrereq = true;\\r\\n                if (prereqIndex < i)\\r\\n                    continue;\\r\\n                augs.splice(i, 0, augs.splice(prereqIndex, 1)[0]);\\r\\n                movedPrereq = true;\\r\\n                break;\\r\\n            }\\r\\n            if (!foundPrereq) {\\r\\n                augs.splice(i, 1);\\r\\n                --i;\\r\\n                continue;\\r\\n            }\\r\\n            if (movedPrereq) {\\r\\n                --i;\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    //augs = augs.filter(a => a.canBuy());\\r\\n    //augs.forEach(a => a.printMultipliers(ns));\\r\\n    //PrintTable(ns, augs.map(a => a.shortTableData(ns)), Aug.shortTableCols(), DefaultStyle(), ColorPrint);\\r\\n    PrintTable(ns, augs.map(a => a.tableData(ns)), Aug.tableCols(), DefaultStyle(), ColorPrint);\\r\\n    // buy in order from most to least expensive, buying prereqs first\\r\\n    if (ns.args.length > 0) {\\r\\n        //let cash = ns.getServerMoneyAvailable('home');\\r\\n        while (augs.length > 0) {\\r\\n            const aug = augs.shift();\\r\\n            if (aug)\\r\\n                ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\r\\n        }\\r\\n        while (ns.singularity.purchaseAugmentation(ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))[0], \\\"NeuroFlux Governor\\\"))\\r\\n            ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hdWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXRDLFNBQVMsU0FBUyxDQUFDLEdBQVcsRUFBRSxLQUFhLEVBQUUsR0FBVztJQUN4RCxJQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFDLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUNwQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBd0JELE1BQU0sR0FBRztJQUNQLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixTQUFTLENBQVU7SUFDbkIsU0FBUyxDQUFVO0lBQ25CLEtBQUssQ0FBUztJQUNkLFdBQVcsQ0FBUztJQUNwQixXQUFXLENBQVU7SUFDckIsVUFBVSxDQUFVO0lBQ3BCLFFBQVEsQ0FBVztJQUNuQixXQUFXLENBQWM7SUFDekIsUUFBUSxDQUFXO0lBQ25CLFVBQVUsQ0FBVztJQUNyQixNQUFNLENBQVU7SUFDaEIsUUFBUSxDQUFVO0lBRWxCLFlBQVksRUFBTSxFQUFFLElBQVksRUFBRSxPQUFlO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEYsSUFB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QUFDLENBQUMsU0FBUyxFQUFDLGFBQWEsRUFBQyxnQkFBZ0IsRUFBQyxlQUFlLEVBQUMsZUFBZSxFQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBQyxjQUFjLEVBQUMsU0FBUyxFQUFDLGFBQWEsRUFBQyxXQUFXLEVBQUMsZUFBZSxFQUFDLFNBQVMsRUFBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEosSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRW5DLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxFQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixFQUFDLDRCQUE0QixFQUFDLHVCQUF1QixFQUFDLHdCQUF3QixFQUFDLHlCQUF5QixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZLLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMseUJBQXlCLEVBQUMsMEJBQTBCLEVBQUMsc0JBQXNCLEVBQUMsNEJBQTRCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7ZUFDOUksSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0I7WUFDM0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFdEMsSUFBSSxDQUFDLHNCQUFzQixFQUFDLHNCQUFzQixFQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBb0IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLG9CQUFvQjtZQUM3RSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV2QyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLEdBQUcsR0FBRyxjQUFjLENBQUM7UUFDekIsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFBVSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFBUSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFBUyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7WUFBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFBRSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFBUSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFM0UsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRW5CLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTlFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEYsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFNUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDMUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFeEUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFMUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDMUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFOUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixLQUFLLENBQUM7WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFD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QUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBLENBQUMsQ0FBQSxLQUFLLENBQUEsQ0FBQyxDQUFBLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM1RSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4RixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMvRixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQSxDQUFDLENBQUEsS0FBSyxDQUFBLENBQUMsQ0FBQSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUEsQ0FBQyxDQUFBLEtBQUssQ0FBQSxDQUFDLENBQUEsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUEsQ0FBQyxDQUFBLEtBQUssQ0FBQSxDQUFDLENBQUEsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzNFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN2RSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLEVBQUU7U0FDL0QsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsU0FBUztRQUNyQixPQUFPO1lBQ0wsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUN2QyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNqQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUNoQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNuQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM1QixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtTQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxFQUFNO1FBQ25CLE9BQU87WUFDTCxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2pELEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEQsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDeEYsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDL0YsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ3hFLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLGNBQWM7UUFDMUIsT0FBTztZQUNMLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDdkMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDakMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7WUFDaEMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDbkMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7U0FDN0IsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUdELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzlCLDBGQUEwRjtJQUMxRix5RkFBeUY7SUFDekYsNkVBQTZFO0lBRTdFLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0lBQy9CLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0lBQ2hDLElBQUksSUFBSSxHQUFXLEVBQUUsQ0FBQztJQUN0QixLQUFLLE1BQU0sT0FBTyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BILElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUFFLFNBQVM7UUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RSxLQUFLLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRTtZQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUN4QztLQUNGO0lBRUQsdUZBQXVGO0lBQ3ZGLHNDQUFzQztJQUN0QyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTlDLG9DQUFvQztJQUNwQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssb0JBQW9CLENBQUMsQ0FBQztJQUV6RCxtSEFBbUg7SUFDbkgsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztZQUN4QixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUM1QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFFM0QsSUFBSSxXQUFXLEtBQUssQ0FBQyxDQUFDO29CQUFFLE1BQU07Z0JBQzlCLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBRW5CLElBQUksV0FBVyxHQUFHLENBQUM7b0JBQUUsU0FBUztnQkFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQ25CLE1BQU07YUFDUDtZQUVELElBQUcsQ0FBQyxXQUFXLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEVBQUUsQ0FBQyxDQUFDO2dCQUNKLFNBQVM7YUFDVjtZQUVELElBQUcsV0FBVyxFQUFFO2dCQUNkLEVBQUUsQ0FBQyxDQUFDO2dCQUNKLFNBQVM7YUFDVjtTQUNGO0tBQ0Y7SUFFRCxzQ0FBc0M7SUFDdEMsNENBQTRDO0lBRTVDLHdHQUF3RztJQUN4RyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTVGLGtFQUFrRTtJQUNsRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN0QixnREFBZ0Q7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFekIsSUFBSSxHQUFHO2dCQUNMLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUQ7UUFFRCxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsb0JBQW9CLENBQUM7WUFBQyxDQUFDO0tBQ3RLO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE11bHRpcGxpZXJzLCBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgQ29sb3JQcmludCwgRGVmYXVsdFN0eWxlLCBQcmludFRhYmxlIH0gZnJvbSBcIi4vdGFibGVzXCI7XHJcbmltcG9ydCB7IEFMTF9GQUNUSU9OUyB9IGZyb20gXCIuL3V0aWxcIjtcclxuXHJcbmZ1bmN0aW9uIHNldENoYXJBdChzdHI6IHN0cmluZywgaW5kZXg6IG51bWJlciwgY2hyOiBzdHJpbmcpIHtcclxuICBpZihpbmRleCA+IHN0ci5sZW5ndGgtMSkgcmV0dXJuIHN0cjtcclxuICByZXR1cm4gc3RyLnN1YnN0cmluZygwLGluZGV4KSArIGNociArIHN0ci5zdWJzdHJpbmcoaW5kZXgrMSk7XHJcbn1cclxuXHJcbmludGVyZmFjZSBJQXVnIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZmFjdGlvbjogc3RyaW5nO1xyXG4gIGluc3RhbGxlZDogYm9vbGVhbjtcclxuICBwdXJjaGFzZWQ6IGJvb2xlYW47XHJcbiAgcHJpY2U6IG51bWJlcjtcclxuICByZXF1aXJlZFJlcDogbnVtYmVyO1xyXG4gIHB1cmNoYXNhYmxlOiBib29sZWFuO1xyXG4gIGFmZm9yZGFibGU6IGJvb2xlYW47XHJcbiAgcHJlcXJlcXM6IHN0cmluZ1tdO1xyXG4gIG11bHRpcGxpZXJzOiBNdWx0aXBsaWVycztcclxuICBhZmZlY3RlZDogc3RyaW5nW107XHJcbiAgY2F0ZWdvcmllczogc3RyaW5nW107XHJcbiAgaXNIYWNrOiBib29sZWFuO1xyXG4gIGlzVXNlZnVsOiBib29sZWFuO1xyXG5cclxuICB0YWJsZURhdGEobnM6IE5TKTogeyBjb2xvcjogc3RyaW5nOyB0ZXh0OiBzdHJpbmc7IH1bXTtcclxuICBzaG9ydFRhYmxlRGF0YShuczogTlMpOiB7IGNvbG9yOiBzdHJpbmc7IHRleHQ6IHN0cmluZzsgfVtdO1xyXG4gIGNhbkJ1eSgpOiBib29sZWFuO1xyXG4gIHByaW50TXVsdGlwbGllcnMobnM6IE5TKTogdm9pZDtcclxufVxyXG5cclxuY2xhc3MgQXVnIGltcGxlbWVudHMgSUF1Z3tcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZmFjdGlvbjogc3RyaW5nO1xyXG4gIGluc3RhbGxlZDogYm9vbGVhbjtcclxuICBwdXJjaGFzZWQ6IGJvb2xlYW47XHJcbiAgcHJpY2U6IG51bWJlcjtcclxuICByZXF1aXJlZFJlcDogbnVtYmVyO1xyXG4gIHB1cmNoYXNhYmxlOiBib29sZWFuO1xyXG4gIGFmZm9yZGFibGU6IGJvb2xlYW47XHJcbiAgcHJlcXJlcXM6IHN0cmluZ1tdO1xyXG4gIG11bHRpcGxpZXJzOiBNdWx0aXBsaWVycztcclxuICBhZmZlY3RlZDogc3RyaW5nW107XHJcbiAgY2F0ZWdvcmllczogc3RyaW5nW107XHJcbiAgaXNIYWNrOiBib29sZWFuO1xyXG4gIGlzVXNlZnVsOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihuczogTlMsIG5hbWU6IHN0cmluZywgZmFjdGlvbjogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5mYWN0aW9uID0gZmFjdGlvbjtcclxuICAgIHRoaXMuaW5zdGFsbGVkID0gbnMuc2luZ3VsYXJpdHkuZ2V0T3duZWRBdWdtZW50YXRpb25zKGZhbHNlKS5pbmRleE9mKG5hbWUpICE9PSAtMTtcclxuICAgIHRoaXMucHVyY2hhc2VkID0gbnMuc2luZ3VsYXJpdHkuZ2V0T3duZWRBdWdtZW50YXRpb25zKHRydWUpLmluZGV4T2YobmFtZSkgIT09IC0xO1xyXG4gICAgdGhpcy5wcmljZSA9IG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShuYW1lKTtcclxuICAgIHRoaXMucmVxdWlyZWRSZXAgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25SZXBSZXEobmFtZSk7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnB1cmNoYXNhYmxlID0gdGhpcy5yZXF1aXJlZFJlcCA8PSBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKG5zLmdldFBsYXllcigpLmZhY3Rpb25zLmZpbHRlcihmID0+IGYgPT09IGZhY3Rpb24pWzBdKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdGhpcy5wdXJjaGFzYWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hZmZvcmRhYmxlID0gdGhpcy5wcmljZSA8PSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpO1xyXG4gICAgdGhpcy5wcmVxcmVxcyA9IG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvblByZXJlcShuYW1lKTtcclxuICAgIHRoaXMubXVsdGlwbGllcnMgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25TdGF0cyhuYW1lKTtcclxuICAgIHRoaXMuYWZmZWN0ZWQgPSBbXTtcclxuICAgIHRoaXMudXBkYXRlQWZmZWN0ZWQoKTtcclxuICAgIHRoaXMuY2F0ZWdvcmllcyA9IFtdO1xyXG4gICAgdGhpcy51cGRhdGVDYXRlZ29yaWVzKCk7XHJcblxyXG4gICAgLy8gcmVtb3ZlIGFscmVhZHkgcHVyY2hhc2VkIHByZXJlcXMgYW5kIHNvcnQgdGhlbSBpbiBkZXNjZW5kaW5nIHByaWNlIG9yZGVyXHJcbiAgICB0aGlzLnByZXFyZXFzLmZpbHRlcihhID0+ICFucy5zaW5ndWxhcml0eS5nZXRPd25lZEF1Z21lbnRhdGlvbnModHJ1ZSkuaW5jbHVkZXMoYSkpLnNvcnQoKGEsIGIpID0+IG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShiKSAtIG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShhKSk7XHJcblxyXG4gICAgdGhpcy5pc0hhY2sgPSB0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2snKTtcclxuICAgIHRoaXMuaXNVc2VmdWwgPSB0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2snKSB8fCB0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NoYXJpc21hJykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdjb21wYW55JykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdmYWN0aW9uJykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdwcm9ncmFtJykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdzcGVjaWFsJyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVDYXRlZ29yaWVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jYXRlZ29yaWVzID0gW107XHJcblxyXG4gICAgaWYgKHRoaXMuZmFjdGlvbiA9PT0gYENodXJjaCBvZiB0aGUgTWFjaGluZSBHb2RgICYmIHRoaXMubmFtZSAhPT0gJ05ldXJvRmx1eCBHb3Zlcm5vcicpIHtcclxuICAgICAgdGhpcy5jYXRlZ29yaWVzLnB1c2goJ3N0YW5laycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BoYWNraW5nYCxgaGFja2luZ19leHBgLGBoYWNraW5nX2NoYW5jZWAsYGhhY2tpbmdfc3BlZWRgLGBoYWNraW5nX21vbmV5YCxgaGFja2luZ19ncm93YF0uaW5jbHVkZXMoYSkpKVxyXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnaGFjaycpO1xyXG5cclxuICAgIGlmICh0aGlzLmFmZmVjdGVkLnNvbWUoKGEpID0+IFtgc3RyZW5ndGhgLGBzdHJlbmd0aF9leHBgLGBkZWZlbnNlYCxgZGVmZW5zZV9leHBgLGBkZXh0ZXJpdHlgLGBkZXh0ZXJpdHlfZXhwYCxgYWdpbGl0eWAsYGFnaWxpdHlfZXhwYF0uaW5jbHVkZXMoYSkpKVxyXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnY29tYmF0Jyk7XHJcblxyXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BjaGFyaXNtYWAsYGNoYXJpc21hX2V4cGBdLmluY2x1ZGVzKGEpKSlcclxuICAgICAgdGhpcy5jYXRlZ29yaWVzLnB1c2goJ2NoYXJpc21hJyk7XHJcbiAgXHJcbiAgICBpZiAodGhpcy5hZmZlY3RlZC5zb21lKChhKSA9PiBbYGNvbXBhbnlfcmVwYF0uaW5jbHVkZXMoYSkpKVxyXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnY29tcGFueScpO1xyXG5cclxuICAgIGlmICh0aGlzLmFmZmVjdGVkLnNvbWUoKGEpID0+IFtgZmFjdGlvbl9yZXBgXS5pbmNsdWRlcyhhKSkpXHJcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdmYWN0aW9uJyk7XHJcblxyXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BjcmltZV9tb25leWAsYGNyaW1lX3N1Y2Nlc3NgXS5pbmNsdWRlcyhhKSkpXHJcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdjcmltZScpO1xyXG5cclxuICAgIGlmICh0aGlzLmFmZmVjdGVkLnNvbWUoKGEpID0+IFtgaGFja25ldF9ub2RlX21vbmV5YCxgaGFja25ldF9ub2RlX3B1cmNoYXNlX2Nvc3RgLGBoYWNrbmV0X25vZGVfcmFtX2Nvc3RgLGBoYWNrbmV0X25vZGVfY29yZV9jb3N0YCxgaGFja25ldF9ub2RlX2xldmVsX2Nvc3RgXS5pbmNsdWRlcyhhKSkpXHJcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdoYWNrbmV0Jyk7XHJcblxyXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BibGFkZWJ1cm5lcl9tYXhfc3RhbWluYWAsYGJsYWRlYnVybmVyX3N0YW1pbmFfZ2FpbmAsYGJsYWRlYnVybmVyX2FuYWx5c2lzYCxgYmxhZGVidXJuZXJfc3VjY2Vzc19jaGFuY2VgXS5pbmNsdWRlcyhhKSlcclxuICAgICAgICB8fCB0aGlzLm5hbWUgPT09IGBUaGUgQmxhZGUncyBTaW11bGFjcnVtYClcclxuICAgICAgdGhpcy5jYXRlZ29yaWVzLnB1c2goJ2JsYWRlYnVybmVyJyk7XHJcbiAgICBcclxuICAgIGlmIChbYENhc2hSb290IFN0YXJ0ZXIgS2l0YCxgQml0UnVubmVycyBOZXVyb2xpbmtgLGBQQ01hdHJpeGBdLmluY2x1ZGVzKHRoaXMubmFtZSkpXHJcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdwcm9ncmFtJyk7XHJcblxyXG4gICAgaWYgKHRoaXMuZmFjdGlvbiA9PT0gYFNoYWRvd3Mgb2YgQW5hcmNoeWAgJiYgdGhpcy5uYW1lICE9PSAnTmV1cm9GbHV4IEdvdmVybm9yJylcclxuICAgICAgdGhpcy5jYXRlZ29yaWVzLnB1c2goJ2luZmlsdHJhdGlvbicpO1xyXG5cclxuICAgIGlmICh0aGlzLmNhdGVnb3JpZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnc3BlY2lhbCcpO1xyXG4gIH1cclxuXHJcbiAgc2hvcnRDYXRlZ29yaWVzKCk6IHN0cmluZyB7XHJcbiAgICBsZXQgcmV0ID0gJyAgICAgICAgICAgICc7XHJcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2snKSkgICAgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAwLCAgJ0gnKTtcclxuICAgIGlmKHRoaXMuY2F0ZWdvcmllcy5pbmNsdWRlcygnY29tYmF0JykpICAgICAgIHJldCA9IHNldENoYXJBdChyZXQsIDEsICAnQycpO1xyXG4gICAgaWYodGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdjaGFyaXNtYScpKSAgICAgcmV0ID0gc2V0Q2hhckF0KHJldCwgMiwgICdjJyk7XHJcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NvbXBhbnknKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAzLCAgJ1cnKTtcclxuICAgIGlmKHRoaXMuY2F0ZWdvcmllcy5pbmNsdWRlcygnZmFjdGlvbicpKSAgICAgIHJldCA9IHNldENoYXJBdChyZXQsIDQsICAnRicpO1xyXG4gICAgaWYodGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdjcmltZScpKSAgICAgICAgcmV0ID0gc2V0Q2hhckF0KHJldCwgNSwgICdYJyk7XHJcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2tuZXQnKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCA2LCAgJ04nKTtcclxuICAgIGlmKHRoaXMuY2F0ZWdvcmllcy5pbmNsdWRlcygnYmxhZGVidXJuZXInKSkgIHJldCA9IHNldENoYXJBdChyZXQsIDcsICAnQicpO1xyXG4gICAgaWYodGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdwcm9ncmFtJykpICAgICAgcmV0ID0gc2V0Q2hhckF0KHJldCwgOCwgICdQJyk7XHJcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2luZmlsdHJhdGlvbicpKSByZXQgPSBzZXRDaGFyQXQocmV0LCA5LCAgJ0knKTtcclxuICAgIGlmKHRoaXMuY2F0ZWdvcmllcy5pbmNsdWRlcygnc3RhbmVrJykpICAgICAgIHJldCA9IHNldENoYXJBdChyZXQsIDEwLCAncycpO1xyXG4gICAgaWYodGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdzcGVjaWFsJykpICAgICAgcmV0ID0gc2V0Q2hhckF0KHJldCwgMTEsICdTJyk7XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUFmZmVjdGVkKCk6IHZvaWQge1xyXG4gICAgdGhpcy5hZmZlY3RlZCA9IFtdO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5zdHJlbmd0aCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBzdHJlbmd0aGApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuc3RyZW5ndGhfZXhwICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYHN0cmVuZ3RoX2V4cGApO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5kZWZlbnNlICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGRlZmVuc2VgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRlZmVuc2VfZXhwICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGRlZmVuc2VfZXhwYCk7XHJcbiAgICBcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRleHRlcml0eSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBkZXh0ZXJpdHlgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRleHRlcml0eV9leHAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgZGV4dGVyaXR5X2V4cGApO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5hZ2lsaXR5ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGFnaWxpdHlgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmFnaWxpdHlfZXhwICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGFnaWxpdHlfZXhwYCk7XHJcbiAgICBcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNoYXJpc21hICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGNoYXJpc21hYCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5jaGFyaXNtYV9leHAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgY2hhcmlzbWFfZXhwYCk7XHJcbiAgICBcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmcgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgaGFja2luZ2ApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19leHAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgaGFja2luZ19leHBgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfY2hhbmNlICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tpbmdfY2hhbmNlYCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX3NwZWVkICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tpbmdfc3BlZWRgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfbW9uZXkgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgaGFja2luZ19tb25leWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19ncm93ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tpbmdfZ3Jvd2ApO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5jb21wYW55X3JlcCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBjb21wYW55X3JlcGApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMud29ya19tb25leSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGB3b3JrX21vbmV5YCk7XHJcblxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuZmFjdGlvbl9yZXAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgZmFjdGlvbl9yZXBgKTtcclxuICAgIFxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuY3JpbWVfbW9uZXkgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgY3JpbWVfbW9uZXlgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNyaW1lX3N1Y2Nlc3MgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgY3JpbWVfc3VjY2Vzc2ApO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfbW9uZXkgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgaGFja25ldF9ub2RlX21vbmV5YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfcHVyY2hhc2VfY29zdCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBoYWNrbmV0X25vZGVfcHVyY2hhc2VfY29zdGApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX3JhbV9jb3N0ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tuZXRfbm9kZV9yYW1fY29zdGApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX2NvcmVfY29zdCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBoYWNrbmV0X25vZGVfY29yZV9jb3N0YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfbGV2ZWxfY29zdCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBoYWNrbmV0X25vZGVfbGV2ZWxfY29zdGApO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9tYXhfc3RhbWluYSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBibGFkZWJ1cm5lcl9tYXhfc3RhbWluYWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfc3RhbWluYV9nYWluICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGJsYWRlYnVybmVyX3N0YW1pbmFfZ2FpbmApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfYW5hbHlzaXMgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgYmxhZGVidXJuZXJfYW5hbHlzaXNgKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmJsYWRlYnVybmVyX3N1Y2Nlc3NfY2hhbmNlICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGJsYWRlYnVybmVyX3N1Y2Nlc3NfY2hhbmNlYCk7XHJcbiAgfVxyXG5cclxuICBwcmludE11bHRpcGxpZXJzKG5zOiBOUyk6IHZvaWQge1xyXG4gICAgbnMudHByaW50ZihgJHt0aGlzLm5hbWV9OiAke3RoaXMuY2F0ZWdvcmllcy5qb2luKCcsICcpfWApO1xyXG4gIH1cclxuXHJcbiAgcHJpbnRNdWx0aXBsaWVyczIobnM6IE5TKTogdm9pZCB7XHJcbiAgICBjb25zdCBtdWx0czogc3RyaW5nW10gPSBbXTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmcgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGhhY2tpbmc6ICR7dGhpcy5tdWx0aXBsaWVycy5oYWNraW5nfWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuc3RyZW5ndGggIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYHN0cmVuZ3RoOiAke3RoaXMubXVsdGlwbGllcnMuc3RyZW5ndGh9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5kZWZlbnNlICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGBkZWZlbnNlOiAke3RoaXMubXVsdGlwbGllcnMuZGVmZW5zZX1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRleHRlcml0eSAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgZGV4dGVyaXR5OiAke3RoaXMubXVsdGlwbGllcnMuZGV4dGVyaXR5fWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYWdpbGl0eSAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgYWdpbGl0eTogJHt0aGlzLm11bHRpcGxpZXJzLmFnaWxpdHl9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5jaGFyaXNtYSAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgY2hhcmlzbWE6ICR7dGhpcy5tdWx0aXBsaWVycy5jaGFyaXNtYX1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfZXhwICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGBoYWNraW5nX2V4cDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfZXhwfWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuc3RyZW5ndGhfZXhwICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGBzdHJlbmd0aF9leHA6ICR7dGhpcy5tdWx0aXBsaWVycy5zdHJlbmd0aF9leHB9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5kZWZlbnNlX2V4cCAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgZGVmZW5zZV9leHA6ICR7dGhpcy5tdWx0aXBsaWVycy5kZWZlbnNlX2V4cH1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRleHRlcml0eV9leHAgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGRleHRlcml0eV9leHA6ICR7dGhpcy5tdWx0aXBsaWVycy5kZXh0ZXJpdHlfZXhwfWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYWdpbGl0eV9leHAgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGFnaWxpdHlfZXhwOiAke3RoaXMubXVsdGlwbGllcnMuYWdpbGl0eV9leHB9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5jaGFyaXNtYV9leHAgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGNoYXJpc21hX2V4cDogJHt0aGlzLm11bHRpcGxpZXJzLmNoYXJpc21hX2V4cH1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfY2hhbmNlICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGBoYWNraW5nX2NoYW5jZTogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfY2hhbmNlfWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19zcGVlZCAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgaGFja2luZ19zcGVlZDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfc3BlZWR9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX21vbmV5ICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGBoYWNraW5nX21vbmV5OiAke3RoaXMubXVsdGlwbGllcnMuaGFja2luZ19tb25leX1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfZ3JvdyAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgaGFja2luZ19ncm93OiAke3RoaXMubXVsdGlwbGllcnMuaGFja2luZ19ncm93fWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuY29tcGFueV9yZXAgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGNvbXBhbnlfcmVwOiAke3RoaXMubXVsdGlwbGllcnMuY29tcGFueV9yZXB9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5mYWN0aW9uX3JlcCAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgZmFjdGlvbl9yZXA6ICR7dGhpcy5tdWx0aXBsaWVycy5mYWN0aW9uX3JlcH1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNyaW1lX21vbmV5ICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGBjcmltZV9tb25leTogJHt0aGlzLm11bHRpcGxpZXJzLmNyaW1lX21vbmV5fWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuY3JpbWVfc3VjY2VzcyAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgY3JpbWVfc3VjY2VzczogJHt0aGlzLm11bHRpcGxpZXJzLmNyaW1lX3N1Y2Nlc3N9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy53b3JrX21vbmV5ICE9PSAxKVxyXG4gICAgICBtdWx0cy5wdXNoKGB3b3JrX21vbmV5OiAke3RoaXMubXVsdGlwbGllcnMud29ya19tb25leX1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9tb25leSAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgaGFja25ldF9ub2RlX21vbmV5OiAke3RoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX21vbmV5fWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX3B1cmNoYXNlX2Nvc3QgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGhhY2tuZXRfbm9kZV9wdXJjaGFzZV9jb3N0OiAke3RoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX3B1cmNoYXNlX2Nvc3R9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfcmFtX2Nvc3QgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGhhY2tuZXRfbm9kZV9yYW1fY29zdDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9yYW1fY29zdH1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9jb3JlX2Nvc3QgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGhhY2tuZXRfbm9kZV9jb3JlX2Nvc3Q6ICR7dGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfY29yZV9jb3N0fWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX2xldmVsX2Nvc3QgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGhhY2tuZXRfbm9kZV9sZXZlbF9jb3N0OiAke3RoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX2xldmVsX2Nvc3R9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9tYXhfc3RhbWluYSAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgYmxhZGVidXJuZXJfbWF4X3N0YW1pbmE6ICR7dGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9tYXhfc3RhbWluYX1gKTtcclxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmJsYWRlYnVybmVyX3N0YW1pbmFfZ2FpbiAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgYmxhZGVidXJuZXJfc3RhbWluYV9nYWluOiAke3RoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfc3RhbWluYV9nYWlufWApO1xyXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfYW5hbHlzaXMgIT09IDEpXHJcbiAgICAgIG11bHRzLnB1c2goYGJsYWRlYnVybmVyX2FuYWx5c2lzOiAke3RoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfYW5hbHlzaXN9YCk7XHJcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdWNjZXNzX2NoYW5jZSAhPT0gMSlcclxuICAgICAgbXVsdHMucHVzaChgYmxhZGVidXJuZXJfc3VjY2Vzc19jaGFuY2U6ICR7dGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdWNjZXNzX2NoYW5jZX1gKTtcclxuXHJcbiAgICBucy50cHJpbnRmKGAke3RoaXMubmFtZX06ICR7bXVsdHMuam9pbignLCAnKX1gKTtcclxuICB9XHJcblxyXG4gIGNhbkJ1eSgpOiBib29sZWFuIHtcclxuICAgIGlmICh0aGlzLnB1cmNoYXNlZCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuICh0aGlzLnB1cmNoYXNhYmxlICYmIHRoaXMuYWZmb3JkYWJsZSk7XHJcbiAgfVxyXG5cclxuICBhdWdDb2xvcigpIHtcclxuICAgIGlmICh0aGlzLnB1cmNoYXNlZCkgcmV0dXJuICdncmVlbic7XHJcbiAgICBpZiAodGhpcy5wdXJjaGFzYWJsZSAmJiB0aGlzLmFmZm9yZGFibGUpIHJldHVybiAnR29sZDEnO1xyXG4gICAgcmV0dXJuICd3aGl0ZSc7XHJcbiAgfVxyXG5cclxuICB0YWJsZURhdGEobnM6IE5TKTogeyBjb2xvcjogc3RyaW5nOyB0ZXh0OiBzdHJpbmc7IH1bXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLm5hbWV9YCB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLmZhY3Rpb259YCB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMuaW5zdGFsbGVkPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHVyY2hhc2VkPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnByaWNlLCAxLCAxMDAwLCB0cnVlKS5wYWRTdGFydCg4KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnJlcXVpcmVkUmVwLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCkgfSxcclxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLnB1cmNoYXNhYmxlPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMuYWZmb3JkYWJsZT8nWUVTJzonTk8nfWAucGFkU3RhcnQoNCkgfSxcclxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLmNhbkJ1eSgpPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHJlcXJlcXMubGVuZ3RofWAucGFkU3RhcnQoNCkgfSxcclxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgICR7dGhpcy5zaG9ydENhdGVnb3JpZXMoKX1gIH1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHRhYmxlQ29scygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHsgaGVhZGVyOiAnIEF1Z21lbnRhdGlvbnMnLCB3aWR0aDogNTYgfSxcclxuICAgICAgeyBoZWFkZXI6ICcgRmFjdGlvbicsIHdpZHRoOiAyOSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyBJTlMnLCB3aWR0aDogNSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyBIQVMnLCB3aWR0aDogNSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyAgIFByaWNlJywgd2lkdGg6IDkgfSxcclxuICAgICAgeyBoZWFkZXI6ICcgICAgICAgUmVwJywgd2lkdGg6IDExIH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIFBVUicsIHdpZHRoOiA1IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIEFGRicsIHdpZHRoOiA1IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIEJVWScsIHdpZHRoOiA1IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIFBSRScsIHdpZHRoOiA1IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIENBVEVHT1JJRVMnLCB3aWR0aDogMTQgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzaG9ydFRhYmxlRGF0YShuczogTlMpOiB7IGNvbG9yOiBzdHJpbmc7IHRleHQ6IHN0cmluZzsgfVtdIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogYCAke3RoaXMubmFtZX1gIH0sXHJcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogYCAke3RoaXMuZmFjdGlvbn1gIH0sXHJcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogbnMuZm9ybWF0TnVtYmVyKHRoaXMucHJpY2UsIDEsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDgpIH0sXHJcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogbnMuZm9ybWF0TnVtYmVyKHRoaXMucmVxdWlyZWRSZXAsIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHJlcXJlcXMubGVuZ3RofWAucGFkU3RhcnQoNCkgfVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgc2hvcnRUYWJsZUNvbHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGhlYWRlcjogJyBBdWdtZW50YXRpb25zJywgd2lkdGg6IDU2IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIEZhY3Rpb24nLCB3aWR0aDogMjkgfSxcclxuICAgICAgeyBoZWFkZXI6ICcgICBQcmljZScsIHdpZHRoOiA5IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnICAgICAgIFJlcCcsIHdpZHRoOiAxMSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyBQUkUnLCB3aWR0aDogNSB9LFxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBwbGF5ZXIgPSBucy5nZXRQbGF5ZXIoKTtcclxuICAvLyBjb25zdCBsdmwxMVNyY0ZpbGVDaGVjayA9IG5zLnNpbmd1bGFyaXR5LmdldE93bmVkU291cmNlRmlsZXMoKS5maWx0ZXIocyA9PiBzLm4gPT09IDExKTtcclxuICAvLyBjb25zdCBsdmwxMVNyY0ZpbGVMZXZlbCA9IGx2bDExU3JjRmlsZUNoZWNrLmxlbmd0aCA+IDAgPyBsdmwxMVNyY0ZpbGVDaGVja1swXS5sdmwgOiAwO1xyXG4gIC8vIGNvbnN0IGF1Z1ByaWNlTXVsdGlwbGllciA9IDEuOSAqIFsxLCAwLjk2LCAwLjk0LCAwLjkzXVtsdmwxMVNyY0ZpbGVMZXZlbF07XHJcblxyXG4gIGNvbnN0IGF1Z1ByaWNlTXVsdGlwbGllciA9IDEuOTtcclxuICBjb25zdCBuZmdQcmljZU11bHRpcGxpZXIgPSAxLjE0O1xyXG4gIGxldCBhdWdzOiBJQXVnW10gPSBbXTtcclxuICBmb3IgKGNvbnN0IGZhY3Rpb24gb2YgQUxMX0ZBQ1RJT05TLnNvcnQoKGEsIGIpID0+IG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAoYikgLSBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKGEpKSkge1xyXG4gICAgaWYgKG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAoZmFjdGlvbikgPT09IDApIGNvbnRpbnVlO1xyXG4gICAgY29uc3QgZmFjdGlvbkF1Z3MgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25zRnJvbUZhY3Rpb24oZmFjdGlvbik7XHJcbiAgICBmb3IgKGNvbnN0IGF1ZyBvZiBmYWN0aW9uQXVncykge1xyXG4gICAgICBpZiAoIWF1Z3Muc29tZShhID0+IGEubmFtZSA9PT0gYXVnKSlcclxuICAgICAgICBhdWdzLnB1c2gobmV3IEF1ZyhucywgYXVnLCBmYWN0aW9uKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL2F1Z3MgPSBhdWdzLmZpbHRlcihhID0+IGEuY2FuQnV5KCkgfHwgYS5wdXJjaGFzZWQpLnNvcnQoKGEsIGIpID0+IGIucHJpY2UgLSBhLnByaWNlKTtcclxuICAvL2F1Z3MgPSBhdWdzLmZpbHRlcihhID0+IGEuaXNVc2VmdWwpO1xyXG4gIGF1Z3MgPSBhdWdzLnNvcnQoKGEsIGIpID0+IGIucHJpY2UgLSBhLnByaWNlKTtcclxuXHJcbiAgLy9hdWdzID0gYXVncy5maWx0ZXIoYSA9PiBhLmlzSGFjayk7XHJcbiAgYXVncyA9IGF1Z3MuZmlsdGVyKGEgPT4gYS5uYW1lICE9PSBcIk5ldXJvRmx1eCBHb3Zlcm5vclwiKTtcclxuXHJcbiAgLy8gc2hpZnQgcHJlcmVxcyBoaWdoZXIgaW4gdGhlIGxpc3QgaWYgdGhleSdyZSBpbiB0aGUgbGlzdC4gSWYgdGhleSdyZSBub3QgaW4gdGhlIGxpc3QsIHJlbW92ZSB0aGUgYXVnIHdpdGggcHJlcmVxc1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXVncy5sZW5ndGg7ICsraSkge1xyXG4gICAgY29uc3QgYXVnID0gYXVnc1tpXTtcclxuICAgIGlmIChhdWcucHJlcXJlcXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBsZXQgZm91bmRQcmVyZXEgPSBmYWxzZTtcclxuICAgICAgbGV0IG1vdmVkUHJlcmVxID0gZmFsc2U7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXVnLnByZXFyZXFzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgY29uc3QgcHJlcmVxID0gYXVnLnByZXFyZXFzW2pdO1xyXG4gICAgICAgIGNvbnN0IHByZXJlcUluZGV4ID0gYXVncy5maW5kSW5kZXgoYSA9PiBhLm5hbWUgPT09IHByZXJlcSk7XHJcblxyXG4gICAgICAgIGlmIChwcmVyZXFJbmRleCA9PT0gLTEpIGJyZWFrO1xyXG4gICAgICAgIGZvdW5kUHJlcmVxID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKHByZXJlcUluZGV4IDwgaSkgY29udGludWU7XHJcblxyXG4gICAgICAgIGF1Z3Muc3BsaWNlKGksIDAsIGF1Z3Muc3BsaWNlKHByZXJlcUluZGV4LCAxKVswXSk7XHJcbiAgICAgICAgbW92ZWRQcmVyZXEgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZighZm91bmRQcmVyZXEpIHtcclxuICAgICAgICBhdWdzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAtLWk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKG1vdmVkUHJlcmVxKSB7XHJcbiAgICAgICAgLS1pO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL2F1Z3MgPSBhdWdzLmZpbHRlcihhID0+IGEuY2FuQnV5KCkpO1xyXG4gIC8vYXVncy5mb3JFYWNoKGEgPT4gYS5wcmludE11bHRpcGxpZXJzKG5zKSk7XHJcblxyXG4gIC8vUHJpbnRUYWJsZShucywgYXVncy5tYXAoYSA9PiBhLnNob3J0VGFibGVEYXRhKG5zKSksIEF1Zy5zaG9ydFRhYmxlQ29scygpLCBEZWZhdWx0U3R5bGUoKSwgQ29sb3JQcmludCk7XHJcbiAgUHJpbnRUYWJsZShucywgYXVncy5tYXAoYSA9PiBhLnRhYmxlRGF0YShucykpLCBBdWcudGFibGVDb2xzKCksIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxuICBcclxuICAvLyBidXkgaW4gb3JkZXIgZnJvbSBtb3N0IHRvIGxlYXN0IGV4cGVuc2l2ZSwgYnV5aW5nIHByZXJlcXMgZmlyc3RcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwKSB7XHJcbiAgICAvL2xldCBjYXNoID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKTtcclxuICAgIHdoaWxlIChhdWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgYXVnID0gYXVncy5zaGlmdCgpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGF1ZylcclxuICAgICAgICBucy5zaW5ndWxhcml0eS5wdXJjaGFzZUF1Z21lbnRhdGlvbihhdWcuZmFjdGlvbiwgYXVnLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChucy5zaW5ndWxhcml0eS5wdXJjaGFzZUF1Z21lbnRhdGlvbihBTExfRkFDVElPTlMuc29ydCgoYSwgYikgPT4gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChiKSAtIG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAoYSkpWzBdLCBcIk5ldXJvRmx1eCBHb3Zlcm5vclwiKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"augs.js\",\"server\":\"home\"}}],[\"break.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\r\\nfunction isHackable(ns, s, pCount) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return false;\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    const portsRequired = ns.getServerNumPortsRequired(s);\\r\\n    if (hackLv >= hackReq && portsRequired <= pCount)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nfunction crackAndNuke(ns, s) {\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\r\\n        ns.brutessh(s);\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\r\\n        ns.ftpcrack(s);\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\r\\n        ns.relaysmtp(s);\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\r\\n        ns.httpworm(s);\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\r\\n        ns.sqlinject(s);\\r\\n    ns.nuke(s);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\r\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\r\\n        if (ns.fileExists(crack, \\\"home\\\"))\\r\\n            count++;\\r\\n        return count;\\r\\n    }, 0);\\r\\n    for (const s of servers) {\\r\\n        if (isHackable(ns, s, portCrackCount)) {\\r\\n            ns.tprintf(`Cracking ${s}`);\\r\\n            crackAndNuke(ns, s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYnJlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxTQUFTLFVBQVUsQ0FBQyxFQUFNLEVBQUUsQ0FBUyxFQUFFLE1BQWM7SUFDbkQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXRDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDcEMsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxhQUFhLElBQUksTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTlELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEVBQU0sRUFBRSxDQUFTO0lBQ3JDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFNUQsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxNQUFNLFVBQVUsR0FBRyxDQUFDLGNBQWMsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN0RyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3hELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO1lBQUUsS0FBSyxFQUFFLENBQUM7UUFDMUMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFTixLQUFLLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUN2QixJQUFJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFO1lBQ3JDLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDckI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsU2VydmVycyB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5mdW5jdGlvbiBpc0hhY2thYmxlKG5zOiBOUywgczogc3RyaW5nLCBwQ291bnQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGNvbnN0IGhhY2tSZXEgPSBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzKTtcclxuICBjb25zdCBoYWNrTHYgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcclxuICBjb25zdCBwb3J0c1JlcXVpcmVkID0gbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzKTtcclxuXHJcbiAgaWYgKGhhY2tMdiA+PSBoYWNrUmVxICYmIHBvcnRzUmVxdWlyZWQgPD0gcENvdW50KSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmFja0FuZE51a2UobnM6IE5TLCBzOiBzdHJpbmcpOiB2b2lkIHtcclxuICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiLCBcImhvbWVcIikpIG5zLmJydXRlc3NoKHMpO1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwiRlRQQ3JhY2suZXhlXCIsIFwiaG9tZVwiKSkgbnMuZnRwY3JhY2socyk7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJyZWxheVNNVFAuZXhlXCIsIFwiaG9tZVwiKSkgbnMucmVsYXlzbXRwKHMpO1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIsIFwiaG9tZVwiKSkgbnMuaHR0cHdvcm0ocyk7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJTUUxJbmplY3QuZXhlXCIsIFwiaG9tZVwiKSkgbnMuc3FsaW5qZWN0KHMpO1xyXG5cclxuICBucy5udWtlKHMpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcblxyXG4gIGNvbnN0IHBvcnRDcmFja3MgPSBbXCJCcnV0ZVNTSC5leGVcIiwgXCJGVFBDcmFjay5leGVcIiwgXCJyZWxheVNNVFAuZXhlXCIsIFwiSFRUUFdvcm0uZXhlXCIsIFwiU1FMSW5qZWN0LmV4ZVwiXTtcclxuICBjb25zdCBwb3J0Q3JhY2tDb3VudCA9IHBvcnRDcmFja3MucmVkdWNlKChjb3VudCwgY3JhY2spID0+IHtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKGNyYWNrLCBcImhvbWVcIikpIGNvdW50Kys7XHJcbiAgICByZXR1cm4gY291bnQ7XHJcbiAgfSwgMCk7XHJcblxyXG4gIGZvciAoY29uc3QgcyBvZiBzZXJ2ZXJzKSB7XHJcbiAgICBpZiAoaXNIYWNrYWJsZShucywgcywgcG9ydENyYWNrQ291bnQpKSB7XHJcbiAgICAgIG5zLnRwcmludGYoYENyYWNraW5nICR7c31gKTtcclxuICAgICAgY3JhY2tBbmROdWtlKG5zLCBzKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19\",\"filename\":\"break.js\",\"server\":\"home\"}}],[\"connected.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nimport { getAllServers } from \\\"util\\\";\\r\\nfunction showConnected(ns, parent, host, pre) {\\r\\n    const connectedServers = ns.scan(host);\\r\\n    ns.tprintf(`${pre}${host}`);\\r\\n    for (const serverName of connectedServers) {\\r\\n        if (serverName === parent)\\r\\n            continue;\\r\\n        showConnected(ns, host, serverName, `-${pre}`);\\r\\n    }\\r\\n}\\r\\nfunction serverHackedStatusColor(ns, s) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return 'green';\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    if (hackLv >= hackReq)\\r\\n        return 'Gold1';\\r\\n    return 'IndianRed';\\r\\n}\\r\\nfunction isHackable(ns, s) {\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    if (hackLv >= hackReq || ns.hasRootAccess(s))\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    //ns.ui.clearTerminal();\\r\\n    showConnected(ns, '', 'home', '');\\r\\n    // for (const server of getAllServers(ns)) {\\r\\n    //   ns.tprintf(`${server}`);\\r\\n    // }\\r\\n    // ns.tprintf(`${ns.ui.windowSize()}`)\\r\\n    const sortedServers = getAllServers(ns).sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b));\\r\\n    const filteredServers = sortedServers; //.filter(s => ns.getServerMaxMoney(s) > 0);\\r\\n    const hackableServerCount = filteredServers.filter(s => isHackable(ns, s)).length;\\r\\n    const truncatedServers = filteredServers.slice(0, hackableServerCount + 5);\\r\\n    const data = sortedServers.map(s => {\\r\\n        return [\\r\\n            { color: serverHackedStatusColor(ns, s), text: ` ${s}` },\\r\\n            ns.getServerRequiredHackingLevel(s).toString().padStart(6),\\r\\n            ns.getServerNumPortsRequired(s).toString().padStart(6),\\r\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\r\\n            ns.formatRam(ns.getServerMaxRam(s), 0).padStart(7),\\r\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(10)\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Servers', width: 20 },\\r\\n        { header: ' Level', width: 7 },\\r\\n        { header: ' Ports', width: 7 },\\r\\n        { header: ' Base Sec', width: 10 },\\r\\n        { header: '    Ram', width: 8 },\\r\\n        { header: '     Money', width: 11 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nvbm5lY3RlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxTQUFTLGFBQWEsQ0FBQyxFQUFNLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxHQUFXO0lBQ3RFLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2QyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7SUFFNUIsS0FBSyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRTtRQUN6QyxJQUFJLFVBQVUsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUVwQyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2hEO0FBQ0gsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsRUFBTSxFQUFFLENBQVM7SUFDaEQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sT0FBTyxDQUFDO0lBRXhDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFcEMsSUFBSSxNQUFNLElBQUksT0FBTztRQUFFLE9BQU8sT0FBTyxDQUFDO0lBRXRDLE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxFQUFNLEVBQUUsQ0FBUztJQUNuQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBRXBDLElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTFELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVsQyw0Q0FBNEM7SUFDNUMsNkJBQTZCO0lBQzdCLElBQUk7SUFFSixzQ0FBc0M7SUFDdEMsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsSSxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUEsQ0FBQSw0Q0FBNEM7SUFDakYsTUFBTSxtQkFBbUIsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsRixNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDakMsT0FBTztZQUNMLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUN4RCxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMxRCxFQUFFLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN0RCxFQUFFLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN2RCxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsRCxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7U0FDcEUsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUosTUFBTSxPQUFPLEdBQUc7UUFDZixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNqQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUM1QixFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUNoQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtLQUNuQyxDQUFDO0lBRUYsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgUHJpbnRUYWJsZSwgQ29sb3JQcmludCwgRGVmYXVsdFN0eWxlIH0gZnJvbSBcInRhYmxlc1wiO1xyXG5pbXBvcnQgeyBnZXRBbGxTZXJ2ZXJzIH0gZnJvbSBcInV0aWxcIjtcclxuXHJcbmZ1bmN0aW9uIHNob3dDb25uZWN0ZWQobnM6IE5TLCBwYXJlbnQ6IHN0cmluZywgaG9zdDogc3RyaW5nLCBwcmU6IHN0cmluZyk6IHZvaWQge1xyXG4gIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGhvc3QpO1xyXG5cclxuICBucy50cHJpbnRmKGAke3ByZX0ke2hvc3R9YCk7XHJcblxyXG4gIGZvciAoY29uc3Qgc2VydmVyTmFtZSBvZiBjb25uZWN0ZWRTZXJ2ZXJzKSB7XHJcbiAgICBpZiAoc2VydmVyTmFtZSA9PT0gcGFyZW50KSBjb250aW51ZTtcclxuXHJcbiAgICBzaG93Q29ubmVjdGVkKG5zLCBob3N0LCBzZXJ2ZXJOYW1lLCBgLSR7cHJlfWApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VydmVySGFja2VkU3RhdHVzQ29sb3IobnM6IE5TLCBzOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gJ2dyZWVuJztcclxuXHJcbiAgY29uc3QgaGFja1JlcSA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpO1xyXG4gIGNvbnN0IGhhY2tMdiA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xyXG5cclxuICBpZiAoaGFja0x2ID49IGhhY2tSZXEpIHJldHVybiAnR29sZDEnO1xyXG5cclxuICByZXR1cm4gJ0luZGlhblJlZCc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSGFja2FibGUobnM6IE5TLCBzOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICBjb25zdCBoYWNrUmVxID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocyk7XHJcbiAgY29uc3QgaGFja0x2ID0gbnMuZ2V0SGFja2luZ0xldmVsKCk7XHJcblxyXG4gIGlmIChoYWNrTHYgPj0gaGFja1JlcSB8fCBucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAvL25zLnVpLmNsZWFyVGVybWluYWwoKTtcclxuICBzaG93Q29ubmVjdGVkKG5zLCAnJywgJ2hvbWUnLCAnJyk7XHJcblxyXG4gIC8vIGZvciAoY29uc3Qgc2VydmVyIG9mIGdldEFsbFNlcnZlcnMobnMpKSB7XHJcbiAgLy8gICBucy50cHJpbnRmKGAke3NlcnZlcn1gKTtcclxuICAvLyB9XHJcblxyXG4gIC8vIG5zLnRwcmludGYoYCR7bnMudWkud2luZG93U2l6ZSgpfWApXHJcbiAgY29uc3Qgc29ydGVkU2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpLnNvcnQoKGEsIGIpID0+IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKGEpIC0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoYikpO1xyXG4gIGNvbnN0IGZpbHRlcmVkU2VydmVycyA9IHNvcnRlZFNlcnZlcnMvLy5maWx0ZXIocyA9PiBucy5nZXRTZXJ2ZXJNYXhNb25leShzKSA+IDApO1xyXG4gIGNvbnN0IGhhY2thYmxlU2VydmVyQ291bnQgPSBmaWx0ZXJlZFNlcnZlcnMuZmlsdGVyKHMgPT4gaXNIYWNrYWJsZShucywgcykpLmxlbmd0aDtcclxuICBjb25zdCB0cnVuY2F0ZWRTZXJ2ZXJzID0gZmlsdGVyZWRTZXJ2ZXJzLnNsaWNlKDAsIGhhY2thYmxlU2VydmVyQ291bnQgKyA1KTtcclxuICBcclxuICBjb25zdCBkYXRhID0gc29ydGVkU2VydmVycy5tYXAocyA9PiB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvbG9yOiBzZXJ2ZXJIYWNrZWRTdGF0dXNDb2xvcihucywgcyksIHRleHQ6IGAgJHtzfWAgfSxcclxuICAgICAgbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocykudG9TdHJpbmcoKS5wYWRTdGFydCg2KSxcclxuICAgICAgbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzKS50b1N0cmluZygpLnBhZFN0YXJ0KDYpLFxyXG4gICAgICBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzKS50b1N0cmluZygpLnBhZFN0YXJ0KDkpLFxyXG4gICAgICBucy5mb3JtYXRSYW0obnMuZ2V0U2VydmVyTWF4UmFtKHMpLCAwKS5wYWRTdGFydCg3KSxcclxuICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFNlcnZlck1heE1vbmV5KHMpLDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKVxyXG4gICAgXVxyXG4gIH0pO1xyXG5cclxuXHRjb25zdCBjb2x1bW5zID0gW1xyXG5cdFx0eyBoZWFkZXI6ICcgU2VydmVycycsIHdpZHRoOiAyMCB9LFxyXG5cdFx0eyBoZWFkZXI6ICcgTGV2ZWwnLCB3aWR0aDogNyB9LFxyXG4gICAgeyBoZWFkZXI6ICcgUG9ydHMnLCB3aWR0aDogNyB9LFxyXG5cdFx0eyBoZWFkZXI6ICcgQmFzZSBTZWMnLCB3aWR0aDogMTAgfSxcclxuXHRcdHsgaGVhZGVyOiAnICAgIFJhbScsIHdpZHRoOiA4IH0sXHJcblx0XHR7IGhlYWRlcjogJyAgICAgTW9uZXknLCB3aWR0aDogMTEgfVxyXG5cdF07XHJcblxyXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxufVxyXG4iXX0=\",\"filename\":\"connected.js\",\"server\":\"home\"}}],[\"eval.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getAllServers, getSlaves, getTotalThreads } from \\\"./util\\\";\\r\\nimport { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 100;\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers; // This script autocompletes the list of servers.\\r\\n}\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction cyclesToReady(ns, server) {\\r\\n    const result = {\\r\\n        target: server.hostname,\\r\\n        time: 0,\\r\\n        cycles: 0\\r\\n    };\\r\\n    try {\\r\\n        server.baseDifficulty = server.baseDifficulty || ns.getServerBaseSecurityLevel(server.hostname);\\r\\n        server.minDifficulty = server.minDifficulty || ns.getServerMinSecurityLevel(server.hostname);\\r\\n        server.hackDifficulty = server.hackDifficulty || ns.getServerSecurityLevel(server.hostname);\\r\\n        server.moneyAvailable = server.moneyAvailable || ns.getServerMoneyAvailable(server.hostname);\\r\\n        server.moneyMax = server.moneyMax || ns.getServerMaxMoney(server.hostname);\\r\\n        const slaves = getSlaves(ns);\\r\\n        const totalThreads = getTotalThreads(ns, slaves);\\r\\n        while (server.moneyAvailable < server.moneyMax || server.hackDifficulty > server.minDifficulty) {\\r\\n            const baseMSOffset = Math.ceil(ns.formulas.hacking.weakenTime(server, ns.getPlayer()));\\r\\n            const batch = new HackBatch();\\r\\n            const baseWeaken = server.hackDifficulty - server.minDifficulty;\\r\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax));\\r\\n            let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n            if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n                growSecIncrease = GROW_SEC * totalThreads;\\r\\n                batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n                batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n            }\\r\\n            server.hackDifficulty += batch.growThreads * GROW_SEC;\\r\\n            server.hackDifficulty = Math.max(server.minDifficulty, server.hackDifficulty - (batch.growWeakenThreads * WEAK_SEC));\\r\\n            server.moneyAvailable = Math.min(server.moneyMax, ns.formulas.hacking.growPercent(server, batch.growThreads, ns.getPlayer()) * server.moneyAvailable);\\r\\n            result.cycles++;\\r\\n            result.time += baseMSOffset + (MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n            if (result.time > 1000 * 60 * 60 * 24) {\\r\\n                result.cycles = -1;\\r\\n                result.time = 1000 * 60 * 60 * 24;\\r\\n                return result;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n    catch (e) {\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\nfunction cycle(ns, server) {\\r\\n    try {\\r\\n        const slaves = getSlaves(ns);\\r\\n        let totalThreads = getTotalThreads(ns, slaves);\\r\\n        server.baseDifficulty = server.baseDifficulty || ns.getServerBaseSecurityLevel(server.hostname);\\r\\n        server.minDifficulty = server.minDifficulty || ns.getServerMinSecurityLevel(server.hostname);\\r\\n        server.hackDifficulty = server.hackDifficulty || ns.getServerSecurityLevel(server.hostname);\\r\\n        server.moneyAvailable = server.moneyAvailable || ns.getServerMoneyAvailable(server.hostname);\\r\\n        server.moneyMax = server.moneyMax || ns.getServerMaxMoney(server.hostname);\\r\\n        const batches = [];\\r\\n        const baseMSOffset = Math.ceil(ns.formulas.hacking.weakenTime(server, ns.getPlayer()));\\r\\n        // first batch is always GW if the server is not already at min security / max money\\r\\n        // find out how many threads are required to grow to max\\r\\n        if (server.hackDifficulty > server.baseDifficulty || server.moneyAvailable < server.moneyMax) {\\r\\n            const batch = new HackBatch();\\r\\n            const baseWeaken = server.hackDifficulty - server.minDifficulty;\\r\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax));\\r\\n            let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n            if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n                growSecIncrease = GROW_SEC * totalThreads;\\r\\n                batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n                batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n            }\\r\\n            batches.push(batch);\\r\\n            totalThreads -= batch.totalThreads();\\r\\n        }\\r\\n        let missedOnce = false;\\r\\n        while (totalThreads > 0) {\\r\\n            // from now on assume we are at minimum security, maximum money available\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            server.moneyAvailable = server.moneyMax;\\r\\n            const batch = new HackBatch();\\r\\n            batch.hackThreads = Math.ceil(.25 / ns.formulas.hacking.hackPercent(server, ns.getPlayer()));\\r\\n            while (true) {\\r\\n                if (batch.hackThreads <= 0) {\\r\\n                    totalThreads = 0;\\r\\n                    break;\\r\\n                }\\r\\n                const hackPercent = ns.formulas.hacking.hackPercent(server, ns.getPlayer()) * batch.hackThreads;\\r\\n                const current = server.moneyAvailable;\\r\\n                const future = current - (current * hackPercent);\\r\\n                server.moneyAvailable = future;\\r\\n                batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax) * 1.2);\\r\\n                server.moneyAvailable = server.moneyMax;\\r\\n                batch.gain = current - future;\\r\\n                batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, server.hostname) / WEAK_SEC);\\r\\n                batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\r\\n                if (batch.totalThreads() <= totalThreads) {\\r\\n                    totalThreads -= batch.totalThreads();\\r\\n                    batches.push(batch);\\r\\n                    if (missedOnce)\\r\\n                        totalThreads = 0;\\r\\n                    break;\\r\\n                }\\r\\n                batch.hackThreads = Math.floor(batch.hackThreads * 0.75);\\r\\n                missedOnce = true;\\r\\n            }\\r\\n            // duplicate batch until there is no space left\\r\\n            const batchThreads = batch.totalThreads();\\r\\n            const additionalBatches = Math.floor(totalThreads / batchThreads);\\r\\n            for (let i = 0; i < additionalBatches; ++i) {\\r\\n                const newBatch = new HackBatch;\\r\\n                Object.assign(newBatch, batch);\\r\\n                batches.push(newBatch);\\r\\n                totalThreads -= newBatch.totalThreads();\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n        return {\\r\\n            target: server.hostname,\\r\\n            start: baseMSOffset,\\r\\n            time: cycleTime,\\r\\n            gain: cycleGain,\\r\\n            rate: cycleGain / (cycleTime / 1000)\\r\\n        };\\r\\n    }\\r\\n    catch (e) {\\r\\n        return {\\r\\n            target: server.hostname,\\r\\n            start: 1,\\r\\n            time: 1,\\r\\n            gain: 0,\\r\\n            rate: 0\\r\\n        };\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let servers = getAllServers(ns).map(s => ns.getServer(s)).filter(s => ns.getServerMaxMoney(s.hostname) > 0 && ns.getServerMoneyAvailable(s.hostname) > 0 && s.hostname !== 'home' && !s.purchasedByPlayer && s.hasAdminRights);\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        servers = servers.filter(s => s.hostname === ns.args[0]);\\r\\n    const data = servers.map(s => {\\r\\n        const firstCycle = cycle(ns, s);\\r\\n        const nextCycle = cycle(ns, s);\\r\\n        const finalInfo = Object.assign({}, firstCycle);\\r\\n        const growInfo = cyclesToReady(ns, ns.getServer(s.hostname));\\r\\n        const totalCycleCount = 5;\\r\\n        for (let i = 1; i < totalCycleCount; i++) {\\r\\n            finalInfo.gain += nextCycle.gain;\\r\\n            finalInfo.time += nextCycle.time;\\r\\n        }\\r\\n        finalInfo.rate = finalInfo.gain / (finalInfo.time / 1000);\\r\\n        return [\\r\\n            ` ${s.hostname}`,\\r\\n            finalInfo.rate,\\r\\n            `${ns.formatNumber(finalInfo.rate, 3, 1000, true)}/s`.padStart(12),\\r\\n            formatTime(firstCycle.start).padStart(10),\\r\\n            formatTime(firstCycle.time).padStart(10),\\r\\n            formatTime(nextCycle.time).padStart(10),\\r\\n            formatTime(finalInfo.time).padStart(10),\\r\\n            `${ns.getServerSecurityLevel(s.hostname).toFixed(0).padStart(2)}/${ns.getServerMinSecurityLevel(s.hostname).toFixed(0).padStart(2)}`.padStart(9),\\r\\n            ns.formatPercent(ns.getServerMoneyAvailable(s.hostname) / ns.getServerMaxMoney(s.hostname)).padStart(8),\\r\\n            growInfo.time,\\r\\n            `${formatTime(growInfo.time).padStart(10)}/${growInfo.cycles.toString().padStart(2)}`\\r\\n        ];\\r\\n    }).sort((a, b) => Number(b[1]) - Number(a[1]));\\r\\n    const columns = [\\r\\n        { header: ' Servers', width: 20 },\\r\\n        { header: '    Rate', width: 9, hide: true },\\r\\n        { header: '        Rate', width: 13 },\\r\\n        { header: '  Start Tm', width: 11 },\\r\\n        { header: ' First Cyc', width: 11 },\\r\\n        { header: '  Next Cyc', width: 11 },\\r\\n        { header: '  Tot Time', width: 11 },\\r\\n        { header: ' Security', width: 10 },\\r\\n        { header: '   Money', width: 9 },\\r\\n        { header: '   Grow Time', width: 13, hide: true },\\r\\n        { header: ' Grow Time', width: 14 },\\r\\n        // { header: 'LOG Money', width: 10 },\\r\\n        // { header: '    Value', width: 10 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ldmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDL0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUNwRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyx1QkFBdUI7QUFDOUMsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUM7QUFFbEMsb0pBQW9KO0FBQ3BKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsaURBQWlEO0FBQ3hFLENBQUM7QUFzQkQsTUFBTSxTQUFTO0lBQ2IsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFFdEIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUVULFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQy9GLENBQUM7Q0FD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RSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbEMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDaEMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtRQUNqRCxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNuQyxzQ0FBc0M7UUFDdEMsc0NBQXNDO0tBQ3hDLENBQUM7SUFFRixVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TLCBTZXJ2ZXIgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGZvcm1hdFRpbWUsIGdldEFsbFNlcnZlcnMsIGdldFNsYXZlcywgZ2V0VG90YWxUaHJlYWRzIH0gZnJvbSBcIi4vdXRpbFwiO1xyXG5pbXBvcnQgeyBQcmludFRhYmxlLCBDb2xvclByaW50LCBEZWZhdWx0U3R5bGUgfSBmcm9tIFwidGFibGVzXCI7XHJcblxyXG5jb25zdCBHUk9XX1NFQyA9IDAuMDA0OyAvLyBucy5ncm93dGhBbmFseXplU2VjdXJpdHkoMSwgJ29tZWdhLW5ldCcpO1xyXG5jb25zdCBXRUFLX1NFQyA9IDAuMDU7IC8vIG5zLndlYWtlbkFuYWx5emUoMSk7XHJcbmNvbnN0IE1TX0JFVFdFRU5fT1BFUkFUSU9OUyA9IDEwMDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZShkYXRhOiBhbnksIGFyZ3M6IGFueSk6IHN0cmluZ1tdIHtcclxuICByZXR1cm4gZGF0YS5zZXJ2ZXJzOyAvLyBUaGlzIHNjcmlwdCBhdXRvY29tcGxldGVzIHRoZSBsaXN0IG9mIHNlcnZlcnMuXHJcbn1cclxuXHJcbmludGVyZmFjZSBJSGFja0JhdGNoIHtcclxuICBncm93VGhyZWFkczogbnVtYmVyO1xyXG4gIGdyb3dXZWFrZW5UaHJlYWRzOiBudW1iZXI7XHJcbiAgaGFja1RocmVhZHM6IG51bWJlcjtcclxuICBoYWNrV2Vha2VuVGhyZWFkczogbnVtYmVyO1xyXG5cclxuICBoYWNrVGltZTogbnVtYmVyO1xyXG4gIGdyb3dUaW1lOiBudW1iZXI7XHJcbiAgd2Vha2VuVGltZTogbnVtYmVyO1xyXG5cclxuICBncm93TVNCdWY6IG51bWJlcjtcclxuICBncm93V2Vha2VuTVNCdWY6IG51bWJlcjtcclxuICBoYWNrTVNCdWY6IG51bWJlcjtcclxuICBoYWNrV2Vha2VuTXNCdWY6IG51bWJlcjtcclxuXHJcbiAgZ2FpbjogbnVtYmVyO1xyXG5cclxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBIYWNrQmF0Y2ggaW1wbGVtZW50cyBJSGFja0JhdGNoIHtcclxuICBncm93VGhyZWFkcyA9IDA7XHJcbiAgZ3Jvd1dlYWtlblRocmVhZHMgPSAwO1xyXG4gIGhhY2tUaHJlYWRzID0gMDtcclxuICBoYWNrV2Vha2VuVGhyZWFkcyA9IDA7XHJcblxyXG4gIGhhY2tUaW1lID0gMDtcclxuICBncm93VGltZSA9IDA7XHJcbiAgd2Vha2VuVGltZSA9IDA7XHJcblxyXG4gIGdyb3dNU0J1ZiA9IDA7XHJcbiAgZ3Jvd1dlYWtlbk1TQnVmID0gMDtcclxuICBoYWNrTVNCdWYgPSAwO1xyXG4gIGhhY2tXZWFrZW5Nc0J1ZiA9IDA7XHJcblxyXG4gIGdhaW4gPSAwO1xyXG5cclxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdyb3dUaHJlYWRzICsgdGhpcy5ncm93V2Vha2VuVGhyZWFkcyArIHRoaXMuaGFja1RocmVhZHMgKyB0aGlzLmhhY2tXZWFrZW5UaHJlYWRzO1xyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIElDeWNsZVN0YXRzIHtcclxuICB0YXJnZXQ6IHN0cmluZztcclxuICBzdGFydDogbnVtYmVyO1xyXG4gIGdhaW46IG51bWJlcjtcclxuICB0aW1lOiBudW1iZXI7XHJcbiAgcmF0ZTogbnVtYmVyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSUN5Y2xlc1RvUmVhZHkge1xyXG4gIHRhcmdldDogc3RyaW5nO1xyXG4gIGN5Y2xlczogbnVtYmVyO1xyXG4gIHRpbWU6IG51bWJlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gY3ljbGVzVG9SZWFkeShuczogTlMsIHNlcnZlcjogU2VydmVyKTogSUN5Y2xlc1RvUmVhZHkge1xyXG4gIGNvbnN0IHJlc3VsdDogSUN5Y2xlc1RvUmVhZHkgPSB7XHJcbiAgICB0YXJnZXQ6IHNlcnZlci5ob3N0bmFtZSxcclxuICAgIHRpbWU6IDAsXHJcbiAgICBjeWNsZXM6IDBcclxuICB9XHJcbiAgdHJ5IHtcclxuICAgIHNlcnZlci5iYXNlRGlmZmljdWx0eSA9IHNlcnZlci5iYXNlRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgc2VydmVyLm1pbkRpZmZpY3VsdHkgPSBzZXJ2ZXIubWluRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlci5ob3N0bmFtZSk7XHJcbiAgICBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgPSBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgfHwgbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xyXG5cclxuICAgIHNlcnZlci5tb25leUF2YWlsYWJsZSA9IHNlcnZlci5tb25leUF2YWlsYWJsZSB8fCBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgc2VydmVyLm1vbmV5TWF4ID0gc2VydmVyLm1vbmV5TWF4IHx8IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlci5ob3N0bmFtZSk7XHJcblxyXG4gICAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcclxuICAgIGNvbnN0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgICB3aGlsZSAoc2VydmVyLm1vbmV5QXZhaWxhYmxlIDwgc2VydmVyLm1vbmV5TWF4IHx8IHNlcnZlci5oYWNrRGlmZmljdWx0eSA+IHNlcnZlci5taW5EaWZmaWN1bHR5KSB7XHJcbiAgICAgIGNvbnN0IGJhc2VNU09mZnNldCA9IE1hdGguY2VpbChucy5mb3JtdWxhcy5oYWNraW5nLndlYWtlblRpbWUoc2VydmVyLCBucy5nZXRQbGF5ZXIoKSkpO1xyXG5cclxuICAgICAgY29uc3QgYmF0Y2ggPSBuZXcgSGFja0JhdGNoKCk7XHJcbiAgICAgIGNvbnN0IGJhc2VXZWFrZW4gPSBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgLSBzZXJ2ZXIubWluRGlmZmljdWx0eTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhzZXJ2ZXIsIG5zLmdldFBsYXllcigpLCBzZXJ2ZXIubW9uZXlNYXgpKTtcclxuICAgICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcclxuXHJcbiAgICAgIGlmIChiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyArIGJhdGNoLmdyb3dUaHJlYWRzID4gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpO1xyXG4gICAgICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gdG90YWxUaHJlYWRzIC0gYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSArPSBiYXRjaC5ncm93VGhyZWFkcyAqIEdST1dfU0VDO1xyXG4gICAgICBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgPSBNYXRoLm1heChzZXJ2ZXIubWluRGlmZmljdWx0eSwgc2VydmVyLmhhY2tEaWZmaWN1bHR5IC0gKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICogV0VBS19TRUMpKTtcclxuXHJcbiAgICAgIHNlcnZlci5tb25leUF2YWlsYWJsZSA9IE1hdGgubWluKHNlcnZlci5tb25leU1heCwgbnMuZm9ybXVsYXMuaGFja2luZy5ncm93UGVyY2VudChzZXJ2ZXIsIGJhdGNoLmdyb3dUaHJlYWRzLCBucy5nZXRQbGF5ZXIoKSkgKiBzZXJ2ZXIubW9uZXlBdmFpbGFibGUpO1xyXG5cclxuICAgICAgcmVzdWx0LmN5Y2xlcysrO1xyXG4gICAgICByZXN1bHQudGltZSArPSBiYXNlTVNPZmZzZXQgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCkgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XHJcblxyXG4gICAgICBpZiAocmVzdWx0LnRpbWUgPiAxMDAwICogNjAgKiA2MCAqIDI0KSB7XHJcbiAgICAgICAgcmVzdWx0LmN5Y2xlcyA9IC0xO1xyXG4gICAgICAgIHJlc3VsdC50aW1lID0gMTAwMCAqIDYwICogNjAgKiAyNDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjeWNsZShuczogTlMsIHNlcnZlcjogU2VydmVyKTogSUN5Y2xlU3RhdHMge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gICAgbGV0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgICBzZXJ2ZXIuYmFzZURpZmZpY3VsdHkgPSBzZXJ2ZXIuYmFzZURpZmZpY3VsdHkgfHwgbnMuZ2V0U2VydmVyQmFzZVNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcclxuICAgIHNlcnZlci5taW5EaWZmaWN1bHR5ID0gc2VydmVyLm1pbkRpZmZpY3VsdHkgfHwgbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgc2VydmVyLmhhY2tEaWZmaWN1bHR5ID0gc2VydmVyLmhhY2tEaWZmaWN1bHR5IHx8IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcclxuXHJcbiAgICBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgfHwgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyLmhvc3RuYW1lKTtcclxuICAgIHNlcnZlci5tb25leU1heCA9IHNlcnZlci5tb25leU1heCB8fCBucy5nZXRTZXJ2ZXJNYXhNb25leShzZXJ2ZXIuaG9zdG5hbWUpO1xyXG5cclxuICAgIGNvbnN0IGJhdGNoZXM6IElIYWNrQmF0Y2hbXSA9IFtdO1xyXG4gICAgY29uc3QgYmFzZU1TT2Zmc2V0ID0gTWF0aC5jZWlsKG5zLmZvcm11bGFzLmhhY2tpbmcud2Vha2VuVGltZShzZXJ2ZXIsIG5zLmdldFBsYXllcigpKSk7XHJcblxyXG4gICAgLy8gZmlyc3QgYmF0Y2ggaXMgYWx3YXlzIEdXIGlmIHRoZSBzZXJ2ZXIgaXMgbm90IGFscmVhZHkgYXQgbWluIHNlY3VyaXR5IC8gbWF4IG1vbmV5XHJcbiAgICAvLyBmaW5kIG91dCBob3cgbWFueSB0aHJlYWRzIGFyZSByZXF1aXJlZCB0byBncm93IHRvIG1heFxyXG4gICAgaWYgKHNlcnZlci5oYWNrRGlmZmljdWx0eSA+IHNlcnZlci5iYXNlRGlmZmljdWx0eSB8fCBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPCBzZXJ2ZXIubW9uZXlNYXgpIHtcclxuICAgICAgY29uc3QgYmF0Y2ggPSBuZXcgSGFja0JhdGNoKCk7XHJcbiAgICAgIGNvbnN0IGJhc2VXZWFrZW4gPSBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgLSBzZXJ2ZXIubWluRGlmZmljdWx0eTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhzZXJ2ZXIsIG5zLmdldFBsYXllcigpLCBzZXJ2ZXIubW9uZXlNYXgpKTtcclxuICAgICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcclxuXHJcbiAgICAgIGlmIChiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyArIGJhdGNoLmdyb3dUaHJlYWRzID4gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpO1xyXG4gICAgICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gdG90YWxUaHJlYWRzIC0gYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICAgIHRvdGFsVGhyZWFkcyAtPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbWlzc2VkT25jZSA9IGZhbHNlO1xyXG4gICAgd2hpbGUgKHRvdGFsVGhyZWFkcyA+IDAgKSB7XHJcbiAgICAgIC8vIGZyb20gbm93IG9uIGFzc3VtZSB3ZSBhcmUgYXQgbWluaW11bSBzZWN1cml0eSwgbWF4aW11bSBtb25leSBhdmFpbGFibGVcclxuICAgICAgc2VydmVyLmhhY2tEaWZmaWN1bHR5ID0gc2VydmVyLm1pbkRpZmZpY3VsdHk7XHJcbiAgICAgIHNlcnZlci5tb25leUF2YWlsYWJsZSA9IHNlcnZlci5tb25leU1heDtcclxuXHJcbiAgICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgICBiYXRjaC5oYWNrVGhyZWFkcyA9IE1hdGguY2VpbCguMjUgLyBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tQZXJjZW50KHNlcnZlciwgbnMuZ2V0UGxheWVyKCkpKTtcclxuXHJcbiAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgaWYgKGJhdGNoLmhhY2tUaHJlYWRzIDw9IDApIHtcclxuICAgICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChzZXJ2ZXIsIG5zLmdldFBsYXllcigpKSAqIGJhdGNoLmhhY2tUaHJlYWRzO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBzZXJ2ZXIubW9uZXlBdmFpbGFibGU7XHJcbiAgICAgICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gICAgICAgIHNlcnZlci5tb25leUF2YWlsYWJsZSA9IGZ1dHVyZTtcclxuICAgICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5mb3JtdWxhcy5oYWNraW5nLmdyb3dUaHJlYWRzKHNlcnZlciwgbnMuZ2V0UGxheWVyKCksIHNlcnZlci5tb25leU1heCkgKiAxLjIpO1xyXG4gICAgICAgIHNlcnZlci5tb25leUF2YWlsYWJsZSA9IHNlcnZlci5tb25leU1heDtcclxuICAgICAgICBiYXRjaC5nYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuICAgICAgXHJcbiAgICAgICAgYmF0Y2guaGFja1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVTZWN1cml0eShiYXRjaC5oYWNrVGhyZWFkcywgc2VydmVyLmhvc3RuYW1lKSAvIFdFQUtfU0VDKTtcclxuICAgICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChiYXRjaC5ncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XHJcblxyXG4gICAgICAgIGlmIChiYXRjaC50b3RhbFRocmVhZHMoKSA8PSB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgICAgIHRvdGFsVGhyZWFkcyAtPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcclxuICAgICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcblxyXG4gICAgICAgICAgaWYgKG1pc3NlZE9uY2UpIHRvdGFsVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5mbG9vcihiYXRjaC5oYWNrVGhyZWFkcyAqIDAuNzUpO1xyXG4gICAgICAgIG1pc3NlZE9uY2UgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBkdXBsaWNhdGUgYmF0Y2ggdW50aWwgdGhlcmUgaXMgbm8gc3BhY2UgbGVmdFxyXG4gICAgICBjb25zdCBiYXRjaFRocmVhZHMgPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcclxuICAgICAgY29uc3QgYWRkaXRpb25hbEJhdGNoZXMgPSBNYXRoLmZsb29yKHRvdGFsVGhyZWFkcyAvIGJhdGNoVGhyZWFkcyk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkaXRpb25hbEJhdGNoZXM7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IG5ld0JhdGNoID0gbmV3IEhhY2tCYXRjaDtcclxuICAgICAgICBPYmplY3QuYXNzaWduKG5ld0JhdGNoLCBiYXRjaCk7XHJcbiAgICAgICAgYmF0Y2hlcy5wdXNoKG5ld0JhdGNoKTtcclxuICAgICAgICB0b3RhbFRocmVhZHMgLT0gbmV3QmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjeWNsZVRpbWUgPSBiYXNlTVNPZmZzZXQgKyAoYmF0Y2hlcy5sZW5ndGggKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcclxuICAgIGNvbnN0IGN5Y2xlR2FpbiA9IGJhdGNoZXMucmVkdWNlKChjb3VudCwgYmF0Y2gpID0+IGNvdW50ICsgYmF0Y2guZ2FpbiwgMCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGFyZ2V0OiBzZXJ2ZXIuaG9zdG5hbWUsXHJcbiAgICAgIHN0YXJ0OiBiYXNlTVNPZmZzZXQsXHJcbiAgICAgIHRpbWU6IGN5Y2xlVGltZSxcclxuICAgICAgZ2FpbjogY3ljbGVHYWluLFxyXG4gICAgICByYXRlOiBjeWNsZUdhaW4gLyAoY3ljbGVUaW1lIC8gMTAwMClcclxuICAgIH1cclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRhcmdldDogc2VydmVyLmhvc3RuYW1lLFxyXG4gICAgICBzdGFydDogMSxcclxuICAgICAgdGltZTogMSxcclxuICAgICAgZ2FpbjogMCxcclxuICAgICAgcmF0ZTogMFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbGV0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKS5tYXAocyA9PiBucy5nZXRTZXJ2ZXIocykpLmZpbHRlcihzID0+IG5zLmdldFNlcnZlck1heE1vbmV5KHMuaG9zdG5hbWUpID4gMCAmJiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzLmhvc3RuYW1lKSA+IDAgJiYgcy5ob3N0bmFtZSAhPT0gJ2hvbWUnICYmICFzLnB1cmNoYXNlZEJ5UGxheWVyICYmIHMuaGFzQWRtaW5SaWdodHMpO1xyXG5cclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgc2VydmVycyA9IHNlcnZlcnMuZmlsdGVyKHMgPT4gcy5ob3N0bmFtZSA9PT0gbnMuYXJnc1swXSk7XHJcblxyXG4gIGNvbnN0IGRhdGEgPSBzZXJ2ZXJzLm1hcChzID0+IHtcclxuICAgIGNvbnN0IGZpcnN0Q3ljbGUgPSBjeWNsZShucywgcyk7XHJcbiAgICBjb25zdCBuZXh0Q3ljbGUgPSBjeWNsZShucywgcyk7XHJcbiAgICBjb25zdCBmaW5hbEluZm86IElDeWNsZVN0YXRzID0gT2JqZWN0LmFzc2lnbih7fSwgZmlyc3RDeWNsZSk7XHJcbiAgICBjb25zdCBncm93SW5mbzogSUN5Y2xlc1RvUmVhZHkgPSBjeWNsZXNUb1JlYWR5KG5zLCBucy5nZXRTZXJ2ZXIocy5ob3N0bmFtZSkpO1xyXG5cclxuICAgIGNvbnN0IHRvdGFsQ3ljbGVDb3VudCA9IDU7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRvdGFsQ3ljbGVDb3VudDsgaSsrKSB7XHJcbiAgICAgIGZpbmFsSW5mby5nYWluICs9IG5leHRDeWNsZS5nYWluO1xyXG4gICAgICBmaW5hbEluZm8udGltZSArPSBuZXh0Q3ljbGUudGltZTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5hbEluZm8ucmF0ZSA9IGZpbmFsSW5mby5nYWluIC8gKGZpbmFsSW5mby50aW1lIC8gMTAwMCk7XHJcblxyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCAke3MuaG9zdG5hbWV9YCxcclxuICAgICAgZmluYWxJbmZvLnJhdGUsXHJcbiAgICAgIGAke25zLmZvcm1hdE51bWJlcihmaW5hbEluZm8ucmF0ZSwgMywgMTAwMCwgdHJ1ZSl9L3NgLnBhZFN0YXJ0KDEyKSxcclxuICAgICAgZm9ybWF0VGltZShmaXJzdEN5Y2xlLnN0YXJ0KS5wYWRTdGFydCgxMCksXHJcbiAgICAgIGZvcm1hdFRpbWUoZmlyc3RDeWNsZS50aW1lKS5wYWRTdGFydCgxMCksXHJcbiAgICAgIGZvcm1hdFRpbWUobmV4dEN5Y2xlLnRpbWUpLnBhZFN0YXJ0KDEwKSxcclxuICAgICAgZm9ybWF0VGltZShmaW5hbEluZm8udGltZSkucGFkU3RhcnQoMTApLFxyXG4gICAgICBgJHtucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHMuaG9zdG5hbWUpLnRvRml4ZWQoMCkucGFkU3RhcnQoMil9LyR7bnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzLmhvc3RuYW1lKS50b0ZpeGVkKDApLnBhZFN0YXJ0KDIpfWAucGFkU3RhcnQoOSksXHJcbiAgICAgIG5zLmZvcm1hdFBlcmNlbnQobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUocy5ob3N0bmFtZSkgLyBucy5nZXRTZXJ2ZXJNYXhNb25leShzLmhvc3RuYW1lKSkucGFkU3RhcnQoOCksXHJcbiAgICAgIGdyb3dJbmZvLnRpbWUsXHJcbiAgICAgIGAke2Zvcm1hdFRpbWUoZ3Jvd0luZm8udGltZSkucGFkU3RhcnQoMTApfS8ke2dyb3dJbmZvLmN5Y2xlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIpfWBcclxuICAgIF1cclxuICAgIH0pLnNvcnQoKGEsIGIpID0+IE51bWJlcihiWzFdKSAtIE51bWJlcihhWzFdKSk7XHJcblxyXG5cdGNvbnN0IGNvbHVtbnMgPSBbXHJcblx0XHR7IGhlYWRlcjogJyBTZXJ2ZXJzJywgd2lkdGg6IDIwIH0sXHJcblx0XHR7IGhlYWRlcjogJyAgICBSYXRlJywgd2lkdGg6IDksIGhpZGU6IHRydWUgfSxcclxuXHRcdHsgaGVhZGVyOiAnICAgICAgICBSYXRlJywgd2lkdGg6IDEzIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgU3RhcnQgVG0nLCB3aWR0aDogMTEgfSxcclxuICAgIHsgaGVhZGVyOiAnIEZpcnN0IEN5YycsIHdpZHRoOiAxMSB9LFxyXG4gICAgeyBoZWFkZXI6ICcgIE5leHQgQ3ljJywgd2lkdGg6IDExIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgVG90IFRpbWUnLCB3aWR0aDogMTEgfSxcclxuICAgIHsgaGVhZGVyOiAnIFNlY3VyaXR5Jywgd2lkdGg6IDEwIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgIE1vbmV5Jywgd2lkdGg6IDkgfSxcclxuICAgIHsgaGVhZGVyOiAnICAgR3JvdyBUaW1lJywgd2lkdGg6IDEzLCBoaWRlOiB0cnVlIH0sXHJcbiAgICB7IGhlYWRlcjogJyBHcm93IFRpbWUnLCB3aWR0aDogMTQgfSxcclxuICAgIC8vIHsgaGVhZGVyOiAnTE9HIE1vbmV5Jywgd2lkdGg6IDEwIH0sXHJcbiAgICAvLyB7IGhlYWRlcjogJyAgICBWYWx1ZScsIHdpZHRoOiAxMCB9LFxyXG5cdF07XHJcblxyXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxufVxyXG4iXX0=\",\"filename\":\"eval.js\",\"server\":\"home\"}}],[\"exp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, waitForHGWScripts } from \\\"util\\\";\\r\\nimport { ColorPrint } from \\\"./tables\\\";\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 10;\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction getScriptCalls(batches) {\\r\\n    const scripts = [];\\r\\n    for (const batch of batches) {\\r\\n        if (batch.growThreads > 0) {\\r\\n            scripts.push({\\r\\n                script: \\\"grow.js\\\",\\r\\n                threads: batch.growThreads,\\r\\n                offset: batch.growMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.growWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.growWeakenThreads,\\r\\n                offset: batch.growWeakenMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"hack.js\\\",\\r\\n                threads: batch.hackThreads,\\r\\n                offset: batch.hackMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.hackWeakenThreads,\\r\\n                offset: batch.hackWeakenMsBuf\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return scripts.sort((a, b) => b.threads - a.threads);\\r\\n}\\r\\nasync function cycle(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    let totalThreads = getTotalThreads(ns, slaves);\\r\\n    const batches = [];\\r\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\r\\n    const weakenTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\r\\n    // first batch is always GW if the server is not already at min security / max money\\r\\n    // find out how many threads are required to grow to max\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\r\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\r\\n        const batch = new HackBatch();\\r\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        const growMult = Math.max(ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1), 1);\\r\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n            growSecIncrease = GROW_SEC * totalThreads;\\r\\n            batch.growWeakenThreads = Math.min(Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC), totalThreads);\\r\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n        }\\r\\n        const batchMSOffset = baseMSOffset;\\r\\n        batch.weakenTime = weakenTime;\\r\\n        batch.growTime = growTime;\\r\\n        batch.hackTime = hackTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        batches.push(batch);\\r\\n        totalThreads -= batch.totalThreads();\\r\\n    }\\r\\n    const maxBatch = new HackBatch();\\r\\n    const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n    maxBatch.growTime = growTime;\\r\\n    maxBatch.growMSBuf = batchMSOffset - maxBatch.growTime;\\r\\n    maxBatch.growThreads = totalThreads;\\r\\n    batches.push(maxBatch);\\r\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\r\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n    ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\r\\n    const scripts = getScriptCalls(batches);\\r\\n    let script = scripts.shift();\\r\\n    for (const s of slaves) {\\r\\n        if (script === undefined)\\r\\n            break;\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        while (slaveThreads > 0) {\\r\\n            if (script === undefined)\\r\\n                break;\\r\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\r\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\r\\n            slaveThreads -= scriptThreads;\\r\\n            script.threads -= scriptThreads;\\r\\n            if (script.threads === 0)\\r\\n                script = scripts.shift();\\r\\n        }\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = 'foodnstuff';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    if (!ns.hasRootAccess(target)) {\\r\\n        ColorPrint(ns, ['Red1', `SUPER HACK ERROR: Unable to hack ${target} without root access`]);\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        const slaves = getSlaves(ns);\\r\\n        // copy hgw scripts to slave machines\\r\\n        for (const s of slaves) {\\r\\n            if (s === 'home')\\r\\n                continue;\\r\\n            ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n        }\\r\\n        await cycle(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsNENBQTRDO0FBQ3BFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLHVCQUF1QjtBQUM5QyxNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQXNCakMsTUFBTSxTQUFTO0lBQ2IsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFFdEIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUVULFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQy9GLENBQUM7Q0FDRjtBQVFELFNBQVMsY0FBYyxDQUFDLE9BQXFCO0lBQzNDLE1BQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7SUFDbEMsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUU7UUFDM0IsSUFBSSxLQUFLLENBQUMs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QyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDN0IsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxvQ0FBb0MsTUFBTSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7UUFDM0YsT0FBTztLQUNSO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFN0IscUNBQXFDO1FBQ3JDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLE1BQU07Z0JBQUUsU0FBUztZQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZm9ybWF0VGltZSwgZ2V0U2xhdmVzLCBnZXRTbGF2ZVRocmVhZHMsIGdldFRvdGFsVGhyZWFkcywgd2FpdEZvckhHV1NjcmlwdHMgfSBmcm9tIFwidXRpbFwiO1xyXG5pbXBvcnQgeyBDb2xvclByaW50IH0gZnJvbSBcIi4vdGFibGVzXCI7XHJcblxyXG5jb25zdCBHUk9XX1NFQyA9IDAuMDA0OyAvLyBucy5ncm93dGhBbmFseXplU2VjdXJpdHkoMSwgJ29tZWdhLW5ldCcpO1xyXG5jb25zdCBXRUFLX1NFQyA9IDAuMDU7IC8vIG5zLndlYWtlbkFuYWx5emUoMSk7XHJcbmNvbnN0IE1TX0JFVFdFRU5fT1BFUkFUSU9OUyA9IDEwO1xyXG5cclxuaW50ZXJmYWNlIElIYWNrQmF0Y2gge1xyXG4gIGdyb3dUaHJlYWRzOiBudW1iZXI7XHJcbiAgZ3Jvd1dlYWtlblRocmVhZHM6IG51bWJlcjtcclxuICBoYWNrVGhyZWFkczogbnVtYmVyO1xyXG4gIGhhY2tXZWFrZW5UaHJlYWRzOiBudW1iZXI7XHJcblxyXG4gIGhhY2tUaW1lOiBudW1iZXI7XHJcbiAgZ3Jvd1RpbWU6IG51bWJlcjtcclxuICB3ZWFrZW5UaW1lOiBudW1iZXI7XHJcblxyXG4gIGdyb3dNU0J1ZjogbnVtYmVyO1xyXG4gIGdyb3dXZWFrZW5NU0J1ZjogbnVtYmVyO1xyXG4gIGhhY2tNU0J1ZjogbnVtYmVyO1xyXG4gIGhhY2tXZWFrZW5Nc0J1ZjogbnVtYmVyO1xyXG5cclxuICBnYWluOiBudW1iZXI7XHJcblxyXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXI7XHJcbn1cclxuXHJcbmNsYXNzIEhhY2tCYXRjaCBpbXBsZW1lbnRzIElIYWNrQmF0Y2gge1xyXG4gIGdyb3dUaHJlYWRzID0gMDtcclxuICBncm93V2Vha2VuVGhyZWFkcyA9IDA7XHJcbiAgaGFja1RocmVhZHMgPSAwO1xyXG4gIGhhY2tXZWFrZW5UaHJlYWRzID0gMDtcclxuXHJcbiAgaGFja1RpbWUgPSAwO1xyXG4gIGdyb3dUaW1lID0gMDtcclxuICB3ZWFrZW5UaW1lID0gMDtcclxuXHJcbiAgZ3Jvd01TQnVmID0gMDtcclxuICBncm93V2Vha2VuTVNCdWYgPSAwO1xyXG4gIGhhY2tNU0J1ZiA9IDA7XHJcbiAgaGFja1dlYWtlbk1zQnVmID0gMDtcclxuXHJcbiAgZ2FpbiA9IDA7XHJcblxyXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ3Jvd1RocmVhZHMgKyB0aGlzLmdyb3dXZWFrZW5UaHJlYWRzICsgdGhpcy5oYWNrVGhyZWFkcyArIHRoaXMuaGFja1dlYWtlblRocmVhZHM7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgSVNjcmlwdENhbGwge1xyXG4gIHNjcmlwdDogc3RyaW5nO1xyXG4gIHRocmVhZHM6IG51bWJlcjtcclxuICBvZmZzZXQ6IG51bWJlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2NyaXB0Q2FsbHMoYmF0Y2hlczogSUhhY2tCYXRjaFtdKTogSVNjcmlwdENhbGxbXSB7XHJcbiAgY29uc3Qgc2NyaXB0czogSVNjcmlwdENhbGxbXSA9IFtdO1xyXG4gIGZvciAoY29uc3QgYmF0Y2ggb2YgYmF0Y2hlcykge1xyXG4gICAgaWYgKGJhdGNoLmdyb3dUaHJlYWRzID4gMCkge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJncm93LmpzXCIsXHJcbiAgICAgICAgdGhyZWFkczogYmF0Y2guZ3Jvd1RocmVhZHMsXHJcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5ncm93TVNCdWZcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMpIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBzY3JpcHQ6IFwid2Vha2VuLmpzXCIsXHJcbiAgICAgICAgdGhyZWFkczogYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMsXHJcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5ncm93V2Vha2VuTVNCdWZcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMpIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBzY3JpcHQ6IFwiaGFjay5qc1wiLFxyXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmhhY2tUaHJlYWRzLFxyXG4gICAgICAgIG9mZnNldDogYmF0Y2guaGFja01TQnVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJhdGNoLmhhY2tXZWFrZW5UaHJlYWRzKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcIndlYWtlbi5qc1wiLFxyXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmhhY2tXZWFrZW5UaHJlYWRzLFxyXG4gICAgICAgIG9mZnNldDogYmF0Y2guaGFja1dlYWtlbk1zQnVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2NyaXB0cy5zb3J0KChhLCBiKSA9PiBiLnRocmVhZHMgLSBhLnRocmVhZHMpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjeWNsZShuczogTlMsIHRhcmdldDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcclxuICBsZXQgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xyXG5cclxuICBjb25zdCBiYXRjaGVzOiBJSGFja0JhdGNoW10gPSBbXTtcclxuXHJcbiAgY29uc3QgYmFzZU1TT2Zmc2V0ID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XHJcbiAgY29uc3Qgd2Vha2VuVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG4gIGNvbnN0IGdyb3dUaW1lID0gTWF0aC5jZWlsKG5zLmdldEdyb3dUaW1lKHRhcmdldCkpO1xyXG4gIGNvbnN0IGhhY2tUaW1lID0gTWF0aC5jZWlsKG5zLmdldEhhY2tUaW1lKHRhcmdldCkpO1xyXG5cclxuICAvLyBmaXJzdCBiYXRjaCBpcyBhbHdheXMgR1cgaWYgdGhlIHNlcnZlciBpcyBub3QgYWxyZWFkeSBhdCBtaW4gc2VjdXJpdHkgLyBtYXggbW9uZXlcclxuICAvLyBmaW5kIG91dCBob3cgbWFueSB0aHJlYWRzIGFyZSByZXF1aXJlZCB0byBncm93IHRvIG1heFxyXG4gIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCkgfHxcclxuICAgICAgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSA8IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkpXHJcbiAge1xyXG4gICAgY29uc3QgYmF0Y2ggPSBuZXcgSGFja0JhdGNoKCk7XHJcbiAgICBjb25zdCBiYXNlV2Vha2VuID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpIC0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpXHJcbiAgICBjb25zdCBncm93TXVsdCA9IE1hdGgubWF4KG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkgLyAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSArIDEpLCAxKTtcclxuICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkpO1xyXG4gICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKSwgdG90YWxUaHJlYWRzKTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0O1xyXG4gICAgYmF0Y2gud2Vha2VuVGltZSA9IHdlYWtlblRpbWU7XHJcbiAgICBiYXRjaC5ncm93VGltZSA9IGdyb3dUaW1lO1xyXG4gICAgYmF0Y2guaGFja1RpbWUgPSBoYWNrVGltZTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICB0b3RhbFRocmVhZHMgLT0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtYXhCYXRjaCA9IG5ldyBIYWNrQmF0Y2goKTtcclxuICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0ICsgKGJhdGNoZXMubGVuZ3RoICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCk7XHJcbiAgbWF4QmF0Y2guZ3Jvd1RpbWUgPSBncm93VGltZTtcclxuICBtYXhCYXRjaC5ncm93TVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gbWF4QmF0Y2guZ3Jvd1RpbWU7XHJcbiAgbWF4QmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHM7XHJcbiAgYmF0Y2hlcy5wdXNoKG1heEJhdGNoKTtcclxuXHJcbiAgY29uc3QgY3ljbGVUaHJlYWRzID0gYmF0Y2hlcy5yZWR1Y2UoKGNvdW50LCBiYXRjaCkgPT4gY291bnQgKyBiYXRjaC50b3RhbFRocmVhZHMoKSwgMCk7XHJcbiAgY29uc3QgY3ljbGVHYWluID0gYmF0Y2hlcy5yZWR1Y2UoKGNvdW50LCBiYXRjaCkgPT4gY291bnQgKyBiYXRjaC5nYWluLCAwKTtcclxuICBjb25zdCBjeWNsZVRpbWUgPSBiYXNlTVNPZmZzZXQgKyAoYmF0Y2hlcy5sZW5ndGggKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcclxuICBucy50cHJpbnRmKGAke3RhcmdldH06ICR7YmF0Y2hlcy5sZW5ndGh9IEJhdGNoZXMgfCAke2N5Y2xlVGhyZWFkc30gVGhyZWFkcyB8ICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiwgMywgMTAwMCwgdHJ1ZSl9IEdhaW4gfCAke2Zvcm1hdFRpbWUoYmFzZU1TT2Zmc2V0KX0vJHtmb3JtYXRUaW1lKGN5Y2xlVGltZSl9IHwgR2FpbiAke25zLmZvcm1hdE51bWJlcihjeWNsZUdhaW4gLyAoY3ljbGVUaW1lIC8gMTAwMCksIDMsIDEwMDAsIHRydWUpfS9zYCk7XHJcblxyXG4gIGNvbnN0IHNjcmlwdHMgPSBnZXRTY3JpcHRDYWxscyhiYXRjaGVzKTtcclxuICBsZXQgc2NyaXB0ID0gc2NyaXB0cy5zaGlmdCgpO1xyXG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcclxuICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcblxyXG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XHJcbiAgICB3aGlsZSAoc2xhdmVUaHJlYWRzID4gMCkge1xyXG4gICAgICBpZiAoc2NyaXB0ID09PSB1bmRlZmluZWQpIGJyZWFrO1xyXG5cclxuICAgICAgY29uc3Qgc2NyaXB0VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgc2NyaXB0LnRocmVhZHMpO1xyXG4gICAgICBucy5leGVjKHNjcmlwdC5zY3JpcHQsIHMsIHt0ZW1wb3Jhcnk6IHRydWUsIHRocmVhZHM6IHNjcmlwdFRocmVhZHN9LCB0YXJnZXQsIHNjcmlwdC5vZmZzZXQpO1xyXG4gICAgICBzbGF2ZVRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcclxuICAgICAgc2NyaXB0LnRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcclxuXHJcbiAgICAgIGlmIChzY3JpcHQudGhyZWFkcyA9PT0gMClcclxuICAgICAgICBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTsgIFxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBucy5kaXNhYmxlTG9nKCdBTEwnKTtcclxuXHJcbiAgbGV0IHRhcmdldCA9ICdmb29kbnN0dWZmJztcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgaWYgKCFucy5oYXNSb290QWNjZXNzKHRhcmdldCkpIHtcclxuICAgIENvbG9yUHJpbnQobnMsIFsnUmVkMScsIGBTVVBFUiBIQUNLIEVSUk9SOiBVbmFibGUgdG8gaGFjayAke3RhcmdldH0gd2l0aG91dCByb290IGFjY2Vzc2BdKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG5cclxuICAgIC8vIGNvcHkgaGd3IHNjcmlwdHMgdG8gc2xhdmUgbWFjaGluZXNcclxuICAgIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcclxuICAgICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICAgIG5zLnNjcChbJ2hhY2suanMnLCAnZ3Jvdy5qcycsICd3ZWFrZW4uanMnXSwgcyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgY3ljbGUobnMsIHRhcmdldCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"exp.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"int.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"@ns\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    for (const faction of ns.singularity.checkFactionInvitations()) {\\r\\n        ns.singularity.joinFaction(faction);\\r\\n    }\\r\\n    ns.singularity.softReset(ns.getScriptName());\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEI7QUF5QjVCLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEtBQUssTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQzVELEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBR0QsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbi8vIFx0bnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcblxyXG4vLyAgIGNvbnN0IHN0YXJ0aW5nSW50ID0gbnMuZ2V0UGxheWVyKCkuZXhwLmludGVsbGlnZW5jZTtcclxuXHJcbi8vIFx0Zm9yICg7IDspIHtcclxuLy8gXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7IGkrKykge1xyXG4vLyBcdFx0XHRucy5zaW5ndWxhcml0eS50cmF2ZWxUb0NpdHkoJ0Nob25ncWluZycpO1xyXG4vLyBcdFx0XHRucy5zaW5ndWxhcml0eS50cmF2ZWxUb0NpdHkoJ05ldyBUb2t5bycpO1xyXG4vLyBcdFx0XHRucy5zaW5ndWxhcml0eS50cmF2ZWxUb0NpdHkoJ0lzaGltYScpO1xyXG4vLyBcdFx0fVxyXG4vLyBcdFx0YXdhaXQgbnMuc2xlZXAoMCk7XHJcblxyXG4vLyAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgPCAxMDAwMDAwKSBicmVhaztcclxuLy8gXHR9XHJcblxyXG4vLyAgIGNvbnN0IGVuZGluZ0ludCA9IG5zLmdldFBsYXllcigpLmV4cC5pbnRlbGxpZ2VuY2U7XHJcblxyXG4vLyAgIG5zLnRwcmludGYoYENvbXBsZXRlZCBUcmF2ZWwgLSBHYWluZWQgJHtlbmRpbmdJbnQgLSBzdGFydGluZ0ludH0gSW50ZWxsaWdlbmNlIEVYUGApO1xyXG4vLyB9XHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGZvciAoY29uc3QgZmFjdGlvbiBvZiBucy5zaW5ndWxhcml0eS5jaGVja0ZhY3Rpb25JbnZpdGF0aW9ucygpKSB7XHJcbiAgICAgICAgbnMuc2luZ3VsYXJpdHkuam9pbkZhY3Rpb24oZmFjdGlvbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5zLnNpbmd1bGFyaXR5LnNvZnRSZXNldChucy5nZXRTY3JpcHROYW1lKCkpO1xyXG59Il19\",\"filename\":\"int.js\",\"server\":\"home\"}}],[\"ka.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    for (const s of servers) {\\r\\n        const scripts = ns.ps(s);\\r\\n        for (const script of scripts) {\\r\\n            // ns.tprintf(`killing ${s}:${script.filename}`)\\r\\n            if (script.filename !== 'ka.js')\\r\\n                ns.kill(script.pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxLQUFJLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUN0QixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzVCLGdEQUFnRDtZQUNoRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssT0FBTztnQkFDN0IsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsU2VydmVycyB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcblxyXG4gIGZvcihjb25zdCBzIG9mIHNlcnZlcnMpIHtcclxuICAgIGNvbnN0IHNjcmlwdHMgPSBucy5wcyhzKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHNjcmlwdCBvZiBzY3JpcHRzKSB7XHJcbiAgICAgIC8vIG5zLnRwcmludGYoYGtpbGxpbmcgJHtzfToke3NjcmlwdC5maWxlbmFtZX1gKVxyXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lICE9PSAna2EuanMnKVxyXG4gICAgICAgIG5zLmtpbGwoc2NyaXB0LnBpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"ka.js\",\"server\":\"home\"}}],[\"kh.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    const servers = getAllServers(ns);\\r\\n    const hackPIDs = [];\\r\\n    const growPIDs = [];\\r\\n    const weakenPIDs = [];\\r\\n    for (const s of servers) {\\r\\n        const scripts = ns.ps(s);\\r\\n        for (const script of scripts) {\\r\\n            if (script.filename === 'simple-hack.js' || script.filename === 'super-hack.js') {\\r\\n                ns.kill(script.pid);\\r\\n                ns.tprintf(`Killed Hack Controller`);\\r\\n            }\\r\\n            if (script.filename === 'hack.js')\\r\\n                hackPIDs.push(script.pid);\\r\\n            if (script.filename === 'grow.js')\\r\\n                growPIDs.push(script.pid);\\r\\n            if (script.filename === 'weaken.js')\\r\\n                weakenPIDs.push(script.pid);\\r\\n        }\\r\\n    }\\r\\n    hackPIDs.map(pid => ns.kill(pid));\\r\\n    ns.tprintf(`Killed ${hackPIDs.length} Hack Scripts`);\\r\\n    await ns.sleep(1000);\\r\\n    growPIDs.map(pid => ns.kill(pid));\\r\\n    ns.tprintf(`Killed ${growPIDs.length} Grow Scripts`);\\r\\n    await ns.sleep(1000);\\r\\n    weakenPIDs.map(pid => ns.kill(pid));\\r\\n    ns.tprintf(`Killed ${weakenPIDs.length} Weaken Scripts`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxDLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztJQUM5QixNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDOUIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO0lBRWhDLEtBQUksTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssZUFBZSxFQUFFO2dCQUMvRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQ3RDO1lBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVM7Z0JBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTO2dCQUMvQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU1QixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssV0FBVztnQkFDakMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7S0FDRjtJQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFFBQVEsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVyQixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFRLENBQUMsTUFBTSxlQUFlLENBQUMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBVSxDQUFDLE1BQU0saUJBQWlCLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMgfSBmcm9tIFwidXRpbFwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xyXG5cclxuICBjb25zdCBoYWNrUElEczogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCBncm93UElEczogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCB3ZWFrZW5QSURzOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICBmb3IoY29uc3QgcyBvZiBzZXJ2ZXJzKSB7XHJcbiAgICBjb25zdCBzY3JpcHRzID0gbnMucHMocyk7XHJcblxyXG4gICAgZm9yIChjb25zdCBzY3JpcHQgb2Ygc2NyaXB0cykge1xyXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lID09PSAnc2ltcGxlLWhhY2suanMnIHx8IHNjcmlwdC5maWxlbmFtZSA9PT0gJ3N1cGVyLWhhY2suanMnKSB7XHJcbiAgICAgICAgbnMua2lsbChzY3JpcHQucGlkKTtcclxuICAgICAgICBucy50cHJpbnRmKGBLaWxsZWQgSGFjayBDb250cm9sbGVyYCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzY3JpcHQuZmlsZW5hbWUgPT09ICdoYWNrLmpzJylcclxuICAgICAgICBoYWNrUElEcy5wdXNoKHNjcmlwdC5waWQpO1xyXG5cclxuICAgICAgaWYgKHNjcmlwdC5maWxlbmFtZSA9PT0gJ2dyb3cuanMnKVxyXG4gICAgICAgIGdyb3dQSURzLnB1c2goc2NyaXB0LnBpZCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lID09PSAnd2Vha2VuLmpzJylcclxuICAgICAgICB3ZWFrZW5QSURzLnB1c2goc2NyaXB0LnBpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGhhY2tQSURzLm1hcChwaWQgPT4gbnMua2lsbChwaWQpKTtcclxuICBucy50cHJpbnRmKGBLaWxsZWQgJHtoYWNrUElEcy5sZW5ndGh9IEhhY2sgU2NyaXB0c2ApO1xyXG4gIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xyXG5cclxuICBncm93UElEcy5tYXAocGlkID0+IG5zLmtpbGwocGlkKSk7XHJcbiAgbnMudHByaW50ZihgS2lsbGVkICR7Z3Jvd1BJRHMubGVuZ3RofSBHcm93IFNjcmlwdHNgKTtcclxuICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuXHJcbiAgd2Vha2VuUElEcy5tYXAocGlkID0+IG5zLmtpbGwocGlkKSk7XHJcbiAgbnMudHByaW50ZihgS2lsbGVkICR7d2Vha2VuUElEcy5sZW5ndGh9IFdlYWtlbiBTY3JpcHRzYCk7XHJcbn1cclxuIl19\",\"filename\":\"kh.js\",\"server\":\"home\"}}],[\"ll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle, ColorPrint } from \\\"tables\\\";\\r\\nexport async function main(ns) {\\r\\n    const files = ns.ls(ns.getHostname());\\r\\n    // const exes = files.filter(f => f.includes('.exe'));\\r\\n    // ns.tprintf(\\\"============ EXECUTABLES =============\\\");\\r\\n    // for (const f of exes)\\r\\n    //   ns.tprintf(`${f}`);\\r\\n    // const scripts = files.filter(f => f.includes('.js'));\\r\\n    // ns.tprintf('');\\r\\n    // ns.tprintf(\\\"============== SCRIPTS ===============\\\");\\r\\n    // for (const f of scripts)\\r\\n    //   ns.tprintf(`${f}`);\\r\\n    // const misc = files.filter(f => !(f.includes('.exe') || f.includes('.js')));\\r\\n    // ns.tprintf('');\\r\\n    // ns.tprintf(\\\"=============== MISC =================\\\");\\r\\n    // for (const f of misc)\\r\\n    //   ns.tprintf(`${f}`);\\r\\n    const scripts = files.filter(f => f.includes('.js'));\\r\\n    const data = scripts.map(f => {\\r\\n        return [\\r\\n            ` ${f}`,\\r\\n            ns.formatRam(ns.getScriptRam(f)).padStart(9),\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Script', width: 20 },\\r\\n        { header: '      RAM', width: 10 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV0QyxzREFBc0Q7SUFDdEQsd0RBQXdEO0lBQ3hELHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFFeEIsd0RBQXdEO0lBQ3hELGtCQUFrQjtJQUNsQix3REFBd0Q7SUFDeEQsMkJBQTJCO0lBQzNCLHdCQUF3QjtJQUV4Qiw4RUFBOEU7SUFDOUUsa0JBQWtCO0lBQ2xCLHdEQUF3RDtJQUN4RCx3QkFBd0I7SUFDeEIsd0JBQXdCO0lBRXhCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFckQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMzQixPQUFPO1lBQ0wsSUFBSSxDQUFDLEVBQUU7WUFDUCxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzdDLENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sT0FBTyxHQUFHO1FBQ2QsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDaEMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7S0FDbkMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IFByaW50VGFibGUsIERlZmF1bHRTdHlsZSwgQ29sb3JQcmludCB9IGZyb20gXCJ0YWJsZXNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGZpbGVzID0gbnMubHMobnMuZ2V0SG9zdG5hbWUoKSk7XHJcblxyXG4gIC8vIGNvbnN0IGV4ZXMgPSBmaWxlcy5maWx0ZXIoZiA9PiBmLmluY2x1ZGVzKCcuZXhlJykpO1xyXG4gIC8vIG5zLnRwcmludGYoXCI9PT09PT09PT09PT0gRVhFQ1VUQUJMRVMgPT09PT09PT09PT09PVwiKTtcclxuICAvLyBmb3IgKGNvbnN0IGYgb2YgZXhlcylcclxuICAvLyAgIG5zLnRwcmludGYoYCR7Zn1gKTtcclxuXHJcbiAgLy8gY29uc3Qgc2NyaXB0cyA9IGZpbGVzLmZpbHRlcihmID0+IGYuaW5jbHVkZXMoJy5qcycpKTtcclxuICAvLyBucy50cHJpbnRmKCcnKTtcclxuICAvLyBucy50cHJpbnRmKFwiPT09PT09PT09PT09PT0gU0NSSVBUUyA9PT09PT09PT09PT09PT1cIik7XHJcbiAgLy8gZm9yIChjb25zdCBmIG9mIHNjcmlwdHMpXHJcbiAgLy8gICBucy50cHJpbnRmKGAke2Z9YCk7XHJcblxyXG4gIC8vIGNvbnN0IG1pc2MgPSBmaWxlcy5maWx0ZXIoZiA9PiAhKGYuaW5jbHVkZXMoJy5leGUnKSB8fCBmLmluY2x1ZGVzKCcuanMnKSkpO1xyXG4gIC8vIG5zLnRwcmludGYoJycpO1xyXG4gIC8vIG5zLnRwcmludGYoXCI9PT09PT09PT09PT09PT0gTUlTQyA9PT09PT09PT09PT09PT09PVwiKTtcclxuICAvLyBmb3IgKGNvbnN0IGYgb2YgbWlzYylcclxuICAvLyAgIG5zLnRwcmludGYoYCR7Zn1gKTtcclxuXHJcbiAgY29uc3Qgc2NyaXB0cyA9IGZpbGVzLmZpbHRlcihmID0+IGYuaW5jbHVkZXMoJy5qcycpKTtcclxuXHJcbiAgY29uc3QgZGF0YSA9IHNjcmlwdHMubWFwKGYgPT4ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCAke2Z9YCxcclxuICAgICAgbnMuZm9ybWF0UmFtKG5zLmdldFNjcmlwdFJhbShmKSkucGFkU3RhcnQoOSksXHJcbiAgICBdXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGNvbHVtbnMgPSBbXHJcbiAgICB7IGhlYWRlcjogJyBTY3JpcHQnLCB3aWR0aDogMjAgfSxcclxuICAgIHsgaGVhZGVyOiAnICAgICAgUkFNJywgd2lkdGg6IDEwIH0sXHJcbiAgXTtcclxuXHJcbiAgUHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG59XHJcbiJdfQ==\",\"filename\":\"ll.js\",\"server\":\"home\"}}],[\"pserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nexport async function main(ns) {\\r\\n    const ramsizes = [];\\r\\n    for (let i = 0; i < 21; i++) {\\r\\n        ramsizes.push(Math.pow(2, i));\\r\\n    }\\r\\n    let maxSize = 0;\\r\\n    const data = ramsizes.map(sz => {\\r\\n        if (ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') && sz > maxSize)\\r\\n            maxSize = sz;\\r\\n        return [\\r\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: ns.formatRam(sz).padStart(9) },\\r\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: ns.formatNumber(ns.getPurchasedServerCost(sz), 3, 1000, true).padStart(11) },\\r\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: Math.log2(sz).toString() },\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: '      RAM', width: 10 },\\r\\n        { header: '       Cost', width: 12 },\\r\\n        { header: '       pow', width: 12 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n    if (ns.args.length > 1) {\\r\\n        const purchasedServers = ns.getPurchasedServers().sort((a, b) => {\\r\\n            const aval = Number(a.split('-')[1]);\\r\\n            const bval = Number(b.split('-')[1]);\\r\\n            return aval - bval;\\r\\n        });\\r\\n        let newServerNumber = 1;\\r\\n        if (purchasedServers.length > 0)\\r\\n            newServerNumber = Number(purchasedServers[purchasedServers.length - 1].split('-')[1]) + 1;\\r\\n        ns.tprintf(`Purchasing Server PS-${newServerNumber} with ${ns.formatRam(maxSize)} RAM`);\\r\\n        ns.purchaseServer(`PS-${newServerNumber.toString().padStart(2, '0')}`, maxSize);\\r\\n    }\\r\\n    else if (ns.args.length > 0) {\\r\\n        while (ns.getPurchasedServerCost(maxSize) <= ns.getServerMoneyAvailable('home') && ns.getPurchasedServers().length < 25 && maxSize === Math.pow(2, 20)) {\\r\\n            const purchasedServers = ns.getPurchasedServers().sort((a, b) => {\\r\\n                const aval = Number(a.split('-')[1]);\\r\\n                const bval = Number(b.split('-')[1]);\\r\\n                return aval - bval;\\r\\n            });\\r\\n            let newServerNumber = 1;\\r\\n            if (purchasedServers.length > 0)\\r\\n                newServerNumber = Number(purchasedServers[purchasedServers.length - 1].split('-')[1]) + 1;\\r\\n            ns.tprintf(`Purchasing Server PS-${newServerNumber} with ${ns.formatRam(maxSize)} RAM`);\\r\\n            ns.purchaseServer(`PS-${newServerNumber.toString().padStart(2, '0')}`, maxSize);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztJQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM5QjtJQUVELElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNoQixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQzdCLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsT0FBTztZQUNyRixPQUFPLEdBQUcsRUFBRSxDQUFDO1FBRWYsT0FBTztZQUNMLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0SSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0s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QUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLElBQUksR0FBRyxJQUFJLENBQUM7WUFDckIsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDN0IsZUFBZSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO1lBRXhGLEVBQUUsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLGVBQWUsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RixFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNqRjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBQcmludFRhYmxlLCBDb2xvclByaW50LCBEZWZhdWx0U3R5bGUgfSBmcm9tIFwidGFibGVzXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCByYW1zaXplczogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDIxOyBpKyspIHtcclxuICAgIHJhbXNpemVzLnB1c2goTWF0aC5wb3coMiwgaSkpXHJcbiAgfVxyXG5cclxuICBsZXQgbWF4U2l6ZSA9IDA7XHJcbiAgY29uc3QgZGF0YSA9IHJhbXNpemVzLm1hcChzeiA9PiB7XHJcbiAgICBpZiAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeikgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSAmJiBzeiA+IG1heFNpemUpXHJcbiAgICAgIG1heFNpemUgPSBzejtcclxuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvbG9yOiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHN6KSA8PSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpID8gJ2dyZWVuJyA6ICd3aGl0ZScsIHRleHQ6IG5zLmZvcm1hdFJhbShzeikucGFkU3RhcnQoOSkgfSxcclxuICAgICAgeyBjb2xvcjogbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeikgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA/ICdncmVlbicgOiAnd2hpdGUnLCB0ZXh0OiBucy5mb3JtYXROdW1iZXIobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeiksIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDExKSB9LFxyXG4gICAgICB7IGNvbG9yOiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHN6KSA8PSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpID8gJ2dyZWVuJyA6ICd3aGl0ZScsIHRleHQ6IE1hdGgubG9nMihzeikudG9TdHJpbmcoKSB9LFxyXG4gICAgXVxyXG4gIH0pO1xyXG5cclxuXHRjb25zdCBjb2x1bW5zID0gW1xyXG5cdFx0eyBoZWFkZXI6ICcgICAgICBSQU0nLCB3aWR0aDogMTAgfSxcclxuXHRcdHsgaGVhZGVyOiAnICAgICAgIENvc3QnLCB3aWR0aDogMTIgfSxcclxuICAgIHsgaGVhZGVyOiAnICAgICAgIHBvdycsIHdpZHRoOiAxMiB9XHJcblx0XTtcclxuXHJcblx0UHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG5cclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxKSB7XHJcbiAgICBjb25zdCBwdXJjaGFzZWRTZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgY29uc3QgYXZhbCA9IE51bWJlcihhLnNwbGl0KCctJylbMV0pO1xyXG4gICAgICBjb25zdCBidmFsID0gTnVtYmVyKGIuc3BsaXQoJy0nKVsxXSk7XHJcbiAgICAgIHJldHVybiBhdmFsIC0gYnZhbDtcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBuZXdTZXJ2ZXJOdW1iZXIgPSAxO1xyXG4gICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID4gMClcclxuICAgICAgbmV3U2VydmVyTnVtYmVyID0gTnVtYmVyKHB1cmNoYXNlZFNlcnZlcnNbcHVyY2hhc2VkU2VydmVycy5sZW5ndGgtMV0uc3BsaXQoJy0nKVsxXSkrMTtcclxuXHJcbiAgICBucy50cHJpbnRmKGBQdXJjaGFzaW5nIFNlcnZlciBQUy0ke25ld1NlcnZlck51bWJlcn0gd2l0aCAke25zLmZvcm1hdFJhbShtYXhTaXplKX0gUkFNYCk7XHJcbiAgICBucy5wdXJjaGFzZVNlcnZlcihgUFMtJHtuZXdTZXJ2ZXJOdW1iZXIudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWAsIG1heFNpemUpO1xyXG4gIH0gZWxzZSBpZiAobnMuYXJncy5sZW5ndGggPiAwKSB7XHJcbiAgICB3aGlsZSAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChtYXhTaXplKSA8PSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpICYmIG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGggPCAyNSAmJiBtYXhTaXplID09PSBNYXRoLnBvdygyLCAyMCkpIHtcclxuICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXZhbCA9IE51bWJlcihhLnNwbGl0KCctJylbMV0pO1xyXG4gICAgICAgIGNvbnN0IGJ2YWwgPSBOdW1iZXIoYi5zcGxpdCgnLScpWzFdKTtcclxuICAgICAgICByZXR1cm4gYXZhbCAtIGJ2YWw7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IG5ld1NlcnZlck51bWJlciA9IDE7XHJcbiAgICAgIGlmIChwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgbmV3U2VydmVyTnVtYmVyID0gTnVtYmVyKHB1cmNoYXNlZFNlcnZlcnNbcHVyY2hhc2VkU2VydmVycy5sZW5ndGgtMV0uc3BsaXQoJy0nKVsxXSkrMTtcclxuXHJcbiAgICAgIG5zLnRwcmludGYoYFB1cmNoYXNpbmcgU2VydmVyIFBTLSR7bmV3U2VydmVyTnVtYmVyfSB3aXRoICR7bnMuZm9ybWF0UmFtKG1heFNpemUpfSBSQU1gKTtcclxuICAgICAgbnMucHVyY2hhc2VTZXJ2ZXIoYFBTLSR7bmV3U2VydmVyTnVtYmVyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gLCBtYXhTaXplKTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"pserver.js\",\"server\":\"home\"}}],[\"rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint, DefaultStyle, PrintTable } from \\\"./tables\\\";\\r\\nimport { ALL_FACTIONS } from \\\"./util\\\";\\r\\nfunction getTotalFactionRep(ns, faction) {\\r\\n    return ns.singularity.getFactionRep(faction) + ns.formulas.reputation.calculateFavorToRep(ns.singularity.getFactionFavor(faction));\\r\\n}\\r\\nfunction getColor(rep, target) {\\r\\n    if (rep >= target)\\r\\n        return 'green';\\r\\n    if (rep > 0)\\r\\n        return 'Gold1';\\r\\n    return 'white';\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    // const target = 'ECorp';\\r\\n    const targetRep = ns.formulas.reputation.calculateFavorToRep(150);\\r\\n    // const currentRep = ns.singularity.getFactionRep(target) + ns.formulas.reputation.calculateFavorToRep(ns.singularity.getFactionFavor(target));\\r\\n    // const repNeeded = targetRep - currentRep;\\r\\n    // ns.tprintf(`Total rep needed for 150 fav: ${ns.formatNumber(targetRep, 0, 1000)}`);\\r\\n    // ns.tprintf(`Total rep accumulated: ${ns.formatNumber(currentRep, 3, 1000)}`);\\r\\n    // ns.tprintf(`Rep needed this round to get to 150 rep: ${ns.formatNumber(repNeeded, 3, 1000)}`);\\r\\n    const data = ALL_FACTIONS.sort((a, b) => getTotalFactionRep(ns, b) - getTotalFactionRep(ns, a)).map((f) => {\\r\\n        const totalRep = getTotalFactionRep(ns, f);\\r\\n        const repNeeded = Math.max(targetRep - totalRep, 0);\\r\\n        return [\\r\\n            { color: getColor(totalRep, targetRep), text: ` ${f}` },\\r\\n            { color: getColor(totalRep, targetRep), text: ns.formatNumber(totalRep, 1, 1000, true).padStart(8) },\\r\\n            { color: getColor(totalRep, targetRep), text: ns.formatNumber(repNeeded, 1, 1000, true).padStart(8) }\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Faction', width: 30 },\\r\\n        { header: '     Rep', width: 9 },\\r\\n        { header: '  Needed', width: 9 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUV0QyxTQUFTLGtCQUFrQixDQUFDLEVBQU0sRUFBRSxPQUFlO0lBQ2pELE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNySSxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBVyxFQUFFLE1BQWM7SUFDM0MsSUFBSSxHQUFHLElBQUksTUFBTTtRQUFFLE9BQU8sT0FBTyxDQUFDO0lBQ2xDLElBQUksR0FBRyxHQUFHLENBQUM7UUFBRSxPQUFPLE9BQU8sQ0FBQztJQUM1QixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwQkFBMEI7SUFDMUIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEUsZ0pBQWdKO0lBQ2hKLDRDQUE0QztJQUM1QyxzRkFBc0Y7SUFDdEYsZ0ZBQWdGO0lBQ2hGLGlHQUFpRztJQUlqRyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3hHLE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEQsT0FBTztZQUNMLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDdkQsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEcsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7U0FDdEcsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxPQUFPLEdBQUc7UUFDaEIsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDakMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDOUIsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7S0FDbEMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IENvbG9yUHJpbnQsIERlZmF1bHRTdHlsZSwgUHJpbnRUYWJsZSB9IGZyb20gXCIuL3RhYmxlc1wiO1xyXG5pbXBvcnQgeyBBTExfRkFDVElPTlMgfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5mdW5jdGlvbiBnZXRUb3RhbEZhY3Rpb25SZXAobnM6IE5TLCBmYWN0aW9uOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gIHJldHVybiBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKGZhY3Rpb24pICsgbnMuZm9ybXVsYXMucmVwdXRhdGlvbi5jYWxjdWxhdGVGYXZvclRvUmVwKG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25GYXZvcihmYWN0aW9uKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbG9yKHJlcDogbnVtYmVyLCB0YXJnZXQ6IG51bWJlcikge1xyXG4gIGlmIChyZXAgPj0gdGFyZ2V0KSByZXR1cm4gJ2dyZWVuJztcclxuICBpZiAocmVwID4gMCkgcmV0dXJuICdHb2xkMSc7XHJcbiAgcmV0dXJuICd3aGl0ZSc7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIC8vIGNvbnN0IHRhcmdldCA9ICdFQ29ycCc7XHJcbiAgY29uc3QgdGFyZ2V0UmVwID0gbnMuZm9ybXVsYXMucmVwdXRhdGlvbi5jYWxjdWxhdGVGYXZvclRvUmVwKDE1MCk7XHJcbiAgLy8gY29uc3QgY3VycmVudFJlcCA9IG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAodGFyZ2V0KSArIG5zLmZvcm11bGFzLnJlcHV0YXRpb24uY2FsY3VsYXRlRmF2b3JUb1JlcChucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uRmF2b3IodGFyZ2V0KSk7XHJcbiAgLy8gY29uc3QgcmVwTmVlZGVkID0gdGFyZ2V0UmVwIC0gY3VycmVudFJlcDtcclxuICAvLyBucy50cHJpbnRmKGBUb3RhbCByZXAgbmVlZGVkIGZvciAxNTAgZmF2OiAke25zLmZvcm1hdE51bWJlcih0YXJnZXRSZXAsIDAsIDEwMDApfWApO1xyXG4gIC8vIG5zLnRwcmludGYoYFRvdGFsIHJlcCBhY2N1bXVsYXRlZDogJHtucy5mb3JtYXROdW1iZXIoY3VycmVudFJlcCwgMywgMTAwMCl9YCk7XHJcbiAgLy8gbnMudHByaW50ZihgUmVwIG5lZWRlZCB0aGlzIHJvdW5kIHRvIGdldCB0byAxNTAgcmVwOiAke25zLmZvcm1hdE51bWJlcihyZXBOZWVkZWQsIDMsIDEwMDApfWApO1xyXG5cclxuXHJcblxyXG4gIGNvbnN0IGRhdGEgPSBBTExfRkFDVElPTlMuc29ydCgoYSwgYikgPT4gZ2V0VG90YWxGYWN0aW9uUmVwKG5zLCBiKSAtIGdldFRvdGFsRmFjdGlvblJlcChucywgYSkpLm1hcCgoZikgPT4ge1xyXG4gICAgY29uc3QgdG90YWxSZXAgPSBnZXRUb3RhbEZhY3Rpb25SZXAobnMsIGYpO1xyXG4gICAgY29uc3QgcmVwTmVlZGVkID0gTWF0aC5tYXgodGFyZ2V0UmVwIC0gdG90YWxSZXAsIDApO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyBjb2xvcjogZ2V0Q29sb3IodG90YWxSZXAsIHRhcmdldFJlcCksIHRleHQ6IGAgJHtmfWAgfSxcclxuICAgICAgeyBjb2xvcjogZ2V0Q29sb3IodG90YWxSZXAsIHRhcmdldFJlcCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0b3RhbFJlcCwgMSwgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoOCkgfSxcclxuICAgICAgeyBjb2xvcjogZ2V0Q29sb3IodG90YWxSZXAsIHRhcmdldFJlcCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcihyZXBOZWVkZWQsIDEsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDgpIH1cclxuICAgIF07XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGNvbHVtbnMgPSBbXHJcblx0XHR7IGhlYWRlcjogJyBGYWN0aW9uJywgd2lkdGg6IDMwIH0sXHJcblx0XHR7IGhlYWRlcjogJyAgICAgUmVwJywgd2lkdGg6IDkgfSxcclxuICAgIHsgaGVhZGVyOiAnICBOZWVkZWQnLCB3aWR0aDogOSB9LFxyXG5cdF07XHJcblxyXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxufVxyXG4iXX0=\",\"filename\":\"rep.js\",\"server\":\"home\"}}],[\"super-break.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"./util\\\";\\r\\nfunction isHackable(ns, s, pCount) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return false;\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    const portsRequired = ns.getServerNumPortsRequired(s);\\r\\n    if (hackLv >= hackReq && portsRequired <= pCount)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nfunction crackAndNuke(ns, s) {\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\r\\n        ns.brutessh(s);\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\r\\n        ns.ftpcrack(s);\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\r\\n        ns.relaysmtp(s);\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\r\\n        ns.httpworm(s);\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\r\\n        ns.sqlinject(s);\\r\\n    ns.nuke(s);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    ns.singularity.purchaseTor();\\r\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\r\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\r\\n        ns.singularity.purchaseProgram(crack);\\r\\n        if (ns.fileExists(crack, \\\"home\\\"))\\r\\n            count++;\\r\\n        return count;\\r\\n    }, 0);\\r\\n    for (const s of servers) {\\r\\n        if (isHackable(ns, s, portCrackCount)) {\\r\\n            ns.tprintf(`Cracking ${s}`);\\r\\n            crackAndNuke(ns, s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwZXItYnJlYWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3VwZXItYnJlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUV2QyxTQUFTLFVBQVUsQ0FBQyxFQUFNLEVBQUUsQ0FBUyxFQUFFLE1BQWM7SUFDbkQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXRDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDcEMsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxhQUFhLElBQUksTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTlELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEVBQU0sRUFBRSxDQUFTO0lBQ3JDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFNUQsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTdCLE1BQU0sVUFBVSxHQUFHLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RHLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDeEQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7WUFBRSxLQUFLLEVBQUUsQ0FBQztRQUMxQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVOLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO1FBQ3ZCLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUU7WUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUIsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBnZXRBbGxTZXJ2ZXJzIH0gZnJvbSBcIi4vdXRpbFwiO1xyXG5cclxuZnVuY3Rpb24gaXNIYWNrYWJsZShuczogTlMsIHM6IHN0cmluZywgcENvdW50OiBudW1iZXIpOiBib29sZWFuIHtcclxuICBpZiAobnMuaGFzUm9vdEFjY2VzcyhzKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBjb25zdCBoYWNrUmVxID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocyk7XHJcbiAgY29uc3QgaGFja0x2ID0gbnMuZ2V0SGFja2luZ0xldmVsKCk7XHJcbiAgY29uc3QgcG9ydHNSZXF1aXJlZCA9IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQocyk7XHJcblxyXG4gIGlmIChoYWNrTHYgPj0gaGFja1JlcSAmJiBwb3J0c1JlcXVpcmVkIDw9IHBDb3VudCkgcmV0dXJuIHRydWU7XHJcblxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JhY2tBbmROdWtlKG5zOiBOUywgczogc3RyaW5nKTogdm9pZCB7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJCcnV0ZVNTSC5leGVcIiwgXCJob21lXCIpKSBucy5icnV0ZXNzaChzKTtcclxuICBpZiAobnMuZmlsZUV4aXN0cyhcIkZUUENyYWNrLmV4ZVwiLCBcImhvbWVcIikpIG5zLmZ0cGNyYWNrKHMpO1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwicmVsYXlTTVRQLmV4ZVwiLCBcImhvbWVcIikpIG5zLnJlbGF5c210cChzKTtcclxuICBpZiAobnMuZmlsZUV4aXN0cyhcIkhUVFBXb3JtLmV4ZVwiLCBcImhvbWVcIikpIG5zLmh0dHB3b3JtKHMpO1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiLCBcImhvbWVcIikpIG5zLnNxbGluamVjdChzKTtcclxuXHJcbiAgbnMubnVrZShzKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xyXG5cclxuICBucy5zaW5ndWxhcml0eS5wdXJjaGFzZVRvcigpO1xyXG5cclxuICBjb25zdCBwb3J0Q3JhY2tzID0gW1wiQnJ1dGVTU0guZXhlXCIsIFwiRlRQQ3JhY2suZXhlXCIsIFwicmVsYXlTTVRQLmV4ZVwiLCBcIkhUVFBXb3JtLmV4ZVwiLCBcIlNRTEluamVjdC5leGVcIl07XHJcbiAgY29uc3QgcG9ydENyYWNrQ291bnQgPSBwb3J0Q3JhY2tzLnJlZHVjZSgoY291bnQsIGNyYWNrKSA9PiB7XHJcbiAgICBucy5zaW5ndWxhcml0eS5wdXJjaGFzZVByb2dyYW0oY3JhY2spO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoY3JhY2ssIFwiaG9tZVwiKSkgY291bnQrKztcclxuICAgIHJldHVybiBjb3VudDtcclxuICB9LCAwKTtcclxuXHJcbiAgZm9yIChjb25zdCBzIG9mIHNlcnZlcnMpIHtcclxuICAgIGlmIChpc0hhY2thYmxlKG5zLCBzLCBwb3J0Q3JhY2tDb3VudCkpIHtcclxuICAgICAgbnMudHByaW50ZihgQ3JhY2tpbmcgJHtzfWApO1xyXG4gICAgICBjcmFja0FuZE51a2UobnMsIHMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"super-break.js\",\"server\":\"home\"}}],[\"super-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, waitForHGWScripts } from \\\"util\\\";\\r\\nimport { ColorPrint } from \\\"./tables\\\";\\r\\n// TODO:\\r\\n// [x] Use Home RAM, leaving 32GB free for other execution\\r\\n// [x] Instead of W / GW / HWGW progression, start directly on HWGW and account for increased Grow and Weaken need\\r\\n// [x] Implement multiple batches in a single cycle when there are surplus threads\\r\\n// [ ] Re-check hackable servers every round\\r\\n// [x] Incorporate formulas if available\\r\\n// [ ] Purchase new servers?\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 10;\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers; // This script autocompletes the list of servers.\\r\\n}\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction getScriptCalls(batches) {\\r\\n    const scripts = [];\\r\\n    for (const batch of batches) {\\r\\n        if (batch.growThreads > 0) {\\r\\n            scripts.push({\\r\\n                script: \\\"grow.js\\\",\\r\\n                threads: batch.growThreads,\\r\\n                offset: batch.growMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.growWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.growWeakenThreads,\\r\\n                offset: batch.growWeakenMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"hack.js\\\",\\r\\n                threads: batch.hackThreads,\\r\\n                offset: batch.hackMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.hackWeakenThreads,\\r\\n                offset: batch.hackWeakenMsBuf\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return scripts.sort((a, b) => b.threads - a.threads);\\r\\n}\\r\\nasync function cycle(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    let totalThreads = getTotalThreads(ns, slaves);\\r\\n    const batches = [];\\r\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\r\\n    const weakenTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\r\\n    // first batch is always GW if the server is not already at min security / max money\\r\\n    // find out how many threads are required to grow to max\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\r\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\r\\n        const batch = new HackBatch();\\r\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        const growMult = ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1);\\r\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n            growSecIncrease = GROW_SEC * totalThreads;\\r\\n            batch.growWeakenThreads = Math.min(Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC), totalThreads);\\r\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n        }\\r\\n        const batchMSOffset = baseMSOffset;\\r\\n        batch.weakenTime = weakenTime;\\r\\n        batch.growTime = growTime;\\r\\n        batch.hackTime = hackTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        batches.push(batch);\\r\\n        totalThreads -= batch.totalThreads();\\r\\n    }\\r\\n    while (totalThreads > 0) {\\r\\n        // from now on assume we are at minimum security, maximum money available\\r\\n        const mockTarget = ns.getServer(target);\\r\\n        mockTarget.hackDifficulty = ns.getServerMinSecurityLevel(target);\\r\\n        mockTarget.moneyAvailable = ns.getServerMaxMoney(target);\\r\\n        mockTarget.moneyMax = ns.getServerMaxMoney(target);\\r\\n        const batch = new HackBatch();\\r\\n        const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n        batch.weakenTime = weakenTime;\\r\\n        batch.growTime = growTime;\\r\\n        batch.hackTime = hackTime;\\r\\n        batch.hackMSBuf = batchMSOffset - batch.hackTime - MS_BETWEEN_OPERATIONS;\\r\\n        batch.hackWeakenMsBuf = batchMSOffset - batch.weakenTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        // start with hack 50%\\r\\n        batch.hackThreads = Math.ceil(.7 / ns.formulas.hacking.hackPercent(mockTarget, ns.getPlayer()));\\r\\n        let missedOnce = false;\\r\\n        while (true) {\\r\\n            if (batch.hackThreads <= 0) {\\r\\n                totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n            const hackPercent = ns.formulas.hacking.hackPercent(mockTarget, ns.getPlayer()) * batch.hackThreads;\\r\\n            const current = mockTarget.moneyAvailable;\\r\\n            const future = current - (current * hackPercent);\\r\\n            mockTarget.moneyAvailable = future;\\r\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(mockTarget, ns.getPlayer(), ns.getServerMaxMoney(target)) * 1.2);\\r\\n            mockTarget.moneyAvailable = mockTarget.moneyMax;\\r\\n            batch.gain = current - future;\\r\\n            batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, target) / WEAK_SEC);\\r\\n            batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\r\\n            if (batch.totalThreads() <= totalThreads) {\\r\\n                totalThreads -= batch.totalThreads();\\r\\n                batches.push(batch);\\r\\n                if (missedOnce)\\r\\n                    totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n            batch.hackThreads = Math.floor(batch.hackThreads * 0.75);\\r\\n            missedOnce = true;\\r\\n        }\\r\\n        // duplicate batch until there is no space left\\r\\n        const batchThreads = batch.totalThreads();\\r\\n        const additionalBatches = Math.floor(totalThreads / batchThreads);\\r\\n        for (let i = 0; i < additionalBatches; ++i) {\\r\\n            const newBatch = new HackBatch;\\r\\n            Object.assign(newBatch, batch);\\r\\n            const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n            newBatch.hackMSBuf = batchMSOffset - newBatch.hackTime - MS_BETWEEN_OPERATIONS;\\r\\n            newBatch.hackWeakenMsBuf = batchMSOffset - newBatch.weakenTime;\\r\\n            newBatch.growMSBuf = batchMSOffset - newBatch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n            newBatch.growWeakenMSBuf = batchMSOffset - newBatch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n            batches.push(newBatch);\\r\\n            totalThreads -= newBatch.totalThreads();\\r\\n            if (batches.length >= 5000) {\\r\\n                totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\r\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n    ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\r\\n    // ns.tprintf(`${target}: First Batch | ht:${batches[0].hackThreads} | hwt:${batches[0].hackWeakenThreads} | gt:${batches[0].growThreads} | gwt:${batches[0].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Second Batch | ht:${batches[1].hackThreads} | hwt:${batches[1].hackWeakenThreads} | gt:${batches[1].growThreads} | gwt:${batches[1].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Last Batch | ht:${batches[batches.length-1].hackThreads} | hwt:${batches[batches.length-1].hackWeakenThreads} | gt:${batches[batches.length-1].growThreads} | gwt:${batches[batches.length-1].growWeakenThreads}`)\\r\\n    const scripts = getScriptCalls(batches);\\r\\n    let script = scripts.shift();\\r\\n    for (const s of slaves) {\\r\\n        if (script === undefined)\\r\\n            break;\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        while (slaveThreads > 0) {\\r\\n            if (script === undefined)\\r\\n                break;\\r\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\r\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\r\\n            slaveThreads -= scriptThreads;\\r\\n            script.threads -= scriptThreads;\\r\\n            if (script.threads === 0)\\r\\n                script = scripts.shift();\\r\\n        }\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = 'nectar-net';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    if (!ns.hasRootAccess(target)) {\\r\\n        ColorPrint(ns, ['Red1', `SUPER HACK ERROR: Unable to hack ${target} without root access`]);\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        const slaves = getSlaves(ns);\\r\\n        // copy hgw scripts to slave machines\\r\\n        for (const s of slaves) {\\r\\n            if (s === 'home')\\r\\n                continue;\\r\\n            ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n        }\\r\\n        await cycle(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXBlci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxRQUFRO0FBQ1IsMERBQTBEO0FBQzFELGtIQUFrSDtBQUNsSCxrRkFBa0Y7QUFDbEYsNENBQTRDO0FBQzVDLHdDQUF3QztBQUN4Qyw0QkFBNEI7QUFFNUIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsNENBQTRDO0FBQ3BFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLHVCQUF1QjtBQUM5QyxNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUVqQyxvSkFBb0o7QUFDcEosTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFTLEVBQUUsSUFBUztJQUMvQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxpREFBaUQ7QUFDeEUsQ0FBQztBQXNCRCxNQUFNLFNBQVM7SUFDYixXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUN0QixXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUV0QixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFZixTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUNwQixTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUVwQixJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRVQsWUFBWTtRQUNWLE9BQU8sSUFBSSxD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QUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDO0lBQzFCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDN0IsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxvQ0FBb0MsTUFBTSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7UUFDM0YsT0FBTztLQUNSO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFN0IscUNBQXFDO1FBQ3JDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLE1BQU07Z0JBQUUsU0FBUztZQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZm9ybWF0VGltZSwgZ2V0U2xhdmVzLCBnZXRTbGF2ZVRocmVhZHMsIGdldFRvdGFsVGhyZWFkcywgd2FpdEZvckhHV1NjcmlwdHMgfSBmcm9tIFwidXRpbFwiO1xyXG5pbXBvcnQgeyBDb2xvclByaW50IH0gZnJvbSBcIi4vdGFibGVzXCI7XHJcblxyXG4vLyBUT0RPOlxyXG4vLyBbeF0gVXNlIEhvbWUgUkFNLCBsZWF2aW5nIDMyR0IgZnJlZSBmb3Igb3RoZXIgZXhlY3V0aW9uXHJcbi8vIFt4XSBJbnN0ZWFkIG9mIFcgLyBHVyAvIEhXR1cgcHJvZ3Jlc3Npb24sIHN0YXJ0IGRpcmVjdGx5IG9uIEhXR1cgYW5kIGFjY291bnQgZm9yIGluY3JlYXNlZCBHcm93IGFuZCBXZWFrZW4gbmVlZFxyXG4vLyBbeF0gSW1wbGVtZW50IG11bHRpcGxlIGJhdGNoZXMgaW4gYSBzaW5nbGUgY3ljbGUgd2hlbiB0aGVyZSBhcmUgc3VycGx1cyB0aHJlYWRzXHJcbi8vIFsgXSBSZS1jaGVjayBoYWNrYWJsZSBzZXJ2ZXJzIGV2ZXJ5IHJvdW5kXHJcbi8vIFt4XSBJbmNvcnBvcmF0ZSBmb3JtdWxhcyBpZiBhdmFpbGFibGVcclxuLy8gWyBdIFB1cmNoYXNlIG5ldyBzZXJ2ZXJzP1xyXG5cclxuY29uc3QgR1JPV19TRUMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDEsICdvbWVnYS1uZXQnKTtcclxuY29uc3QgV0VBS19TRUMgPSAwLjA1OyAvLyBucy53ZWFrZW5BbmFseXplKDEpO1xyXG5jb25zdCBNU19CRVRXRUVOX09QRVJBVElPTlMgPSAxMDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZShkYXRhOiBhbnksIGFyZ3M6IGFueSk6IHN0cmluZ1tdIHtcclxuICByZXR1cm4gZGF0YS5zZXJ2ZXJzOyAvLyBUaGlzIHNjcmlwdCBhdXRvY29tcGxldGVzIHRoZSBsaXN0IG9mIHNlcnZlcnMuXHJcbn1cclxuXHJcbmludGVyZmFjZSBJSGFja0JhdGNoIHtcclxuICBncm93VGhyZWFkczogbnVtYmVyO1xyXG4gIGdyb3dXZWFrZW5UaHJlYWRzOiBudW1iZXI7XHJcbiAgaGFja1RocmVhZHM6IG51bWJlcjtcclxuICBoYWNrV2Vha2VuVGhyZWFkczogbnVtYmVyO1xyXG5cclxuICBoYWNrVGltZTogbnVtYmVyO1xyXG4gIGdyb3dUaW1lOiBudW1iZXI7XHJcbiAgd2Vha2VuVGltZTogbnVtYmVyO1xyXG5cclxuICBncm93TVNCdWY6IG51bWJlcjtcclxuICBncm93V2Vha2VuTVNCdWY6IG51bWJlcjtcclxuICBoYWNrTVNCdWY6IG51bWJlcjtcclxuICBoYWNrV2Vha2VuTXNCdWY6IG51bWJlcjtcclxuXHJcbiAgZ2FpbjogbnVtYmVyO1xyXG5cclxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBIYWNrQmF0Y2ggaW1wbGVtZW50cyBJSGFja0JhdGNoIHtcclxuICBncm93VGhyZWFkcyA9IDA7XHJcbiAgZ3Jvd1dlYWtlblRocmVhZHMgPSAwO1xyXG4gIGhhY2tUaHJlYWRzID0gMDtcclxuICBoYWNrV2Vha2VuVGhyZWFkcyA9IDA7XHJcblxyXG4gIGhhY2tUaW1lID0gMDtcclxuICBncm93VGltZSA9IDA7XHJcbiAgd2Vha2VuVGltZSA9IDA7XHJcblxyXG4gIGdyb3dNU0J1ZiA9IDA7XHJcbiAgZ3Jvd1dlYWtlbk1TQnVmID0gMDtcclxuICBoYWNrTVNCdWYgPSAwO1xyXG4gIGhhY2tXZWFrZW5Nc0J1ZiA9IDA7XHJcblxyXG4gIGdhaW4gPSAwO1xyXG5cclxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdyb3dUaHJlYWRzICsgdGhpcy5ncm93V2Vha2VuVGhyZWFkcyArIHRoaXMuaGFja1RocmVhZHMgKyB0aGlzLmhhY2tXZWFrZW5UaHJlYWRzO1xyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIElTY3JpcHRDYWxsIHtcclxuICBzY3JpcHQ6IHN0cmluZztcclxuICB0aHJlYWRzOiBudW1iZXI7XHJcbiAgb2Zmc2V0OiBudW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFNjcmlwdENhbGxzKGJhdGNoZXM6IElIYWNrQmF0Y2hbXSk6IElTY3JpcHRDYWxsW10ge1xyXG4gIGNvbnN0IHNjcmlwdHM6IElTY3JpcHRDYWxsW10gPSBbXTtcclxuICBmb3IgKGNvbnN0IGJhdGNoIG9mIGJhdGNoZXMpIHtcclxuICAgIGlmIChiYXRjaC5ncm93VGhyZWFkcyA+IDApIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBzY3JpcHQ6IFwiZ3Jvdy5qc1wiLFxyXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dUaHJlYWRzLFxyXG4gICAgICAgIG9mZnNldDogYmF0Y2guZ3Jvd01TQnVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcIndlYWtlbi5qc1wiLFxyXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzLFxyXG4gICAgICAgIG9mZnNldDogYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJhdGNoLmhhY2tUaHJlYWRzKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcImhhY2suanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5oYWNrVGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmhhY2tNU0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcykge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmhhY2tXZWFrZW5Nc0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNjcmlwdHMuc29ydCgoYSwgYikgPT4gYi50aHJlYWRzIC0gYS50aHJlYWRzKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY3ljbGUobnM6IE5TLCB0YXJnZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHNsYXZlcyA9IGdldFNsYXZlcyhucyk7XHJcbiAgbGV0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgY29uc3QgYmF0Y2hlczogSUhhY2tCYXRjaFtdID0gW107XHJcblxyXG4gIGNvbnN0IGJhc2VNU09mZnNldCA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG4gIGNvbnN0IHdlYWtlblRpbWUgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBncm93VGltZSA9IE1hdGguY2VpbChucy5nZXRHcm93VGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBoYWNrVGltZSA9IE1hdGguY2VpbChucy5nZXRIYWNrVGltZSh0YXJnZXQpKTtcclxuXHJcbiAgLy8gZmlyc3QgYmF0Y2ggaXMgYWx3YXlzIEdXIGlmIHRoZSBzZXJ2ZXIgaXMgbm90IGFscmVhZHkgYXQgbWluIHNlY3VyaXR5IC8gbWF4IG1vbmV5XHJcbiAgLy8gZmluZCBvdXQgaG93IG1hbnkgdGhyZWFkcyBhcmUgcmVxdWlyZWQgdG8gZ3JvdyB0byBtYXhcclxuICBpZiAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpID4gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpIHx8XHJcbiAgICAgIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKVxyXG4gIHtcclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmFzZVdlYWtlbiA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSAtIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgY29uc3QgZ3Jvd011bHQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgKyAxKTtcclxuICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkpO1xyXG4gICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKSwgdG90YWxUaHJlYWRzKTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0O1xyXG4gICAgYmF0Y2gud2Vha2VuVGltZSA9IHdlYWtlblRpbWU7XHJcbiAgICBiYXRjaC5ncm93VGltZSA9IGdyb3dUaW1lO1xyXG4gICAgYmF0Y2guaGFja1RpbWUgPSBoYWNrVGltZTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICB0b3RhbFRocmVhZHMgLT0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgfVxyXG5cclxuICB3aGlsZSAodG90YWxUaHJlYWRzID4gMCApIHtcclxuICAgIC8vIGZyb20gbm93IG9uIGFzc3VtZSB3ZSBhcmUgYXQgbWluaW11bSBzZWN1cml0eSwgbWF4aW11bSBtb25leSBhdmFpbGFibGVcclxuICAgIGNvbnN0IG1vY2tUYXJnZXQgPSBucy5nZXRTZXJ2ZXIodGFyZ2V0KTtcclxuICAgIG1vY2tUYXJnZXQuaGFja0RpZmZpY3VsdHkgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcbiAgICBtb2NrVGFyZ2V0Lm1vbmV5QXZhaWxhYmxlID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuICAgIG1vY2tUYXJnZXQubW9uZXlNYXggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmF0Y2hNU09mZnNldCA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpO1xyXG4gICAgXHJcbiAgICBiYXRjaC53ZWFrZW5UaW1lID0gd2Vha2VuVGltZTtcclxuICAgIGJhdGNoLmdyb3dUaW1lID0gZ3Jvd1RpbWU7XHJcbiAgICBiYXRjaC5oYWNrVGltZSA9IGhhY2tUaW1lO1xyXG5cclxuICAgIGJhdGNoLmhhY2tNU0J1ZiA9ICBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2guaGFja1RpbWUgLSBNU19CRVRXRUVOX09QRVJBVElPTlM7XHJcbiAgICBiYXRjaC5oYWNrV2Vha2VuTXNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2gud2Vha2VuVGltZTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIC8vIHN0YXJ0IHdpdGggaGFjayA1MCVcclxuICAgIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKC43IC8gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChtb2NrVGFyZ2V0LCBucy5nZXRQbGF5ZXIoKSkpO1xyXG5cclxuICAgIGxldCBtaXNzZWRPbmNlID0gZmFsc2U7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMgPD0gMCkge1xyXG4gICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChtb2NrVGFyZ2V0LCBucy5nZXRQbGF5ZXIoKSkgKiBiYXRjaC5oYWNrVGhyZWFkcztcclxuICAgICAgY29uc3QgY3VycmVudDogbnVtYmVyID0gbW9ja1RhcmdldC5tb25leUF2YWlsYWJsZTtcclxuICAgICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gICAgICBtb2NrVGFyZ2V0Lm1vbmV5QXZhaWxhYmxlID0gZnV0dXJlO1xyXG4gICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5mb3JtdWxhcy5oYWNraW5nLmdyb3dUaHJlYWRzKG1vY2tUYXJnZXQsIG5zLmdldFBsYXllcigpLCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKSAqIDEuMik7XHJcbiAgICAgIG1vY2tUYXJnZXQubW9uZXlBdmFpbGFibGUgPSBtb2NrVGFyZ2V0Lm1vbmV5TWF4O1xyXG4gICAgICBiYXRjaC5nYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuICAgIFxyXG4gICAgICBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGJhdGNoLmhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xyXG4gICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChiYXRjaC5ncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XHJcblxyXG4gICAgICBpZiAoYmF0Y2gudG90YWxUaHJlYWRzKCkgPD0gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgdG90YWxUaHJlYWRzIC09IGJhdGNoLnRvdGFsVGhyZWFkcygpO1xyXG4gICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKG1pc3NlZE9uY2UpIFxyXG4gICAgICAgICAgdG90YWxUaHJlYWRzID0gMDtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5mbG9vcihiYXRjaC5oYWNrVGhyZWFkcyAqIDAuNzUpO1xyXG4gICAgICBtaXNzZWRPbmNlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkdXBsaWNhdGUgYmF0Y2ggdW50aWwgdGhlcmUgaXMgbm8gc3BhY2UgbGVmdFxyXG4gICAgY29uc3QgYmF0Y2hUaHJlYWRzID0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgICBjb25zdCBhZGRpdGlvbmFsQmF0Y2hlcyA9IE1hdGguZmxvb3IodG90YWxUaHJlYWRzIC8gYmF0Y2hUaHJlYWRzKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkaXRpb25hbEJhdGNoZXM7ICsraSkge1xyXG4gICAgICBjb25zdCBuZXdCYXRjaCA9IG5ldyBIYWNrQmF0Y2g7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24obmV3QmF0Y2gsIGJhdGNoKTtcclxuXHJcbiAgICAgIGNvbnN0IGJhdGNoTVNPZmZzZXQgPSBiYXNlTVNPZmZzZXQgKyAoYmF0Y2hlcy5sZW5ndGggKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KTtcclxuICAgICAgbmV3QmF0Y2guaGFja01TQnVmID0gIGJhdGNoTVNPZmZzZXQgLSBuZXdCYXRjaC5oYWNrVGltZSAtIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgICAgbmV3QmF0Y2guaGFja1dlYWtlbk1zQnVmID0gYmF0Y2hNU09mZnNldCAtIG5ld0JhdGNoLndlYWtlblRpbWU7XHJcbiAgICAgIG5ld0JhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBuZXdCYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgICAgbmV3QmF0Y2guZ3Jvd1dlYWtlbk1TQnVmID0gYmF0Y2hNU09mZnNldCAtIG5ld0JhdGNoLndlYWtlblRpbWUgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XHJcbiAgICAgIFxyXG4gICAgICBiYXRjaGVzLnB1c2gobmV3QmF0Y2gpO1xyXG4gICAgICB0b3RhbFRocmVhZHMgLT0gbmV3QmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcblxyXG4gICAgICBpZihiYXRjaGVzLmxlbmd0aCA+PSA1MDAwKSB7XHJcbiAgICAgICAgdG90YWxUaHJlYWRzID0gMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY3ljbGVUaHJlYWRzID0gYmF0Y2hlcy5yZWR1Y2UoKGNvdW50LCBiYXRjaCkgPT4gY291bnQgKyBiYXRjaC50b3RhbFRocmVhZHMoKSwgMCk7XHJcbiAgY29uc3QgY3ljbGVHYWluID0gYmF0Y2hlcy5yZWR1Y2UoKGNvdW50LCBiYXRjaCkgPT4gY291bnQgKyBiYXRjaC5nYWluLCAwKTtcclxuICBjb25zdCBjeWNsZVRpbWUgPSBiYXNlTVNPZmZzZXQgKyAoYmF0Y2hlcy5sZW5ndGggKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcclxuICBucy50cHJpbnRmKGAke3RhcmdldH06ICR7YmF0Y2hlcy5sZW5ndGh9IEJhdGNoZXMgfCAke2N5Y2xlVGhyZWFkc30gVGhyZWFkcyB8ICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiwgMywgMTAwMCwgdHJ1ZSl9IEdhaW4gfCAke2Zvcm1hdFRpbWUoYmFzZU1TT2Zmc2V0KX0vJHtmb3JtYXRUaW1lKGN5Y2xlVGltZSl9IHwgR2FpbiAke25zLmZvcm1hdE51bWJlcihjeWNsZUdhaW4gLyAoY3ljbGVUaW1lIC8gMTAwMCksIDMsIDEwMDAsIHRydWUpfS9zYCk7XHJcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBGaXJzdCBCYXRjaCB8IGh0OiR7YmF0Y2hlc1swXS5oYWNrVGhyZWFkc30gfCBod3Q6JHtiYXRjaGVzWzBdLmhhY2tXZWFrZW5UaHJlYWRzfSB8IGd0OiR7YmF0Y2hlc1swXS5ncm93VGhyZWFkc30gfCBnd3Q6JHtiYXRjaGVzWzBdLmdyb3dXZWFrZW5UaHJlYWRzfWApXHJcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBTZWNvbmQgQmF0Y2ggfCBodDoke2JhdGNoZXNbMV0uaGFja1RocmVhZHN9IHwgaHd0OiR7YmF0Y2hlc1sxXS5oYWNrV2Vha2VuVGhyZWFkc30gfCBndDoke2JhdGNoZXNbMV0uZ3Jvd1RocmVhZHN9IHwgZ3d0OiR7YmF0Y2hlc1sxXS5ncm93V2Vha2VuVGhyZWFkc31gKVxyXG4gIC8vIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogTGFzdCBCYXRjaCB8IGh0OiR7YmF0Y2hlc1tiYXRjaGVzLmxlbmd0aC0xXS5oYWNrVGhyZWFkc30gfCBod3Q6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmhhY2tXZWFrZW5UaHJlYWRzfSB8IGd0OiR7YmF0Y2hlc1tiYXRjaGVzLmxlbmd0aC0xXS5ncm93VGhyZWFkc30gfCBnd3Q6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmdyb3dXZWFrZW5UaHJlYWRzfWApXHJcblxyXG4gIGNvbnN0IHNjcmlwdHMgPSBnZXRTY3JpcHRDYWxscyhiYXRjaGVzKTtcclxuICBsZXQgc2NyaXB0ID0gc2NyaXB0cy5zaGlmdCgpO1xyXG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcclxuICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcblxyXG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XHJcbiAgICB3aGlsZSAoc2xhdmVUaHJlYWRzID4gMCkge1xyXG4gICAgICBpZiAoc2NyaXB0ID09PSB1bmRlZmluZWQpIGJyZWFrO1xyXG5cclxuICAgICAgY29uc3Qgc2NyaXB0VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgc2NyaXB0LnRocmVhZHMpO1xyXG4gICAgICBucy5leGVjKHNjcmlwdC5zY3JpcHQsIHMsIHt0ZW1wb3Jhcnk6IHRydWUsIHRocmVhZHM6IHNjcmlwdFRocmVhZHN9LCB0YXJnZXQsIHNjcmlwdC5vZmZzZXQpO1xyXG4gICAgICBzbGF2ZVRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcclxuICAgICAgc2NyaXB0LnRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcclxuXHJcbiAgICAgIGlmIChzY3JpcHQudGhyZWFkcyA9PT0gMClcclxuICAgICAgICBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTsgIFxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBucy5kaXNhYmxlTG9nKCdBTEwnKTtcclxuXHJcbiAgbGV0IHRhcmdldCA9ICduZWN0YXItbmV0JztcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgaWYgKCFucy5oYXNSb290QWNjZXNzKHRhcmdldCkpIHtcclxuICAgIENvbG9yUHJpbnQobnMsIFsnUmVkMScsIGBTVVBFUiBIQUNLIEVSUk9SOiBVbmFibGUgdG8gaGFjayAke3RhcmdldH0gd2l0aG91dCByb290IGFjY2Vzc2BdKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG5cclxuICAgIC8vIGNvcHkgaGd3IHNjcmlwdHMgdG8gc2xhdmUgbWFjaGluZXNcclxuICAgIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcclxuICAgICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICAgIG5zLnNjcChbJ2hhY2suanMnLCAnZ3Jvdy5qcycsICd3ZWFrZW4uanMnXSwgcyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgY3ljbGUobnMsIHRhcmdldCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"super-hack.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprintf(\\\"Hello World\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLnRwcmludGYoXCJIZWxsbyBXb3JsZFwiKTtcclxufVxyXG4iXX0=\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function isHackable(ns, s, pCount) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return false;\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    const portsRequired = ns.getServerNumPortsRequired(s);\\r\\n    if (hackLv >= hackReq && portsRequired <= pCount)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nfunction crackAndNuke(ns, s) {\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\r\\n        ns.brutessh(s);\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\r\\n        ns.ftpcrack(s);\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\r\\n        ns.relaysmtp(s);\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\r\\n        ns.httpworm(s);\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\r\\n        ns.sqlinject(s);\\r\\n    ns.nuke(s);\\r\\n}\\r\\nfunction getConnectedPaths(ns, current = 'home', path = [], paths = {}) {\\r\\n    paths[current] = [...path, current];\\r\\n    let parent = '';\\r\\n    if (path.length > 0)\\r\\n        parent = path[path.length - 1];\\r\\n    for (const connected of ns.scan(current)) {\\r\\n        if (connected === parent)\\r\\n            continue;\\r\\n        getConnectedPaths(ns, connected, paths[current], paths);\\r\\n    }\\r\\n    return paths;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\r\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\r\\n        if (ns.fileExists(crack, \\\"home\\\"))\\r\\n            count++;\\r\\n        return count;\\r\\n    }, 0);\\r\\n    //for (const target of ['CSEC', 'avmnite-02h', 'I.I.I.I', 'run4theh111z', 'The-Cave', 'w0r1d_d43m0n', 'ecorp', 'fulcrumassets', 'fulcrumtech']) {\\r\\n    for (const target of ['CSEC', 'avmnite-02h', 'I.I.I.I', 'run4theh111z', 'The-Cave', 'w0r1d_d43m0n']) {\\r\\n        try {\\r\\n            if (ns.getServer(target).backdoorInstalled)\\r\\n                continue;\\r\\n            ns.tprintf(`Installing backdoor on ${target}`);\\r\\n            if (!ns.hasRootAccess(target) && isHackable(ns, target, portCrackCount)) {\\r\\n                crackAndNuke(ns, target);\\r\\n            }\\r\\n            if (ns.hasRootAccess(target)) {\\r\\n                for (const s of getConnectedPaths(ns)[target]) {\\r\\n                    ns.singularity.connect(s);\\r\\n                }\\r\\n                await ns.singularity.installBackdoor();\\r\\n            }\\r\\n        }\\r\\n        catch (e) {\\r\\n            // do nothing\\r\\n        }\\r\\n    }\\r\\n    ns.singularity.connect('home');\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsVUFBVSxDQUFDLEVBQU0sRUFBRSxDQUFTLEVBQUUsTUFBYztJQUNuRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFdEMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNwQyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEQsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxNQUFNO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFOUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsRUFBTSxFQUFFLENBQVM7SUFDckMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1RCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsRUFBTSxFQUFFLE9BQU8sR0FBRyxNQUFNLEVBQUUsT0FBaUIsRUFBRSxFQUFFLFFBQWtDLEVBQUU7SUFDNUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXBELEtBQUssTUFBTSxTQUFTLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN4QyxJQUFJLFNBQVMsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUNuQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN6RDtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEcsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN4RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztZQUFFLEtBQUssRUFBRSxDQUFDO1FBQzFDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRU4saUpBQWlKO0lBQ2pKLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGNBQWMsQ0FBQyxFQUFFO1FBQ25HLElBQUk7WUFDRixJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCO2dCQUFFLFNBQVM7WUFFckQsRUFBRSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUUvQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsRUFBRTtnQkFDdkUsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUMxQjtZQUVELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDNUIsS0FBSyxNQUFNLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDN0MsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzNCO2dCQUNELE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUN4QztTQUNGO1FBQUMsT0FBTSxDQUFDLEVBQUU7WUFDVCxhQUFhO1NBQ2Q7S0FDRjtJQUVELEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmZ1bmN0aW9uIGlzSGFja2FibGUobnM6IE5TLCBzOiBzdHJpbmcsIHBDb3VudDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3MocykpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgY29uc3QgaGFja1JlcSA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpO1xyXG4gIGNvbnN0IGhhY2tMdiA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xyXG4gIGNvbnN0IHBvcnRzUmVxdWlyZWQgPSBucy5nZXRTZXJ2ZXJOdW1Qb3J0c1JlcXVpcmVkKHMpO1xyXG5cclxuICBpZiAoaGFja0x2ID49IGhhY2tSZXEgJiYgcG9ydHNSZXF1aXJlZCA8PSBwQ291bnQpIHJldHVybiB0cnVlO1xyXG5cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyYWNrQW5kTnVrZShuczogTlMsIHM6IHN0cmluZyk6IHZvaWQge1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwiQnJ1dGVTU0guZXhlXCIsIFwiaG9tZVwiKSkgbnMuYnJ1dGVzc2gocyk7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGVFBDcmFjay5leGVcIiwgXCJob21lXCIpKSBucy5mdHBjcmFjayhzKTtcclxuICBpZiAobnMuZmlsZUV4aXN0cyhcInJlbGF5U01UUC5leGVcIiwgXCJob21lXCIpKSBucy5yZWxheXNtdHAocyk7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJIVFRQV29ybS5leGVcIiwgXCJob21lXCIpKSBucy5odHRwd29ybShzKTtcclxuICBpZiAobnMuZmlsZUV4aXN0cyhcIlNRTEluamVjdC5leGVcIiwgXCJob21lXCIpKSBucy5zcWxpbmplY3Qocyk7XHJcblxyXG4gIG5zLm51a2Uocyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbm5lY3RlZFBhdGhzKG5zOiBOUywgY3VycmVudCA9ICdob21lJywgcGF0aDogc3RyaW5nW10gPSBbXSwgcGF0aHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHt9KSB7XHJcbiAgcGF0aHNbY3VycmVudF0gPSBbLi4ucGF0aCwgY3VycmVudF07XHJcbiAgXHJcbiAgbGV0IHBhcmVudCA9ICcnO1xyXG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHBhcmVudCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcclxuICBcclxuICBmb3IgKGNvbnN0IGNvbm5lY3RlZCBvZiBucy5zY2FuKGN1cnJlbnQpKSB7XHJcbiAgICBpZiAoY29ubmVjdGVkID09PSBwYXJlbnQpIGNvbnRpbnVlO1xyXG4gICAgZ2V0Q29ubmVjdGVkUGF0aHMobnMsIGNvbm5lY3RlZCwgcGF0aHNbY3VycmVudF0sIHBhdGhzKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwYXRocztcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgcG9ydENyYWNrcyA9IFtcIkJydXRlU1NILmV4ZVwiLCBcIkZUUENyYWNrLmV4ZVwiLCBcInJlbGF5U01UUC5leGVcIiwgXCJIVFRQV29ybS5leGVcIiwgXCJTUUxJbmplY3QuZXhlXCJdO1xyXG4gIGNvbnN0IHBvcnRDcmFja0NvdW50ID0gcG9ydENyYWNrcy5yZWR1Y2UoKGNvdW50LCBjcmFjaykgPT4ge1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoY3JhY2ssIFwiaG9tZVwiKSkgY291bnQrKztcclxuICAgIHJldHVybiBjb3VudDtcclxuICB9LCAwKTtcclxuXHJcbiAgLy9mb3IgKGNvbnN0IHRhcmdldCBvZiBbJ0NTRUMnLCAnYXZtbml0ZS0wMmgnLCAnSS5JLkkuSScsICdydW40dGhlaDExMXonLCAnVGhlLUNhdmUnLCAndzByMWRfZDQzbTBuJywgJ2Vjb3JwJywgJ2Z1bGNydW1hc3NldHMnLCAnZnVsY3J1bXRlY2gnXSkge1xyXG4gIGZvciAoY29uc3QgdGFyZ2V0IG9mIFsnQ1NFQycsICdhdm1uaXRlLTAyaCcsICdJLkkuSS5JJywgJ3J1bjR0aGVoMTExeicsICdUaGUtQ2F2ZScsICd3MHIxZF9kNDNtMG4nXSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKG5zLmdldFNlcnZlcih0YXJnZXQpLmJhY2tkb29ySW5zdGFsbGVkKSBjb250aW51ZTtcclxuXHJcbiAgICAgIG5zLnRwcmludGYoYEluc3RhbGxpbmcgYmFja2Rvb3Igb24gJHt0YXJnZXR9YCk7XHJcblxyXG4gICAgICBpZiAoIW5zLmhhc1Jvb3RBY2Nlc3ModGFyZ2V0KSAmJiBpc0hhY2thYmxlKG5zLCB0YXJnZXQsIHBvcnRDcmFja0NvdW50KSkge1xyXG4gICAgICAgIGNyYWNrQW5kTnVrZShucywgdGFyZ2V0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3ModGFyZ2V0KSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcyBvZiBnZXRDb25uZWN0ZWRQYXRocyhucylbdGFyZ2V0XSkge1xyXG4gICAgICAgICAgbnMuc2luZ3VsYXJpdHkuY29ubmVjdChzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgbnMuc2luZ3VsYXJpdHkuaW5zdGFsbEJhY2tkb29yKCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBucy5zaW5ndWxhcml0eS5jb25uZWN0KCdob21lJyk7XHJcbn1cclxuIl19\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"archive/execute.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers, formatTime, doWeaken, doGrowWeaken, doHackWeakenGrowWeaken, getSlaves, getTotalThreads } from \\\"util\\\";\\r\\nimport { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\n// function calcGainPerMS(ns: NS, target: string): number {\\r\\n//   const servers = getAllServers(ns);\\r\\n//   const slaves = servers.filter(s => s !== 'home').filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s));\\r\\n//   const totalThreads = slaves.reduce((count, slave) => count + Math.floor(ns.getServerMaxRam(slave) / HGW_RAM), 0);\\r\\n//   const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n//   const growSec = 0.004; // ns.growthAnalyzeSecurity(5, 'omega-net');\\r\\n//   const weakSec = 0.05; // ns.weakenAnalyze(1);\\r\\n//   const current = ns.getServerMoneyAvailable(target);\\r\\n//   let hackThreads = 1;\\r\\n//   let maxGain = 0;\\r\\n//   while (true) {\\r\\n//     const hackPercent = ns.hackAnalyze(target) * hackThreads;\\r\\n//     if (hackPercent > .9) break;\\r\\n//     const future = current - (current * hackPercent);\\r\\n//     const growMult = current / future;\\r\\n//     // ns.tprintf(`${hackPercent} ${growMult}`);\\r\\n//     const growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n//     const gain = current - future;\\r\\n//     const hwT = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / weakSec);\\r\\n//     const gwT = Math.ceil(growThreads / (weakSec / growSec));\\r\\n//     const totalHWGWThreads = hackThreads+hwT+growThreads+gwT;\\r\\n//     if (totalHWGWThreads > totalThreads) break;\\r\\n//     if (gain > maxGain) {\\r\\n//       maxGain = gain;\\r\\n//     }\\r\\n//     hackThreads++;\\r\\n//   }\\r\\n//   return maxGain / weakTime;\\r\\n// }\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    ns.tprintf(`  Total Threads: ${totalThreads}`);\\r\\n    const weakenPerRound = totalThreads * 0.05;\\r\\n    const targets = servers.filter(s => ns.getServerMaxMoney(s) > 0).filter(s => {\\r\\n        const weakenTime = ns.getWeakenTime(s);\\r\\n        const securityLevel = ns.getServerSecurityLevel(s);\\r\\n        const minSecurityLevel = ns.getServerMinSecurityLevel(s);\\r\\n        const weakenRounds = Math.ceil((securityLevel - minSecurityLevel) / weakenPerRound);\\r\\n        const fullWeakenTime = weakenTime * weakenRounds;\\r\\n        return fullWeakenTime < 1000 * 60 * 60 * 2;\\r\\n    }).sort((a, b) => ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b));\\r\\n    const data = targets.map(s => {\\r\\n        const weakenTime = ns.getWeakenTime(s);\\r\\n        const securityLevel = ns.getServerSecurityLevel(s);\\r\\n        const minSecurityLevel = ns.getServerMinSecurityLevel(s);\\r\\n        const weakenRounds = Math.ceil((securityLevel - minSecurityLevel) / weakenPerRound);\\r\\n        const fullWeakenTime = weakenTime * weakenRounds;\\r\\n        return [\\r\\n            ` ${s}`,\\r\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\r\\n            minSecurityLevel.toString().padStart(9),\\r\\n            securityLevel.toString().padStart(9),\\r\\n            formatTime(weakenTime).padStart(12),\\r\\n            // weakenRounds.toString().padStart(7),\\r\\n            formatTime(fullWeakenTime).padStart(12),\\r\\n            //weakenTime.toString(),\\r\\n            ns.formatNumber(ns.getServerMoneyAvailable(s), 3, 1000, true).padStart(10),\\r\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(10),\\r\\n            // ns.formatNumber(calcGainPerMS(ns, s), 3, 1000, true).padStart(10),\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Servers', width: 20 },\\r\\n        { header: ' Base Sec', width: 10 },\\r\\n        { header: '  Min Sec', width: 10 },\\r\\n        { header: '      Sec', width: 10 },\\r\\n        { header: ' Weaken Time', width: 13 },\\r\\n        // { header: ' Rounds', width: 8 },\\r\\n        { header: ' Full Weaken', width: 13 },\\r\\n        { header: '     Money', width: 11 },\\r\\n        { header: ' Max Money', width: 11 },\\r\\n        // { header: '   Gain/ms', width: 11 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n    if (ns.args.length > 0 && ns.args[0] === 'PEEK') {\\r\\n        return;\\r\\n    }\\r\\n    // Weaken always reduces security by 0.05 per thread\\r\\n    // copy hgw scripts to slave machines\\r\\n    for (const s of slaves) {\\r\\n        if (s === 'home')\\r\\n            continue;\\r\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n    }\\r\\n    let target = 'phantasy';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    // fully weaken the target\\r\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        await doWeaken(ns, target);\\r\\n    }\\r\\n    ns.tprintf(`${target} fully weakened`);\\r\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n        await doGrowWeaken(ns, target);\\r\\n    ns.tprintf(`${target} fully grown`);\\r\\n    while (true) {\\r\\n        await doHackWeakenGrowWeaken(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcmNoaXZlL2V4ZWN1dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdILE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5RCwyREFBMkQ7QUFDM0QsdUNBQXVDO0FBQ3ZDLG9IQUFvSDtBQUNwSCxzSEFBc0g7QUFFdEgsMERBQTBEO0FBRTFELHdFQUF3RTtBQUN4RSxrREFBa0Q7QUFFbEQsd0RBQXdEO0FBQ3hELHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLGdFQUFnRTtBQUNoRSxtQ0FBbUM7QUFDbkMsd0RBQXdEO0FBQ3hELHlDQUF5QztBQUN6QyxtREFBbUQ7QUFDbkQseUVBQXlFO0FBQ3pFLHFDQUFxQztBQUVyQyxvRkFBb0Y7QUFDcEYsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSxrREFBa0Q7QUFFbEQsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUN4QixRQUFRO0FBRVIscUJBQXFCO0FBQ3JCLE1BQU07QUFFTiwrQkFBK0I7QUFDL0IsSUFBSTtBQUVKLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWpELEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLFlBQVksRUFBRSxDQUFDLENBQUM7SUFFL0MsTUFBTSxj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c0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQy9FLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1QjtJQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLGlCQUFpQixDQUFDLENBQUM7SUFFdkMsT0FBTSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUNyRSxNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFakMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE1BQU0sY0FBYyxDQUFDLENBQUM7SUFFcEMsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMxQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsU2VydmVycywgZm9ybWF0VGltZSwgZG9XZWFrZW4sIGRvR3Jvd1dlYWtlbiwgZG9IYWNrV2Vha2VuR3Jvd1dlYWtlbiwgZ2V0U2xhdmVzLCBnZXRUb3RhbFRocmVhZHMgfSBmcm9tIFwidXRpbFwiO1xyXG5pbXBvcnQgeyBQcmludFRhYmxlLCBDb2xvclByaW50LCBEZWZhdWx0U3R5bGUgfSBmcm9tIFwidGFibGVzXCI7XHJcblxyXG4vLyBmdW5jdGlvbiBjYWxjR2FpblBlck1TKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBudW1iZXIge1xyXG4vLyAgIGNvbnN0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKTtcclxuLy8gICBjb25zdCBzbGF2ZXMgPSBzZXJ2ZXJzLmZpbHRlcihzID0+IHMgIT09ICdob21lJykuZmlsdGVyKHMgPT4gbnMuZ2V0U2VydmVyTWF4UmFtKHMpID4gMCAmJiBucy5oYXNSb290QWNjZXNzKHMpKTtcclxuLy8gICBjb25zdCB0b3RhbFRocmVhZHMgPSBzbGF2ZXMucmVkdWNlKChjb3VudCwgc2xhdmUpID0+IGNvdW50ICsgTWF0aC5mbG9vcihucy5nZXRTZXJ2ZXJNYXhSYW0oc2xhdmUpIC8gSEdXX1JBTSksIDApO1xyXG5cclxuLy8gICBjb25zdCB3ZWFrVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG5cclxuLy8gICBjb25zdCBncm93U2VjID0gMC4wMDQ7IC8vIG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eSg1LCAnb21lZ2EtbmV0Jyk7XHJcbi8vICAgY29uc3Qgd2Vha1NlYyA9IDAuMDU7IC8vIG5zLndlYWtlbkFuYWx5emUoMSk7XHJcblxyXG4vLyAgIGNvbnN0IGN1cnJlbnQgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpO1xyXG4vLyAgIGxldCBoYWNrVGhyZWFkcyA9IDE7XHJcbi8vICAgbGV0IG1heEdhaW4gPSAwO1xyXG4vLyAgIHdoaWxlICh0cnVlKSB7XHJcbi8vICAgICBjb25zdCBoYWNrUGVyY2VudCA9IG5zLmhhY2tBbmFseXplKHRhcmdldCkgKiBoYWNrVGhyZWFkcztcclxuLy8gICAgIGlmIChoYWNrUGVyY2VudCA+IC45KSBicmVhaztcclxuLy8gICAgIGNvbnN0IGZ1dHVyZSA9IGN1cnJlbnQgLSAoY3VycmVudCAqIGhhY2tQZXJjZW50KTtcclxuLy8gICAgIGNvbnN0IGdyb3dNdWx0ID0gY3VycmVudCAvIGZ1dHVyZTtcclxuLy8gICAgIC8vIG5zLnRwcmludGYoYCR7aGFja1BlcmNlbnR9ICR7Z3Jvd011bHR9YCk7XHJcbi8vICAgICBjb25zdCBncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgZ3Jvd011bHQpKTtcclxuLy8gICAgIGNvbnN0IGdhaW4gPSBjdXJyZW50IC0gZnV0dXJlO1xyXG5cclxuLy8gICAgIGNvbnN0IGh3VCA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gd2Vha1NlYyk7XHJcbi8vICAgICBjb25zdCBnd1QgPSBNYXRoLmNlaWwoZ3Jvd1RocmVhZHMgLyAod2Vha1NlYyAvIGdyb3dTZWMpKTtcclxuLy8gICAgIGNvbnN0IHRvdGFsSFdHV1RocmVhZHMgPSBoYWNrVGhyZWFkcytod1QrZ3Jvd1RocmVhZHMrZ3dUO1xyXG4vLyAgICAgaWYgKHRvdGFsSFdHV1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIGJyZWFrO1xyXG5cclxuLy8gICAgIGlmIChnYWluID4gbWF4R2Fpbikge1xyXG4vLyAgICAgICBtYXhHYWluID0gZ2FpbjtcclxuLy8gICAgIH1cclxuICAgIFxyXG4vLyAgICAgaGFja1RocmVhZHMrKztcclxuLy8gICB9XHJcblxyXG4vLyAgIHJldHVybiBtYXhHYWluIC8gd2Vha1RpbWU7XHJcbi8vIH1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKTtcclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gIGNvbnN0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgbnMudHByaW50ZihgICBUb3RhbCBUaHJlYWRzOiAke3RvdGFsVGhyZWFkc31gKTtcclxuXHJcbiAgY29uc3Qgd2Vha2VuUGVyUm91bmQgPSB0b3RhbFRocmVhZHMgKiAwLjA1O1xyXG5cclxuICBjb25zdCB0YXJnZXRzID0gc2VydmVycy5maWx0ZXIocyA9PiBucy5nZXRTZXJ2ZXJNYXhNb25leShzKSA+IDApLmZpbHRlcihzID0+IHtcclxuICAgIGNvbnN0IHdlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHMpO1xyXG4gICAgY29uc3Qgc2VjdXJpdHlMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwocyk7XHJcbiAgICBjb25zdCBtaW5TZWN1cml0eUxldmVsID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzKTtcclxuICAgIGNvbnN0IHdlYWtlblJvdW5kcyA9IE1hdGguY2VpbCgoc2VjdXJpdHlMZXZlbCAtIG1pblNlY3VyaXR5TGV2ZWwpIC8gd2Vha2VuUGVyUm91bmQpO1xyXG4gICAgY29uc3QgZnVsbFdlYWtlblRpbWUgPSB3ZWFrZW5UaW1lICogd2Vha2VuUm91bmRzO1xyXG5cclxuICAgIHJldHVybiBmdWxsV2Vha2VuVGltZSA8IDEwMDAgKiA2MCAqIDYwICogMjtcclxuICB9KS5zb3J0KChhLCBiKSA9PiBucy5nZXRTZXJ2ZXJNYXhNb25leShhKSAtIG5zLmdldFNlcnZlck1heE1vbmV5KGIpKTtcclxuXHJcbiAgY29uc3QgZGF0YSA9IHRhcmdldHMubWFwKHMgPT4ge1xyXG4gICAgY29uc3Qgd2Vha2VuVGltZSA9IG5zLmdldFdlYWtlblRpbWUocyk7XHJcbiAgICBjb25zdCBzZWN1cml0eUxldmVsID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzKTtcclxuICAgIGNvbnN0IG1pblNlY3VyaXR5TGV2ZWwgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHMpO1xyXG4gICAgY29uc3Qgd2Vha2VuUm91bmRzID0gTWF0aC5jZWlsKChzZWN1cml0eUxldmVsIC0gbWluU2VjdXJpdHlMZXZlbCkgLyB3ZWFrZW5QZXJSb3VuZCk7XHJcbiAgICBjb25zdCBmdWxsV2Vha2VuVGltZSA9IHdlYWtlblRpbWUgKiB3ZWFrZW5Sb3VuZHM7XHJcblxyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCAke3N9YCxcclxuICAgICAgbnMuZ2V0U2VydmVyQmFzZVNlY3VyaXR5TGV2ZWwocykudG9TdHJpbmcoKS5wYWRTdGFydCg5KSxcclxuICAgICAgbWluU2VjdXJpdHlMZXZlbC50b1N0cmluZygpLnBhZFN0YXJ0KDkpLFxyXG4gICAgICBzZWN1cml0eUxldmVsLnRvU3RyaW5nKCkucGFkU3RhcnQoOSksXHJcbiAgICAgIGZvcm1hdFRpbWUod2Vha2VuVGltZSkucGFkU3RhcnQoMTIpLFxyXG4gICAgICAvLyB3ZWFrZW5Sb3VuZHMudG9TdHJpbmcoKS5wYWRTdGFydCg3KSxcclxuICAgICAgZm9ybWF0VGltZShmdWxsV2Vha2VuVGltZSkucGFkU3RhcnQoMTIpLFxyXG4gICAgICAvL3dlYWtlblRpbWUudG9TdHJpbmcoKSxcclxuICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHMpLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCksXHJcbiAgICAgIG5zLmZvcm1hdE51bWJlcihucy5nZXRTZXJ2ZXJNYXhNb25leShzKSwgMywgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoMTApLFxyXG4gICAgICAvLyBucy5mb3JtYXROdW1iZXIoY2FsY0dhaW5QZXJNUyhucywgcyksIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKSxcclxuICAgIF1cclxuICB9KTtcclxuXHJcblx0Y29uc3QgY29sdW1ucyA9IFtcclxuXHRcdHsgaGVhZGVyOiAnIFNlcnZlcnMnLCB3aWR0aDogMjAgfSxcclxuXHRcdHsgaGVhZGVyOiAnIEJhc2UgU2VjJywgd2lkdGg6IDEwIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgTWluIFNlYycsIHdpZHRoOiAxMCB9LFxyXG4gICAgeyBoZWFkZXI6ICcgICAgICBTZWMnLCB3aWR0aDogMTAgfSxcclxuICAgIHsgaGVhZGVyOiAnIFdlYWtlbiBUaW1lJywgd2lkdGg6IDEzIH0sXHJcbiAgICAvLyB7IGhlYWRlcjogJyBSb3VuZHMnLCB3aWR0aDogOCB9LFxyXG4gICAgeyBoZWFkZXI6ICcgRnVsbCBXZWFrZW4nLCB3aWR0aDogMTMgfSxcclxuICAgIHsgaGVhZGVyOiAnICAgICBNb25leScsIHdpZHRoOiAxMSB9LFxyXG5cdFx0eyBoZWFkZXI6ICcgTWF4IE1vbmV5Jywgd2lkdGg6IDExIH0sXHJcbiAgICAvLyB7IGhlYWRlcjogJyAgIEdhaW4vbXMnLCB3aWR0aDogMTEgfSxcclxuXHRdO1xyXG5cclxuXHRQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBEZWZhdWx0U3R5bGUoKSwgQ29sb3JQcmludCk7XHJcblxyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgbnMuYXJnc1swXSA9PT0gJ1BFRUsnKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBXZWFrZW4gYWx3YXlzIHJlZHVjZXMgc2VjdXJpdHkgYnkgMC4wNSBwZXIgdGhyZWFkXHJcblxyXG4gIC8vIGNvcHkgaGd3IHNjcmlwdHMgdG8gc2xhdmUgbWFjaGluZXNcclxuICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XHJcbiAgICBpZiAocyA9PT0gJ2hvbWUnKSBjb250aW51ZTtcclxuICAgIG5zLnNjcChbJ2hhY2suanMnLCAnZ3Jvdy5qcycsICd3ZWFrZW4uanMnXSwgcyk7XHJcbiAgfVxyXG5cclxuICBsZXQgdGFyZ2V0ID0gJ3BoYW50YXN5JztcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgLy8gZnVsbHkgd2Vha2VuIHRoZSB0YXJnZXRcclxuICB3aGlsZSAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpID4gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpKSB7XHJcbiAgICBhd2FpdCBkb1dlYWtlbihucywgdGFyZ2V0KTtcclxuICB9XHJcblxyXG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fSBmdWxseSB3ZWFrZW5lZGApO1xyXG5cclxuICB3aGlsZShucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSlcclxuICAgIGF3YWl0IGRvR3Jvd1dlYWtlbihucywgdGFyZ2V0KTtcclxuXHJcbiAgbnMudHByaW50ZihgJHt0YXJnZXR9IGZ1bGx5IGdyb3duYCk7XHJcblxyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBhd2FpdCBkb0hhY2tXZWFrZW5Hcm93V2Vha2VuKG5zLCB0YXJnZXQpO1xyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"archive/execute.js\",\"server\":\"home\"}}],[\"archive/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, waitForHGWScripts } from \\\"util\\\";\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 10;\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers; // This script autocompletes the list of servers.\\r\\n}\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction getScriptCalls(batches) {\\r\\n    const scripts = [];\\r\\n    for (const batch of batches) {\\r\\n        if (batch.growThreads > 0) {\\r\\n            scripts.push({\\r\\n                script: \\\"grow.js\\\",\\r\\n                threads: batch.growThreads,\\r\\n                offset: batch.growMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.growWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.growWeakenThreads,\\r\\n                offset: batch.growWeakenMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"hack.js\\\",\\r\\n                threads: batch.hackThreads,\\r\\n                offset: batch.hackMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.hackWeakenThreads,\\r\\n                offset: batch.hackWeakenMsBuf\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return scripts.sort((a, b) => b.threads - a.threads);\\r\\n}\\r\\nasync function cycle(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    let totalThreads = getTotalThreads(ns, slaves);\\r\\n    const batches = [];\\r\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\r\\n    // first batch is always GW if the server is not already at min security / max money\\r\\n    // find out how many threads are required to grow to max\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\r\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\r\\n        const batch = new HackBatch();\\r\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        const growMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n            growSecIncrease = GROW_SEC * totalThreads;\\r\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n        }\\r\\n        const batchMSOffset = baseMSOffset;\\r\\n        batch.weakenTime = Math.ceil(ns.getWeakenTime(target));\\r\\n        batch.growTime = Math.ceil(ns.getGrowTime(target));\\r\\n        batch.hackTime = Math.ceil(ns.getHackTime(target));\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        batches.push(batch);\\r\\n        totalThreads = 0;\\r\\n    }\\r\\n    while (totalThreads > 0) {\\r\\n        // if (batches.length > 5) break;\\r\\n        // from now on assume we are at minimum security, maximum money available\\r\\n        const batch = new HackBatch();\\r\\n        const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n        batch.hackTime = ns.getHackTime(target);\\r\\n        batch.growTime = ns.getGrowTime(target);\\r\\n        batch.weakenTime = ns.getWeakenTime(target);\\r\\n        batch.hackMSBuf = batchMSOffset - batch.hackTime - MS_BETWEEN_OPERATIONS;\\r\\n        batch.hackWeakenMsBuf = batchMSOffset - batch.weakenTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        // start with hack 50%\\r\\n        batch.hackThreads = Math.ceil(.3 / ns.hackAnalyze(target));\\r\\n        while (true) {\\r\\n            if (batch.hackThreads <= 0) {\\r\\n                totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n            const hackPercent = ns.hackAnalyze(target) * batch.hackThreads;\\r\\n            const current = ns.getServerMaxMoney(target);\\r\\n            const future = current - (current * hackPercent);\\r\\n            const growMult = current / future;\\r\\n            batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult) * 1.5);\\r\\n            batch.gain = current - future;\\r\\n            batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, target) / WEAK_SEC);\\r\\n            batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\r\\n            if (batch.totalThreads() <= totalThreads) {\\r\\n                totalThreads -= batch.totalThreads();\\r\\n                batches.push(batch);\\r\\n                break;\\r\\n            }\\r\\n            batch.hackThreads--;\\r\\n        }\\r\\n        if (batches.length > 1000)\\r\\n            break;\\r\\n    }\\r\\n    // if we're doing a lot of batches, cancel the last 2 and re-assing the threads to grow/weaken to prep for the next cycle\\r\\n    if (batches.length > 20) {\\r\\n        let trashThreads = 0;\\r\\n        const lastBatch = batches.pop();\\r\\n        trashThreads += lastBatch ? lastBatch.totalThreads() : 0;\\r\\n        trashThreads += batches[batches.length - 1].totalThreads();\\r\\n        const growSecIncrease = GROW_SEC * trashThreads;\\r\\n        batches[batches.length - 1].growWeakenThreads = Math.ceil(growSecIncrease / WEAK_SEC) * 2;\\r\\n        batches[batches.length - 1].growThreads = trashThreads - batches[batches.length - 1].growWeakenThreads;\\r\\n        batches[batches.length - 1].hackThreads = 0;\\r\\n        batches[batches.length - 1].hackWeakenThreads = 0;\\r\\n    }\\r\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\r\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n    ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\r\\n    // ns.tprintf(`${target}: Batch 1 | ht:${batches[0].hackThreads} | hwt:${batches[0].hackWeakenThreads} | gt:${batches[0].growThreads} | gwt:${batches[0].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Batch 2 | ht:${batches[1].hackThreads} | hwt:${batches[1].hackWeakenThreads} | gt:${batches[1].growThreads} | gwt:${batches[1].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Batch N | ht:${batches[batches.length-1].hackThreads} | hwt:${batches[batches.length-1].hackWeakenThreads} | gt:${batches[batches.length-1].growThreads} | gwt:${batches[batches.length-1].growWeakenThreads}`)\\r\\n    const scripts = getScriptCalls(batches);\\r\\n    let script = scripts.shift();\\r\\n    for (const s of slaves) {\\r\\n        if (script === undefined)\\r\\n            break;\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        while (slaveThreads > 0) {\\r\\n            if (script === undefined)\\r\\n                break;\\r\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\r\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\r\\n            slaveThreads -= scriptThreads;\\r\\n            script.threads -= scriptThreads;\\r\\n            if (script.threads === 0)\\r\\n                script = scripts.shift();\\r\\n        }\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    const slaves = getSlaves(ns);\\r\\n    // copy hgw scripts to slave machines\\r\\n    for (const s of slaves) {\\r\\n        if (s === 'home')\\r\\n            continue;\\r\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n    }\\r\\n    let target = 'nectar-net';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    while (true) {\\r\\n        await cycle(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXJjaGl2ZS9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxHLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUNwRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyx1QkFBdUI7QUFDOUMsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFFakMsb0pBQW9KO0FBQ3BKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsaURBQWlEO0FBQ3hFLENBQUM7QUFzQkQsTUFBTSxTQUFTO0lBQ2IsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFFdEIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUVULFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQy9GLENBQUM7Q0FDRjtBQVFELFNBQVMsY0FBYyxDQUFDLE9BQXFCO0lBQzNDLE1BQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7SUFDbEMsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUU7UUFDM0IsSUFBSSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixPQUFPLEVBQUUsS0FBSyxDQUFDLFdBQVc7Z0JBQzFCLE1BQU0sRUFBRSxLQUFLLENBQUMsU0FBUzthQUN4QixDQUFDLENBQUE7U0FDSDtRQUVELElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE9BQU8sRUFBRSxLQUFLLENBQUMsaUJBQWlCO2dCQUNoQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGVBQWU7YUFDOUIsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxNQUFNLEVBQUUsU0FBUztnQkFDakIsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUMxQixNQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVM7YUFDeEIsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixPQUFPLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtnQkFDaEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxlQUFlO2FBQzlCLENBQUMsQ0FBQTtTQUNIO0tBQ0Y7SUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQsS0FBSyxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUN6QyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBSSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUUvQyxNQUFNLE9BQU8sR0FBaUIsRUFBRSxDQUFDO0lBRWpDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRXpELG9GQUFvRjtJQUNwRix3REFBd0Q7SUFDeEQsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQztRQUN4RSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUNyRTtRQUNFLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7UUFDOUIsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzRixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25GLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksZUFBZSxHQUFHLFFBQVEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ25ELEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBRS9FLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxXQUFXLEdBQUcsWUFBWSxFQUFFO1lBQzlELGVBQWUsR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDO1lBQzFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1lBQy9FLEtBQUssQ0FBQyxXQUFXLEdBQUcsWUFBWSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztTQUM1RDtRQUVELE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQztRQUNuQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsU0FBUyxHQUFHLGFBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3pFLEtBQUssQ0FBQyxlQUFlLEdBQUcsYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV2RixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLFlBQVksR0FBRyxDQUFDLENBQUM7S0FDbEI7SUFFRCxPQUFPLFlBQVksR0FBRyxDQUFDLEVBQUc7UUFDeEIsaUNBQWlDO1FBQ2pDLHlFQUF5RTtRQUN6RSxNQUFNLEtBQUssR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQzlCLE1BQU0sYUFBYSxHQUFHLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDakYsS0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsS0FBSyxDQUFDLFNBQVMsR0FBSSxhQUFhLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUMxRSxLQUFLLENBQUMsZUFBZSxHQUFHLGFBQWEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ3pELEtBQUssQ0FBQyxTQUFTLEdBQUcsYUFBYSxHQUFHLEtBQUssQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7UUFDekUsS0FBSyxDQUFDLGVBQWUsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXZGLHNCQUFzQjtRQUN0QixLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLElBQUksRUFBRTtZQUNYLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxDQUFDLEVBQUU7Z0JBQzFCLFlBQVksR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLE1BQU07YUFDUDtZQUVELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUMvRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sUUFBUSxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDbEMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3hFLEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxHQUFHLE1BQU0sQ0FBQztZQUU5QixLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztZQUNsRyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFL0UsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLElBQUksWUFBWSxFQUFFO2dCQUN4QyxZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwQixNQUFNO2FBQ1A7WUFFRCxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDckI7UUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSTtZQUFFLE1BQU07S0FDbEM7SUFFRCx5SEFBeUg7SUFDekgsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtRQUN2QixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDckIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLFlBQVksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELFlBQVksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUzRCxNQUFNLGVBQWUsR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxRixPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQ3ZHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkYsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sU0FBUyxHQUFHLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1RyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxLQUFLLE9BQU8sQ0FBQyxNQUFNLGNBQWMsWUFBWSxjQUFjLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuUSw2S0FBNks7SUFDN0ssNktBQTZLO0lBQzdLLHlPQUF5TztJQUV6TyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdCLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1FBQ3RCLElBQUksTUFBTSxLQUFLLFNBQVM7WUFBRSxNQUFNO1FBRWhDLElBQUksWUFBWSxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxZQUFZLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksTUFBTSxLQUFLLFNBQVM7Z0JBQUUsTUFBTTtZQUVoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0QsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUYsWUFBWSxJQUFJLGFBQWEsQ0FBQztZQUM5QixNQUFNLENBQUMsT0FBTyxJQUFJLGFBQWEsQ0FBQztZQUVoQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssQ0FBQztnQkFDdEIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjtLQUNGO0lBRUQsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFN0IscUNBQXFDO0lBQ3JDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1FBQ3RCLElBQUksQ0FBQyxLQUFLLE1BQU07WUFBRSxTQUFTO1FBQzNCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDO0lBQzFCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUUsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDekI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGZvcm1hdFRpbWUsIGdldFNsYXZlcywgZ2V0U2xhdmVUaHJlYWRzLCBnZXRUb3RhbFRocmVhZHMsIHdhaXRGb3JIR1dTY3JpcHRzIH0gZnJvbSBcInV0aWxcIjtcclxuXHJcbmNvbnN0IEdST1dfU0VDID0gMC4wMDQ7IC8vIG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eSgxLCAnb21lZ2EtbmV0Jyk7XHJcbmNvbnN0IFdFQUtfU0VDID0gMC4wNTsgLy8gbnMud2Vha2VuQW5hbHl6ZSgxKTtcclxuY29uc3QgTVNfQkVUV0VFTl9PUEVSQVRJT05TID0gMTA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YTogYW55LCBhcmdzOiBhbnkpOiBzdHJpbmdbXSB7XHJcbiAgcmV0dXJuIGRhdGEuc2VydmVyczsgLy8gVGhpcyBzY3JpcHQgYXV0b2NvbXBsZXRlcyB0aGUgbGlzdCBvZiBzZXJ2ZXJzLlxyXG59XHJcblxyXG5pbnRlcmZhY2UgSUhhY2tCYXRjaCB7XHJcbiAgZ3Jvd1RocmVhZHM6IG51bWJlcjtcclxuICBncm93V2Vha2VuVGhyZWFkczogbnVtYmVyO1xyXG4gIGhhY2tUaHJlYWRzOiBudW1iZXI7XHJcbiAgaGFja1dlYWtlblRocmVhZHM6IG51bWJlcjtcclxuXHJcbiAgaGFja1RpbWU6IG51bWJlcjtcclxuICBncm93VGltZTogbnVtYmVyO1xyXG4gIHdlYWtlblRpbWU6IG51bWJlcjtcclxuXHJcbiAgZ3Jvd01TQnVmOiBudW1iZXI7XHJcbiAgZ3Jvd1dlYWtlbk1TQnVmOiBudW1iZXI7XHJcbiAgaGFja01TQnVmOiBudW1iZXI7XHJcbiAgaGFja1dlYWtlbk1zQnVmOiBudW1iZXI7XHJcblxyXG4gIGdhaW46IG51bWJlcjtcclxuXHJcbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlcjtcclxufVxyXG5cclxuY2xhc3MgSGFja0JhdGNoIGltcGxlbWVudHMgSUhhY2tCYXRjaCB7XHJcbiAgZ3Jvd1RocmVhZHMgPSAwO1xyXG4gIGdyb3dXZWFrZW5UaHJlYWRzID0gMDtcclxuICBoYWNrVGhyZWFkcyA9IDA7XHJcbiAgaGFja1dlYWtlblRocmVhZHMgPSAwO1xyXG5cclxuICBoYWNrVGltZSA9IDA7XHJcbiAgZ3Jvd1RpbWUgPSAwO1xyXG4gIHdlYWtlblRpbWUgPSAwO1xyXG5cclxuICBncm93TVNCdWYgPSAwO1xyXG4gIGdyb3dXZWFrZW5NU0J1ZiA9IDA7XHJcbiAgaGFja01TQnVmID0gMDtcclxuICBoYWNrV2Vha2VuTXNCdWYgPSAwO1xyXG5cclxuICBnYWluID0gMDtcclxuXHJcbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5ncm93VGhyZWFkcyArIHRoaXMuZ3Jvd1dlYWtlblRocmVhZHMgKyB0aGlzLmhhY2tUaHJlYWRzICsgdGhpcy5oYWNrV2Vha2VuVGhyZWFkcztcclxuICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBJU2NyaXB0Q2FsbCB7XHJcbiAgc2NyaXB0OiBzdHJpbmc7XHJcbiAgdGhyZWFkczogbnVtYmVyO1xyXG4gIG9mZnNldDogbnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTY3JpcHRDYWxscyhiYXRjaGVzOiBJSGFja0JhdGNoW10pOiBJU2NyaXB0Q2FsbFtdIHtcclxuICBjb25zdCBzY3JpcHRzOiBJU2NyaXB0Q2FsbFtdID0gW107XHJcbiAgZm9yIChjb25zdCBiYXRjaCBvZiBiYXRjaGVzKSB7XHJcbiAgICBpZiAoYmF0Y2guZ3Jvd1RocmVhZHMgPiAwKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcImdyb3cuanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5ncm93VGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dNU0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXRjaC5ncm93V2Vha2VuVGhyZWFkcykge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dXZWFrZW5NU0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXRjaC5oYWNrVGhyZWFkcykge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJoYWNrLmpzXCIsXHJcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1RocmVhZHMsXHJcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5oYWNrTVNCdWZcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmF0Y2guaGFja1dlYWtlblRocmVhZHMpIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBzY3JpcHQ6IFwid2Vha2VuLmpzXCIsXHJcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1dlYWtlblRocmVhZHMsXHJcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5oYWNrV2Vha2VuTXNCdWZcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzY3JpcHRzLnNvcnQoKGEsIGIpID0+IGIudGhyZWFkcyAtIGEudGhyZWFkcyk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gIGxldCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XHJcblxyXG4gIGNvbnN0IGJhdGNoZXM6IElIYWNrQmF0Y2hbXSA9IFtdO1xyXG5cclxuICBjb25zdCBiYXNlTVNPZmZzZXQgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuXHJcbiAgLy8gZmlyc3QgYmF0Y2ggaXMgYWx3YXlzIEdXIGlmIHRoZSBzZXJ2ZXIgaXMgbm90IGFscmVhZHkgYXQgbWluIHNlY3VyaXR5IC8gbWF4IG1vbmV5XHJcbiAgLy8gZmluZCBvdXQgaG93IG1hbnkgdGhyZWFkcyBhcmUgcmVxdWlyZWQgdG8gZ3JvdyB0byBtYXhcclxuICBpZiAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpID4gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpIHx8XHJcbiAgICAgIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKVxyXG4gIHtcclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmFzZVdlYWtlbiA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSAtIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgY29uc3QgZ3Jvd011bHQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcclxuICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkpO1xyXG4gICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0O1xyXG4gICAgYmF0Y2gud2Vha2VuVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG4gICAgYmF0Y2guZ3Jvd1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KSk7XHJcbiAgICBiYXRjaC5oYWNrVGltZSA9IE1hdGguY2VpbChucy5nZXRIYWNrVGltZSh0YXJnZXQpKTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICB0b3RhbFRocmVhZHMgPSAwO1xyXG4gIH1cclxuXHJcbiAgd2hpbGUgKHRvdGFsVGhyZWFkcyA+IDAgKSB7XHJcbiAgICAvLyBpZiAoYmF0Y2hlcy5sZW5ndGggPiA1KSBicmVhaztcclxuICAgIC8vIGZyb20gbm93IG9uIGFzc3VtZSB3ZSBhcmUgYXQgbWluaW11bSBzZWN1cml0eSwgbWF4aW11bSBtb25leSBhdmFpbGFibGVcclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmF0Y2hNU09mZnNldCA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpXHJcbiAgICBiYXRjaC5oYWNrVGltZSA9IG5zLmdldEhhY2tUaW1lKHRhcmdldCk7XHJcbiAgICBiYXRjaC5ncm93VGltZSA9IG5zLmdldEdyb3dUaW1lKHRhcmdldCk7XHJcbiAgICBiYXRjaC53ZWFrZW5UaW1lID0gbnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpO1xyXG4gICAgYmF0Y2guaGFja01TQnVmID0gIGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5oYWNrVGltZSAtIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmhhY2tXZWFrZW5Nc0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lO1xyXG4gICAgYmF0Y2guZ3Jvd01TQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLmdyb3dUaW1lICsgTVNfQkVUV0VFTl9PUEVSQVRJT05TO1xyXG4gICAgYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLndlYWtlblRpbWUgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XHJcblxyXG4gICAgLy8gc3RhcnQgd2l0aCBoYWNrIDUwJVxyXG4gICAgYmF0Y2guaGFja1RocmVhZHMgPSBNYXRoLmNlaWwoLjMgLyBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpKTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMgPD0gMCkge1xyXG4gICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuaGFja0FuYWx5emUodGFyZ2V0KSAqIGJhdGNoLmhhY2tUaHJlYWRzO1xyXG4gICAgICBjb25zdCBjdXJyZW50ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuICAgICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gICAgICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XHJcbiAgICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkgKiAxLjUpO1xyXG4gICAgICBiYXRjaC5nYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuICAgIFxyXG4gICAgICBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGJhdGNoLmhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xyXG4gICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChiYXRjaC5ncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XHJcblxyXG4gICAgICBpZiAoYmF0Y2gudG90YWxUaHJlYWRzKCkgPD0gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgdG90YWxUaHJlYWRzIC09IGJhdGNoLnRvdGFsVGhyZWFkcygpO1xyXG4gICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJhdGNoLmhhY2tUaHJlYWRzLS07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJhdGNoZXMubGVuZ3RoID4gMTAwMCkgYnJlYWs7XHJcbiAgfVxyXG5cclxuICAvLyBpZiB3ZSdyZSBkb2luZyBhIGxvdCBvZiBiYXRjaGVzLCBjYW5jZWwgdGhlIGxhc3QgMiBhbmQgcmUtYXNzaW5nIHRoZSB0aHJlYWRzIHRvIGdyb3cvd2Vha2VuIHRvIHByZXAgZm9yIHRoZSBuZXh0IGN5Y2xlXHJcbiAgaWYgKGJhdGNoZXMubGVuZ3RoID4gMjApIHtcclxuICAgIGxldCB0cmFzaFRocmVhZHMgPSAwO1xyXG4gICAgY29uc3QgbGFzdEJhdGNoID0gYmF0Y2hlcy5wb3AoKTtcclxuICAgIHRyYXNoVGhyZWFkcyArPSBsYXN0QmF0Y2ggPyBsYXN0QmF0Y2gudG90YWxUaHJlYWRzKCkgOiAwO1xyXG4gICAgdHJhc2hUaHJlYWRzICs9IGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS50b3RhbFRocmVhZHMoKTtcclxuXHJcbiAgICBjb25zdCBncm93U2VjSW5jcmVhc2UgPSBHUk9XX1NFQyAqIHRyYXNoVGhyZWFkcztcclxuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChncm93U2VjSW5jcmVhc2UgLyBXRUFLX1NFQykgKiAyO1xyXG4gICAgYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmdyb3dUaHJlYWRzID0gdHJhc2hUaHJlYWRzIC0gYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmdyb3dXZWFrZW5UaHJlYWRzO1xyXG4gICAgYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmhhY2tUaHJlYWRzID0gMDtcclxuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5oYWNrV2Vha2VuVGhyZWFkcyA9IDA7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjeWNsZVRocmVhZHMgPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLnRvdGFsVGhyZWFkcygpLCAwKTtcclxuICBjb25zdCBjeWNsZUdhaW4gPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLmdhaW4sIDApO1xyXG4gIGNvbnN0IGN5Y2xlVGltZSA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogJHtiYXRjaGVzLmxlbmd0aH0gQmF0Y2hlcyB8ICR7Y3ljbGVUaHJlYWRzfSBUaHJlYWRzIHwgJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluLCAzLCAxMDAwLCB0cnVlKX0gR2FpbiB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcclxuICAvLyBucy50cHJpbnRmKGAke3RhcmdldH06IEJhdGNoIDEgfCBodDoke2JhdGNoZXNbMF0uaGFja1RocmVhZHN9IHwgaHd0OiR7YmF0Y2hlc1swXS5oYWNrV2Vha2VuVGhyZWFkc30gfCBndDoke2JhdGNoZXNbMF0uZ3Jvd1RocmVhZHN9IHwgZ3d0OiR7YmF0Y2hlc1swXS5ncm93V2Vha2VuVGhyZWFkc31gKVxyXG4gIC8vIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogQmF0Y2ggMiB8IGh0OiR7YmF0Y2hlc1sxXS5oYWNrVGhyZWFkc30gfCBod3Q6JHtiYXRjaGVzWzFdLmhhY2tXZWFrZW5UaHJlYWRzfSB8IGd0OiR7YmF0Y2hlc1sxXS5ncm93VGhyZWFkc30gfCBnd3Q6JHtiYXRjaGVzWzFdLmdyb3dXZWFrZW5UaHJlYWRzfWApXHJcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBCYXRjaCBOIHwgaHQ6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uZ3Jvd1dlYWtlblRocmVhZHN9YClcclxuXHJcbiAgY29uc3Qgc2NyaXB0cyA9IGdldFNjcmlwdENhbGxzKGJhdGNoZXMpO1xyXG4gIGxldCBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHNjcmlwdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcclxuXHJcbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcclxuICAgIHdoaWxlIChzbGF2ZVRocmVhZHMgPiAwKSB7XHJcbiAgICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcblxyXG4gICAgICBjb25zdCBzY3JpcHRUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBzY3JpcHQudGhyZWFkcyk7XHJcbiAgICAgIG5zLmV4ZWMoc2NyaXB0LnNjcmlwdCwgcywge3RlbXBvcmFyeTogdHJ1ZSwgdGhyZWFkczogc2NyaXB0VGhyZWFkc30sIHRhcmdldCwgc2NyaXB0Lm9mZnNldCk7XHJcbiAgICAgIHNsYXZlVGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xyXG4gICAgICBzY3JpcHQudGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xyXG5cclxuICAgICAgaWYgKHNjcmlwdC50aHJlYWRzID09PSAwKVxyXG4gICAgICAgIHNjcmlwdCA9IHNjcmlwdHMuc2hpZnQoKTsgICAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpOyAgXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG5cclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG5cclxuICAvLyBjb3B5IGhndyBzY3JpcHRzIHRvIHNsYXZlIG1hY2hpbmVzXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICBucy5zY3AoWydoYWNrLmpzJywgJ2dyb3cuanMnLCAnd2Vha2VuLmpzJ10sIHMpO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhcmdldCA9ICduZWN0YXItbmV0JztcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGF3YWl0IGN5Y2xlKG5zLCB0YXJnZXQpO1xyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"archive/simple-hack.js\",\"server\":\"home\"}}],[\"clock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastEl;\\r\\nconst roots = [];\\r\\nfunction stFormat(ns, ms, showms = true, showfull = false) {\\r\\n    if (ms <= 0)\\r\\n        return \\\"--\\\";\\r\\n    let timeLeft = ms;\\r\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\r\\n    timeLeft -= hours * (1000 * 60 * 60);\\r\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\r\\n    timeLeft -= minutes * (1000 * 60);\\r\\n    const seconds = Math.floor(timeLeft / 1000);\\r\\n    timeLeft -= seconds * 1000;\\r\\n    const milliseconds = timeLeft;\\r\\n    if (showms) {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02d.%03ds\\\", hours, minutes, seconds, milliseconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02d.%03ds\\\", minutes, seconds, milliseconds);\\r\\n        return ns.sprintf(\\\"%d.%03ds\\\", seconds, milliseconds);\\r\\n    }\\r\\n    else {\\r\\n        if (hours > 0 || showfull)\\r\\n            return ns.sprintf(\\\"%dh%02dm%02ds\\\", hours, minutes, seconds);\\r\\n        if (minutes > 0)\\r\\n            return ns.sprintf(\\\"%dm%02ds\\\", minutes, seconds);\\r\\n        return ns.sprintf(\\\"%ds\\\", seconds);\\r\\n    }\\r\\n}\\r\\nfunction insertAfter(newNode, existingNode) {\\r\\n    if (!existingNode.parentNode)\\r\\n        throw \\\"insertAfter init failed\\\";\\r\\n    if (existingNode.nextSibling)\\r\\n        return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\\r\\n    else\\r\\n        return existingNode.parentNode.appendChild(newNode);\\r\\n}\\r\\nfunction addBottomLine() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const newRootEl = hookRootEl?.cloneNode(true);\\r\\n    if (!hookRootEl || !newRootEl)\\r\\n        throw \\\"addBottomLine init failed\\\";\\r\\n    const child1 = newRootEl?.children[0]?.children[0];\\r\\n    if (child1) {\\r\\n        child1.innerText = \\\"\\\";\\r\\n    }\\r\\n    const child2 = newRootEl?.children[0]?.children[0];\\r\\n    if (child2) {\\r\\n        child2.innerText = \\\"\\\";\\r\\n        child2.removeAttribute(\\\"id\\\");\\r\\n    }\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addBottomLine init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newRootEl;\\r\\n}\\r\\nfunction addSingle() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc?.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl = newRootEl?.children[0]?.firstChild;\\r\\n    if (!hookRootEl || !newRootEl || !newEl)\\r\\n        throw \\\"addSingle init failed\\\";\\r\\n    if (newRootEl?.childNodes[1])\\r\\n        newRootEl.removeChild(newRootEl.childNodes[1]);\\r\\n    newEl.removeAttribute(\\\"id\\\");\\r\\n    newEl.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addSingle init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return newEl;\\r\\n}\\r\\nfunction addDouble() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackRootEl = overviewEl?.children[2];\\r\\n    const newRootEl = hackRootEl?.cloneNode(true);\\r\\n    const newEl1 = newRootEl?.children[0]?.children[0];\\r\\n    const newEl2 = newRootEl?.children[1]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!hookRootEl || !newRootEl || !newEl1 || !newEl2)\\r\\n        throw \\\"addDouble init failed\\\";\\r\\n    newEl1.removeAttribute(\\\"id\\\");\\r\\n    newEl1.innerText = \\\"\\\";\\r\\n    newEl2.removeAttribute(\\\"id\\\");\\r\\n    newEl2.innerText = \\\"\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = hookRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addDouble init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newEl1, newEl2];\\r\\n}\\r\\nfunction addProgress() {\\r\\n    const self = globalThis;\\r\\n    const doc = self[\\\"document\\\"];\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hookRootEl = hook0?.parentElement?.parentElement;\\r\\n    const overviewEl = hookRootEl?.parentElement;\\r\\n    const hackProgressEl = overviewEl?.children[3];\\r\\n    const newRootEl = hackProgressEl?.cloneNode(true);\\r\\n    const newSub1 = newRootEl?.children[0]?.children[0];\\r\\n    const newSub2 = newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // check if anything failed\\r\\n    if (!newRootEl || !newSub1 || !newSub2)\\r\\n        throw \\\"addProgress init failed\\\";\\r\\n    if (lastEl === undefined)\\r\\n        lastEl = newRootEl;\\r\\n    try {\\r\\n        lastEl = insertAfter(newRootEl, lastEl);\\r\\n    }\\r\\n    catch (e) {\\r\\n        throw `${e}; addProgress init failed`;\\r\\n    }\\r\\n    roots.push(newRootEl);\\r\\n    return [newSub1, newSub2];\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    ns.atExit(function () {\\r\\n        for (const root of roots) {\\r\\n            // root.parentNode?.removeChild(root);\\r\\n            root.remove();\\r\\n        }\\r\\n    });\\r\\n    try {\\r\\n        const [clockEl, karmaEl] = addDouble();\\r\\n        const targetEl = addSingle();\\r\\n        const incomeEl = addSingle();\\r\\n        const [stateEl, countdownEl] = addDouble();\\r\\n        const [hackProgressEl1, hackProgressEl2] = addProgress();\\r\\n        addBottomLine();\\r\\n        // target faction\\r\\n        // target rep (rep/s) || target money\\r\\n        // current rep | rep countdown time\\r\\n        // rep progress\\r\\n        const [factionTarget, factionTargetMoney] = addDouble();\\r\\n        const [factionTargetRep, factionTargetEndTime] = addDouble();\\r\\n        const [factionRepTotal, factionCountdown] = addDouble();\\r\\n        const [factionProgress1, factionProgress2] = addProgress();\\r\\n        addBottomLine();\\r\\n        karmaEl.classList.toggle(\\\"makeStyles-hack-17\\\", false);\\r\\n        karmaEl.classList.add(\\\"makeStyles-hp-15\\\");\\r\\n        const port1 = ns.getPortHandle(1);\\r\\n        const factionPort = ns.getPortHandle(2);\\r\\n        let startTime = 0;\\r\\n        let endTime = 1000;\\r\\n        let fullTime = 1000;\\r\\n        while (true) {\\r\\n            if (!port1.empty()) {\\r\\n                const data = JSON.parse(port1.peek().toString());\\r\\n                startTime = new Date(data[0]).getTime();\\r\\n                endTime = new Date(startTime + data[1]).getTime();\\r\\n                fullTime = endTime - startTime;\\r\\n                const date = new Date();\\r\\n                const curTime = date.getTime();\\r\\n                // Update Clock\\r\\n                // let ms = ns.sprintf(\\\"%03d\\\", date.getUTCMilliseconds());\\r\\n                // clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\") + \\\".\\\" + ms;\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                // Update Karma\\r\\n                karmaEl.innerText = `k: ${ns.heart.break().toFixed(0)}`;\\r\\n                // Update Target & Income\\r\\n                targetEl.innerText = data[2];\\r\\n                incomeEl.innerText = data[3];\\r\\n                // Update State & Countdown\\r\\n                stateEl.innerText = data[4];\\r\\n                countdownEl.innerText = stFormat(ns, endTime - curTime, false);\\r\\n                // Update Progress\\r\\n                const tvalue = curTime - startTime;\\r\\n                const nvalue = (tvalue / fullTime) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (startTime === 0 || wholeValue > 100) {\\r\\n                    port1.clear();\\r\\n                    transform = 100;\\r\\n                    wholeValue = 0;\\r\\n                }\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                const date = new Date();\\r\\n                clockEl.innerText = date.toLocaleTimeString(\\\"it-IT\\\");\\r\\n                karmaEl.innerText = ns.heart.break().toFixed(0).toString();\\r\\n                targetEl.innerText = \\\"NO TARGET\\\";\\r\\n                incomeEl.innerText = \\\"\\\";\\r\\n                stateEl.innerText = \\\"\\\";\\r\\n                countdownEl.innerText = \\\"\\\";\\r\\n                hackProgressEl1.setAttribute(\\\"aria-valuenow\\\", \\\"0\\\");\\r\\n                hackProgressEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-100%);\\\");\\r\\n            }\\r\\n            if (!factionPort.empty()) {\\r\\n                const data = JSON.parse(factionPort.peek().toString());\\r\\n                // Update Faction Name\\r\\n                const factionName = data[0];\\r\\n                factionTarget.innerText = factionName;\\r\\n                // Update Faction Rep Target\\r\\n                // target rep (rep/s)\\r\\n                const repTarget = Number(data[1]);\\r\\n                const repGainPerMs = 0; //(ns.getPlayer().workRepGainRate * 5) / 1000;\\r\\n                factionTargetRep.innerText = ns.sprintf(\\\"%s (%s/s)    \\\", ns.nFormat(repTarget, \\\"0.00a\\\"), ns.nFormat(repGainPerMs * 1000, \\\"0.00a\\\"));\\r\\n                // update Money Target\\r\\n                factionTargetMoney.innerText = ns.nFormat(data[2], \\\"$0.00a\\\");\\r\\n                // Update Current Faction Rep\\r\\n                const currentRep = 0;\\r\\n                // ns.singularity.getFactionRep(factionName) +\\r\\n                // (ns.singularity.getCurrentWork === factionName\\r\\n                //   ? ns.getPlayer().workRepGained\\r\\n                //   : 0);\\r\\n                factionRepTotal.innerText = ns.nFormat(currentRep, \\\"0.00a\\\");\\r\\n                // Update Rep Countdown Timer\\r\\n                if (repGainPerMs > 0) {\\r\\n                    factionTargetEndTime.innerText = \\\"\\\"; //stdFormat(ns, (repTarget - currentRep) / repGainPerMs);\\r\\n                    factionCountdown.innerText = stFormat(ns, (repTarget - currentRep) / repGainPerMs, false);\\r\\n                }\\r\\n                else {\\r\\n                    factionTargetEndTime.innerText = \\\"--\\\";\\r\\n                    factionCountdown.innerText = \\\"--\\\";\\r\\n                }\\r\\n                // Update Progress\\r\\n                const tvalue = currentRep;\\r\\n                const nvalue = (tvalue / repTarget) * 100;\\r\\n                let transform = 100 - nvalue;\\r\\n                let wholeValue = Math.floor(nvalue);\\r\\n                if (wholeValue > 100) {\\r\\n                    transform = 0;\\r\\n                    wholeValue = 100;\\r\\n                }\\r\\n                factionProgress1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\r\\n                factionProgress2.setAttribute(\\\"style\\\", `transform: translateX(${-transform.toFixed(3)}%);`);\\r\\n            }\\r\\n            else {\\r\\n                factionTarget.innerText = \\\"\\\";\\r\\n                factionTargetRep.innerText = \\\"\\\";\\r\\n                factionTargetMoney.innerText = \\\"\\\";\\r\\n                factionRepTotal.innerText = \\\"\\\";\\r\\n                factionCountdown.innerText = \\\"\\\";\\r\\n                factionTargetEndTime.innerText = \\\"\\\";\\r\\n                factionProgress1.setAttribute(\\\"aria-valuenow\\\", \\\"100\\\");\\r\\n                factionProgress2.setAttribute(\\\"style\\\", \\\"transform: translateX(-0%);\\\");\\r\\n            }\\r\\n            await ns.sleep(1000);\\r\\n        }\\r\\n    }\\r\\n    catch (e) {\\r\\n        ns.tprintf(\\\"ERROR: %s\\\", e);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2xvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsSUFBSSxNQUFtQixDQUFDO0FBQ3hCLE1BQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7QUFFaEMsU0FBUyxRQUFRLENBQUMsRUFBTSxFQUFFLEVBQVUsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLFFBQVEsR0FBRyxLQUFLO0lBQ25FLElBQUksRUFBRSxJQUFJLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUV6QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNWLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQ3ZCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FDZixvQkFBb0IsRUFDcEIsS0FBSyxFQUNMLE9BQU8sRUFDUCxPQUFPLEVBQ1AsWUFBWSxDQUNiLENBQUM7UUFDSixJQUFJLE9B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RWw6IEhUTUxFbGVtZW50O1xyXG5jb25zdCByb290czogSFRNTEVsZW1lbnRbXSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gc3RGb3JtYXQobnM6IE5TLCBtczogbnVtYmVyLCBzaG93bXMgPSB0cnVlLCBzaG93ZnVsbCA9IGZhbHNlKSB7XHJcbiAgaWYgKG1zIDw9IDApIHJldHVybiBcIi0tXCI7XHJcblxyXG4gIGxldCB0aW1lTGVmdCA9IG1zO1xyXG4gIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihtcyAvICgxMDAwICogNjAgKiA2MCkpO1xyXG4gIHRpbWVMZWZ0IC09IGhvdXJzICogKDEwMDAgKiA2MCAqIDYwKTtcclxuICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0aW1lTGVmdCAvICgxMDAwICogNjApKTtcclxuICB0aW1lTGVmdCAtPSBtaW51dGVzICogKDEwMDAgKiA2MCk7XHJcbiAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IodGltZUxlZnQgLyAxMDAwKTtcclxuICB0aW1lTGVmdCAtPSBzZWNvbmRzICogMTAwMDtcclxuICBjb25zdCBtaWxsaXNlY29uZHMgPSB0aW1lTGVmdDtcclxuXHJcbiAgaWYgKHNob3dtcykge1xyXG4gICAgaWYgKGhvdXJzID4gMCB8fCBzaG93ZnVsbClcclxuICAgICAgcmV0dXJuIG5zLnNwcmludGYoXHJcbiAgICAgICAgXCIlZGglMDJkbSUwMmQuJTAzZHNcIixcclxuICAgICAgICBob3VycyxcclxuICAgICAgICBtaW51dGVzLFxyXG4gICAgICAgIHNlY29uZHMsXHJcbiAgICAgICAgbWlsbGlzZWNvbmRzXHJcbiAgICAgICk7XHJcbiAgICBpZiAobWludXRlcyA+IDApXHJcbiAgICAgIHJldHVybiBucy5zcHJpbnRmKFwiJWRtJTAyZC4lMDNkc1wiLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xyXG4gICAgcmV0dXJuIG5zLnNwcmludGYoXCIlZC4lMDNkc1wiLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoaG91cnMgPiAwIHx8IHNob3dmdWxsKVxyXG4gICAgICByZXR1cm4gbnMuc3ByaW50ZihcIiVkaCUwMmRtJTAyZHNcIiwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xyXG4gICAgaWYgKG1pbnV0ZXMgPiAwKSByZXR1cm4gbnMuc3ByaW50ZihcIiVkbSUwMmRzXCIsIG1pbnV0ZXMsIHNlY29uZHMpO1xyXG4gICAgcmV0dXJuIG5zLnNwcmludGYoXCIlZHNcIiwgc2Vjb25kcyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRBZnRlcihuZXdOb2RlOiBIVE1MRWxlbWVudCwgZXhpc3RpbmdOb2RlOiBIVE1MRWxlbWVudCkge1xyXG4gIGlmICghZXhpc3RpbmdOb2RlLnBhcmVudE5vZGUpIHRocm93IFwiaW5zZXJ0QWZ0ZXIgaW5pdCBmYWlsZWRcIjtcclxuICBpZiAoZXhpc3RpbmdOb2RlLm5leHRTaWJsaW5nKVxyXG4gICAgcmV0dXJuIGV4aXN0aW5nTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShcclxuICAgICAgbmV3Tm9kZSxcclxuICAgICAgZXhpc3RpbmdOb2RlLm5leHRTaWJsaW5nXHJcbiAgICApO1xyXG4gIGVsc2UgcmV0dXJuIGV4aXN0aW5nTm9kZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRCb3R0b21MaW5lKCkge1xyXG4gIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzO1xyXG4gIGNvbnN0IGRvYyA9IHNlbGZbXCJkb2N1bWVudFwiXTtcclxuICBjb25zdCBob29rMCA9IGRvYz8uZ2V0RWxlbWVudEJ5SWQoXCJvdmVydmlldy1leHRyYS1ob29rLTBcIik7XHJcbiAgY29uc3QgaG9va1Jvb3RFbCA9IGhvb2swPy5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50O1xyXG5cclxuICBjb25zdCBuZXdSb290RWwgPSA8SFRNTEVsZW1lbnQ+aG9va1Jvb3RFbD8uY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICBpZiAoIWhvb2tSb290RWwgfHwgIW5ld1Jvb3RFbCkgdGhyb3cgXCJhZGRCb3R0b21MaW5lIGluaXQgZmFpbGVkXCI7XHJcblxyXG4gIGNvbnN0IGNoaWxkMSA9IDxIVE1MRWxlbWVudD5uZXdSb290RWw/LmNoaWxkcmVuWzBdPy5jaGlsZHJlblswXTtcclxuICBpZiAoY2hpbGQxKSB7XHJcbiAgICBjaGlsZDEuaW5uZXJUZXh0ID0gXCJcIjtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNoaWxkMiA9IDxIVE1MRWxlbWVudD5uZXdSb290RWw/LmNoaWxkcmVuWzBdPy5jaGlsZHJlblswXTtcclxuICBpZiAoY2hpbGQyKSB7XHJcbiAgICBjaGlsZDIuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgIGNoaWxkMi5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcclxuICB9XHJcblxyXG4gIGlmIChsYXN0RWwgPT09IHVuZGVmaW5lZCkgbGFzdEVsID0gaG9va1Jvb3RFbDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxhc3RFbCA9IGluc2VydEFmdGVyKG5ld1Jvb3RFbCwgbGFzdEVsKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICB0aHJvdyBgJHtlfTsgYWRkQm90dG9tTGluZSBpbml0IGZhaWxlZGA7XHJcbiAgfVxyXG5cclxuICByb290cy5wdXNoKG5ld1Jvb3RFbCk7XHJcblxyXG4gIHJldHVybiBuZXdSb290RWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFNpbmdsZSgpIHtcclxuICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpcztcclxuICBjb25zdCBkb2MgPSBzZWxmW1wiZG9jdW1lbnRcIl07XHJcbiAgY29uc3QgaG9vazAgPSBkb2M/LmdldEVsZW1lbnRCeUlkKFwib3ZlcnZpZXctZXh0cmEtaG9vay0wXCIpO1xyXG4gIGNvbnN0IGhvb2tSb290RWwgPSBob29rMD8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudDtcclxuICBjb25zdCBvdmVydmlld0VsID0gaG9va1Jvb3RFbD8ucGFyZW50RWxlbWVudDtcclxuICBjb25zdCBoYWNrUm9vdEVsID0gb3ZlcnZpZXdFbD8uY2hpbGRyZW5bMl07XHJcbiAgY29uc3QgbmV3Um9vdEVsID0gPEhUTUxFbGVtZW50PmhhY2tSb290RWw/LmNsb25lTm9kZSh0cnVlKTtcclxuICBjb25zdCBuZXdFbCA9IDxIVE1MRWxlbWVudD5uZXdSb290RWw/LmNoaWxkcmVuWzBdPy5maXJzdENoaWxkO1xyXG5cclxuICBpZiAoIWhvb2tSb290RWwgfHwgIW5ld1Jvb3RFbCB8fCAhbmV3RWwpIHRocm93IFwiYWRkU2luZ2xlIGluaXQgZmFpbGVkXCI7XHJcblxyXG4gIGlmIChuZXdSb290RWw/LmNoaWxkTm9kZXNbMV0pIG5ld1Jvb3RFbC5yZW1vdmVDaGlsZChuZXdSb290RWwuY2hpbGROb2Rlc1sxXSk7XHJcblxyXG4gIG5ld0VsLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xyXG4gIG5ld0VsLmlubmVyVGV4dCA9IFwiXCI7XHJcblxyXG4gIGlmIChsYXN0RWwgPT09IHVuZGVmaW5lZCkgbGFzdEVsID0gaG9va1Jvb3RFbDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxhc3RFbCA9IGluc2VydEFmdGVyKG5ld1Jvb3RFbCwgbGFzdEVsKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICB0aHJvdyBgJHtlfTsgYWRkU2luZ2xlIGluaXQgZmFpbGVkYDtcclxuICB9XHJcblxyXG4gIHJvb3RzLnB1c2gobmV3Um9vdEVsKTtcclxuXHJcbiAgcmV0dXJuIG5ld0VsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGREb3VibGUoKSB7XHJcbiAgY29uc3Qgc2VsZiA9IGdsb2JhbFRoaXM7XHJcbiAgY29uc3QgZG9jID0gc2VsZltcImRvY3VtZW50XCJdO1xyXG4gIGNvbnN0IGhvb2swID0gZG9jLmdldEVsZW1lbnRCeUlkKFwib3ZlcnZpZXctZXh0cmEtaG9vay0wXCIpO1xyXG4gIGNvbnN0IGhvb2tSb290RWwgPSBob29rMD8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudDtcclxuICBjb25zdCBvdmVydmlld0VsID0gaG9va1Jvb3RFbD8ucGFyZW50RWxlbWVudDtcclxuICBjb25zdCBoYWNrUm9vdEVsID0gb3ZlcnZpZXdFbD8uY2hpbGRyZW5bMl07XHJcblxyXG4gIGNvbnN0IG5ld1Jvb3RFbCA9IDxIVE1MRWxlbWVudD5oYWNrUm9vdEVsPy5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgY29uc3QgbmV3RWwxID0gPEhUTUxFbGVtZW50Pm5ld1Jvb3RFbD8uY2hpbGRyZW5bMF0/LmNoaWxkcmVuWzBdO1xyXG4gIGNvbnN0IG5ld0VsMiA9IDxIVE1MRWxlbWVudD5uZXdSb290RWw/LmNoaWxkcmVuWzFdPy5jaGlsZHJlblswXTtcclxuXHJcbiAgLy8gY2hlY2sgaWYgYW55dGhpbmcgZmFpbGVkXHJcbiAgaWYgKCFob29rUm9vdEVsIHx8ICFuZXdSb290RWwgfHwgIW5ld0VsMSB8fCAhbmV3RWwyKVxyXG4gICAgdGhyb3cgXCJhZGREb3VibGUgaW5pdCBmYWlsZWRcIjtcclxuXHJcbiAgbmV3RWwxLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xyXG4gIG5ld0VsMS5pbm5lclRleHQgPSBcIlwiO1xyXG5cclxuICBuZXdFbDIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XHJcbiAgbmV3RWwyLmlubmVyVGV4dCA9IFwiXCI7XHJcblxyXG4gIGlmIChsYXN0RWwgPT09IHVuZGVmaW5lZCkgbGFzdEVsID0gaG9va1Jvb3RFbDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxhc3RFbCA9IGluc2VydEFmdGVyKG5ld1Jvb3RFbCwgbGFzdEVsKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICB0aHJvdyBgJHtlfTsgYWRkRG91YmxlIGluaXQgZmFpbGVkYDtcclxuICB9XHJcblxyXG4gIHJvb3RzLnB1c2gobmV3Um9vdEVsKTtcclxuXHJcbiAgcmV0dXJuIFtuZXdFbDEsIG5ld0VsMl07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFByb2dyZXNzKCkge1xyXG4gIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzO1xyXG4gIGNvbnN0IGRvYyA9IHNlbGZbXCJkb2N1bWVudFwiXTtcclxuICBjb25zdCBob29rMCA9IGRvYy5nZXRFbGVtZW50QnlJZChcIm92ZXJ2aWV3LWV4dHJhLWhvb2stMFwiKTtcclxuXHJcbiAgY29uc3QgaG9va1Jvb3RFbCA9IGhvb2swPy5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50O1xyXG4gIGNvbnN0IG92ZXJ2aWV3RWwgPSBob29rUm9vdEVsPy5wYXJlbnRFbGVtZW50O1xyXG5cclxuICBjb25zdCBoYWNrUHJvZ3Jlc3NFbCA9IDxIVE1MRWxlbWVudD5vdmVydmlld0VsPy5jaGlsZHJlblszXTtcclxuXHJcbiAgY29uc3QgbmV3Um9vdEVsID0gPEhUTUxFbGVtZW50PmhhY2tQcm9ncmVzc0VsPy5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gIGNvbnN0IG5ld1N1YjEgPSA8SFRNTEVsZW1lbnQ+bmV3Um9vdEVsPy5jaGlsZHJlblswXT8uY2hpbGRyZW5bMF07XHJcbiAgY29uc3QgbmV3U3ViMiA9IDxIVE1MRWxlbWVudD5uZXdSb290RWw/LmNoaWxkcmVuWzBdPy5jaGlsZHJlblswXT8uY2hpbGRyZW5bMF07XHJcblxyXG4gIC8vIGNoZWNrIGlmIGFueXRoaW5nIGZhaWxlZFxyXG4gIGlmICghbmV3Um9vdEVsIHx8ICFuZXdTdWIxIHx8ICFuZXdTdWIyKSB0aHJvdyBcImFkZFByb2dyZXNzIGluaXQgZmFpbGVkXCI7XHJcblxyXG4gIGlmIChsYXN0RWwgPT09IHVuZGVmaW5lZCkgbGFzdEVsID0gbmV3Um9vdEVsO1xyXG5cclxuICB0cnkge1xyXG4gICAgbGFzdEVsID0gaW5zZXJ0QWZ0ZXIobmV3Um9vdEVsLCBsYXN0RWwpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHRocm93IGAke2V9OyBhZGRQcm9ncmVzcyBpbml0IGZhaWxlZGA7XHJcbiAgfVxyXG5cclxuICByb290cy5wdXNoKG5ld1Jvb3RFbCk7XHJcblxyXG4gIHJldHVybiBbbmV3U3ViMSwgbmV3U3ViMl07XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGFyZ3MgPSBucy5mbGFncyhbW1wiaGVscFwiLCBmYWxzZV1dKTtcclxuICBpZiAoYXJncy5oZWxwKSB7XHJcbiAgICBucy50cHJpbnQoXHJcbiAgICAgIFwiVGhpcyBzY3JpcHQgd2lsbCBlbmhhbmNlIHlvdXIgSFVEIChIZWFkcyB1cCBEaXNwbGF5KSB3aXRoIGN1c3RvbSBzdGF0aXN0aWNzLlwiXHJcbiAgICApO1xyXG4gICAgbnMudHByaW50KGBVc2FnZTogcnVuICR7bnMuZ2V0U2NyaXB0TmFtZSgpfWApO1xyXG4gICAgbnMudHByaW50KFwiRXhhbXBsZTpcIik7XHJcbiAgICBucy50cHJpbnQoYD4gcnVuICR7bnMuZ2V0U2NyaXB0TmFtZSgpfWApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbnMuYXRFeGl0KGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAoY29uc3Qgcm9vdCBvZiByb290cykge1xyXG4gICAgICAvLyByb290LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKHJvb3QpO1xyXG4gICAgICByb290LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgW2Nsb2NrRWwsIGthcm1hRWxdID0gYWRkRG91YmxlKCk7XHJcbiAgICBjb25zdCB0YXJnZXRFbCA9IGFkZFNpbmdsZSgpO1xyXG4gICAgY29uc3QgaW5jb21lRWwgPSBhZGRTaW5nbGUoKTtcclxuICAgIGNvbnN0IFtzdGF0ZUVsLCBjb3VudGRvd25FbF0gPSBhZGREb3VibGUoKTtcclxuICAgIGNvbnN0IFtoYWNrUHJvZ3Jlc3NFbDEsIGhhY2tQcm9ncmVzc0VsMl0gPSBhZGRQcm9ncmVzcygpO1xyXG5cclxuICAgIGFkZEJvdHRvbUxpbmUoKTtcclxuXHJcbiAgICAvLyB0YXJnZXQgZmFjdGlvblxyXG4gICAgLy8gdGFyZ2V0IHJlcCAocmVwL3MpIHx8IHRhcmdldCBtb25leVxyXG4gICAgLy8gY3VycmVudCByZXAgfCByZXAgY291bnRkb3duIHRpbWVcclxuICAgIC8vIHJlcCBwcm9ncmVzc1xyXG4gICAgY29uc3QgW2ZhY3Rpb25UYXJnZXQsIGZhY3Rpb25UYXJnZXRNb25leV0gPSBhZGREb3VibGUoKTtcclxuICAgIGNvbnN0IFtmYWN0aW9uVGFyZ2V0UmVwLCBmYWN0aW9uVGFyZ2V0RW5kVGltZV0gPSBhZGREb3VibGUoKTtcclxuICAgIGNvbnN0IFtmYWN0aW9uUmVwVG90YWwsIGZhY3Rpb25Db3VudGRvd25dID0gYWRkRG91YmxlKCk7XHJcbiAgICBjb25zdCBbZmFjdGlvblByb2dyZXNzMSwgZmFjdGlvblByb2dyZXNzMl0gPSBhZGRQcm9ncmVzcygpO1xyXG5cclxuICAgIGFkZEJvdHRvbUxpbmUoKTtcclxuXHJcbiAgICBrYXJtYUVsLmNsYXNzTGlzdC50b2dnbGUoXCJtYWtlU3R5bGVzLWhhY2stMTdcIiwgZmFsc2UpO1xyXG4gICAga2FybWFFbC5jbGFzc0xpc3QuYWRkKFwibWFrZVN0eWxlcy1ocC0xNVwiKTtcclxuXHJcbiAgICBjb25zdCBwb3J0MSA9IG5zLmdldFBvcnRIYW5kbGUoMSk7XHJcbiAgICBjb25zdCBmYWN0aW9uUG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBsZXQgc3RhcnRUaW1lID0gMDtcclxuICAgIGxldCBlbmRUaW1lID0gMTAwMDtcclxuICAgIGxldCBmdWxsVGltZSA9IDEwMDA7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICBpZiAoIXBvcnQxLmVtcHR5KCkpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShwb3J0MS5wZWVrKCkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoZGF0YVswXSkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGVuZFRpbWUgPSBuZXcgRGF0ZShzdGFydFRpbWUgKyBkYXRhWzFdKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgZnVsbFRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zdCBjdXJUaW1lID0gZGF0ZS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBDbG9ja1xyXG4gICAgICAgIC8vIGxldCBtcyA9IG5zLnNwcmludGYoXCIlMDNkXCIsIGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkpO1xyXG4gICAgICAgIC8vIGNsb2NrRWwuaW5uZXJUZXh0ID0gZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoXCJpdC1JVFwiKSArIFwiLlwiICsgbXM7XHJcbiAgICAgICAgY2xvY2tFbC5pbm5lclRleHQgPSBkYXRlLnRvTG9jYWxlVGltZVN0cmluZyhcIml0LUlUXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgS2FybWFcclxuICAgICAgICBrYXJtYUVsLmlubmVyVGV4dCA9IGBrOiAke25zLmhlYXJ0LmJyZWFrKCkudG9GaXhlZCgwKX1gO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgVGFyZ2V0ICYgSW5jb21lXHJcbiAgICAgICAgdGFyZ2V0RWwuaW5uZXJUZXh0ID0gZGF0YVsyXTtcclxuICAgICAgICBpbmNvbWVFbC5pbm5lclRleHQgPSBkYXRhWzNdO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgU3RhdGUgJiBDb3VudGRvd25cclxuICAgICAgICBzdGF0ZUVsLmlubmVyVGV4dCA9IGRhdGFbNF07XHJcbiAgICAgICAgY291bnRkb3duRWwuaW5uZXJUZXh0ID0gc3RGb3JtYXQobnMsIGVuZFRpbWUgLSBjdXJUaW1lLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBQcm9ncmVzc1xyXG4gICAgICAgIGNvbnN0IHR2YWx1ZSA9IGN1clRpbWUgLSBzdGFydFRpbWU7XHJcbiAgICAgICAgY29uc3QgbnZhbHVlID0gKHR2YWx1ZSAvIGZ1bGxUaW1lKSAqIDEwMDtcclxuICAgICAgICBsZXQgdHJhbnNmb3JtID0gMTAwIC0gbnZhbHVlO1xyXG4gICAgICAgIGxldCB3aG9sZVZhbHVlID0gTWF0aC5mbG9vcihudmFsdWUpO1xyXG5cclxuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSAwIHx8IHdob2xlVmFsdWUgPiAxMDApIHtcclxuICAgICAgICAgIHBvcnQxLmNsZWFyKCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm0gPSAxMDA7XHJcbiAgICAgICAgICB3aG9sZVZhbHVlID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhhY2tQcm9ncmVzc0VsMS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIGAke3dob2xlVmFsdWV9YCk7XHJcbiAgICAgICAgaGFja1Byb2dyZXNzRWwyLnNldEF0dHJpYnV0ZShcclxuICAgICAgICAgIFwic3R5bGVcIixcclxuICAgICAgICAgIGB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHstdHJhbnNmb3JtLnRvRml4ZWQoMyl9JSk7YFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgY2xvY2tFbC5pbm5lclRleHQgPSBkYXRlLnRvTG9jYWxlVGltZVN0cmluZyhcIml0LUlUXCIpO1xyXG4gICAgICAgIGthcm1hRWwuaW5uZXJUZXh0ID0gbnMuaGVhcnQuYnJlYWsoKS50b0ZpeGVkKDApLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIHRhcmdldEVsLmlubmVyVGV4dCA9IFwiTk8gVEFSR0VUXCI7XHJcbiAgICAgICAgaW5jb21lRWwuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICBzdGF0ZUVsLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgY291bnRkb3duRWwuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICBoYWNrUHJvZ3Jlc3NFbDEuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCBcIjBcIik7XHJcbiAgICAgICAgaGFja1Byb2dyZXNzRWwyLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZmFjdGlvblBvcnQuZW1wdHkoKSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGZhY3Rpb25Qb3J0LnBlZWsoKS50b1N0cmluZygpKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIEZhY3Rpb24gTmFtZVxyXG4gICAgICAgIGNvbnN0IGZhY3Rpb25OYW1lID0gZGF0YVswXTtcclxuICAgICAgICBmYWN0aW9uVGFyZ2V0LmlubmVyVGV4dCA9IGZhY3Rpb25OYW1lO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgRmFjdGlvbiBSZXAgVGFyZ2V0XHJcbiAgICAgICAgLy8gdGFyZ2V0IHJlcCAocmVwL3MpXHJcbiAgICAgICAgY29uc3QgcmVwVGFyZ2V0ID0gTnVtYmVyKGRhdGFbMV0pO1xyXG4gICAgICAgIGNvbnN0IHJlcEdhaW5QZXJNcyA9IDAvLyhucy5nZXRQbGF5ZXIoKS53b3JrUmVwR2FpblJhdGUgKiA1KSAvIDEwMDA7XHJcbiAgICAgICAgZmFjdGlvblRhcmdldFJlcC5pbm5lclRleHQgPSBucy5zcHJpbnRmKFxyXG4gICAgICAgICAgXCIlcyAoJXMvcykgICAgXCIsXHJcbiAgICAgICAgICBucy5uRm9ybWF0KHJlcFRhcmdldCwgXCIwLjAwYVwiKSxcclxuICAgICAgICAgIG5zLm5Gb3JtYXQocmVwR2FpblBlck1zICogMTAwMCwgXCIwLjAwYVwiKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBNb25leSBUYXJnZXRcclxuICAgICAgICBmYWN0aW9uVGFyZ2V0TW9uZXkuaW5uZXJUZXh0ID0gbnMubkZvcm1hdChkYXRhWzJdLCBcIiQwLjAwYVwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIEN1cnJlbnQgRmFjdGlvbiBSZXBcclxuICAgICAgICBjb25zdCBjdXJyZW50UmVwID0gMFxyXG4gICAgICAgICAgLy8gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChmYWN0aW9uTmFtZSkgK1xyXG4gICAgICAgICAgLy8gKG5zLnNpbmd1bGFyaXR5LmdldEN1cnJlbnRXb3JrID09PSBmYWN0aW9uTmFtZVxyXG4gICAgICAgICAgLy8gICA/IG5zLmdldFBsYXllcigpLndvcmtSZXBHYWluZWRcclxuICAgICAgICAgIC8vICAgOiAwKTtcclxuXHJcbiAgICAgICAgZmFjdGlvblJlcFRvdGFsLmlubmVyVGV4dCA9IG5zLm5Gb3JtYXQoY3VycmVudFJlcCwgXCIwLjAwYVwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIFJlcCBDb3VudGRvd24gVGltZXJcclxuICAgICAgICBpZiAocmVwR2FpblBlck1zID4gMCkge1xyXG4gICAgICAgICAgZmFjdGlvblRhcmdldEVuZFRpbWUuaW5uZXJUZXh0ID0gXCJcIjsvL3N0ZEZvcm1hdChucywgKHJlcFRhcmdldCAtIGN1cnJlbnRSZXApIC8gcmVwR2FpblBlck1zKTtcclxuICAgICAgICAgIGZhY3Rpb25Db3VudGRvd24uaW5uZXJUZXh0ID0gc3RGb3JtYXQobnMsIChyZXBUYXJnZXQgLSBjdXJyZW50UmVwKSAvIHJlcEdhaW5QZXJNcywgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmYWN0aW9uVGFyZ2V0RW5kVGltZS5pbm5lclRleHQgPSBcIi0tXCI7XHJcbiAgICAgICAgICBmYWN0aW9uQ291bnRkb3duLmlubmVyVGV4dCA9IFwiLS1cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBQcm9ncmVzc1xyXG4gICAgICAgIGNvbnN0IHR2YWx1ZSA9IGN1cnJlbnRSZXA7XHJcbiAgICAgICAgY29uc3QgbnZhbHVlID0gKHR2YWx1ZSAvIHJlcFRhcmdldCkgKiAxMDA7XHJcbiAgICAgICAgbGV0IHRyYW5zZm9ybSA9IDEwMCAtIG52YWx1ZTtcclxuICAgICAgICBsZXQgd2hvbGVWYWx1ZSA9IE1hdGguZmxvb3IobnZhbHVlKTtcclxuXHJcbiAgICAgICAgaWYgKHdob2xlVmFsdWUgPiAxMDApIHtcclxuICAgICAgICAgIHRyYW5zZm9ybSA9IDA7XHJcbiAgICAgICAgICB3aG9sZVZhbHVlID0gMTAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmFjdGlvblByb2dyZXNzMS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIGAke3dob2xlVmFsdWV9YCk7XHJcbiAgICAgICAgZmFjdGlvblByb2dyZXNzMi5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICBcInN0eWxlXCIsXHJcbiAgICAgICAgICBgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7LXRyYW5zZm9ybS50b0ZpeGVkKDMpfSUpO2BcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZhY3Rpb25UYXJnZXQuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICBmYWN0aW9uVGFyZ2V0UmVwLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgZmFjdGlvblRhcmdldE1vbmV5LmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgZmFjdGlvblJlcFRvdGFsLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgZmFjdGlvbkNvdW50ZG93bi5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgIGZhY3Rpb25UYXJnZXRFbmRUaW1lLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgZmFjdGlvblByb2dyZXNzMS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIFwiMTAwXCIpO1xyXG4gICAgICAgIGZhY3Rpb25Qcm9ncmVzczIuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTAlKTtcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIG5zLnRwcmludGYoXCJFUlJPUjogJXNcIiwgZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"clock.js\",\"server\":\"home\"}}],[\"tables.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const HEADER = 0; // Index of the header styles\\r\\nconst DIVIDER = 1; // Index of the horizontal divider style\\r\\nconst FOOTER = 2; // Index of the footer style\\r\\nconst OPENER = 0; // Index of the opener line character\\r\\nconst SEPARATOR = 1; // Index of the separator line character (where columns meet)\\r\\nconst CLOSER = 2; // Index of the closer line character\\r\\nconst FILLER = 3; // Index of the filler line character\\r\\nconst BAR = 4; // Index of the straight vertical bar line character\\r\\nexport let win = globalThis, doc = win[\\\"document\\\"];\\r\\nlet fmt = Intl.NumberFormat('en', { notation: 'compact' });\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    // Some sample data, basic information on root servers\\r\\n    // Note that if you want color, you need to use ColorPrint as the printing function\\r\\n    // Colored cells need to be an object with color and text, instead of \\\"any\\\".. Red cell example here\\r\\n    let data = ns.scan('home').map(s => [{ color: 'red', text: s }, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]);\\r\\n    // For bold we need to correct the spacing... Sketch AF, not sure how else.\\r\\n    // let boldText = 'bold text example blah';\\r\\n    // let spacing = -0.00666666666666666666666666666667 * boldText.length;\\r\\n    data.push([\\r\\n        { style: { color: 'red' }, text: 'nope' },\\r\\n        //{ style: { color: 'red', fontWeight: 'bold', letterSpacing: spacing }, text: boldText },\\r\\n        { style: { color: 'white', fontStyle: 'italic' }, text: 'italic text' },\\r\\n        { style: { color: 'white', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }, text: 'strikethrough text' }\\r\\n    ]);\\r\\n    // Free style, no columns, the table adjusts to contents\\r\\n    PrintTable(ns, data, undefined, DefaultStyle(), ColorPrint);\\r\\n    // Example of adding a break line in the middle of the table:\\r\\n    // data.push(null);\\r\\n    // data.push(...ns.scan('sigma-cosmetics').slice(1).map(s => [s, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]));\\r\\n    // We use pre-defined columns\\r\\n    // header: The text to display\\r\\n    // width : Width of the column content\\r\\n    // pad   : 0 for center, < 0 for left, > 0 for right\\r\\n    const columns = [\\r\\n        { header: 'Servers', width: 40 },\\r\\n        { header: 'Ram', width: 13 },\\r\\n        { header: 'Money', width: 20 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\nexport function PrintTable(ns, data, columns, style = DefaultStyle(), printfunc = ns.print) {\\r\\n    // if (printfunc != ns.print)\\r\\n    // \\tprintfunc = ns.tprint; // Temp fix until I get ansi colors working\\r\\n    // Create default columns if no definition were provided\\r\\n    let columnsProvided = true;\\r\\n    if (columns == undefined) {\\r\\n        columnsProvided = false;\\r\\n        columns = [];\\r\\n        for (let i = 0; i < data[0].length; i++) {\\r\\n            let longest = 0;\\r\\n            for (let ii = 0; ii < data.length; ii++) {\\r\\n                if (data[ii] == null)\\r\\n                    continue;\\r\\n                let len = data[ii][i].text != undefined ? data[ii][i].text.length : data[ii][i].toString().length;\\r\\n                if (len > longest)\\r\\n                    longest = len;\\r\\n            }\\r\\n            columns.push({ header: '', width: longest, padHeader: 0, padContent: 0 });\\r\\n        }\\r\\n    }\\r\\n    PrintBorder(ns, columns, style[HEADER], printfunc);\\r\\n    if (columnsProvided) {\\r\\n        PrintHeader(ns, columns, style[HEADER], printfunc);\\r\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\r\\n    }\\r\\n    let i = 0;\\r\\n    for (const line of data) {\\r\\n        PrintLine(ns, columns, line, style, printfunc, i++ % 2 == 0);\\r\\n    }\\r\\n    PrintBorder(ns, columns, style[FOOTER], printfunc);\\r\\n}\\r\\nexport function DefaultStyle() {\\r\\n    return [\\r\\n        ['╭', '┬', '╮', '─', '│'],\\r\\n        ['├', '┼', '┤', '─', '│'],\\r\\n        ['╰', '┴', '╯', '─', '│']\\r\\n    ];\\r\\n}\\r\\nfunction PrintBorder(ns, columns, style, printfunc = ns.print) {\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[OPENER]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        if (columns[c].hide)\\r\\n            continue;\\r\\n        printStack.push('white', ''.padEnd(columns[c].width, style[FILLER]));\\r\\n        if (c == columns.length - 1)\\r\\n            printStack.push('white', style[CLOSER]);\\r\\n        else\\r\\n            printStack.push('white', style[SEPARATOR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nfunction PrintHeader(ns, columns, style, printfunc = ns.print) {\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[BAR]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        if (columns[c].hide)\\r\\n            continue;\\r\\n        printStack.push('white', columns[c].header.padEnd(columns[c].width));\\r\\n        printStack.push('white', style[BAR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nfunction PrintLine(ns, columns, data, style, printfunc = ns.print, highlight) {\\r\\n    if (data == null) {\\r\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\r\\n        return;\\r\\n    }\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[0][BAR]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        if (columns[c].hide)\\r\\n            continue;\\r\\n        if (data[c].style != undefined)\\r\\n            printStack.push({ style: data[c].style }, data[c].text.padEnd(columns[c].width));\\r\\n        else if (data[c].color != undefined)\\r\\n            printStack.push(CreateStyle(data[c].color, highlight), data[c].text.padEnd(columns[c].width));\\r\\n        else\\r\\n            printStack.push(CreateStyle('white', highlight), data[c].toString().padEnd(columns[c].width));\\r\\n        printStack.push('white', style[0][BAR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nexport function CreateStyle(color, highlight) {\\r\\n    //return color;\\r\\n    let backColor = highlight ? '#000000' : '#1A1A1A';\\r\\n    return { style: { color: color, backgroundColor: backColor } };\\r\\n}\\r\\nfunction PrintStack(ns, printStack, printfunc) {\\r\\n    if (printfunc == ns.tprint || printfunc == ns.print || printfunc == ns.tprintf) {\\r\\n        ColorPrint(ns, printStack, false);\\r\\n    }\\r\\n    else {\\r\\n        printfunc(ns, printStack, true);\\r\\n    }\\r\\n}\\r\\n// Selects a color based on a 1-based percentage\\r\\nexport function pctColor(pct) {\\r\\n    if (pct >= 1)\\r\\n        return 'Lime';\\r\\n    else if (pct >= 0.9)\\r\\n        return 'Green';\\r\\n    else if (pct >= 0.75)\\r\\n        return 'DarkGreen';\\r\\n    else if (pct >= 0.6)\\r\\n        return 'GreenYellow';\\r\\n    else if (pct >= 0.3)\\r\\n        return 'Yellow';\\r\\n    else if (pct != 0)\\r\\n        return 'DarkOrange';\\r\\n    return 'Red';\\r\\n}\\r\\n// Usage: ColorPrint(ns, ['red', 'This is some red text', '#FFFFFF', ' This is some white text], true);\\r\\nexport function ColorPrint(ns, stack, toTerminal = true) {\\r\\n    let out = '';\\r\\n    for (let i = 0; i < stack.length; i += 2) {\\r\\n        let style = stack[i];\\r\\n        if (style.style == undefined) {\\r\\n            style = { style: { color: stack[i], backgroundColor: '#000000' } };\\r\\n        }\\r\\n        let color = style;\\r\\n        if (style.style)\\r\\n            color = style.style.color;\\r\\n        let match = COLORS.find(s => s.html == color || s.desc.toLowerCase() == color.toLowerCase());\\r\\n        if (!match && color.startsWith('#'))\\r\\n            match = FindHtmlColorEquivalent(ns, color);\\r\\n        if (!match)\\r\\n            match = COLORS.find(s => s.desc.toLowerCase().startsWith(color.toLowerCase()));\\r\\n        if (match)\\r\\n            color = '\\\\x1b[38;5;' + match.ansi + 'm';\\r\\n        else\\r\\n            ns.tprint('FAIL: unsupported color: ' + color);\\r\\n        let text = stack[i + 1].replace('%', '%%');\\r\\n        out = out + color + text;\\r\\n    }\\r\\n    if (toTerminal)\\r\\n        ns.tprintf(out);\\r\\n    else\\r\\n        ns.printf(out);\\r\\n}\\r\\n// ANSI colors supported by the game are 256 colors, HTML color is RGB\\r\\n// This functions finds the closest match to a full range HTML color code in the 256 color ANSI colors we have to work with\\r\\nfunction FindHtmlColorEquivalent(ns, htmlCode) {\\r\\n    let copy = COLORS.map(s => s);\\r\\n    copy.sort(function (a, b) {\\r\\n        let ca = rgbFromHtml(a.html);\\r\\n        let cb = rgbFromHtml(b.html);\\r\\n        let col = rgbFromHtml(htmlCode);\\r\\n        let oa = Math.abs(ca.r - col.r) + Math.abs(ca.g - col.g) + Math.abs(ca.b - col.b);\\r\\n        let ob = Math.abs(cb.r - col.r) + Math.abs(cb.g - col.g) + Math.abs(cb.b - col.b);\\r\\n        return oa - ob;\\r\\n    });\\r\\n    return copy[0];\\r\\n}\\r\\n// Converts a hexadecimal HTML color back to RGB int values\\r\\nfunction rgbFromHtml(htmlCode) {\\r\\n    let r = Number.parseInt('0x' + htmlCode.substr(1, 2));\\r\\n    let g = Number.parseInt('0x' + htmlCode.substr(3, 2));\\r\\n    let b = Number.parseInt('0x' + htmlCode.substr(5, 2));\\r\\n    return { r: r, g: g, b: b };\\r\\n}\\r\\n/**\\r\\n * @param {ns}\\r\\n * @param {Array} JSON DATA in form of [{id:1,name:\\\"Lexicon\\\"},{id:2,name:\\\"Paradox\\\"}]\\r\\n * @param {Array} pass an array of columns\\r\\n * @returns {HTMLTableElement} Returns a HTMLTableElement that you can use DOM.appendChild(table);\\r\\n */\\r\\nexport function createHTMLTableFromJSON(ns, data, columns) {\\r\\n    var formattedData = JSON.parse(JSON.stringify(data, columns));\\r\\n    var col = [];\\r\\n    var i;\\r\\n    for (i = 0; i < formattedData.length; i++) {\\r\\n        for (var key in formattedData[i]) {\\r\\n            if (col.indexOf(key) === -1) {\\r\\n                col.push(key);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    var table = doc.createElement(\\\"table\\\");\\r\\n    table.style.width = '100%';\\r\\n    var tr = table.insertRow(-1); // TABLE ROW.\\r\\n    for (i = 0; i < col.length; i++) {\\r\\n        var th = doc.createElement(\\\"th\\\"); // TABLE HEADER.\\r\\n        th.innerHTML = col[i];\\r\\n        tr.appendChild(th);\\r\\n    }\\r\\n    for (i = 0; i < formattedData.length; i++) {\\r\\n        tr = table.insertRow(-1);\\r\\n        for (var j = 0; j < col.length; j++) {\\r\\n            var tabCell = tr.insertCell(-1);\\r\\n            if (typeof (formattedData[i][col[j]]) == 'number') {\\r\\n                var number = formattedData[i][col[j]];\\r\\n                if (number > 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"green\\\");\\r\\n                else if (number == 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"white\\\");\\r\\n                else if (number < 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"red\\\");\\r\\n            }\\r\\n            else {\\r\\n                tabCell.innerHTML = formattedData[i][col[j]];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return table;\\r\\n}\\r\\nlet addHtmlWithColor = (tag, data, color) => {\\r\\n    return \\\"<\\\" + tag + \\\" style='color:\\\" + color + \\\"'>\\\" + data + \\\"</\\\" + tag + \\\">\\\";\\r\\n};\\r\\nexport let COLORS = [\\r\\n    {\\r\\n        \\\"ansi\\\": 0,\\r\\n        \\\"desc\\\": \\\"Grey\\\",\\r\\n        \\\"html\\\": \\\"#808080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 1,\\r\\n        \\\"desc\\\": \\\"Red\\\",\\r\\n        \\\"html\\\": \\\"#ff0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 2,\\r\\n        \\\"desc\\\": \\\"Lime\\\",\\r\\n        \\\"html\\\": \\\"#00ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 3,\\r\\n        \\\"desc\\\": \\\"Yellow\\\",\\r\\n        \\\"html\\\": \\\"#ffff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 4,\\r\\n        \\\"desc\\\": \\\"Blue\\\",\\r\\n        \\\"html\\\": \\\"#0000ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 5,\\r\\n        \\\"desc\\\": \\\"Fuchsia\\\",\\r\\n        \\\"html\\\": \\\"#ff00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 6,\\r\\n        \\\"desc\\\": \\\"Aqua\\\",\\r\\n        \\\"html\\\": \\\"#00ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 7,\\r\\n        \\\"desc\\\": \\\"White\\\",\\r\\n        \\\"html\\\": \\\"#ffffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 8,\\r\\n        \\\"desc\\\": \\\"Black\\\",\\r\\n        \\\"html\\\": \\\"#000000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 9,\\r\\n        \\\"desc\\\": \\\"Maroon\\\",\\r\\n        \\\"html\\\": \\\"#800000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 10,\\r\\n        \\\"desc\\\": \\\"Green\\\",\\r\\n        \\\"html\\\": \\\"#008000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,128,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 11,\\r\\n        \\\"desc\\\": \\\"Olive\\\",\\r\\n        \\\"html\\\": \\\"#808000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 12,\\r\\n        \\\"desc\\\": \\\"Navy\\\",\\r\\n        \\\"html\\\": \\\"#000080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 13,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#800080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,0,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 14,\\r\\n        \\\"desc\\\": \\\"Teal\\\",\\r\\n        \\\"html\\\": \\\"#008080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 15,\\r\\n        \\\"desc\\\": \\\"Silver\\\",\\r\\n        \\\"html\\\": \\\"#c0c0c0\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(192,192,192)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,75%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 16,\\r\\n        \\\"desc\\\": \\\"Grey0\\\",\\r\\n        \\\"html\\\": \\\"#000000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 17,\\r\\n        \\\"desc\\\": \\\"NavyBlue\\\",\\r\\n        \\\"html\\\": \\\"#00005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 18,\\r\\n        \\\"desc\\\": \\\"DarkBlue\\\",\\r\\n        \\\"html\\\": \\\"#000087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 19,\\r\\n        \\\"desc\\\": \\\"Blue3\\\",\\r\\n        \\\"html\\\": \\\"#0000af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 20,\\r\\n        \\\"desc\\\": \\\"Blue3\\\",\\r\\n        \\\"html\\\": \\\"#0000d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 21,\\r\\n        \\\"desc\\\": \\\"Blue1\\\",\\r\\n        \\\"html\\\": \\\"#0000ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 22,\\r\\n        \\\"desc\\\": \\\"DarkGreen\\\",\\r\\n        \\\"html\\\": \\\"#005f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 23,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 24,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(97,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 25,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(07,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 26,\\r\\n        \\\"desc\\\": \\\"DodgerBlue3\\\",\\r\\n        \\\"html\\\": \\\"#005fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(13,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 27,\\r\\n        \\\"desc\\\": \\\"DodgerBlue2\\\",\\r\\n        \\\"html\\\": \\\"#005fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(17,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 28,\\r\\n        \\\"desc\\\": \\\"Green4\\\",\\r\\n        \\\"html\\\": \\\"#008700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 29,\\r\\n        \\\"desc\\\": \\\"SpringGreen4\\\",\\r\\n        \\\"html\\\": \\\"#00875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(62,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 30,\\r\\n        \\\"desc\\\": \\\"Turquoise4\\\",\\r\\n        \\\"html\\\": \\\"#008787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 31,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#0087af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(93,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 32,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#0087d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(02,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 33,\\r\\n        \\\"desc\\\": \\\"DodgerBlue1\\\",\\r\\n        \\\"html\\\": \\\"#0087ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(08,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 34,\\r\\n        \\\"desc\\\": \\\"Green3\\\",\\r\\n        \\\"html\\\": \\\"#00af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 35,\\r\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\r\\n        \\\"html\\\": \\\"#00af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(52,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 36,\\r\\n        \\\"desc\\\": \\\"DarkCyan\\\",\\r\\n        \\\"html\\\": \\\"#00af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(66,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 37,\\r\\n        \\\"desc\\\": \\\"LightSeaGreen\\\",\\r\\n        \\\"html\\\": \\\"#00afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 38,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue2\\\",\\r\\n        \\\"html\\\": \\\"#00afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(91,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 39,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#00afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(98,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 40,\\r\\n        \\\"desc\\\": \\\"Green3\\\",\\r\\n        \\\"html\\\": \\\"#00d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 41,\\r\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\r\\n        \\\"html\\\": \\\"#00d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(46,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 42,\\r\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\r\\n        \\\"html\\\": \\\"#00d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(57,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 43,\\r\\n        \\\"desc\\\": \\\"Cyan3\\\",\\r\\n        \\\"html\\\": \\\"#00d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(68,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 44,\\r\\n        \\\"desc\\\": \\\"DarkTurquoise\\\",\\r\\n        \\\"html\\\": \\\"#00d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 45,\\r\\n        \\\"desc\\\": \\\"Turquoise2\\\",\\r\\n        \\\"html\\\": \\\"#00d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(89,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 46,\\r\\n        \\\"desc\\\": \\\"Green1\\\",\\r\\n        \\\"html\\\": \\\"#00ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 47,\\r\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\r\\n        \\\"html\\\": \\\"#00ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(42,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 48,\\r\\n        \\\"desc\\\": \\\"SpringGreen1\\\",\\r\\n        \\\"html\\\": \\\"#00ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(51,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 49,\\r\\n        \\\"desc\\\": \\\"MediumSpringGreen\\\",\\r\\n        \\\"html\\\": \\\"#00ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(61,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 50,\\r\\n        \\\"desc\\\": \\\"Cyan2\\\",\\r\\n        \\\"html\\\": \\\"#00ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(70,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 51,\\r\\n        \\\"desc\\\": \\\"Cyan1\\\",\\r\\n        \\\"html\\\": \\\"#00ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 52,\\r\\n        \\\"desc\\\": \\\"DarkRed\\\",\\r\\n        \\\"html\\\": \\\"#5f0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 53,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#5f005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 54,\\r\\n        \\\"desc\\\": \\\"Purple4\\\",\\r\\n        \\\"html\\\": \\\"#5f0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(82,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 55,\\r\\n        \\\"desc\\\": \\\"Purple4\\\",\\r\\n        \\\"html\\\": \\\"#5f00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(72,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 56,\\r\\n        \\\"desc\\\": \\\"Purple3\\\",\\r\\n        \\\"html\\\": \\\"#5f00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(66,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 57,\\r\\n        \\\"desc\\\": \\\"BlueViolet\\\",\\r\\n        \\\"html\\\": \\\"#5f00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(62,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 58,\\r\\n        \\\"desc\\\": \\\"Orange4\\\",\\r\\n        \\\"html\\\": \\\"#5f5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 59,\\r\\n        \\\"desc\\\": \\\"Grey37\\\",\\r\\n        \\\"html\\\": \\\"#5f5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 60,\\r\\n        \\\"desc\\\": \\\"MediumPurple4\\\",\\r\\n        \\\"html\\\": \\\"#5f5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 61,\\r\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 62,\\r\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 63,\\r\\n        \\\"desc\\\": \\\"RoyalBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5f5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 64,\\r\\n        \\\"desc\\\": \\\"Chartreuse4\\\",\\r\\n        \\\"html\\\": \\\"#5f8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 65,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\r\\n        \\\"html\\\": \\\"#5f875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 66,\\r\\n        \\\"desc\\\": \\\"PaleTurquoise4\\\",\\r\\n        \\\"html\\\": \\\"#5f8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 67,\\r\\n        \\\"desc\\\": \\\"SteelBlue\\\",\\r\\n        \\\"html\\\": \\\"#5f87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 68,\\r\\n        \\\"desc\\\": \\\"SteelBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(220,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 69,\\r\\n        \\\"desc\\\": \\\"CornflowerBlue\\\",\\r\\n        \\\"html\\\": \\\"#5f87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(225,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 70,\\r\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\r\\n        \\\"html\\\": \\\"#5faf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 71,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\r\\n        \\\"html\\\": \\\"#5faf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 72,\\r\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\r\\n        \\\"html\\\": \\\"#5faf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 73,\\r\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\r\\n        \\\"html\\\": \\\"#5fafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 74,\\r\\n        \\\"desc\\\": \\\"SkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5fafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(200,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 75,\\r\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5fafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 76,\\r\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\r\\n        \\\"html\\\": \\\"#5fd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(3,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 77,\\r\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\r\\n        \\\"html\\\": \\\"#5fd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 78,\\r\\n        \\\"desc\\\": \\\"SeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#5fd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(140,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 79,\\r\\n        \\\"desc\\\": \\\"Aquamarine3\\\",\\r\\n        \\\"html\\\": \\\"#5fd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(160,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 80,\\r\\n        \\\"desc\\\": \\\"MediumTurquoise\\\",\\r\\n        \\\"html\\\": \\\"#5fd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 81,\\r\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5fd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(195,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 82,\\r\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\r\\n        \\\"html\\\": \\\"#5fff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 83,\\r\\n        \\\"desc\\\": \\\"SeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#5fff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 84,\\r\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#5fff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(135,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 85,\\r\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#5fffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 86,\\r\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\r\\n        \\\"html\\\": \\\"#5fffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(165,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 87,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray2\\\",\\r\\n        \\\"html\\\": \\\"#5fffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 88,\\r\\n        \\\"desc\\\": \\\"DarkRed\\\",\\r\\n        \\\"html\\\": \\\"#870000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 89,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#87005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(17,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 90,\\r\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\r\\n        \\\"html\\\": \\\"#870087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 91,\\r\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\r\\n        \\\"html\\\": \\\"#8700af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(86,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 92,\\r\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\r\\n        \\\"html\\\": \\\"#8700d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(77,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 93,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#8700ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(71,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 94,\\r\\n        \\\"desc\\\": \\\"Orange4\\\",\\r\\n        \\\"html\\\": \\\"#875f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 95,\\r\\n        \\\"desc\\\": \\\"LightPink4\\\",\\r\\n        \\\"html\\\": \\\"#875f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 96,\\r\\n        \\\"desc\\\": \\\"Plum4\\\",\\r\\n        \\\"html\\\": \\\"#875f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 97,\\r\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\r\\n        \\\"html\\\": \\\"#875faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 98,\\r\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\r\\n        \\\"html\\\": \\\"#875fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(260,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 99,\\r\\n        \\\"desc\\\": \\\"SlateBlue1\\\",\\r\\n        \\\"html\\\": \\\"#875fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(255,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 100,\\r\\n        \\\"desc\\\": \\\"Yellow4\\\",\\r\\n        \\\"html\\\": \\\"#878700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 101,\\r\\n        \\\"desc\\\": \\\"Wheat4\\\",\\r\\n        \\\"html\\\": \\\"#87875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 102,\\r\\n        \\\"desc\\\": \\\"Grey53\\\",\\r\\n        \\\"html\\\": \\\"#878787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 103,\\r\\n        \\\"desc\\\": \\\"LightSlateGrey\\\",\\r\\n        \\\"html\\\": \\\"#8787af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 104,\\r\\n        \\\"desc\\\": \\\"MediumPurple\\\",\\r\\n        \\\"html\\\": \\\"#8787d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 105,\\r\\n        \\\"desc\\\": \\\"LightSlateBlue\\\",\\r\\n        \\\"html\\\": \\\"#8787ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 106,\\r\\n        \\\"desc\\\": \\\"Yellow4\\\",\\r\\n        \\\"html\\\": \\\"#87af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(3,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 107,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 108,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen\\\",\\r\\n        \\\"html\\\": \\\"#87af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 109,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#87afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 110,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#87afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 111,\\r\\n        \\\"desc\\\": \\\"SkyBlue2\\\",\\r\\n        \\\"html\\\": \\\"#87afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(220,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 112,\\r\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\r\\n        \\\"html\\\": \\\"#87d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 113,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(100,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 114,\\r\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 115,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 116,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray3\\\",\\r\\n        \\\"html\\\": \\\"#87d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 117,\\r\\n        \\\"desc\\\": \\\"SkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#87d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(200,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 118,\\r\\n        \\\"desc\\\": \\\"Chartreuse1\\\",\\r\\n        \\\"html\\\": \\\"#87ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 119,\\r\\n        \\\"desc\\\": \\\"LightGreen\\\",\\r\\n        \\\"html\\\": \\\"#87ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(105,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 120,\\r\\n        \\\"desc\\\": \\\"LightGreen\\\",\\r\\n        \\\"html\\\": \\\"#87ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 121,\\r\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\r\\n        \\\"html\\\": \\\"#87ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(140,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 122,\\r\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\r\\n        \\\"html\\\": \\\"#87ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(160,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 123,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray1\\\",\\r\\n        \\\"html\\\": \\\"#87ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 124,\\r\\n        \\\"desc\\\": \\\"Red3\\\",\\r\\n        \\\"html\\\": \\\"#af0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 125,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#af005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(27,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 126,\\r\\n        \\\"desc\\\": \\\"MediumVioletRed\\\",\\r\\n        \\\"html\\\": \\\"#af0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(13,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 127,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#af00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 128,\\r\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\r\\n        \\\"html\\\": \\\"#af00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(88,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 129,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#af00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(81,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 130,\\r\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\r\\n        \\\"html\\\": \\\"#af5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 131,\\r\\n        \\\"desc\\\": \\\"IndianRed\\\",\\r\\n        \\\"html\\\": \\\"#af5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 132,\\r\\n        \\\"desc\\\": \\\"HotPink3\\\",\\r\\n        \\\"html\\\": \\\"#af5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 133,\\r\\n        \\\"desc\\\": \\\"MediumOrchid3\\\",\\r\\n        \\\"html\\\": \\\"#af5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 134,\\r\\n        \\\"desc\\\": \\\"MediumOrchid\\\",\\r\\n        \\\"html\\\": \\\"#af5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(280,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 135,\\r\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\r\\n        \\\"html\\\": \\\"#af5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 136,\\r\\n        \\\"desc\\\": \\\"DarkGoldenrod\\\",\\r\\n        \\\"html\\\": \\\"#af8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(6,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 137,\\r\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\r\\n        \\\"html\\\": \\\"#af875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 138,\\r\\n        \\\"desc\\\": \\\"RosyBrown\\\",\\r\\n        \\\"html\\\": \\\"#af8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 139,\\r\\n        \\\"desc\\\": \\\"Grey63\\\",\\r\\n        \\\"html\\\": \\\"#af87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 140,\\r\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\r\\n        \\\"html\\\": \\\"#af87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 141,\\r\\n        \\\"desc\\\": \\\"MediumPurple1\\\",\\r\\n        \\\"html\\\": \\\"#af87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(260,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 142,\\r\\n        \\\"desc\\\": \\\"Gold3\\\",\\r\\n        \\\"html\\\": \\\"#afaf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 143,\\r\\n        \\\"desc\\\": \\\"DarkKhaki\\\",\\r\\n        \\\"html\\\": \\\"#afaf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 144,\\r\\n        \\\"desc\\\": \\\"NavajoWhite3\\\",\\r\\n        \\\"html\\\": \\\"#afaf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 145,\\r\\n        \\\"desc\\\": \\\"Grey69\\\",\\r\\n        \\\"html\\\": \\\"#afafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 146,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue3\\\",\\r\\n        \\\"html\\\": \\\"#afafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 147,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue\\\",\\r\\n        \\\"html\\\": \\\"#afafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 148,\\r\\n        \\\"desc\\\": \\\"Yellow3\\\",\\r\\n        \\\"html\\\": \\\"#afd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 149,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#afd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(80,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 150,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#afd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 151,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 152,\\r\\n        \\\"desc\\\": \\\"LightCyan3\\\",\\r\\n        \\\"html\\\": \\\"#afd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 153,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#afd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 154,\\r\\n        \\\"desc\\\": \\\"GreenYellow\\\",\\r\\n        \\\"html\\\": \\\"#afff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 155,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 156,\\r\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\r\\n        \\\"html\\\": \\\"#afff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(100,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 157,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 158,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#afffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 159,\\r\\n        \\\"desc\\\": \\\"PaleTurquoise1\\\",\\r\\n        \\\"html\\\": \\\"#afffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 160,\\r\\n        \\\"desc\\\": \\\"Red3\\\",\\r\\n        \\\"html\\\": \\\"#d70000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 161,\\r\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\r\\n        \\\"html\\\": \\\"#d7005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(33,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 162,\\r\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\r\\n        \\\"html\\\": \\\"#d70087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(22,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 163,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#d700af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(11,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 164,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#d700d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 165,\\r\\n        \\\"desc\\\": \\\"Magenta2\\\",\\r\\n        \\\"html\\\": \\\"#d700ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 166,\\r\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\r\\n        \\\"html\\\": \\\"#d75f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(6,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 167,\\r\\n        \\\"desc\\\": \\\"IndianRed\\\",\\r\\n        \\\"html\\\": \\\"#d75f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 168,\\r\\n        \\\"desc\\\": \\\"HotPink3\\\",\\r\\n        \\\"html\\\": \\\"#d75f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(340,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 169,\\r\\n        \\\"desc\\\": \\\"HotPink2\\\",\\r\\n        \\\"html\\\": \\\"#d75faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(320,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 170,\\r\\n        \\\"desc\\\": \\\"Orchid\\\",\\r\\n        \\\"html\\\": \\\"#d75fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 171,\\r\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\r\\n        \\\"html\\\": \\\"#d75fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(285,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 172,\\r\\n        \\\"desc\\\": \\\"Orange3\\\",\\r\\n        \\\"html\\\": \\\"#d78700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 173,\\r\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\r\\n        \\\"html\\\": \\\"#d7875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(20,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 174,\\r\\n        \\\"desc\\\": \\\"LightPink3\\\",\\r\\n        \\\"html\\\": \\\"#d78787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 175,\\r\\n        \\\"desc\\\": \\\"Pink3\\\",\\r\\n        \\\"html\\\": \\\"#d787af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 176,\\r\\n        \\\"desc\\\": \\\"Plum3\\\",\\r\\n        \\\"html\\\": \\\"#d787d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 177,\\r\\n        \\\"desc\\\": \\\"Violet\\\",\\r\\n        \\\"html\\\": \\\"#d787ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(280,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 178,\\r\\n        \\\"desc\\\": \\\"Gold3\\\",\\r\\n        \\\"html\\\": \\\"#d7af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 179,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod3\\\",\\r\\n        \\\"html\\\": \\\"#d7af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(40,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 180,\\r\\n        \\\"desc\\\": \\\"Tan\\\",\\r\\n        \\\"html\\\": \\\"#d7af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 181,\\r\\n        \\\"desc\\\": \\\"MistyRose3\\\",\\r\\n        \\\"html\\\": \\\"#d7afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 182,\\r\\n        \\\"desc\\\": \\\"Thistle3\\\",\\r\\n        \\\"html\\\": \\\"#d7afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 183,\\r\\n        \\\"desc\\\": \\\"Plum2\\\",\\r\\n        \\\"html\\\": \\\"#d7afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 184,\\r\\n        \\\"desc\\\": \\\"Yellow3\\\",\\r\\n        \\\"html\\\": \\\"#d7d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 185,\\r\\n        \\\"desc\\\": \\\"Khaki3\\\",\\r\\n        \\\"html\\\": \\\"#d7d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 186,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#d7d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 187,\\r\\n        \\\"desc\\\": \\\"LightYellow3\\\",\\r\\n        \\\"html\\\": \\\"#d7d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 188,\\r\\n        \\\"desc\\\": \\\"Grey84\\\",\\r\\n        \\\"html\\\": \\\"#d7d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 189,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#d7d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 190,\\r\\n        \\\"desc\\\": \\\"Yellow2\\\",\\r\\n        \\\"html\\\": \\\"#d7ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(9,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 191,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(75,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 192,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(80,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 193,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 194,\\r\\n        \\\"desc\\\": \\\"Honeydew2\\\",\\r\\n        \\\"html\\\": \\\"#d7ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 195,\\r\\n        \\\"desc\\\": \\\"LightCyan1\\\",\\r\\n        \\\"html\\\": \\\"#d7ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 196,\\r\\n        \\\"desc\\\": \\\"Red1\\\",\\r\\n        \\\"html\\\": \\\"#ff0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 197,\\r\\n        \\\"desc\\\": \\\"DeepPink2\\\",\\r\\n        \\\"html\\\": \\\"#ff005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(37,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 198,\\r\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\r\\n        \\\"html\\\": \\\"#ff0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(28,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 199,\\r\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\r\\n        \\\"html\\\": \\\"#ff00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(18,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 200,\\r\\n        \\\"desc\\\": \\\"Magenta2\\\",\\r\\n        \\\"html\\\": \\\"#ff00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(09,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 201,\\r\\n        \\\"desc\\\": \\\"Magenta1\\\",\\r\\n        \\\"html\\\": \\\"#ff00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 202,\\r\\n        \\\"desc\\\": \\\"OrangeRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 203,\\r\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 204,\\r\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(345,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 205,\\r\\n        \\\"desc\\\": \\\"HotPink\\\",\\r\\n        \\\"html\\\": \\\"#ff5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 206,\\r\\n        \\\"desc\\\": \\\"HotPink\\\",\\r\\n        \\\"html\\\": \\\"#ff5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(315,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 207,\\r\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\r\\n        \\\"html\\\": \\\"#ff5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 208,\\r\\n        \\\"desc\\\": \\\"DarkOrange\\\",\\r\\n        \\\"html\\\": \\\"#ff8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 209,\\r\\n        \\\"desc\\\": \\\"Salmon1\\\",\\r\\n        \\\"html\\\": \\\"#ff875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(15,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 210,\\r\\n        \\\"desc\\\": \\\"LightCoral\\\",\\r\\n        \\\"html\\\": \\\"#ff8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 211,\\r\\n        \\\"desc\\\": \\\"PaleVioletRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(340,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 212,\\r\\n        \\\"desc\\\": \\\"Orchid2\\\",\\r\\n        \\\"html\\\": \\\"#ff87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(320,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 213,\\r\\n        \\\"desc\\\": \\\"Orchid1\\\",\\r\\n        \\\"html\\\": \\\"#ff87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 214,\\r\\n        \\\"desc\\\": \\\"Orange1\\\",\\r\\n        \\\"html\\\": \\\"#ffaf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 215,\\r\\n        \\\"desc\\\": \\\"SandyBrown\\\",\\r\\n        \\\"html\\\": \\\"#ffaf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 216,\\r\\n        \\\"desc\\\": \\\"LightSalmon1\\\",\\r\\n        \\\"html\\\": \\\"#ffaf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(20,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 217,\\r\\n        \\\"desc\\\": \\\"LightPink1\\\",\\r\\n        \\\"html\\\": \\\"#ffafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 218,\\r\\n        \\\"desc\\\": \\\"Pink1\\\",\\r\\n        \\\"html\\\": \\\"#ffafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 219,\\r\\n        \\\"desc\\\": \\\"Plum1\\\",\\r\\n        \\\"html\\\": \\\"#ffafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 220,\\r\\n        \\\"desc\\\": \\\"Gold1\\\",\\r\\n        \\\"html\\\": \\\"#ffd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 221,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#ffd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(45,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 222,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#ffd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(40,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 223,\\r\\n        \\\"desc\\\": \\\"NavajoWhite1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 224,\\r\\n        \\\"desc\\\": \\\"MistyRose1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 225,\\r\\n        \\\"desc\\\": \\\"Thistle1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 226,\\r\\n        \\\"desc\\\": \\\"Yellow1\\\",\\r\\n        \\\"html\\\": \\\"#ffff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 227,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod1\\\",\\r\\n        \\\"html\\\": \\\"#ffff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 228,\\r\\n        \\\"desc\\\": \\\"Khaki1\\\",\\r\\n        \\\"html\\\": \\\"#ffff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 229,\\r\\n        \\\"desc\\\": \\\"Wheat1\\\",\\r\\n        \\\"html\\\": \\\"#ffffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 230,\\r\\n        \\\"desc\\\": \\\"Cornsilk1\\\",\\r\\n        \\\"html\\\": \\\"#ffffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 231,\\r\\n        \\\"desc\\\": \\\"Grey100\\\",\\r\\n        \\\"html\\\": \\\"#ffffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 232,\\r\\n        \\\"desc\\\": \\\"Grey3\\\",\\r\\n        \\\"html\\\": \\\"#080808\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(8,8,8)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,3%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 233,\\r\\n        \\\"desc\\\": \\\"Grey7\\\",\\r\\n        \\\"html\\\": \\\"#121212\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(18,18,18)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,7%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 234,\\r\\n        \\\"desc\\\": \\\"Grey11\\\",\\r\\n        \\\"html\\\": \\\"#1c1c1c\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(28,28,28)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,10%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 235,\\r\\n        \\\"desc\\\": \\\"Grey15\\\",\\r\\n        \\\"html\\\": \\\"#262626\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(38,38,38)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,14%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 236,\\r\\n        \\\"desc\\\": \\\"Grey19\\\",\\r\\n        \\\"html\\\": \\\"#303030\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(48,48,48)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 237,\\r\\n        \\\"desc\\\": \\\"Grey23\\\",\\r\\n        \\\"html\\\": \\\"#3a3a3a\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(58,58,58)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,22%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 238,\\r\\n        \\\"desc\\\": \\\"Grey27\\\",\\r\\n        \\\"html\\\": \\\"#444444\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(68,68,68)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 239,\\r\\n        \\\"desc\\\": \\\"Grey30\\\",\\r\\n        \\\"html\\\": \\\"#4e4e4e\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(78,78,78)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,30%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 240,\\r\\n        \\\"desc\\\": \\\"Grey35\\\",\\r\\n        \\\"html\\\": \\\"#585858\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(88,88,88)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 241,\\r\\n        \\\"desc\\\": \\\"Grey39\\\",\\r\\n        \\\"html\\\": \\\"#626262\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(98,98,98)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 242,\\r\\n        \\\"desc\\\": \\\"Grey42\\\",\\r\\n        \\\"html\\\": \\\"#6c6c6c\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(108,108,108)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,40%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 243,\\r\\n        \\\"desc\\\": \\\"Grey46\\\",\\r\\n        \\\"html\\\": \\\"#767676\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(118,118,118)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,46%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 244,\\r\\n        \\\"desc\\\": \\\"Grey50\\\",\\r\\n        \\\"html\\\": \\\"#808080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 245,\\r\\n        \\\"desc\\\": \\\"Grey54\\\",\\r\\n        \\\"html\\\": \\\"#8a8a8a\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(138,138,138)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,54%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 246,\\r\\n        \\\"desc\\\": \\\"Grey58\\\",\\r\\n        \\\"html\\\": \\\"#949494\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(148,148,148)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,58%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 247,\\r\\n        \\\"desc\\\": \\\"Grey62\\\",\\r\\n        \\\"html\\\": \\\"#9e9e9e\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(158,158,158)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,61%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 248,\\r\\n        \\\"desc\\\": \\\"Grey66\\\",\\r\\n        \\\"html\\\": \\\"#a8a8a8\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(168,168,168)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,65%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 249,\\r\\n        \\\"desc\\\": \\\"Grey70\\\",\\r\\n        \\\"html\\\": \\\"#b2b2b2\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(178,178,178)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,69%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 250,\\r\\n        \\\"desc\\\": \\\"Grey74\\\",\\r\\n        \\\"html\\\": \\\"#bcbcbc\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(188,188,188)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,73%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 251,\\r\\n        \\\"desc\\\": \\\"Grey78\\\",\\r\\n        \\\"html\\\": \\\"#c6c6c6\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(198,198,198)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,77%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 252,\\r\\n        \\\"desc\\\": \\\"Grey82\\\",\\r\\n        \\\"html\\\": \\\"#d0d0d0\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(208,208,208)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,81%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 253,\\r\\n        \\\"desc\\\": \\\"Grey85\\\",\\r\\n        \\\"html\\\": \\\"#dadada\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(218,218,218)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,85%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 254,\\r\\n        \\\"desc\\\": \\\"Grey89\\\",\\r\\n        \\\"html\\\": \\\"#e4e4e4\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(228,228,228)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,89%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 255,\\r\\n        \\\"desc\\\": \\\"Grey93\\\",\\r\\n        \\\"html\\\": \\\"#eeeeee\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(238,238,238)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,93%)\\\"\\r\\n    }\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RhYmxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFDL0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBLENBQUMsd0NBQXdDO0FBQzFELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtBQUU5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO0FBQ2xGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztBQUN2RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsb0RBQW9EO0FBRXBFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxVQUFVLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRTNELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsc0RBQXNEO0lBQ3RELG1GQUFtRjtJQUNuRixtR0FBbUc7SUFDbkcsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FB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UUFBUTtJQUM1QyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLENBQUMsQ0FDQSxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUVELDJEQUEyRDtBQUMzRCxTQUFTLFdBQVcsQ0FBQyxRQUFRO0lBQzVCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxH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LE1BQU0sRUFBRSxRQUFRO1FBQ2hCLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsS0FBSyxFQUFFLGVBQWU7S0FDdEI7Q0FDRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSEVBREVSID0gMDtcdC8vIEluZGV4IG9mIHRoZSBoZWFkZXIgc3R5bGVzXHJcbmNvbnN0IERJVklERVIgPSAxXHQvLyBJbmRleCBvZiB0aGUgaG9yaXpvbnRhbCBkaXZpZGVyIHN0eWxlXHJcbmNvbnN0IEZPT1RFUiA9IDI7XHQvLyBJbmRleCBvZiB0aGUgZm9vdGVyIHN0eWxlXHJcblxyXG5jb25zdCBPUEVORVIgPSAwO1x0Ly8gSW5kZXggb2YgdGhlIG9wZW5lciBsaW5lIGNoYXJhY3RlclxyXG5jb25zdCBTRVBBUkFUT1IgPSAxOyAvLyBJbmRleCBvZiB0aGUgc2VwYXJhdG9yIGxpbmUgY2hhcmFjdGVyICh3aGVyZSBjb2x1bW5zIG1lZXQpXHJcbmNvbnN0IENMT1NFUiA9IDI7XHQvLyBJbmRleCBvZiB0aGUgY2xvc2VyIGxpbmUgY2hhcmFjdGVyXHJcbmNvbnN0IEZJTExFUiA9IDM7XHQvLyBJbmRleCBvZiB0aGUgZmlsbGVyIGxpbmUgY2hhcmFjdGVyXHJcbmNvbnN0IEJBUiA9IDQ7XHRcdC8vIEluZGV4IG9mIHRoZSBzdHJhaWdodCB2ZXJ0aWNhbCBiYXIgbGluZSBjaGFyYWN0ZXJcclxuXHJcbmV4cG9ydCBsZXQgd2luID0gZ2xvYmFsVGhpcywgZG9jID0gd2luW1wiZG9jdW1lbnRcIl1cclxubGV0IGZtdCA9IEludGwuTnVtYmVyRm9ybWF0KCdlbicsIHsgbm90YXRpb246ICdjb21wYWN0JyB9KTtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG5cdG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG5cclxuXHQvLyBTb21lIHNhbXBsZSBkYXRhLCBiYXNpYyBpbmZvcm1hdGlvbiBvbiByb290IHNlcnZlcnNcclxuXHQvLyBOb3RlIHRoYXQgaWYgeW91IHdhbnQgY29sb3IsIHlvdSBuZWVkIHRvIHVzZSBDb2xvclByaW50IGFzIHRoZSBwcmludGluZyBmdW5jdGlvblxyXG5cdC8vIENvbG9yZWQgY2VsbHMgbmVlZCB0byBiZSBhbiBvYmplY3Qgd2l0aCBjb2xvciBhbmQgdGV4dCwgaW5zdGVhZCBvZiBcImFueVwiLi4gUmVkIGNlbGwgZXhhbXBsZSBoZXJlXHJcblx0bGV0IGRhdGEgPSBucy5zY2FuKCdob21lJykubWFwKHMgPT4gW3sgY29sb3I6ICdyZWQnLCB0ZXh0OiBzIH0sIG5zLmdldFNlcnZlck1heFJhbShzKSwgbnMuZ2V0U2VydmVyTWF4TW9uZXkocyldKTtcclxuXHJcblx0Ly8gRm9yIGJvbGQgd2UgbmVlZCB0byBjb3JyZWN0IHRoZSBzcGFjaW5nLi4uIFNrZXRjaCBBRiwgbm90IHN1cmUgaG93IGVsc2UuXHJcblx0Ly8gbGV0IGJvbGRUZXh0ID0gJ2JvbGQgdGV4dCBleGFtcGxlIGJsYWgnO1xyXG5cdC8vIGxldCBzcGFjaW5nID0gLTAuMDA2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjcgKiBib2xkVGV4dC5sZW5ndGg7XHJcblx0ZGF0YS5wdXNoKFtcclxuXHRcdHsgc3R5bGU6IHsgY29sb3I6ICdyZWQnIH0sIHRleHQ6ICdub3BlJyB9LFxyXG5cdFx0Ly97IHN0eWxlOiB7IGNvbG9yOiAncmVkJywgZm9udFdlaWdodDogJ2JvbGQnLCBsZXR0ZXJTcGFjaW5nOiBzcGFjaW5nIH0sIHRleHQ6IGJvbGRUZXh0IH0sXHJcblx0XHR7IHN0eWxlOiB7IGNvbG9yOiAnd2hpdGUnLCBmb250U3R5bGU6ICdpdGFsaWMnIH0sIHRleHQ6ICdpdGFsaWMgdGV4dCcgfSxcclxuXHRcdHsgc3R5bGU6IHsgY29sb3I6ICd3aGl0ZScsIHRleHREZWNvcmF0aW9uTGluZTogJ2xpbmUtdGhyb3VnaCcsIHRleHREZWNvcmF0aW9uU3R5bGU6ICdzb2xpZCcgfSwgdGV4dDogJ3N0cmlrZXRocm91Z2ggdGV4dCcgfVxyXG5cdF0pO1xyXG5cclxuXHQvLyBGcmVlIHN0eWxlLCBubyBjb2x1bW5zLCB0aGUgdGFibGUgYWRqdXN0cyB0byBjb250ZW50c1xyXG5cdFByaW50VGFibGUobnMsIGRhdGEsIHVuZGVmaW5lZCwgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG5cclxuXHQvLyBFeGFtcGxlIG9mIGFkZGluZyBhIGJyZWFrIGxpbmUgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGFibGU6XHJcblx0Ly8gZGF0YS5wdXNoKG51bGwpO1xyXG5cdC8vIGRhdGEucHVzaCguLi5ucy5zY2FuKCdzaWdtYS1jb3NtZXRpY3MnKS5zbGljZSgxKS5tYXAocyA9PiBbcywgbnMuZ2V0U2VydmVyTWF4UmFtKHMpLCBucy5nZXRTZXJ2ZXJNYXhNb25leShzKV0pKTtcclxuXHJcblx0Ly8gV2UgdXNlIHByZS1kZWZpbmVkIGNvbHVtbnNcclxuXHQvLyBoZWFkZXI6IFRoZSB0ZXh0IHRvIGRpc3BsYXlcclxuXHQvLyB3aWR0aCA6IFdpZHRoIG9mIHRoZSBjb2x1bW4gY29udGVudFxyXG5cdC8vIHBhZCAgIDogMCBmb3IgY2VudGVyLCA8IDAgZm9yIGxlZnQsID4gMCBmb3IgcmlnaHRcclxuXHRjb25zdCBjb2x1bW5zID0gW1xyXG5cdFx0eyBoZWFkZXI6ICdTZXJ2ZXJzJywgd2lkdGg6IDQwIH0sXHJcblx0XHR7IGhlYWRlcjogJ1JhbScsIHdpZHRoOiAxMyB9LFxyXG5cdFx0eyBoZWFkZXI6ICdNb25leScsIHdpZHRoOiAyMCB9XHJcblx0XTtcclxuXHRQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBEZWZhdWx0U3R5bGUoKSwgQ29sb3JQcmludCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBzdHlsZSA9IERlZmF1bHRTdHlsZSgpLCBwcmludGZ1bmMgPSBucy5wcmludCkge1xyXG5cdC8vIGlmIChwcmludGZ1bmMgIT0gbnMucHJpbnQpXHJcblx0Ly8gXHRwcmludGZ1bmMgPSBucy50cHJpbnQ7IC8vIFRlbXAgZml4IHVudGlsIEkgZ2V0IGFuc2kgY29sb3JzIHdvcmtpbmdcclxuXHJcblx0Ly8gQ3JlYXRlIGRlZmF1bHQgY29sdW1ucyBpZiBubyBkZWZpbml0aW9uIHdlcmUgcHJvdmlkZWRcclxuXHRsZXQgY29sdW1uc1Byb3ZpZGVkID0gdHJ1ZTtcclxuXHRpZiAoY29sdW1ucyA9PSB1bmRlZmluZWQpIHtcclxuXHRcdGNvbHVtbnNQcm92aWRlZCA9IGZhbHNlO1xyXG5cdFx0Y29sdW1ucyA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhWzBdLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCBsb25nZXN0ID0gMDtcclxuXHRcdFx0Zm9yIChsZXQgaWkgPSAwOyBpaSA8IGRhdGEubGVuZ3RoOyBpaSsrKSB7XHJcblx0XHRcdFx0aWYgKGRhdGFbaWldID09IG51bGwpIGNvbnRpbnVlO1xyXG5cdFx0XHRcdGxldCBsZW4gPSBkYXRhW2lpXVtpXS50ZXh0ICE9IHVuZGVmaW5lZCA/IGRhdGFbaWldW2ldLnRleHQubGVuZ3RoIDogZGF0YVtpaV1baV0udG9TdHJpbmcoKS5sZW5ndGg7XHJcblx0XHRcdFx0aWYgKGxlbiA+IGxvbmdlc3QpIGxvbmdlc3QgPSBsZW47XHJcblx0XHRcdH1cclxuXHRcdFx0Y29sdW1ucy5wdXNoKHsgaGVhZGVyOiAnJywgd2lkdGg6IGxvbmdlc3QsIHBhZEhlYWRlcjogMCwgcGFkQ29udGVudDogMCB9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdFByaW50Qm9yZGVyKG5zLCBjb2x1bW5zLCBzdHlsZVtIRUFERVJdLCBwcmludGZ1bmMpO1xyXG5cdGlmIChjb2x1bW5zUHJvdmlkZWQpIHtcclxuXHRcdFByaW50SGVhZGVyKG5zLCBjb2x1bW5zLCBzdHlsZVtIRUFERVJdLCBwcmludGZ1bmMpXHJcblx0XHRQcmludEJvcmRlcihucywgY29sdW1ucywgc3R5bGVbRElWSURFUl0sIHByaW50ZnVuYyk7XHJcblx0fVxyXG5cdGxldCBpID0gMDtcclxuXHRmb3IgKGNvbnN0IGxpbmUgb2YgZGF0YSkge1xyXG5cdFx0UHJpbnRMaW5lKG5zLCBjb2x1bW5zLCBsaW5lLCBzdHlsZSwgcHJpbnRmdW5jLCBpKysgJSAyID09IDApO1xyXG5cdH1cclxuXHRQcmludEJvcmRlcihucywgY29sdW1ucywgc3R5bGVbRk9PVEVSXSwgcHJpbnRmdW5jKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlZmF1bHRTdHlsZSgpIHtcclxuXHRyZXR1cm4gW1xyXG5cdFx0Wyfila0nLCAn4pSsJywgJ+KVricsICfilIAnLCAn4pSCJ10sXHJcblx0XHRbJ+KUnCcsICfilLwnLCAn4pSkJywgJ+KUgCcsICfilIInXSxcclxuXHRcdFsn4pWwJywgJ+KUtCcsICfila8nLCAn4pSAJywgJ+KUgiddXHJcblx0XTtcclxufVxyXG5cclxuZnVuY3Rpb24gUHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlLCBwcmludGZ1bmMgPSBucy5wcmludCkge1xyXG5cdGxldCBwcmludFN0YWNrID0gW107XHJcblx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW09QRU5FUl0pO1xyXG5cdGZvciAobGV0IGMgPSAwOyBjIDwgY29sdW1ucy5sZW5ndGg7IGMrKykge1xyXG4gICAgaWYgKGNvbHVtbnNbY10uaGlkZSkgY29udGludWU7XHJcblx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgJycucGFkRW5kKGNvbHVtbnNbY10ud2lkdGgsIHN0eWxlW0ZJTExFUl0pKTtcclxuXHRcdGlmIChjID09IGNvbHVtbnMubGVuZ3RoIC0gMSlcclxuXHRcdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW0NMT1NFUl0pO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbU0VQQVJBVE9SXSk7XHJcblxyXG5cdH1cclxuXHRQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBQcmludEhlYWRlcihucywgY29sdW1ucywgc3R5bGUsIHByaW50ZnVuYyA9IG5zLnByaW50KSB7XHJcblx0bGV0IHByaW50U3RhY2sgPSBbXTtcclxuXHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbQkFSXSk7XHJcblx0Zm9yIChsZXQgYyA9IDA7IGMgPCBjb2x1bW5zLmxlbmd0aDsgYysrKSB7XHJcbiAgICBpZiAoY29sdW1uc1tjXS5oaWRlKSBjb250aW51ZTtcclxuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBjb2x1bW5zW2NdLmhlYWRlci5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW0JBUl0pO1xyXG5cdH1cclxuXHRQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBQcmludExpbmUobnMsIGNvbHVtbnMsIGRhdGEsIHN0eWxlLCBwcmludGZ1bmMgPSBucy5wcmludCwgaGlnaGxpZ2h0KSB7XHJcblx0aWYgKGRhdGEgPT0gbnVsbCkge1xyXG5cdFx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0RJVklERVJdLCBwcmludGZ1bmMpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0bGV0IHByaW50U3RhY2sgPSBbXTtcclxuXHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbMF1bQkFSXSk7XHJcblx0Zm9yIChsZXQgYyA9IDA7IGMgPCBjb2x1bW5zLmxlbmd0aDsgYysrKSB7XHJcbiAgICBpZiAoY29sdW1uc1tjXS5oaWRlKSBjb250aW51ZTtcclxuXHRcdGlmIChkYXRhW2NdLnN0eWxlICE9IHVuZGVmaW5lZClcclxuXHRcdFx0cHJpbnRTdGFjay5wdXNoKHsgc3R5bGU6IGRhdGFbY10uc3R5bGUgfSwgZGF0YVtjXS50ZXh0LnBhZEVuZChjb2x1bW5zW2NdLndpZHRoKSk7XHJcblx0XHRlbHNlIGlmIChkYXRhW2NdLmNvbG9yICE9IHVuZGVmaW5lZClcclxuXHRcdFx0cHJpbnRTdGFjay5wdXNoKENyZWF0ZVN0eWxlKGRhdGFbY10uY29sb3IsIGhpZ2hsaWdodCksIGRhdGFbY10udGV4dC5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRwcmludFN0YWNrLnB1c2goQ3JlYXRlU3R5bGUoJ3doaXRlJywgaGlnaGxpZ2h0KSwgZGF0YVtjXS50b1N0cmluZygpLnBhZEVuZChjb2x1bW5zW2NdLndpZHRoKSk7XHJcblx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbMF1bQkFSXSk7XHJcblx0fVxyXG5cclxuXHRQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlU3R5bGUoY29sb3IsIGhpZ2hsaWdodCkge1xyXG5cdC8vcmV0dXJuIGNvbG9yO1xyXG5cdGxldCBiYWNrQ29sb3IgPSBoaWdobGlnaHQgPyAnIzAwMDAwMCcgOiAnIzFBMUExQSc7XHJcblx0cmV0dXJuIHsgc3R5bGU6IHsgY29sb3I6IGNvbG9yLCBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tDb2xvciB9IH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFByaW50U3RhY2sobnMsIHByaW50U3RhY2ssIHByaW50ZnVuYykge1xyXG5cdGlmIChwcmludGZ1bmMgPT0gbnMudHByaW50IHx8IHByaW50ZnVuYyA9PSBucy5wcmludCB8fCBwcmludGZ1bmMgPT0gbnMudHByaW50Zikge1xyXG5cdFx0Q29sb3JQcmludChucywgcHJpbnRTdGFjaywgZmFsc2UpO1xyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdHByaW50ZnVuYyhucywgcHJpbnRTdGFjaywgdHJ1ZSk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBTZWxlY3RzIGEgY29sb3IgYmFzZWQgb24gYSAxLWJhc2VkIHBlcmNlbnRhZ2VcclxuZXhwb3J0IGZ1bmN0aW9uIHBjdENvbG9yKHBjdCkge1xyXG5cdGlmIChwY3QgPj0gMSkgcmV0dXJuICdMaW1lJztcclxuXHRlbHNlIGlmIChwY3QgPj0gMC45KSByZXR1cm4gJ0dyZWVuJztcclxuXHRlbHNlIGlmIChwY3QgPj0gMC43NSkgcmV0dXJuICdEYXJrR3JlZW4nO1xyXG5cdGVsc2UgaWYgKHBjdCA+PSAwLjYpIHJldHVybiAnR3JlZW5ZZWxsb3cnO1xyXG5cdGVsc2UgaWYgKHBjdCA+PSAwLjMpIHJldHVybiAnWWVsbG93JztcclxuXHRlbHNlIGlmIChwY3QgIT0gMCkgcmV0dXJuICdEYXJrT3JhbmdlJztcclxuXHRyZXR1cm4gJ1JlZCc7XHJcbn1cclxuXHJcbi8vIFVzYWdlOiBDb2xvclByaW50KG5zLCBbJ3JlZCcsICdUaGlzIGlzIHNvbWUgcmVkIHRleHQnLCAnI0ZGRkZGRicsICcgVGhpcyBpcyBzb21lIHdoaXRlIHRleHRdLCB0cnVlKTtcclxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yUHJpbnQobnMsIHN0YWNrLCB0b1Rlcm1pbmFsID0gdHJ1ZSkge1xyXG5cdGxldCBvdXQgPSAnJztcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSArPSAyKSB7XHJcblx0XHRsZXQgc3R5bGUgPSBzdGFja1tpXTtcclxuXHRcdGlmIChzdHlsZS5zdHlsZSA9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0c3R5bGUgPSB7IHN0eWxlOiB7IGNvbG9yOiBzdGFja1tpXSwgYmFja2dyb3VuZENvbG9yOiAnIzAwMDAwMCcgfSB9O1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBjb2xvciA9IHN0eWxlO1xyXG5cdFx0aWYgKHN0eWxlLnN0eWxlKSBjb2xvciA9IHN0eWxlLnN0eWxlLmNvbG9yO1xyXG5cclxuXHRcdGxldCBtYXRjaCA9IENPTE9SUy5maW5kKHMgPT4gcy5odG1sID09IGNvbG9yIHx8IHMuZGVzYy50b0xvd2VyQ2FzZSgpID09IGNvbG9yLnRvTG93ZXJDYXNlKCkpO1xyXG5cdFx0aWYgKCFtYXRjaCAmJiBjb2xvci5zdGFydHNXaXRoKCcjJykpIG1hdGNoID0gRmluZEh0bWxDb2xvckVxdWl2YWxlbnQobnMsIGNvbG9yKTtcclxuXHRcdGlmICghbWF0Y2gpIG1hdGNoID0gQ09MT1JTLmZpbmQocyA9PiBzLmRlc2MudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGNvbG9yLnRvTG93ZXJDYXNlKCkpKTtcclxuXHRcdGlmIChtYXRjaCkgY29sb3IgPSAnXFx4MWJbMzg7NTsnICsgbWF0Y2guYW5zaSArICdtJztcclxuXHRcdGVsc2UgbnMudHByaW50KCdGQUlMOiB1bnN1cHBvcnRlZCBjb2xvcjogJyArIGNvbG9yKTtcclxuXHJcblx0XHRsZXQgdGV4dCA9IHN0YWNrW2kgKyAxXS5yZXBsYWNlKCclJywgJyUlJyk7XHJcblx0XHRvdXQgPSBvdXQgKyBjb2xvciArIHRleHQ7XHJcblx0fVxyXG5cclxuXHRpZiAodG9UZXJtaW5hbClcclxuXHRcdG5zLnRwcmludGYob3V0KTtcclxuXHRlbHNlXHJcblx0XHRucy5wcmludGYob3V0KTtcclxufVxyXG5cclxuLy8gQU5TSSBjb2xvcnMgc3VwcG9ydGVkIGJ5IHRoZSBnYW1lIGFyZSAyNTYgY29sb3JzLCBIVE1MIGNvbG9yIGlzIFJHQlxyXG4vLyBUaGlzIGZ1bmN0aW9ucyBmaW5kcyB0aGUgY2xvc2VzdCBtYXRjaCB0byBhIGZ1bGwgcmFuZ2UgSFRNTCBjb2xvciBjb2RlIGluIHRoZSAyNTYgY29sb3IgQU5TSSBjb2xvcnMgd2UgaGF2ZSB0byB3b3JrIHdpdGhcclxuZnVuY3Rpb24gRmluZEh0bWxDb2xvckVxdWl2YWxlbnQobnMsIGh0bWxDb2RlKSB7XHJcblx0bGV0IGNvcHkgPSBDT0xPUlMubWFwKHMgPT4gcyk7XHJcblxyXG5cdGNvcHkuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG5cdFx0bGV0IGNhID0gcmdiRnJvbUh0bWwoYS5odG1sKTtcclxuXHRcdGxldCBjYiA9IHJnYkZyb21IdG1sKGIuaHRtbCk7XHJcblx0XHRsZXQgY29sID0gcmdiRnJvbUh0bWwoaHRtbENvZGUpO1xyXG5cclxuXHRcdGxldCBvYSA9IE1hdGguYWJzKGNhLnIgLSBjb2wucikgKyBNYXRoLmFicyhjYS5nIC0gY29sLmcpICsgTWF0aC5hYnMoY2EuYiAtIGNvbC5iKTtcclxuXHRcdGxldCBvYiA9IE1hdGguYWJzKGNiLnIgLSBjb2wucikgKyBNYXRoLmFicyhjYi5nIC0gY29sLmcpICsgTWF0aC5hYnMoY2IuYiAtIGNvbC5iKTtcclxuXHRcdHJldHVybiBvYSAtIG9iO1xyXG5cdH1cclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gY29weVswXTtcclxufVxyXG5cclxuLy8gQ29udmVydHMgYSBoZXhhZGVjaW1hbCBIVE1MIGNvbG9yIGJhY2sgdG8gUkdCIGludCB2YWx1ZXNcclxuZnVuY3Rpb24gcmdiRnJvbUh0bWwoaHRtbENvZGUpIHtcclxuXHRsZXQgciA9IE51bWJlci5wYXJzZUludCgnMHgnICsgaHRtbENvZGUuc3Vic3RyKDEsIDIpKTtcclxuXHRsZXQgZyA9IE51bWJlci5wYXJzZUludCgnMHgnICsgaHRtbENvZGUuc3Vic3RyKDMsIDIpKTtcclxuXHRsZXQgYiA9IE51bWJlci5wYXJzZUludCgnMHgnICsgaHRtbENvZGUuc3Vic3RyKDUsIDIpKTtcclxuXHRyZXR1cm4geyByOiByLCBnOiBnLCBiOiBiIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge25zfSBcclxuICogQHBhcmFtIHtBcnJheX0gSlNPTiBEQVRBIGluIGZvcm0gb2YgW3tpZDoxLG5hbWU6XCJMZXhpY29uXCJ9LHtpZDoyLG5hbWU6XCJQYXJhZG94XCJ9XVxyXG4gKiBAcGFyYW0ge0FycmF5fSBwYXNzIGFuIGFycmF5IG9mIGNvbHVtbnMgXHJcbiAqIEByZXR1cm5zIHtIVE1MVGFibGVFbGVtZW50fSBSZXR1cm5zIGEgSFRNTFRhYmxlRWxlbWVudCB0aGF0IHlvdSBjYW4gdXNlIERPTS5hcHBlbmRDaGlsZCh0YWJsZSk7XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSFRNTFRhYmxlRnJvbUpTT04obnMsIGRhdGEsIGNvbHVtbnMpIHtcclxuXHJcblx0dmFyIGZvcm1hdHRlZERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEsIGNvbHVtbnMpKTtcclxuXHR2YXIgY29sID0gW107XHJcbiAgdmFyIGk7XHJcblx0Zm9yIChpID0gMDsgaSA8IGZvcm1hdHRlZERhdGEubGVuZ3RoOyBpKyspIHtcclxuXHRcdGZvciAodmFyIGtleSBpbiBmb3JtYXR0ZWREYXRhW2ldKSB7XHJcblx0XHRcdGlmIChjb2wuaW5kZXhPZihrZXkpID09PSAtMSkge1xyXG5cdFx0XHRcdGNvbC5wdXNoKGtleSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHZhciB0YWJsZSA9IGRvYy5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XHJcblx0dGFibGUuc3R5bGUud2lkdGggPSAnMTAwJSdcclxuXHJcblx0dmFyIHRyID0gdGFibGUuaW5zZXJ0Um93KC0xKTsgICAgICAgICAgICAgICAgICAgLy8gVEFCTEUgUk9XLlxyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDwgY29sLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgdGggPSBkb2MuY3JlYXRlRWxlbWVudChcInRoXCIpOyAgICAgIC8vIFRBQkxFIEhFQURFUi5cclxuXHRcdHRoLmlubmVySFRNTCA9IGNvbFtpXTtcclxuXHRcdHRyLmFwcGVuZENoaWxkKHRoKTtcclxuXHR9XHJcblxyXG5cdGZvciAoaSA9IDA7IGkgPCBmb3JtYXR0ZWREYXRhLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0dHIgPSB0YWJsZS5pbnNlcnRSb3coLTEpO1xyXG5cclxuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY29sLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdHZhciB0YWJDZWxsID0gdHIuaW5zZXJ0Q2VsbCgtMSk7XHJcblx0XHRcdGlmICh0eXBlb2YgKGZvcm1hdHRlZERhdGFbaV1bY29sW2pdXSkgPT0gJ251bWJlcicpIHtcclxuXHRcdFx0XHR2YXIgbnVtYmVyID0gZm9ybWF0dGVkRGF0YVtpXVtjb2xbal1dXHJcblx0XHRcdFx0aWYgKG51bWJlciA+IDApXHJcblx0XHRcdFx0XHR0YWJDZWxsLmlubmVySFRNTCA9IGFkZEh0bWxXaXRoQ29sb3IoXCJhXCIsIGZtdC5mb3JtYXQobnVtYmVyKSwgXCJncmVlblwiKTtcclxuXHRcdFx0XHRlbHNlIGlmIChudW1iZXIgPT0gMClcclxuXHRcdFx0XHRcdHRhYkNlbGwuaW5uZXJIVE1MID0gYWRkSHRtbFdpdGhDb2xvcihcImFcIiwgZm10LmZvcm1hdChudW1iZXIpLCBcIndoaXRlXCIpO1xyXG5cdFx0XHRcdGVsc2UgaWYgKG51bWJlciA8IDApXHJcblx0XHRcdFx0XHR0YWJDZWxsLmlubmVySFRNTCA9IGFkZEh0bWxXaXRoQ29sb3IoXCJhXCIsIGZtdC5mb3JtYXQobnVtYmVyKSwgXCJyZWRcIik7XHJcblxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0YWJDZWxsLmlubmVySFRNTCA9IGZvcm1hdHRlZERhdGFbaV1bY29sW2pdXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiB0YWJsZTtcclxufVxyXG5cclxubGV0IGFkZEh0bWxXaXRoQ29sb3IgPSAodGFnLCBkYXRhLCBjb2xvcikgPT4ge1xyXG5cdHJldHVybiBcIjxcIiArIHRhZyArIFwiIHN0eWxlPSdjb2xvcjpcIiArIGNvbG9yICsgXCInPlwiICsgZGF0YSArIFwiPC9cIiArIHRhZyArIFwiPlwiO1xyXG59XHJcblxyXG5leHBvcnQgbGV0IENPTE9SUyA9IFtcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDgwODBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxLFxyXG5cdFx0XCJkZXNjXCI6IFwiUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMDAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIsXHJcblx0XHRcImRlc2NcIjogXCJMaW1lXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMyxcclxuXHRcdFwiZGVzY1wiOiBcIlllbGxvd1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0LFxyXG5cdFx0XCJkZXNjXCI6IFwiQmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDUsXHJcblx0XHRcImRlc2NcIjogXCJGdWNoc2lhXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2LFxyXG5cdFx0XCJkZXNjXCI6IFwiQXF1YVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNyxcclxuXHRcdFwiZGVzY1wiOiBcIldoaXRlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMTAwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgsXHJcblx0XHRcImRlc2NcIjogXCJCbGFja1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwMDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOSxcclxuXHRcdFwiZGVzY1wiOiBcIk1hcm9vblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzgwMDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTI4LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSwyNSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA4MDAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDEyOCwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTEsXHJcblx0XHRcImRlc2NcIjogXCJPbGl2ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzgwODAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTI4LDEyOCwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSwyNSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMixcclxuXHRcdFwiZGVzY1wiOiBcIk5hdnlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwODBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwxMjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSwyNSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMyxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzgwMDA4MFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTI4LDAsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQsXHJcblx0XHRcImRlc2NcIjogXCJUZWFsXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA4MDgwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDEyOCwxMjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSwyNSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNSxcclxuXHRcdFwiZGVzY1wiOiBcIlNpbHZlclwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2MwYzBjMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTkyLDE5MiwxOTIpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDc1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTmF2eUJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya0JsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOSxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjAsXHJcblx0XHRcImRlc2NcIjogXCJCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwMDBkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxLFxyXG5cdFx0XCJkZXNjXCI6IFwiQmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMixcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwNWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsMTglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjMsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNCxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBTa3lCbHVlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwNWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5NywxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWU0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDk1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDA3LDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjYsXHJcblx0XHRcImRlc2NcIjogXCJEb2RnZXJCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwNWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMywxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRG9kZ2VyQmx1ZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTcsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyOCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI5LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3ByaW5nR3JlZW40XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA4NzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYyLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzAsXHJcblx0XHRcImRlc2NcIjogXCJUdXJxdW9pc2U0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA4Nzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzMSxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBTa3lCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTMsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzMixcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBTa3lCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMDIsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzMyxcclxuXHRcdFwiZGVzY1wiOiBcIkRvZGdlckJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA4N2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDEzNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwOCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM0LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzUsXHJcblx0XHRcImRlc2NcIjogXCJTcHJpbmdHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGFmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNTIsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzNixcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtDeWFuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2NiwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTZWFHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwYWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzgsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGFmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkxLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzksXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGFmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDk4LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDAsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0MSxcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyMTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg0NiwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQyLFxyXG5cdFx0XCJkZXNjXCI6IFwiU3ByaW5nR3JlZW4yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg1NywxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQzLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ3lhbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDY4LDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDQsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrVHVycXVvaXNlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkN2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0NSxcclxuXHRcdFwiZGVzY1wiOiBcIlR1cnF1b2lzZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDg5LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDYsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0NyxcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg0MiwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQ4LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3ByaW5nR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg1MSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQ5LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtU3ByaW5nR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYxLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTAsXHJcblx0XHRcImRlc2NcIjogXCJDeWFuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1MSxcclxuXHRcdFwiZGVzY1wiOiBcIkN5YW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1MixcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtSZWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1MyxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBQaW5rNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmMDA1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU0LFxyXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmMDA4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4MiwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU1LFxyXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmMDBhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg3MiwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU2LFxyXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmMDBkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2NiwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU3LFxyXG5cdFx0XCJkZXNjXCI6IFwiQmx1ZVZpb2xldFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MiwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU4LFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JhbmdlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmNWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsOTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMTglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTksXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzdcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2MCxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjEsXHJcblx0XHRcImRlc2NcIjogXCJTbGF0ZUJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDYyLFxyXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmNWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2MyxcclxuXHRcdFwiZGVzY1wiOiBcIlJveWFsQmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDY0LFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNywxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDY1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDE3JSw0NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2NixcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVUdXJxdW9pc2U0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY4Nzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDE3JSw0NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2NyxcclxuXHRcdFwiZGVzY1wiOiBcIlN0ZWVsQmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIxMCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjgsXHJcblx0XHRcImRlc2NcIjogXCJTdGVlbEJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjIwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2OSxcclxuXHRcdFwiZGVzY1wiOiBcIkNvcm5mbG93ZXJCbHVlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY4N2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjI1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzAsXHJcblx0XHRcImRlc2NcIjogXCJDaGFydHJldXNlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg3LDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzEsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW40XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxNzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcyLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2FkZXRCbHVlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZhZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTUwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA3MyxcclxuXHRcdFwiZGVzY1wiOiBcIkNhZGV0Qmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzQsXHJcblx0XHRcImRlc2NcIjogXCJTa3lCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIwMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzUsXHJcblx0XHRcImRlc2NcIjogXCJTdGVlbEJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxNzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjEwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzYsXHJcblx0XHRcImRlc2NcIjogXCJDaGFydHJldXNlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzcsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc4LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2VhR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTQwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA3OSxcclxuXHRcdFwiZGVzY1wiOiBcIkFxdWFtYXJpbmUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTYwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4MCxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVR1cnF1b2lzZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODEsXHJcblx0XHRcImRlc2NcIjogXCJTdGVlbEJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZkN2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTk1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODIsXHJcblx0XHRcImRlc2NcIjogXCJDaGFydHJldXNlMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg3LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODMsXHJcblx0XHRcImRlc2NcIjogXCJTZWFHcmVlbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDg0LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2VhR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZmZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTM1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODUsXHJcblx0XHRcImRlc2NcIjogXCJTZWFHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxNTAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4NixcclxuXHRcdFwiZGVzY1wiOiBcIkFxdWFtYXJpbmUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTY1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODcsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2xhdGVHcmF5MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDg4LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1JlZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3MDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4OSxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBQaW5rNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3MDA1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDAsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxNywxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDkwLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya01hZ2VudGFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDkxLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya01hZ2VudGFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDg2LDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTIsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrVmlvbGV0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODcwMGQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg3NywxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDkzLFxyXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODcwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg3MSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDk0LFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JhbmdlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTUsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFBpbms0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDE3JSw0NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5NixcclxuXHRcdFwiZGVzY1wiOiBcIlBsdW00XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc1Zjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDE3JSw0NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5NyxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNzAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDk4LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI2MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTksXHJcblx0XHRcImRlc2NcIjogXCJTbGF0ZUJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjU1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAwLFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93NFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ODcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDEsXHJcblx0XHRcImRlc2NcIjogXCJXaGVhdDRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAyLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4Nzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTbGF0ZUdyZXlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDQsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDUsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNsYXRlQmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ODdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDYsXHJcblx0XHRcImRlc2NcIjogXCJZZWxsb3c0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwOCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwOSxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2FmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTAsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNreUJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIxMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTExLFxyXG5cdFx0XCJkZXNjXCI6IFwiU2t5Qmx1ZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2FmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjIwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTEyLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTMsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT2xpdmVHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMDAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExNCxcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3ODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTUsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE2LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NsYXRlR3JheTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTcsXHJcblx0XHRcImRlc2NcIjogXCJTa3lCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ZDdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMDAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTgsXHJcblx0XHRcImRlc2NcIjogXCJDaGFydHJldXNlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExOSxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMDUsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjAsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdyZWVuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyMSxcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTIyLFxyXG5cdFx0XCJkZXNjXCI6IFwiQXF1YW1hcmluZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTYwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTIzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NsYXRlR3JheTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI0LFxyXG5cdFx0XCJkZXNjXCI6IFwiUmVkM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmMDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjUsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjcsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjYsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1WaW9sZXRSZWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEzLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWFnZW50YTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyOCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtWaW9sZXRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDg4LDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI5LFxyXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4MSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEzMCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPcmFuZ2UzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzEsXHJcblx0XHRcImRlc2NcIjogXCJJbmRpYW5SZWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjVmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSw5NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEzMixcclxuXHRcdFwiZGVzY1wiOiBcIkhvdFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1Zjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzMwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzMsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1PcmNoaWQzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzQsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1PcmNoaWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSw5NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyODAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEzNSxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjVmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSw5NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNzAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzYsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrR29sZGVucm9kXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY4NzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTM1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2LDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTYWxtb24zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY4NzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTM1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEzOCxcclxuXHRcdFwiZGVzY1wiOiBcIlJvc3lCcm93blwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzksXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDAsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQxLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDIsXHJcblx0XHRcImRlc2NcIjogXCJHb2xkM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmYWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDMsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrS2hha2lcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTmF2YWpvV2hpdGUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NjlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDYsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFN0ZWVsQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDMzJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDcsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFN0ZWVsQmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmYWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNDgsXHJcblx0XHRcImRlc2NcIjogXCJZZWxsb3czXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkNzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ5LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woODAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1MCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmQ3ODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1MSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmQ3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDMzJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTIsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEN5YW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkN2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwzMyUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTUzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTa3lCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMTAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTQsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlblllbGxvd1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1NSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZmY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTU2LFxyXG5cdFx0XCJkZXNjXCI6IFwiUGFsZUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMDAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTcsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjU1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1OCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTUwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTU5LFxyXG5cdFx0XCJkZXNjXCI6IFwiUGFsZVR1cnF1b2lzZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTYwLFxyXG5cdFx0XCJkZXNjXCI6IFwiUmVkM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3MDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjEsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzMsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjIsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTYzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWFnZW50YTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDExLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTY0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWFnZW50YTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2NSxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2NixcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPcmFuZ2UzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc1ZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjcsXHJcblx0XHRcImRlc2NcIjogXCJJbmRpYW5SZWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzVmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSw5NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2OCxcclxuXHRcdFwiZGVzY1wiOiBcIkhvdFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc1Zjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzQwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjksXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMyMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTcwLFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JjaGlkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc1ZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzEsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1PcmNoaWQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjg1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTcyLFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JhbmdlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNywxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3MyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2FsbW9uM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzQsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc4Nzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3NSxcclxuXHRcdFwiZGVzY1wiOiBcIlBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc4N2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc2LFxyXG5cdFx0XCJkZXNjXCI6IFwiUGx1bTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzcsXHJcblx0XHRcImRlc2NcIjogXCJWaW9sZXRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjgwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc4LFxyXG5cdFx0XCJkZXNjXCI6IFwiR29sZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2FmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdvbGRlbnJvZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2FmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxNzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTgwLFxyXG5cdFx0XCJkZXNjXCI6IFwiVGFuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODEsXHJcblx0XHRcImRlc2NcIjogXCJNaXN0eVJvc2UzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMzMlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4MixcclxuXHRcdFwiZGVzY1wiOiBcIlRoaXN0bGUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwzMyUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTgzLFxyXG5cdFx0XCJkZXNjXCI6IFwiUGx1bTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2FmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxNzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjcwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTg0LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZDcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODUsXHJcblx0XHRcImRlc2NcIjogXCJLaGFraTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTg2LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODcsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFllbGxvdzNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMzMlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4OCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk4NFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4OSxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U3RlZWxCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZDdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw5MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTAsXHJcblx0XHRcImRlc2NcIjogXCJZZWxsb3cyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkxLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzUsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTIsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT2xpdmVHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2ZmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyNTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woODAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTMsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk0LFxyXG5cdFx0XCJkZXNjXCI6IFwiSG9uZXlkZXcyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDkyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5NSxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0Q3lhbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2ZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk2LFxyXG5cdFx0XCJkZXNjXCI6IFwiUmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTcsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzcsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTgsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk5LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxOCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwMCxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMGQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwOSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwMSxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGExXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDIsXHJcblx0XHRcImRlc2NcIjogXCJPcmFuZ2VSZWQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY1ZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsOTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDMsXHJcblx0XHRcImRlc2NcIjogXCJJbmRpYW5SZWQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjA0LFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDM0NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwNSxcclxuXHRcdFwiZGVzY1wiOiBcIkhvdFBpbmtcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjVmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMzAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDYsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY1ZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzE1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjA3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwOCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPcmFuZ2VcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDksXHJcblx0XHRcImRlc2NcIjogXCJTYWxtb24xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4NzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTUsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTAsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodENvcmFsXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4Nzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTEsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlVmlvbGV0UmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzNDAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTIsXHJcblx0XHRcImRlc2NcIjogXCJPcmNoaWQyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMyMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxMyxcclxuXHRcdFwiZGVzY1wiOiBcIk9yY2hpZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjg3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjE0LFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JhbmdlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxNSxcclxuXHRcdFwiZGVzY1wiOiBcIlNhbmR5QnJvd25cIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxNixcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2FsbW9uMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxNyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0UGluazFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxOCxcclxuXHRcdFwiZGVzY1wiOiBcIlBpbmsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxOSxcclxuXHRcdFwiZGVzY1wiOiBcIlBsdW0xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyMCxcclxuXHRcdFwiZGVzY1wiOiBcIkdvbGQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkNzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIxLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDUsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjIsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdvbGRlbnJvZDJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmQ3ODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjMsXHJcblx0XHRcImRlc2NcIjogXCJOYXZham9XaGl0ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmQ3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjQsXHJcblx0XHRcImRlc2NcIjogXCJNaXN0eVJvc2UxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkN2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw5MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjUsXHJcblx0XHRcImRlc2NcIjogXCJUaGlzdGxlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw5MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjYsXHJcblx0XHRcImRlc2NcIjogXCJZZWxsb3cxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZmZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyNyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI4LFxyXG5cdFx0XCJkZXNjXCI6IFwiS2hha2kxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZmZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI5LFxyXG5cdFx0XCJkZXNjXCI6IFwiV2hlYXQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjMwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ29ybnNpbGsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjMxLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTEwMFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDEwMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzIsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzA4MDgwOFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOCw4LDgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDMlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjMzLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTdcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMxMjEyMTJcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE4LDE4LDE4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzNCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzFjMWMxY1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjgsMjgsMjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDEwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzNSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxNVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzI2MjYyNlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMzgsMzgsMzgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDE0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzNixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxOVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzMwMzAzMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoNDgsNDgsNDgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzNyxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkyM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzNhM2EzYVwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoNTgsNTgsNTgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDIyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzOCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkyN1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzQ0NDQ0NFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoNjgsNjgsNjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzOSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkzMFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzRlNGU0ZVwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoNzgsNzgsNzgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDMwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0MCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkzNVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzU4NTg1OFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoODgsODgsODgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0MSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkzOVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzYyNjI2MlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTgsOTgsOTgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDM3JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0MixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk0MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzZjNmM2Y1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTA4LDEwOCwxMDgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDQwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0MyxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk0NlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzc2NzY3NlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTE4LDExOCwxMTgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDQ2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0NCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1MFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzgwODA4MFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTI4LDEyOCwxMjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0NSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1NFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzhhOGE4YVwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM4LDEzOCwxMzgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDU0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0NixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1OFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzk0OTQ5NFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTQ4LDE0OCwxNDgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDU4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0NyxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk2MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzllOWU5ZVwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTU4LDE1OCwxNTgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDYxJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0OCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk2NlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2E4YThhOFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTY4LDE2OCwxNjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDY1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI0OSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk3MFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2IyYjJiMlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc4LDE3OCwxNzgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDY5JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1MCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk3NFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2JjYmNiY1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTg4LDE4OCwxODgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDczJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1MSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk3OFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2M2YzZjNlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTk4LDE5OCwxOTgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDc3JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1MixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk4MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2QwZDBkMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjA4LDIwOCwyMDgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDgxJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1MyxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk4NVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2RhZGFkYVwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE4LDIxOCwyMTgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDg1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1NCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk4OVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2U0ZTRlNFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjI4LDIyOCwyMjgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDg5JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI1NSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk5M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2VlZWVlZVwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjM4LDIzOCwyMzgpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDkzJSlcIlxyXG5cdH1cclxuXTtcclxuIl19\",\"filename\":\"tables.js\",\"server\":\"home\"}}],[\"cct.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"./util\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const server of getAllServers(ns)) {\\r\\n        const contracts = ns.ls(server, '.cct');\\r\\n        for (const contract of contracts) {\\r\\n            const type = ns.codingcontract.getContractType(contract, server);\\r\\n            const data = ns.codingcontract.getData(contract, server);\\r\\n            // ns.tprintf(`${server}: ${contract} | ${type}`);\\r\\n            solve(type, data, server, contract, ns);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function solve(type, data, server, contract, ns) {\\r\\n    let solution = 'none';\\r\\n    switch (type) {\\r\\n        case \\\"Algorithmic Stock Trader I\\\":\\r\\n            solution = maxProfit([1, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader II\\\":\\r\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader III\\\":\\r\\n            solution = maxProfit([2, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader IV\\\":\\r\\n            solution = maxProfit(data);\\r\\n            break;\\r\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n            solution = solveTriangleSum(data, ns);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid I\\\":\\r\\n            solution = uniquePathsI(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid II\\\":\\r\\n            solution = uniquePathsII(data);\\r\\n            break;\\r\\n        case \\\"Generate IP Addresses\\\":\\r\\n            solution = generateIps(data);\\r\\n            break;\\r\\n        case \\\"Find Largest Prime Factor\\\":\\r\\n            solution = factor3(data);\\r\\n            break;\\r\\n        case \\\"Spiralize Matrix\\\":\\r\\n            solution = spiral(data);\\r\\n            break;\\r\\n        case \\\"Merge Overlapping Intervals\\\":\\r\\n            solution = mergeOverlap(data);\\r\\n            break;\\r\\n        case \\\"Find All Valid Math Expressions\\\":\\r\\n            solution = solveFindAllValidMathExpressions(data);\\r\\n            break;\\r\\n        case \\\"Subarray with Maximum Sum\\\":\\r\\n            solution = solverLargestSubset(ns, data);\\r\\n            break;\\r\\n        case \\\"Sanitize Parentheses in Expression\\\":\\r\\n            solution = SanitizeParensSolver(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game\\\":\\r\\n            solution = solverArrayJumpingGame(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum\\\":\\r\\n            solution = solverWaysToSum(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum II\\\":\\r\\n            solution = solveWaysToSumII(data);\\r\\n            break;\\r\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\r\\n            solution = HammingEncode(data);\\r\\n            break;\\r\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\r\\n            solution = HammingDecode(data);\\r\\n            break;\\r\\n        case \\\"Shortest Path in a Grid\\\":\\r\\n            solution = ShortestPathInAGrid(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game II\\\":\\r\\n            solution = solverArrayJumpingGameII(data);\\r\\n            break;\\r\\n        case \\\"Compression II: LZ Decompression\\\":\\r\\n            solution = comprLZDecode(data);\\r\\n            break;\\r\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\r\\n            solution = coloringGraph(data);\\r\\n            break;\\r\\n        case \\\"Compression III: LZ Compression\\\":\\r\\n            solution = comprLZEncode(data);\\r\\n            break;\\r\\n        case \\\"Compression I: RLE Compression\\\":\\r\\n            solution = RLEencode(data);\\r\\n            break;\\r\\n        case \\\"Encryption I: Caesar Cipher\\\":\\r\\n            solution = caesarCipher(data);\\r\\n            break;\\r\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\r\\n            solution = vignereCipher(data);\\r\\n            break;\\r\\n    }\\r\\n    if (solution == 'none') {\\r\\n        ns.tprint('ERROR: NO SOLVER FOR ' + contract + ' ' + solution);\\r\\n        return '';\\r\\n    }\\r\\n    var ret = ns.codingcontract.attempt(solution, contract, server, { returnReward: true });\\r\\n    if (ret == false) {\\r\\n        ns.tprint('FAILED TO SOLVE: ' + contract + ' type: ' + type + ' data: ' + data + ' attempted solution: ' + solution);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(ret);\\r\\n    }\\r\\n    return ret;\\r\\n}\\r\\nfunction vignereCipher(data) {\\r\\n    const cipher = [...data[0]]\\r\\n        .map((a, i) => {\\r\\n        return a === \\\" \\\"\\r\\n            ? a\\r\\n            : String.fromCharCode(((a.charCodeAt(0) - 2 * 65 + data[1].charCodeAt(i % data[1].length)) % 26) + 65);\\r\\n    })\\r\\n        .join(\\\"\\\");\\r\\n    return cipher;\\r\\n}\\r\\nfunction caesarCipher(data) {\\r\\n    const cipher = [...data[0]]\\r\\n        .map((a) => (a === \\\" \\\" ? a : String.fromCharCode(((a.charCodeAt(0) - 65 - data[1] + 26) % 26) + 65)))\\r\\n        .join(\\\"\\\");\\r\\n    return cipher;\\r\\n}\\r\\nfunction solverArrayJumpingGameII(arrayData) {\\r\\n    let n = arrayData.length;\\r\\n    let reach = 0;\\r\\n    let jumps = 0;\\r\\n    let lastJump = -1;\\r\\n    while (reach < n - 1) {\\r\\n        let jumpedFrom = -1;\\r\\n        for (let i = reach; i > lastJump; i--) {\\r\\n            if (i + arrayData[i] > reach) {\\r\\n                reach = i + arrayData[i];\\r\\n                jumpedFrom = i;\\r\\n            }\\r\\n        }\\r\\n        if (jumpedFrom === -1) {\\r\\n            jumps = 0;\\r\\n            break;\\r\\n        }\\r\\n        lastJump = jumpedFrom;\\r\\n        jumps++;\\r\\n    }\\r\\n    return jumps;\\r\\n}\\r\\nfunction ShortestPathInAGrid(data) {\\r\\n    let H = data.length, W = data[0].length;\\r\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\r\\n    dist[0][0] = 0;\\r\\n    let queue = [[0, 0]];\\r\\n    while (queue.length > 0) {\\r\\n        let [i, j] = queue.shift();\\r\\n        let d = dist[i][j];\\r\\n        if (i > 0 && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1) {\\r\\n            dist[i - 1][j] = d + 1;\\r\\n            queue.push([i - 1, j]);\\r\\n        }\\r\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1) {\\r\\n            dist[i + 1][j] = d + 1;\\r\\n            queue.push([i + 1, j]);\\r\\n        }\\r\\n        if (j > 0 && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1) {\\r\\n            dist[i][j - 1] = d + 1;\\r\\n            queue.push([i, j - 1]);\\r\\n        }\\r\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1) {\\r\\n            dist[i][j + 1] = d + 1;\\r\\n            queue.push([i, j + 1]);\\r\\n        }\\r\\n    }\\r\\n    let path = \\\"\\\";\\r\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\r\\n        let i = H - 1, j = W - 1;\\r\\n        while (i !== 0 || j !== 0) {\\r\\n            let d = dist[i][j];\\r\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\r\\n            if (i > 0 && dist[i - 1][j] < d) {\\r\\n                d = dist[i - 1][j];\\r\\n                new_i = i - 1;\\r\\n                new_j = j;\\r\\n                dir = \\\"D\\\";\\r\\n            }\\r\\n            if (i < H - 1 && dist[i + 1][j] < d) {\\r\\n                d = dist[i + 1][j];\\r\\n                new_i = i + 1;\\r\\n                new_j = j;\\r\\n                dir = \\\"U\\\";\\r\\n            }\\r\\n            if (j > 0 && dist[i][j - 1] < d) {\\r\\n                d = dist[i][j - 1];\\r\\n                new_i = i;\\r\\n                new_j = j - 1;\\r\\n                dir = \\\"R\\\";\\r\\n            }\\r\\n            if (j < W - 1 && dist[i][j + 1] < d) {\\r\\n                d = dist[i][j + 1];\\r\\n                new_i = i;\\r\\n                new_j = j + 1;\\r\\n                dir = \\\"L\\\";\\r\\n            }\\r\\n            i = new_i;\\r\\n            j = new_j;\\r\\n            path = dir + path;\\r\\n        }\\r\\n    }\\r\\n    return path;\\r\\n}\\r\\n/**\\r\\n *\\r\\n * @param {number[][]} input [targetNumber,[available numbers]]\\r\\n * @returns\\r\\n */\\r\\nfunction solveWaysToSumII(input) {\\r\\n    /**\\r\\n     *\\r\\n     * @param {number} target\\r\\n     * @param {number[]} nums\\r\\n     * @returns\\r\\n     */\\r\\n    let n = input[0];\\r\\n    let nums = input[1];\\r\\n    let table = new Array(n + 1);\\r\\n    for (let i = 0; i < n + 1; i++) {\\r\\n        table[i] = 0;\\r\\n    }\\r\\n    table[0] = 1;\\r\\n    for (let i of nums) {\\r\\n        if (i > n) {\\r\\n            continue;\\r\\n        }\\r\\n        for (let j = i; j <= n; j++) {\\r\\n            table[j] += table[j - i];\\r\\n        }\\r\\n        console.log(table);\\r\\n    }\\r\\n    return table[n];\\r\\n}\\r\\n//ALGORITHMIC STOCK TRADER\\r\\nfunction maxProfit(arrayData) {\\r\\n    let i, j, k;\\r\\n    let maxTrades = arrayData[0];\\r\\n    let stockPrices = arrayData[1];\\r\\n    let tempStr = \\\"[0\\\";\\r\\n    for (i = 0; i < stockPrices.length; i++) {\\r\\n        tempStr += \\\",0\\\";\\r\\n    }\\r\\n    tempStr += \\\"]\\\";\\r\\n    let tempArr = \\\"[\\\" + tempStr;\\r\\n    for (i = 0; i < maxTrades - 1; i++) {\\r\\n        tempArr += \\\",\\\" + tempStr;\\r\\n    }\\r\\n    tempArr += \\\"]\\\";\\r\\n    let highestProfit = JSON.parse(tempArr);\\r\\n    for (i = 0; i < maxTrades; i++) {\\r\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\r\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && j > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\r\\n}\\r\\n//SMALLEST TRIANGLE SUM\\r\\nfunction solveTriangleSum(arrayData, ns) {\\r\\n    let triangle = arrayData;\\r\\n    let nextArray;\\r\\n    let previousArray = triangle[0];\\r\\n    for (let i = 1; i < triangle.length; i++) {\\r\\n        nextArray = [];\\r\\n        for (let j = 0; j < triangle[i].length; j++) {\\r\\n            if (j == 0) {\\r\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\r\\n            }\\r\\n            else if (j == triangle[i].length - 1) {\\r\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\r\\n            }\\r\\n            else {\\r\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\r\\n            }\\r\\n        }\\r\\n        previousArray = nextArray;\\r\\n    }\\r\\n    return Math.min.apply(null, nextArray);\\r\\n}\\r\\n//UNIQUE PATHS IN A GRID\\r\\nfunction uniquePathsI(grid) {\\r\\n    const rightMoves = grid[0] - 1;\\r\\n    const downMoves = grid[1] - 1;\\r\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\r\\n}\\r\\nfunction factorial(n) {\\r\\n    return factorialDivision(n, 1);\\r\\n}\\r\\nfunction factorialDivision(n, d) {\\r\\n    if (n == 0 || n == 1 || n == d)\\r\\n        return 1;\\r\\n    return factorialDivision(n - 1, d) * n;\\r\\n}\\r\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\r\\n    const rightMoves = grid[0].length - 1;\\r\\n    const downMoves = grid.length - 1;\\r\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\r\\n    for (let i = 0; i < grid.length; i++) {\\r\\n        for (let j = 0; j < grid[i].length; j++) {\\r\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\r\\n                const newArray = [];\\r\\n                for (let k = i; k < grid.length; k++) {\\r\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\r\\n                }\\r\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\r\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\r\\n                totalPossiblePaths -= removedPaths;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return totalPossiblePaths;\\r\\n}\\r\\n//GENERATE IP ADDRESSES\\r\\nfunction generateIps(num) {\\r\\n    num = num.toString();\\r\\n    const length = num.length;\\r\\n    const ips = [];\\r\\n    for (let i = 1; i < length - 2; i++) {\\r\\n        for (let j = i + 1; j < length - 1; j++) {\\r\\n            for (let k = j + 1; k < length; k++) {\\r\\n                const ip = [\\r\\n                    num.slice(0, i),\\r\\n                    num.slice(i, j),\\r\\n                    num.slice(j, k),\\r\\n                    num.slice(k, num.length)\\r\\n                ];\\r\\n                let isValid = true;\\r\\n                ip.forEach(seg => {\\r\\n                    isValid = isValid && isValidIpSegment(seg);\\r\\n                });\\r\\n                if (isValid)\\r\\n                    ips.push(ip.join(\\\".\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return ips.toString();\\r\\n}\\r\\nfunction isValidIpSegment(segment) {\\r\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\r\\n        return false;\\r\\n    segment = Number(segment);\\r\\n    if (segment < 0 || segment > 255)\\r\\n        return false;\\r\\n    return true;\\r\\n}\\r\\n//GREATEST FACTOR\\r\\nfunction factor3(n) {\\r\\n    // Returns all the prime factors of a positive integer\\r\\n    let factors = [];\\r\\n    let d = 2;\\r\\n    while (n > 1) {\\r\\n        while (n % d == 0) {\\r\\n            factors.push(d);\\r\\n            n /= d;\\r\\n        }\\r\\n        d = d + 1;\\r\\n        if (d * d > n) {\\r\\n            if (n > 1)\\r\\n                factors.push(n);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (factors.length > 0)\\r\\n        return factors.pop();\\r\\n    return '';\\r\\n}\\r\\n//SPIRALIZE Matrix\\r\\nfunction spiral(arr, accum = []) {\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.shift());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.pop().reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, 0).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    return spiral(arr, accum);\\r\\n}\\r\\nfunction column(arr, index) {\\r\\n    const res = [];\\r\\n    for (let i = 0; i < arr.length; i++) {\\r\\n        const elm = arr[i].splice(index, 1)[0];\\r\\n        if (elm) {\\r\\n            res.push(elm);\\r\\n        }\\r\\n    }\\r\\n    return res;\\r\\n}\\r\\n// Merge Overlapping Intervals\\r\\nfunction mergeOverlap(intervals) {\\r\\n    intervals.sort(([minA], [minB]) => minA - minB);\\r\\n    for (let i = 0; i < intervals.length; i++) {\\r\\n        for (let j = i + 1; j < intervals.length; j++) {\\r\\n            const [min, max] = intervals[i];\\r\\n            const [laterMin, laterMax] = intervals[j];\\r\\n            if (laterMin <= max) {\\r\\n                const newMax = laterMax > max ? laterMax : max;\\r\\n                const newInterval = [min, newMax];\\r\\n                intervals[i] = newInterval;\\r\\n                intervals.splice(j, 1);\\r\\n                j = i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return intervals;\\r\\n}\\r\\nfunction SanitizeParensSolver(data) {\\r\\n    var left = 0;\\r\\n    var right = 0;\\r\\n    var res = [];\\r\\n    for (var i = 0; i < data.length; ++i) {\\r\\n        if (data[i] === '(') {\\r\\n            ++left;\\r\\n        }\\r\\n        else if (data[i] === ')') {\\r\\n            left > 0 ? --left : ++right;\\r\\n        }\\r\\n    }\\r\\n    function dfs(pair, index, left, right, s, solution, res) {\\r\\n        if (s.length === index) {\\r\\n            if (left === 0 && right === 0 && pair === 0) {\\r\\n                for (var i = 0; i < res.length; i++) {\\r\\n                    if (res[i] === solution) {\\r\\n                        return;\\r\\n                    }\\r\\n                }\\r\\n                res.push(solution);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        if (s[index] === '(') {\\r\\n            if (left > 0) {\\r\\n                dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n            }\\r\\n            dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n        }\\r\\n        else if (s[index] === ')') {\\r\\n            if (right > 0)\\r\\n                dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n            if (pair > 0)\\r\\n                dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n        }\\r\\n        else {\\r\\n            dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n        }\\r\\n    }\\r\\n    dfs(0, 0, left, right, data, '', res);\\r\\n    return res;\\r\\n}\\r\\nfunction solverArrayJumpingGame(arrayData) {\\r\\n    if (arrayData[0] == 0)\\r\\n        return '0';\\r\\n    let arrayJump = [1];\\r\\n    for (let n = 0; n < arrayData.length; n++) {\\r\\n        if (arrayJump[n]) {\\r\\n            for (let p = n; p <= Math.min(n + arrayData[n], arrayData.length - 1); p++) { // fixed off-by-one error\\r\\n                arrayJump[p] = 1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return 0 + Boolean(arrayJump[arrayData.length - 1]); // thanks /u/Kalumniatoris\\r\\n}\\r\\nfunction solverWaysToSum(arrayData) {\\r\\n    var ways = [];\\r\\n    ways[0] = 1;\\r\\n    for (var a = 1; a <= arrayData; a++) {\\r\\n        ways[a] = 0;\\r\\n    }\\r\\n    for (var i = 1; i <= arrayData - 1; i++) {\\r\\n        for (var j = i; j <= arrayData; j++) {\\r\\n            ways[j] += ways[j - i];\\r\\n        }\\r\\n    }\\r\\n    return ways[arrayData];\\r\\n}\\r\\nfunction solverWaysToExpress(ns, arrayData) {\\r\\n    let i, j, k;\\r\\n    let operatorList = [\\\"\\\", \\\"+\\\", \\\"-\\\", \\\"*\\\"];\\r\\n    let validExpressions = [];\\r\\n    let tempPermutations = Math.pow(4, (arrayData[0].length - 1));\\r\\n    for (i = 0; i < tempPermutations; i++) {\\r\\n        let arraySummands = [];\\r\\n        let candidateExpression = arrayData[0].substr(0, 1);\\r\\n        arraySummands[0] = parseInt(arrayData[0].substr(0, 1));\\r\\n        for (j = 1; j < arrayData[0].length; j++) {\\r\\n            candidateExpression += operatorList[(i >> ((j - 1) * 2)) % 4] + arrayData[0].substr(j, 1);\\r\\n            let rollingOperator = operatorList[(i >> ((j - 1) * 2)) % 4];\\r\\n            let rollingOperand = parseInt(arrayData[0].substr(j, 1));\\r\\n            switch (rollingOperator) {\\r\\n                case \\\"\\\":\\r\\n                    rollingOperand = rollingOperand * (arraySummands[arraySummands.length - 1] / Math.abs(arraySummands[arraySummands.length - 1]));\\r\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * 10 + rollingOperand;\\r\\n                    break;\\r\\n                case \\\"+\\\":\\r\\n                    arraySummands[arraySummands.length] = rollingOperand;\\r\\n                    break;\\r\\n                case \\\"-\\\":\\r\\n                    arraySummands[arraySummands.length] = 0 - rollingOperand;\\r\\n                    break;\\r\\n                case \\\"*\\\":\\r\\n                    while (j < arrayData[0].length - 1 && ((i >> (j * 2)) % 4) === 0) {\\r\\n                        j += 1;\\r\\n                        candidateExpression += arrayData[0].substr(j, 1);\\r\\n                        rollingOperand = rollingOperand * 10 + parseInt(arrayData[0].substr(j, 1));\\r\\n                    }\\r\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * rollingOperand;\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        let rollingTotal = arraySummands.reduce(function (a, b) { return a + b; });\\r\\n        if (arrayData[1] === rollingTotal) {\\r\\n            validExpressions[validExpressions.length] = candidateExpression;\\r\\n        }\\r\\n    }\\r\\n    return JSON.stringify(validExpressions);\\r\\n}\\r\\nfunction solveFindAllValidMathExpressions(arrayData) {\\r\\n    const num = arrayData[0];\\r\\n    const target = arrayData[1];\\r\\n    function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n        if (pos === num.length) {\\r\\n            if (target === evaluated) {\\r\\n                res.push(path);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        for (let i = pos; i < num.length; ++i) {\\r\\n            if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                break;\\r\\n            }\\r\\n            const cur = parseInt(num.substring(pos, i + 1));\\r\\n            if (pos === 0) {\\r\\n                helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n            }\\r\\n            else {\\r\\n                helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    const result = [];\\r\\n    helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n    return result;\\r\\n}\\r\\nfunction solverLargestSubset(ns, arrayData) {\\r\\n    let highestSubset = arrayData[0];\\r\\n    for (let i = 0; i < arrayData.length; i++) {\\r\\n        for (let j = i; j < arrayData.length; j++) {\\r\\n            let tempSubset = 0;\\r\\n            for (let k = i; k <= j; k++) {\\r\\n                tempSubset += arrayData[k];\\r\\n            }\\r\\n            if (highestSubset < tempSubset) {\\r\\n                highestSubset = tempSubset;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestSubset;\\r\\n}\\r\\nexport function HammingSumOfParity(_lengthOfDBits) {\\r\\n    return (_lengthOfDBits < 3 || _lengthOfDBits == 0)\\r\\n        ? ((_lengthOfDBits == 0) ? 0 : _lengthOfDBits + 1)\\r\\n        // the Math.log2-math will only work, if the length is greater egqual 3 otherwise it's \\\"kinda broken\\\" :D\\r\\n        : ((Math.ceil(Math.log2(_lengthOfDBits * 2))) <= Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits)))))\\r\\n            ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\r\\n            : Math.ceil(Math.log2(_lengthOfDBits));\\r\\n}\\r\\nexport function HammingEncode(value) {\\r\\n    let _dataBits = value.toString(2); // change value into string of binary bits\\r\\n    let _sum_parity = HammingSumOfParity(_dataBits.length); // get the sum of needed parity bits\\r\\n    let _data = _dataBits.split(\\\"\\\"); // create new array with the given data bits\\r\\n    let _build = []; // init new array for building\\r\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // count specified data in the array, for later use\\r\\n    _build.push(\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)); // pre-build the \\\"pre-build\\\"\\r\\n    for (let i = 2; i < _sum_parity; i++) { // add new paritybits and the corresponding data bits\\r\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\r\\n    }\\r\\n    // \\\"pre\\\"-build my array, now the \\\"calculation\\\"... get the paritybits working\\r\\n    for (let index of _build.reduce(function (a, e, i) { if (e == \\\"x\\\")\\r\\n        a.push(i); return a; }, [])) {\\r\\n        let _tempcount = index + 1; // set the \\\"stepsize\\\"\\r\\n        let _temparray = []; // temporary array to store the corresponding bits\\r\\n        let _tempdata = [..._build]; // copy the \\\"build\\\"\\r\\n        while (_tempdata[index] !== undefined) { // as long as there are bits, do \\\"cut\\\"\\r\\n            let _temp = _tempdata.splice(index, _tempcount * 2); // get x*2 bits, then\\r\\n            _temparray.push(..._temp.splice(0, _tempcount)); // .. cut them and keep first half\\r\\n        }\\r\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\r\\n        _build[index] = ((count(_temparray, \\\"1\\\")) % 2.).toString(); // simple count and remainder of 2 with \\\"toString\\\" to store it\\r\\n    }\\r\\n    _build.unshift(((count(_build, \\\"1\\\")) % 2.).toString()); // adding first index, which is done as last element\\r\\n    return _build.join(\\\"\\\"); // return a string again\\r\\n}\\r\\nexport function HammingDecode(_data) {\\r\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\r\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\r\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\r\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\r\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\r\\n    _testArray.push((_overallParity == (count(_build, \\\"1\\\") % 2).toString()) ? true : false); // checking the \\\"overall\\\" parity\\r\\n    for (var i = 0; i < _sum_parity; i++) {\\r\\n        let _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\r\\n        let _tempStep = _tempIndex + 1; // set the stepsize\\r\\n        let _tempData = [..._build]; // \\\"copy\\\" the build-data\\r\\n        let _tempArray = []; // init empty array for \\\"testing\\\"\\r\\n        while (_tempData[_tempIndex] != undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\r\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\r\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\r\\n        }\\r\\n        let _tempParity = _tempArray.shift(); // and cut the first index for checking with the rest of the data\\r\\n        _testArray.push(((_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString())) ? true : false); // is the _tempParity the calculated data?\\r\\n    }\\r\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\r\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\r\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2);\\r\\n    }\\r\\n    _build.unshift(_overallParity);\\r\\n    // fix the actual hammingcode if there is an error\\r\\n    if (_fixIndex > 0 && _testArray[0] == false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\r\\n        _build[_fixIndex] = (_build[_fixIndex] == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == false) { // otherwise, if the the overall_parity is only wrong, fix that one\\r\\n        _overallParity = (_overallParity == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\r\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How?\\r\\n    }\\r\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\r\\n    for (var j = _sum_parity; j >= 0; j--) { // start from the last parity down the starting one\\r\\n        _build.splice(Math.pow(2, j), 1);\\r\\n    }\\r\\n    _build.splice(0, 1);\\r\\n    return parseInt(_build.join(\\\"\\\"), 2);\\r\\n}\\r\\n// decompress LZ-compressed string, or return null if input is invalid\\r\\nfunction comprLZDecode(compr) {\\r\\n    let plain = \\\"\\\";\\r\\n    for (let i = 0; i < compr.length;) {\\r\\n        const literal_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (literal_length < 0 || literal_length > 9 || i + 1 + literal_length > compr.length) {\\r\\n            return null;\\r\\n        }\\r\\n        plain += compr.substring(i + 1, i + 1 + literal_length);\\r\\n        i += 1 + literal_length;\\r\\n        if (i >= compr.length) {\\r\\n            break;\\r\\n        }\\r\\n        const backref_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (backref_length < 0 || backref_length > 9) {\\r\\n            return null;\\r\\n        }\\r\\n        else if (backref_length === 0) {\\r\\n            ++i;\\r\\n        }\\r\\n        else {\\r\\n            if (i + 1 >= compr.length) {\\r\\n                return null;\\r\\n            }\\r\\n            const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\r\\n            if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) || backref_offset > plain.length) {\\r\\n                return null;\\r\\n            }\\r\\n            for (let j = 0; j < backref_length; ++j) {\\r\\n                plain += plain[plain.length - backref_offset];\\r\\n            }\\r\\n            i += 2;\\r\\n        }\\r\\n    }\\r\\n    return plain;\\r\\n}\\r\\nfunction coloringGraph(data) {\\r\\n    //Helper function to get neighbourhood of a vertex\\r\\n    function neighbourhood(vertex) {\\r\\n        const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\r\\n        const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\r\\n        return adjLeft.concat(adjRight);\\r\\n    }\\r\\n    //Verify that there is no solution by attempting to create a proper 2-coloring.\\r\\n    const coloring = Array(data[0]).fill(undefined);\\r\\n    while (coloring.some((val) => val === undefined)) {\\r\\n        //Color a vertex in the graph\\r\\n        const initialVertex = coloring.findIndex((val) => val === undefined);\\r\\n        coloring[initialVertex] = 0;\\r\\n        const frontier = [initialVertex];\\r\\n        //Propogate the coloring throughout the component containing v greedily\\r\\n        while (frontier.length > 0) {\\r\\n            const v = frontier.pop() || 0;\\r\\n            const neighbors = neighbourhood(v);\\r\\n            //For each vertex u adjacent to v\\r\\n            for (const id in neighbors) {\\r\\n                const u = neighbors[id];\\r\\n                //Set the color of u to the opposite of v's color if it is new,\\r\\n                //then add u to the frontier to continue the algorithm.\\r\\n                if (coloring[u] === undefined) {\\r\\n                    if (coloring[v] === 0)\\r\\n                        coloring[u] = 1;\\r\\n                    else\\r\\n                        coloring[u] = 0;\\r\\n                    frontier.push(u);\\r\\n                }\\r\\n                //Assert u,v do not have the same color\\r\\n                else if (coloring[u] === coloring[v]) {\\r\\n                    //If u,v do have the same color, no proper 2-coloring exists, meaning\\r\\n                    //the player was correct to say there is no proper 2-coloring of the graph.\\r\\n                    return \\\"[]\\\";\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return coloring;\\r\\n}\\r\\n// compress plaintest string\\r\\nexport function comprLZEncode(plain) {\\r\\n    // for state[i][j]:\\r\\n    //      if i is 0, we're adding a literal of length j\\r\\n    //      else, we're adding a backreference of offset i and length j\\r\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\r\\n    let new_state = Array.from(Array(10), () => Array(10));\\r\\n    function set(state, i, j, str) {\\r\\n        const current = state[i][j];\\r\\n        if (current == null || str.length < current.length) {\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n        else if (str.length === current.length && Math.random() < 0.5) {\\r\\n            // if two strings are the same length, pick randomly so that\\r\\n            // we generate more possible inputs to Compression II\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n    }\\r\\n    // initial state is a literal of length 1\\r\\n    cur_state[0][1] = \\\"\\\";\\r\\n    for (let i = 1; i < plain.length; ++i) {\\r\\n        for (const row of new_state) {\\r\\n            row.fill(null);\\r\\n        }\\r\\n        const c = plain[i];\\r\\n        // handle literals\\r\\n        for (let length = 1; length <= 9; ++length) {\\r\\n            const string = cur_state[0][length];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            if (length < 9) {\\r\\n                // extend current literal\\r\\n                set(new_state, 0, length + 1, string);\\r\\n            }\\r\\n            else {\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\r\\n            }\\r\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\r\\n                if (plain[i - offset] === c) {\\r\\n                    // start new backreference\\r\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // handle backreferences\\r\\n        for (let offset = 1; offset <= 9; ++offset) {\\r\\n            for (let length = 1; length <= 9; ++length) {\\r\\n                const string = cur_state[offset][length];\\r\\n                if (string == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                if (plain[i - offset] === c) {\\r\\n                    if (length < 9) {\\r\\n                        // extend current backreference\\r\\n                        set(new_state, offset, length + 1, string);\\r\\n                    }\\r\\n                    else {\\r\\n                        // start new backreference\\r\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\r\\n                // end current backreference and start new backreference\\r\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\r\\n                    if (plain[i - new_offset] === c) {\\r\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const tmp_state = new_state;\\r\\n        new_state = cur_state;\\r\\n        cur_state = tmp_state;\\r\\n    }\\r\\n    let result = null;\\r\\n    for (let len = 1; len <= 9; ++len) {\\r\\n        let string = cur_state[0][len];\\r\\n        if (string == null) {\\r\\n            continue;\\r\\n        }\\r\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\r\\n        if (result == null || string.length < result.length) {\\r\\n            result = string;\\r\\n        }\\r\\n        else if (string.length == result.length && Math.random() < 0.5) {\\r\\n            result = string;\\r\\n        }\\r\\n    }\\r\\n    for (let offset = 1; offset <= 9; ++offset) {\\r\\n        for (let len = 1; len <= 9; ++len) {\\r\\n            let string = cur_state[offset][len];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            string += String(len) + \\\"\\\" + String(offset);\\r\\n            if (result == null || string.length < result.length) {\\r\\n                result = string;\\r\\n            }\\r\\n            else if (string.length == result.length && Math.random() < 0.5) {\\r\\n                result = string;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return result ?? \\\"\\\";\\r\\n}\\r\\nfunction RLEencode(data) {\\r\\n    let chars = Array.from(data);\\r\\n    let answer = '';\\r\\n    let current = undefined;\\r\\n    let count = 0;\\r\\n    while (chars.length > 0) {\\r\\n        let char = chars.shift();\\r\\n        switch (current) {\\r\\n            case undefined:\\r\\n                current = char;\\r\\n                count = 1;\\r\\n                break;\\r\\n            case char:\\r\\n                if (count == 9) {\\r\\n                    answer = `${answer}${count}${current}`;\\r\\n                    count = 0;\\r\\n                }\\r\\n                count++;\\r\\n                break;\\r\\n            default:\\r\\n                answer = `${answer}${count}${current}`;\\r\\n                current = char;\\r\\n                count = 1;\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    answer = `${answer}${count}${current}`;\\r\\n    return answer;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDM0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDdEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6RCxrREFBa0Q7WUFDbEQsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QztLQUNGO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7SUFDcEQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBRXRCLFFBQVEsSUFBSSxFQUFFO1FBQ2IsS0FBSyw0QkFBNEI7WUFDaEMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU07UUFDUCxLQUFLLDZCQUE2QjtZQUNqQyxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFF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LENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ2hILElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3BILElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDaEgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxD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aUJBQ3JLO3FCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzVJO3FCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkk7cUJBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQzFCLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMs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LEVBQUU7UUFDeEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLFFBQVEsT0FBTyxFQUFFO1lBQ2hCLEtBQUssU0FBUztnQkFDYixPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNmLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ1YsTUFBTTtZQUNQLEtBQUssSUFBSTtnQkFDUixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7b0JBQ2YsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztvQkFDdkMsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDVjtnQkFDRCxLQUFLLEVBQUUsQ0FBQztnQkFDUixNQUFNO1lBQ1A7Z0JBQ0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztnQkFDdkMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLE1BQU07U0FDUDtLQUNEO0lBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUN2QyxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsU2VydmVycyB9IGZyb20gXCIuL3V0aWxcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgZ2V0QWxsU2VydmVycyhucykpIHtcclxuICAgIGNvbnN0IGNvbnRyYWN0cyA9IG5zLmxzKHNlcnZlciwgJy5jY3QnKTtcclxuICAgIGZvciAoY29uc3QgY29udHJhY3Qgb2YgY29udHJhY3RzKSB7XHJcbiAgICAgIGNvbnN0IHR5cGUgPSBucy5jb2Rpbmdjb250cmFjdC5nZXRDb250cmFjdFR5cGUoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAvLyBucy50cHJpbnRmKGAke3NlcnZlcn06ICR7Y29udHJhY3R9IHwgJHt0eXBlfWApO1xyXG4gICAgICBzb2x2ZSh0eXBlLCBkYXRhLCBzZXJ2ZXIsIGNvbnRyYWN0LCBucyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzb2x2ZSh0eXBlLCBkYXRhLCBzZXJ2ZXIsIGNvbnRyYWN0LCBucykge1xyXG5cdGxldCBzb2x1dGlvbiA9ICdub25lJztcclxuXHJcblx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElcIjpcclxuXHRcdFx0c29sdXRpb24gPSBtYXhQcm9maXQoWzEsIGRhdGFdKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElJXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gbWF4UHJvZml0KFtNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyAyKSwgZGF0YV0pO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJBbGdvcml0aG1pYyBTdG9jayBUcmFkZXIgSUlJXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gbWF4UHJvZml0KFsyLCBkYXRhXSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJVlwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IG1heFByb2ZpdChkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiTWluaW11bSBQYXRoIFN1bSBpbiBhIFRyaWFuZ2xlXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gc29sdmVUcmlhbmdsZVN1bShkYXRhLCBucyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlVuaXF1ZSBQYXRocyBpbiBhIEdyaWQgSVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHVuaXF1ZVBhdGhzSShkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiVW5pcXVlIFBhdGhzIGluIGEgR3JpZCBJSVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHVuaXF1ZVBhdGhzSUkoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkdlbmVyYXRlIElQIEFkZHJlc3Nlc1wiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IGdlbmVyYXRlSXBzKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJGaW5kIExhcmdlc3QgUHJpbWUgRmFjdG9yXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gZmFjdG9yMyhkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiU3BpcmFsaXplIE1hdHJpeFwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHNwaXJhbChkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiTWVyZ2UgT3ZlcmxhcHBpbmcgSW50ZXJ2YWxzXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gbWVyZ2VPdmVybGFwKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJGaW5kIEFsbCBWYWxpZCBNYXRoIEV4cHJlc3Npb25zXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gc29sdmVGaW5kQWxsVmFsaWRNYXRoRXhwcmVzc2lvbnMoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlN1YmFycmF5IHdpdGggTWF4aW11bSBTdW1cIjpcclxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZXJMYXJnZXN0U3Vic2V0KG5zLCBkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiU2FuaXRpemUgUGFyZW50aGVzZXMgaW4gRXhwcmVzc2lvblwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IFNhbml0aXplUGFyZW5zU29sdmVyKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJBcnJheSBKdW1waW5nIEdhbWVcIjpcclxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZXJBcnJheUp1bXBpbmdHYW1lKGRhdGEpXHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlRvdGFsIFdheXMgdG8gU3VtXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gc29sdmVyV2F5c1RvU3VtKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bSBJSVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlV2F5c1RvU3VtSUkoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkhhbW1pbmdDb2RlczogSW50ZWdlciB0byBFbmNvZGVkIEJpbmFyeVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IEhhbW1pbmdFbmNvZGUoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkhhbW1pbmdDb2RlczogRW5jb2RlZCBCaW5hcnkgdG8gSW50ZWdlclwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IEhhbW1pbmdEZWNvZGUoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlNob3J0ZXN0IFBhdGggaW4gYSBHcmlkXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gU2hvcnRlc3RQYXRoSW5BR3JpZChkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQXJyYXkgSnVtcGluZyBHYW1lIElJXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gc29sdmVyQXJyYXlKdW1waW5nR2FtZUlJKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJDb21wcmVzc2lvbiBJSTogTFogRGVjb21wcmVzc2lvblwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IGNvbXByTFpEZWNvZGUoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlByb3BlciAyLUNvbG9yaW5nIG9mIGEgR3JhcGhcIjpcclxuXHRcdFx0c29sdXRpb24gPSBjb2xvcmluZ0dyYXBoKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJDb21wcmVzc2lvbiBJSUk6IExaIENvbXByZXNzaW9uXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gY29tcHJMWkVuY29kZShkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQ29tcHJlc3Npb24gSTogUkxFIENvbXByZXNzaW9uXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gUkxFZW5jb2RlKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJFbmNyeXB0aW9uIEk6IENhZXNhciBDaXBoZXJcIjpcclxuXHRcdFx0c29sdXRpb24gPSBjYWVzYXJDaXBoZXIoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkVuY3J5cHRpb24gSUk6IFZpZ2Vuw6hyZSBDaXBoZXJcIjpcclxuXHRcdFx0c29sdXRpb24gPSB2aWduZXJlQ2lwaGVyKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHR9XHJcblxyXG5cdGlmIChzb2x1dGlvbiA9PSAnbm9uZScpIHtcclxuXHRcdG5zLnRwcmludCgnRVJST1I6IE5PIFNPTFZFUiBGT1IgJyArIGNvbnRyYWN0ICsgJyAnICsgc29sdXRpb24pO1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHJcblx0dmFyIHJldCA9IG5zLmNvZGluZ2NvbnRyYWN0LmF0dGVtcHQoc29sdXRpb24sIGNvbnRyYWN0LCBzZXJ2ZXIsIHsgcmV0dXJuUmV3YXJkOiB0cnVlIH0pO1xyXG5cdGlmIChyZXQgPT0gZmFsc2UpIHtcclxuXHRcdG5zLnRwcmludCgnRkFJTEVEIFRPIFNPTFZFOiAnICsgY29udHJhY3QgKyAnIHR5cGU6ICcgKyB0eXBlICsgJyBkYXRhOiAnICsgZGF0YSArICcgYXR0ZW1wdGVkIHNvbHV0aW9uOiAnICsgc29sdXRpb24pO1xyXG5cdH0gZWxzZSB7XHJcbiAgICBucy50cHJpbnRmKHJldCk7XHJcbiAgfVxyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB2aWduZXJlQ2lwaGVyKGRhdGEpIHtcclxuXHRjb25zdCBjaXBoZXIgPSBbLi4uZGF0YVswXV1cclxuXHRcdC5tYXAoKGEsIGkpID0+IHtcclxuXHRcdFx0cmV0dXJuIGEgPT09IFwiIFwiXHJcblx0XHRcdFx0PyBhXHJcblx0XHRcdFx0OiBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYS5jaGFyQ29kZUF0KDApIC0gMiAqIDY1ICsgZGF0YVsxXS5jaGFyQ29kZUF0KGkgJSBkYXRhWzFdLmxlbmd0aCkpICUgMjYpICsgNjUpO1xyXG5cdFx0fSlcclxuXHRcdC5qb2luKFwiXCIpO1xyXG5cdHJldHVybiBjaXBoZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhZXNhckNpcGhlcihkYXRhKSB7XHJcblx0Y29uc3QgY2lwaGVyID0gWy4uLmRhdGFbMF1dXHJcblx0XHQubWFwKChhKSA9PiAoYSA9PT0gXCIgXCIgPyBhIDogU3RyaW5nLmZyb21DaGFyQ29kZSgoKGEuY2hhckNvZGVBdCgwKSAtIDY1IC0gZGF0YVsxXSArIDI2KSAlIDI2KSArIDY1KSkpXHJcblx0XHQuam9pbihcIlwiKTtcclxuXHRyZXR1cm4gY2lwaGVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb2x2ZXJBcnJheUp1bXBpbmdHYW1lSUkoYXJyYXlEYXRhKSB7XHJcblx0bGV0IG4gPSBhcnJheURhdGEubGVuZ3RoO1xyXG5cdGxldCByZWFjaCA9IDA7XHJcblx0bGV0IGp1bXBzID0gMDtcclxuXHRsZXQgbGFzdEp1bXAgPSAtMTtcclxuXHR3aGlsZSAocmVhY2ggPCBuIC0gMSkge1xyXG5cdFx0bGV0IGp1bXBlZEZyb20gPSAtMTtcclxuXHRcdGZvciAobGV0IGkgPSByZWFjaDsgaSA+IGxhc3RKdW1wOyBpLS0pIHtcclxuXHRcdFx0aWYgKGkgKyBhcnJheURhdGFbaV0gPiByZWFjaCkge1xyXG5cdFx0XHRcdHJlYWNoID0gaSArIGFycmF5RGF0YVtpXTtcclxuXHRcdFx0XHRqdW1wZWRGcm9tID0gaTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKGp1bXBlZEZyb20gPT09IC0xKSB7XHJcblx0XHRcdGp1bXBzID0gMDtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0XHRsYXN0SnVtcCA9IGp1bXBlZEZyb207XHJcblx0XHRqdW1wcysrO1xyXG5cdH1cclxuXHRyZXR1cm4ganVtcHNcclxufVxyXG5cclxuZnVuY3Rpb24gU2hvcnRlc3RQYXRoSW5BR3JpZChkYXRhKSB7XHJcblx0bGV0IEggPSBkYXRhLmxlbmd0aCwgVyA9IGRhdGFbMF0ubGVuZ3RoO1xyXG5cdGxldCBkaXN0ID0gQXJyYXkuZnJvbShBcnJheShIKSwgKCkgPT4gQXJyYXkoVykuZmlsbChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpKTtcclxuXHRkaXN0WzBdWzBdID0gMDtcclxuXHJcblx0bGV0IHF1ZXVlID0gW1swLCAwXV07XHJcblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuXHRcdGxldCBbaSwgal0gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0bGV0IGQgPSBkaXN0W2ldW2pdO1xyXG5cclxuXHRcdGlmIChpID4gMCAmJiBkICsgMSA8IGRpc3RbaSAtIDFdW2pdICYmIGRhdGFbaSAtIDFdW2pdICE9PSAxKSB7IGRpc3RbaSAtIDFdW2pdID0gZCArIDE7IHF1ZXVlLnB1c2goW2kgLSAxLCBqXSk7IH1cclxuXHRcdGlmIChpIDwgSCAtIDEgJiYgZCArIDEgPCBkaXN0W2kgKyAxXVtqXSAmJiBkYXRhW2kgKyAxXVtqXSAhPT0gMSkgeyBkaXN0W2kgKyAxXVtqXSA9IGQgKyAxOyBxdWV1ZS5wdXNoKFtpICsgMSwgal0pOyB9XHJcblx0XHRpZiAoaiA+IDAgJiYgZCArIDEgPCBkaXN0W2ldW2ogLSAxXSAmJiBkYXRhW2ldW2ogLSAxXSAhPT0gMSkgeyBkaXN0W2ldW2ogLSAxXSA9IGQgKyAxOyBxdWV1ZS5wdXNoKFtpLCBqIC0gMV0pOyB9XHJcblx0XHRpZiAoaiA8IFcgLSAxICYmIGQgKyAxIDwgZGlzdFtpXVtqICsgMV0gJiYgZGF0YVtpXVtqICsgMV0gIT09IDEpIHsgZGlzdFtpXVtqICsgMV0gPSBkICsgMTsgcXVldWUucHVzaChbaSwgaiArIDFdKTsgfVxyXG5cdH1cclxuXHJcblx0bGV0IHBhdGggPSBcIlwiO1xyXG5cdGlmIChOdW1iZXIuaXNGaW5pdGUoZGlzdFtIIC0gMV1bVyAtIDFdKSkge1xyXG5cdFx0bGV0IGkgPSBIIC0gMSwgaiA9IFcgLSAxO1xyXG5cdFx0d2hpbGUgKGkgIT09IDAgfHwgaiAhPT0gMCkge1xyXG5cdFx0XHRsZXQgZCA9IGRpc3RbaV1bal07XHJcblxyXG5cdFx0XHRsZXQgbmV3X2kgPSAwLCBuZXdfaiA9IDAsIGRpciA9IFwiXCI7XHJcblx0XHRcdGlmIChpID4gMCAmJiBkaXN0W2kgLSAxXVtqXSA8IGQpIHsgZCA9IGRpc3RbaSAtIDFdW2pdOyBuZXdfaSA9IGkgLSAxOyBuZXdfaiA9IGo7IGRpciA9IFwiRFwiOyB9XHJcblx0XHRcdGlmIChpIDwgSCAtIDEgJiYgZGlzdFtpICsgMV1bal0gPCBkKSB7IGQgPSBkaXN0W2kgKyAxXVtqXTsgbmV3X2kgPSBpICsgMTsgbmV3X2ogPSBqOyBkaXIgPSBcIlVcIjsgfVxyXG5cdFx0XHRpZiAoaiA+IDAgJiYgZGlzdFtpXVtqIC0gMV0gPCBkKSB7IGQgPSBkaXN0W2ldW2ogLSAxXTsgbmV3X2kgPSBpOyBuZXdfaiA9IGogLSAxOyBkaXIgPSBcIlJcIjsgfVxyXG5cdFx0XHRpZiAoaiA8IFcgLSAxICYmIGRpc3RbaV1baiArIDFdIDwgZCkgeyBkID0gZGlzdFtpXVtqICsgMV07IG5ld19pID0gaTsgbmV3X2ogPSBqICsgMTsgZGlyID0gXCJMXCI7IH1cclxuXHJcblx0XHRcdGkgPSBuZXdfaTsgaiA9IG5ld19qO1xyXG5cdFx0XHRwYXRoID0gZGlyICsgcGF0aDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBwYXRoO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJbXVtdfSBpbnB1dCBbdGFyZ2V0TnVtYmVyLFthdmFpbGFibGUgbnVtYmVyc11dXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBzb2x2ZVdheXNUb1N1bUlJKGlucHV0KSB7XHJcblx0LyoqXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0XHJcblx0ICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xyXG5cdCAqIEByZXR1cm5zXHJcblx0ICovXHJcblx0bGV0IG4gPSBpbnB1dFswXTtcclxuXHRsZXQgbnVtcyA9IGlucHV0WzFdO1xyXG5cdGxldCB0YWJsZSA9IG5ldyBBcnJheShuICsgMSk7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuICsgMTsgaSsrKSB7XHJcblx0XHR0YWJsZVtpXSA9IDA7XHJcblx0fVxyXG5cdHRhYmxlWzBdID0gMTtcclxuXHJcblx0Zm9yIChsZXQgaSBvZiBudW1zKSB7XHJcblx0XHRpZiAoaSA+IG4pIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRmb3IgKGxldCBqID0gaTsgaiA8PSBuOyBqKyspIHtcclxuXHRcdFx0dGFibGVbal0gKz0gdGFibGVbaiAtIGldO1xyXG5cdFx0fVxyXG5cdFx0Y29uc29sZS5sb2codGFibGUpO1xyXG5cdH1cclxuXHRyZXR1cm4gdGFibGVbbl07XHJcbn1cclxuXHJcbi8vQUxHT1JJVEhNSUMgU1RPQ0sgVFJBREVSXHJcbmZ1bmN0aW9uIG1heFByb2ZpdChhcnJheURhdGEpIHtcclxuXHRsZXQgaSwgaiwgaztcclxuXHJcblx0bGV0IG1heFRyYWRlcyA9IGFycmF5RGF0YVswXTtcclxuXHRsZXQgc3RvY2tQcmljZXMgPSBhcnJheURhdGFbMV07XHJcblxyXG5cdGxldCB0ZW1wU3RyID0gXCJbMFwiO1xyXG5cdGZvciAoaSA9IDA7IGkgPCBzdG9ja1ByaWNlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0dGVtcFN0ciArPSBcIiwwXCI7XHJcblx0fVxyXG5cdHRlbXBTdHIgKz0gXCJdXCI7XHJcblx0bGV0IHRlbXBBcnIgPSBcIltcIiArIHRlbXBTdHI7XHJcblx0Zm9yIChpID0gMDsgaSA8IG1heFRyYWRlcyAtIDE7IGkrKykge1xyXG5cdFx0dGVtcEFyciArPSBcIixcIiArIHRlbXBTdHI7XHJcblx0fVxyXG5cdHRlbXBBcnIgKz0gXCJdXCI7XHJcblxyXG5cdGxldCBoaWdoZXN0UHJvZml0ID0gSlNPTi5wYXJzZSh0ZW1wQXJyKTtcclxuXHJcblx0Zm9yIChpID0gMDsgaSA8IG1heFRyYWRlczsgaSsrKSB7XHJcblx0XHRmb3IgKGogPSAwOyBqIDwgc3RvY2tQcmljZXMubGVuZ3RoOyBqKyspIHsgLy8gQnV5IC8gU3RhcnRcclxuXHRcdFx0Zm9yIChrID0gajsgayA8IHN0b2NrUHJpY2VzLmxlbmd0aDsgaysrKSB7IC8vIFNlbGwgLyBFbmRcclxuXHRcdFx0XHRpZiAoaSA+IDAgJiYgaiA+IDAgJiYgayA+IDApIHtcclxuXHRcdFx0XHRcdGhpZ2hlc3RQcm9maXRbaV1ba10gPSBNYXRoLm1heChoaWdoZXN0UHJvZml0W2ldW2tdLCBoaWdoZXN0UHJvZml0W2kgLSAxXVtrXSwgaGlnaGVzdFByb2ZpdFtpXVtrIC0gMV0sIGhpZ2hlc3RQcm9maXRbaSAtIDFdW2ogLSAxXSArIHN0b2NrUHJpY2VzW2tdIC0gc3RvY2tQcmljZXNbal0pO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoaSA+IDAgJiYgaiA+IDApIHtcclxuXHRcdFx0XHRcdGhpZ2hlc3RQcm9maXRbaV1ba10gPSBNYXRoLm1heChoaWdoZXN0UHJvZml0W2ldW2tdLCBoaWdoZXN0UHJvZml0W2kgLSAxXVtrXSwgaGlnaGVzdFByb2ZpdFtpIC0gMV1baiAtIDFdICsgc3RvY2tQcmljZXNba10gLSBzdG9ja1ByaWNlc1tqXSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChpID4gMCAmJiBrID4gMCkge1xyXG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIGhpZ2hlc3RQcm9maXRbaSAtIDFdW2tdLCBoaWdoZXN0UHJvZml0W2ldW2sgLSAxXSwgc3RvY2tQcmljZXNba10gLSBzdG9ja1ByaWNlc1tqXSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChqID4gMCAmJiBrID4gMCkge1xyXG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIGhpZ2hlc3RQcm9maXRbaV1bayAtIDFdLCBzdG9ja1ByaWNlc1trXSAtIHN0b2NrUHJpY2VzW2pdKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIHN0b2NrUHJpY2VzW2tdIC0gc3RvY2tQcmljZXNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gaGlnaGVzdFByb2ZpdFttYXhUcmFkZXMgLSAxXVtzdG9ja1ByaWNlcy5sZW5ndGggLSAxXTtcclxufVxyXG5cclxuLy9TTUFMTEVTVCBUUklBTkdMRSBTVU1cclxuZnVuY3Rpb24gc29sdmVUcmlhbmdsZVN1bShhcnJheURhdGEsIG5zKSB7XHJcblx0bGV0IHRyaWFuZ2xlID0gYXJyYXlEYXRhO1xyXG5cdGxldCBuZXh0QXJyYXk7XHJcblx0bGV0IHByZXZpb3VzQXJyYXkgPSB0cmlhbmdsZVswXTtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCB0cmlhbmdsZS5sZW5ndGg7IGkrKykge1xyXG5cdFx0bmV4dEFycmF5ID0gW107XHJcblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IHRyaWFuZ2xlW2ldLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdGlmIChqID09IDApIHtcclxuXHRcdFx0XHRuZXh0QXJyYXkucHVzaChwcmV2aW91c0FycmF5W2pdICsgdHJpYW5nbGVbaV1bal0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGogPT0gdHJpYW5nbGVbaV0ubGVuZ3RoIC0gMSkge1xyXG5cdFx0XHRcdG5leHRBcnJheS5wdXNoKHByZXZpb3VzQXJyYXlbaiAtIDFdICsgdHJpYW5nbGVbaV1bal0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG5leHRBcnJheS5wdXNoKE1hdGgubWluKHByZXZpb3VzQXJyYXlbal0sIHByZXZpb3VzQXJyYXlbaiAtIDFdKSArIHRyaWFuZ2xlW2ldW2pdKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwcmV2aW91c0FycmF5ID0gbmV4dEFycmF5O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIG5leHRBcnJheSk7XHJcbn1cclxuXHJcbi8vVU5JUVVFIFBBVEhTIElOIEEgR1JJRFxyXG5mdW5jdGlvbiB1bmlxdWVQYXRoc0koZ3JpZCkge1xyXG5cdGNvbnN0IHJpZ2h0TW92ZXMgPSBncmlkWzBdIC0gMTtcclxuXHRjb25zdCBkb3duTW92ZXMgPSBncmlkWzFdIC0gMTtcclxuXHJcblx0cmV0dXJuIE1hdGgucm91bmQoZmFjdG9yaWFsRGl2aXNpb24ocmlnaHRNb3ZlcyArIGRvd25Nb3ZlcywgcmlnaHRNb3ZlcykgLyAoZmFjdG9yaWFsKGRvd25Nb3ZlcykpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmFjdG9yaWFsKG4pIHtcclxuXHRyZXR1cm4gZmFjdG9yaWFsRGl2aXNpb24obiwgMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhY3RvcmlhbERpdmlzaW9uKG4sIGQpIHtcclxuXHRpZiAobiA9PSAwIHx8IG4gPT0gMSB8fCBuID09IGQpXHJcblx0XHRyZXR1cm4gMTtcclxuXHRyZXR1cm4gZmFjdG9yaWFsRGl2aXNpb24obiAtIDEsIGQpICogbjtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5pcXVlUGF0aHNJSShncmlkLCBpZ25vcmVGaXJzdCA9IGZhbHNlLCBpZ25vcmVMYXN0ID0gZmFsc2UpIHtcclxuXHRjb25zdCByaWdodE1vdmVzID0gZ3JpZFswXS5sZW5ndGggLSAxO1xyXG5cdGNvbnN0IGRvd25Nb3ZlcyA9IGdyaWQubGVuZ3RoIC0gMTtcclxuXHJcblx0bGV0IHRvdGFsUG9zc2libGVQYXRocyA9IE1hdGgucm91bmQoZmFjdG9yaWFsRGl2aXNpb24ocmlnaHRNb3ZlcyArIGRvd25Nb3ZlcywgcmlnaHRNb3ZlcykgLyAoZmFjdG9yaWFsKGRvd25Nb3ZlcykpKTtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBncmlkLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGdyaWRbaV0ubGVuZ3RoOyBqKyspIHtcclxuXHJcblx0XHRcdGlmIChncmlkW2ldW2pdID09IDEgJiYgKCFpZ25vcmVGaXJzdCB8fCAoaSAhPSAwIHx8IGogIT0gMCkpICYmICghaWdub3JlTGFzdCB8fCAoaSAhPSBncmlkLmxlbmd0aCAtIDEgfHwgaiAhPSBncmlkW2ldLmxlbmd0aCAtIDEpKSkge1xyXG5cdFx0XHRcdGNvbnN0IG5ld0FycmF5ID0gW107XHJcblx0XHRcdFx0Zm9yIChsZXQgayA9IGk7IGsgPCBncmlkLmxlbmd0aDsgaysrKSB7XHJcblx0XHRcdFx0XHRuZXdBcnJheS5wdXNoKGdyaWRba10uc2xpY2UoaiwgZ3JpZFtpXS5sZW5ndGgpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGxldCByZW1vdmVkUGF0aHMgPSB1bmlxdWVQYXRoc0lJKG5ld0FycmF5LCB0cnVlLCBpZ25vcmVMYXN0KTtcclxuXHRcdFx0XHRyZW1vdmVkUGF0aHMgKj0gdW5pcXVlUGF0aHNJKFtpICsgMSwgaiArIDFdKTtcclxuXHJcblx0XHRcdFx0dG90YWxQb3NzaWJsZVBhdGhzIC09IHJlbW92ZWRQYXRocztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB0b3RhbFBvc3NpYmxlUGF0aHM7XHJcbn1cclxuXHJcbi8vR0VORVJBVEUgSVAgQUREUkVTU0VTXHJcbmZ1bmN0aW9uIGdlbmVyYXRlSXBzKG51bSkge1xyXG5cdG51bSA9IG51bS50b1N0cmluZygpO1xyXG5cdGNvbnN0IGxlbmd0aCA9IG51bS5sZW5ndGg7XHJcblx0Y29uc3QgaXBzID0gW107XHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGggLSAyOyBpKyspIHtcclxuXHRcdGZvciAobGV0IGogPSBpICsgMTsgaiA8IGxlbmd0aCAtIDE7IGorKykge1xyXG5cdFx0XHRmb3IgKGxldCBrID0gaiArIDE7IGsgPCBsZW5ndGg7IGsrKykge1xyXG5cdFx0XHRcdGNvbnN0IGlwID0gW1xyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKDAsIGkpLFxyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGksIGopLFxyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGosIGspLFxyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGssIG51bS5sZW5ndGgpXHJcblx0XHRcdFx0XTtcclxuXHRcdFx0XHRsZXQgaXNWYWxpZCA9IHRydWU7XHJcblx0XHRcdFx0aXAuZm9yRWFjaChzZWcgPT4ge1xyXG5cdFx0XHRcdFx0aXNWYWxpZCA9IGlzVmFsaWQgJiYgaXNWYWxpZElwU2VnbWVudChzZWcpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGlmIChpc1ZhbGlkKSBpcHMucHVzaChpcC5qb2luKFwiLlwiKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGlwcy50b1N0cmluZygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkSXBTZWdtZW50KHNlZ21lbnQpIHtcclxuXHRpZiAoc2VnbWVudFswXSA9PSBcIjBcIiAmJiBzZWdtZW50ICE9IFwiMFwiKSByZXR1cm4gZmFsc2U7XHJcblx0c2VnbWVudCA9IE51bWJlcihzZWdtZW50KTtcclxuXHRpZiAoc2VnbWVudCA8IDAgfHwgc2VnbWVudCA+IDI1NSkgcmV0dXJuIGZhbHNlO1xyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vL0dSRUFURVNUIEZBQ1RPUlxyXG5mdW5jdGlvbiBmYWN0b3IzKG4pIHtcclxuXHQvLyBSZXR1cm5zIGFsbCB0aGUgcHJpbWUgZmFjdG9ycyBvZiBhIHBvc2l0aXZlIGludGVnZXJcclxuXHRsZXQgZmFjdG9ycyA9IFtdO1xyXG5cdGxldCBkID0gMlxyXG5cdHdoaWxlIChuID4gMSkge1xyXG5cdFx0d2hpbGUgKG4gJSBkID09IDApIHtcclxuXHRcdFx0ZmFjdG9ycy5wdXNoKGQpO1xyXG5cdFx0XHRuIC89IGQ7XHJcblx0XHR9XHJcblx0XHRkID0gZCArIDFcclxuXHRcdGlmIChkICogZCA+IG4pIHtcclxuXHRcdFx0aWYgKG4gPiAxKSBmYWN0b3JzLnB1c2gobik7XHJcblx0XHRcdGJyZWFrXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoZmFjdG9ycy5sZW5ndGggPiAwKSByZXR1cm4gZmFjdG9ycy5wb3AoKTtcclxuXHRyZXR1cm4gJyc7XHJcbn1cclxuXHJcbi8vU1BJUkFMSVpFIE1hdHJpeFxyXG5mdW5jdGlvbiBzcGlyYWwoYXJyLCBhY2N1bSA9IFtdKSB7XHJcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV0dXJuIGFjY3VtO1xyXG5cdH1cclxuXHRhY2N1bSA9IGFjY3VtLmNvbmNhdChhcnIuc2hpZnQoKSk7XHJcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV0dXJuIGFjY3VtO1xyXG5cdH1cclxuXHRhY2N1bSA9IGFjY3VtLmNvbmNhdChjb2x1bW4oYXJyLCBhcnJbMF0ubGVuZ3RoIC0gMSkpO1xyXG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybiBhY2N1bTtcclxuXHR9XHJcblx0YWNjdW0gPSBhY2N1bS5jb25jYXQoYXJyLnBvcCgpLnJldmVyc2UoKSk7XHJcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV0dXJuIGFjY3VtO1xyXG5cdH1cclxuXHRhY2N1bSA9IGFjY3VtLmNvbmNhdChjb2x1bW4oYXJyLCAwKS5yZXZlcnNlKCkpO1xyXG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybiBhY2N1bTtcclxuXHR9XHJcblx0cmV0dXJuIHNwaXJhbChhcnIsIGFjY3VtKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29sdW1uKGFyciwgaW5kZXgpIHtcclxuXHRjb25zdCByZXMgPSBbXTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG5cdFx0Y29uc3QgZWxtID0gYXJyW2ldLnNwbGljZShpbmRleCwgMSlbMF07XHJcblx0XHRpZiAoZWxtKSB7XHJcblx0XHRcdHJlcy5wdXNoKGVsbSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXM7XHJcbn1cclxuXHJcbi8vIE1lcmdlIE92ZXJsYXBwaW5nIEludGVydmFsc1xyXG5mdW5jdGlvbiBtZXJnZU92ZXJsYXAoaW50ZXJ2YWxzKSB7XHJcblx0aW50ZXJ2YWxzLnNvcnQoKFttaW5BXSwgW21pbkJdKSA9PiBtaW5BIC0gbWluQik7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlcnZhbHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdGZvciAobGV0IGogPSBpICsgMTsgaiA8IGludGVydmFscy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRjb25zdCBbbWluLCBtYXhdID0gaW50ZXJ2YWxzW2ldO1xyXG5cdFx0XHRjb25zdCBbbGF0ZXJNaW4sIGxhdGVyTWF4XSA9IGludGVydmFsc1tqXTtcclxuXHRcdFx0aWYgKGxhdGVyTWluIDw9IG1heCkge1xyXG5cdFx0XHRcdGNvbnN0IG5ld01heCA9IGxhdGVyTWF4ID4gbWF4ID8gbGF0ZXJNYXggOiBtYXg7XHJcblx0XHRcdFx0Y29uc3QgbmV3SW50ZXJ2YWwgPSBbbWluLCBuZXdNYXhdO1xyXG5cdFx0XHRcdGludGVydmFsc1tpXSA9IG5ld0ludGVydmFsO1xyXG5cdFx0XHRcdGludGVydmFscy5zcGxpY2UoaiwgMSk7XHJcblx0XHRcdFx0aiA9IGk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGludGVydmFscztcclxufVxyXG5cclxuZnVuY3Rpb24gU2FuaXRpemVQYXJlbnNTb2x2ZXIoZGF0YSkge1xyXG5cdHZhciBsZWZ0ID0gMFxyXG5cdHZhciByaWdodCA9IDBcclxuXHR2YXIgcmVzID0gW11cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcclxuXHRcdGlmIChkYXRhW2ldID09PSAnKCcpIHtcclxuXHRcdFx0KytsZWZ0XHJcblx0XHR9IGVsc2UgaWYgKGRhdGFbaV0gPT09ICcpJykge1xyXG5cdFx0XHRsZWZ0ID4gMCA/IC0tbGVmdCA6ICsrcmlnaHRcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRmcyhwYWlyLCBpbmRleCwgbGVmdCwgcmlnaHQsIHMsIHNvbHV0aW9uLCByZXMpIHtcclxuXHRcdGlmIChzLmxlbmd0aCA9PT0gaW5kZXgpIHtcclxuXHRcdFx0aWYgKGxlZnQgPT09IDAgJiYgcmlnaHQgPT09IDAgJiYgcGFpciA9PT0gMCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRpZiAocmVzW2ldID09PSBzb2x1dGlvbikge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmVzLnB1c2goc29sdXRpb24pXHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuXHJcblx0XHR9XHJcblx0XHRpZiAoc1tpbmRleF0gPT09ICcoJykge1xyXG5cdFx0XHRpZiAobGVmdCA+IDApIHtcclxuXHRcdFx0XHRkZnMocGFpciwgaW5kZXggKyAxLCBsZWZ0IC0gMSwgcmlnaHQsIHMsIHNvbHV0aW9uLCByZXMpXHJcblx0XHRcdH1cclxuXHRcdFx0ZGZzKHBhaXIgKyAxLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0LCBzLCBzb2x1dGlvbiArIHNbaW5kZXhdLCByZXMpXHJcblx0XHR9IGVsc2UgaWYgKHNbaW5kZXhdID09PSAnKScpIHtcclxuXHRcdFx0aWYgKHJpZ2h0ID4gMCkgZGZzKHBhaXIsIGluZGV4ICsgMSwgbGVmdCwgcmlnaHQgLSAxLCBzLCBzb2x1dGlvbiwgcmVzKVxyXG5cdFx0XHRpZiAocGFpciA+IDApIGRmcyhwYWlyIC0gMSwgaW5kZXggKyAxLCBsZWZ0LCByaWdodCwgcywgc29sdXRpb24gKyBzW2luZGV4XSwgcmVzKVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGZzKHBhaXIsIGluZGV4ICsgMSwgbGVmdCwgcmlnaHQsIHMsIHNvbHV0aW9uICsgc1tpbmRleF0sIHJlcylcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGRmcygwLCAwLCBsZWZ0LCByaWdodCwgZGF0YSwgJycsIHJlcylcclxuXHRyZXR1cm4gcmVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlckFycmF5SnVtcGluZ0dhbWUoYXJyYXlEYXRhKSB7XHJcblx0aWYgKGFycmF5RGF0YVswXSA9PSAwKSByZXR1cm4gJzAnO1xyXG5cdGxldCBhcnJheUp1bXAgPSBbMV07XHJcblxyXG5cdGZvciAobGV0IG4gPSAwOyBuIDwgYXJyYXlEYXRhLmxlbmd0aDsgbisrKSB7XHJcblx0XHRpZiAoYXJyYXlKdW1wW25dKSB7XHJcblx0XHRcdGZvciAobGV0IHAgPSBuOyBwIDw9IE1hdGgubWluKG4gKyBhcnJheURhdGFbbl0sIGFycmF5RGF0YS5sZW5ndGggLSAxKTsgcCsrKSB7IC8vIGZpeGVkIG9mZi1ieS1vbmUgZXJyb3JcclxuXHRcdFx0XHRhcnJheUp1bXBbcF0gPSAxO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gMCArIEJvb2xlYW4oYXJyYXlKdW1wW2FycmF5RGF0YS5sZW5ndGggLSAxXSk7IC8vIHRoYW5rcyAvdS9LYWx1bW5pYXRvcmlzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlcldheXNUb1N1bShhcnJheURhdGEpIHtcclxuXHR2YXIgd2F5cyA9IFtdO1xyXG5cdHdheXNbMF0gPSAxO1xyXG5cclxuXHRmb3IgKHZhciBhID0gMTsgYSA8PSBhcnJheURhdGE7IGErKykge1xyXG5cdFx0d2F5c1thXSA9IDA7XHJcblx0fVxyXG5cclxuXHRmb3IgKHZhciBpID0gMTsgaSA8PSBhcnJheURhdGEgLSAxOyBpKyspIHtcclxuXHRcdGZvciAodmFyIGogPSBpOyBqIDw9IGFycmF5RGF0YTsgaisrKSB7XHJcblx0XHRcdHdheXNbal0gKz0gd2F5c1tqIC0gaV07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gd2F5c1thcnJheURhdGFdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb2x2ZXJXYXlzVG9FeHByZXNzKG5zLCBhcnJheURhdGEpIHtcclxuXHRsZXQgaSwgaiwgaztcclxuXHJcblx0bGV0IG9wZXJhdG9yTGlzdCA9IFtcIlwiLCBcIitcIiwgXCItXCIsIFwiKlwiXTtcclxuXHRsZXQgdmFsaWRFeHByZXNzaW9ucyA9IFtdO1xyXG5cclxuXHRsZXQgdGVtcFBlcm11dGF0aW9ucyA9IE1hdGgucG93KDQsIChhcnJheURhdGFbMF0ubGVuZ3RoIC0gMSkpO1xyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDwgdGVtcFBlcm11dGF0aW9uczsgaSsrKSB7XHJcblx0XHRsZXQgYXJyYXlTdW1tYW5kcyA9IFtdO1xyXG5cdFx0bGV0IGNhbmRpZGF0ZUV4cHJlc3Npb24gPSBhcnJheURhdGFbMF0uc3Vic3RyKDAsIDEpO1xyXG5cdFx0YXJyYXlTdW1tYW5kc1swXSA9IHBhcnNlSW50KGFycmF5RGF0YVswXS5zdWJzdHIoMCwgMSkpO1xyXG5cclxuXHRcdGZvciAoaiA9IDE7IGogPCBhcnJheURhdGFbMF0ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0Y2FuZGlkYXRlRXhwcmVzc2lvbiArPSBvcGVyYXRvckxpc3RbKGkgPj4gKChqIC0gMSkgKiAyKSkgJSA0XSArIGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSk7XHJcblxyXG5cdFx0XHRsZXQgcm9sbGluZ09wZXJhdG9yID0gb3BlcmF0b3JMaXN0WyhpID4+ICgoaiAtIDEpICogMikpICUgNF07XHJcblx0XHRcdGxldCByb2xsaW5nT3BlcmFuZCA9IHBhcnNlSW50KGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSkpO1xyXG5cclxuXHRcdFx0c3dpdGNoIChyb2xsaW5nT3BlcmF0b3IpIHtcclxuXHRcdFx0XHRjYXNlIFwiXCI6XHJcblx0XHRcdFx0XHRyb2xsaW5nT3BlcmFuZCA9IHJvbGxpbmdPcGVyYW5kICogKGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSAvIE1hdGguYWJzKGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSkpO1xyXG5cdFx0XHRcdFx0YXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdID0gYXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdICogMTAgKyByb2xsaW5nT3BlcmFuZDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCIrXCI6XHJcblx0XHRcdFx0XHRhcnJheVN1bW1hbmRzW2FycmF5U3VtbWFuZHMubGVuZ3RoXSA9IHJvbGxpbmdPcGVyYW5kO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIi1cIjpcclxuXHRcdFx0XHRcdGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGhdID0gMCAtIHJvbGxpbmdPcGVyYW5kO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIipcIjpcclxuXHRcdFx0XHRcdHdoaWxlIChqIDwgYXJyYXlEYXRhWzBdLmxlbmd0aCAtIDEgJiYgKChpID4+IChqICogMikpICUgNCkgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0aiArPSAxO1xyXG5cdFx0XHRcdFx0XHRjYW5kaWRhdGVFeHByZXNzaW9uICs9IGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSk7XHJcblx0XHRcdFx0XHRcdHJvbGxpbmdPcGVyYW5kID0gcm9sbGluZ09wZXJhbmQgKiAxMCArIHBhcnNlSW50KGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdID0gYXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdICogcm9sbGluZ09wZXJhbmQ7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCByb2xsaW5nVG90YWwgPSBhcnJheVN1bW1hbmRzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSArIGI7IH0pO1xyXG5cclxuXHRcdGlmIChhcnJheURhdGFbMV0gPT09IHJvbGxpbmdUb3RhbCkge1xyXG5cdFx0XHR2YWxpZEV4cHJlc3Npb25zW3ZhbGlkRXhwcmVzc2lvbnMubGVuZ3RoXSA9IGNhbmRpZGF0ZUV4cHJlc3Npb247XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsaWRFeHByZXNzaW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlRmluZEFsbFZhbGlkTWF0aEV4cHJlc3Npb25zKGFycmF5RGF0YSkge1xyXG4gIGNvbnN0IG51bSA9IGFycmF5RGF0YVswXTtcclxuICBjb25zdCB0YXJnZXQgPSBhcnJheURhdGFbMV07XHJcblxyXG4gIGZ1bmN0aW9uIGhlbHBlcihyZXMsIHBhdGgsIG51bSwgdGFyZ2V0LCBwb3MsIGV2YWx1YXRlZCwgbXVsdGVkKSB7XHJcbiAgICAgIGlmIChwb3MgPT09IG51bS5sZW5ndGgpIHtcclxuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGV2YWx1YXRlZCkge1xyXG4gICAgICAgICAgICAgIHJlcy5wdXNoKHBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgbnVtLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpZiAoaSAhPSBwb3MgJiYgbnVtW3Bvc10gPT0gXCIwXCIpIHtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGN1ciA9IHBhcnNlSW50KG51bS5zdWJzdHJpbmcocG9zLCBpICsgMSkpO1xyXG5cclxuICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcclxuICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGN1ciwgY3VyKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArIFwiK1wiICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGV2YWx1YXRlZCArIGN1ciwgY3VyKTtcclxuICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgXCItXCIgKyBjdXIsIG51bSwgdGFyZ2V0LCBpICsgMSwgZXZhbHVhdGVkIC0gY3VyLCAtY3VyKTtcclxuICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgXCIqXCIgKyBjdXIsIG51bSwgdGFyZ2V0LCBpICsgMSwgZXZhbHVhdGVkIC0gbXVsdGVkICsgbXVsdGVkICogY3VyLCBtdWx0ZWQgKiBjdXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBbXTtcclxuICBoZWxwZXIocmVzdWx0LCBcIlwiLCBudW0sIHRhcmdldCwgMCwgMCwgMCk7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlckxhcmdlc3RTdWJzZXQobnMsIGFycmF5RGF0YSkge1xyXG5cdGxldCBoaWdoZXN0U3Vic2V0ID0gYXJyYXlEYXRhWzBdO1xyXG5cclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5RGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdGZvciAobGV0IGogPSBpOyBqIDwgYXJyYXlEYXRhLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdGxldCB0ZW1wU3Vic2V0ID0gMDtcclxuXHRcdFx0Zm9yIChsZXQgayA9IGk7IGsgPD0gajsgaysrKSB7XHJcblx0XHRcdFx0dGVtcFN1YnNldCArPSBhcnJheURhdGFba107XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChoaWdoZXN0U3Vic2V0IDwgdGVtcFN1YnNldCkge1xyXG5cdFx0XHRcdGhpZ2hlc3RTdWJzZXQgPSB0ZW1wU3Vic2V0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gaGlnaGVzdFN1YnNldDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEhhbW1pbmdTdW1PZlBhcml0eShfbGVuZ3RoT2ZEQml0cykgeyAvLyB3aWxsIGNhbGN1bGF0ZSB0aGUgbmVlZGVkIGFtb3VudCBvZiBwYXJpdHlCaXRzICd3aXRob3V0JyB0aGUgXCJvdmVyYWxsXCItUGFyaXR5XHJcblx0cmV0dXJuIChfbGVuZ3RoT2ZEQml0cyA8IDMgfHwgX2xlbmd0aE9mREJpdHMgPT0gMClcclxuXHRcdD8gKChfbGVuZ3RoT2ZEQml0cyA9PSAwKSA/IDAgOiBfbGVuZ3RoT2ZEQml0cyArIDEpXHJcblx0XHQvLyB0aGUgTWF0aC5sb2cyLW1hdGggd2lsbCBvbmx5IHdvcmssIGlmIHRoZSBsZW5ndGggaXMgZ3JlYXRlciBlZ3F1YWwgMyBvdGhlcndpc2UgaXQncyBcImtpbmRhIGJyb2tlblwiIDpEXHJcblx0XHQ6ICgoTWF0aC5jZWlsKE1hdGgubG9nMihfbGVuZ3RoT2ZEQml0cyAqIDIpKSkgPD0gTWF0aC5jZWlsKE1hdGgubG9nMigxICsgX2xlbmd0aE9mREJpdHMgKyBNYXRoLmNlaWwoTWF0aC5sb2cyKF9sZW5ndGhPZkRCaXRzKSkpKSlcclxuXHRcdFx0PyBNYXRoLmNlaWwoTWF0aC5sb2cyKF9sZW5ndGhPZkRCaXRzKSArIDEpXHJcblx0XHRcdDogTWF0aC5jZWlsKE1hdGgubG9nMihfbGVuZ3RoT2ZEQml0cykpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBIYW1taW5nRW5jb2RlKHZhbHVlKSB7XHJcblx0bGV0IF9kYXRhQml0cyA9IHZhbHVlLnRvU3RyaW5nKDIpOyAvLyBjaGFuZ2UgdmFsdWUgaW50byBzdHJpbmcgb2YgYmluYXJ5IGJpdHNcclxuXHRsZXQgX3N1bV9wYXJpdHkgPSBIYW1taW5nU3VtT2ZQYXJpdHkoX2RhdGFCaXRzLmxlbmd0aCk7IC8vIGdldCB0aGUgc3VtIG9mIG5lZWRlZCBwYXJpdHkgYml0c1xyXG5cdGxldCBfZGF0YSA9IF9kYXRhQml0cy5zcGxpdChcIlwiKTsgLy8gY3JlYXRlIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZlbiBkYXRhIGJpdHNcclxuXHRsZXQgX2J1aWxkID0gW107IC8vIGluaXQgbmV3IGFycmF5IGZvciBidWlsZGluZ1xyXG5cdGxldCBjb3VudCA9IChhcnIsIHZhbCkgPT4gYXJyLnJlZHVjZSgoYSwgdikgPT4gKHYgPT09IHZhbCA/IGEgKyAxIDogYSksIDApO1xyXG5cdC8vIGNvdW50IHNwZWNpZmllZCBkYXRhIGluIHRoZSBhcnJheSwgZm9yIGxhdGVyIHVzZVxyXG5cclxuXHRfYnVpbGQucHVzaChcInhcIiwgXCJ4XCIsIC4uLl9kYXRhLnNwbGljZSgwLCAxKSk7IC8vIHByZS1idWlsZCB0aGUgXCJwcmUtYnVpbGRcIlxyXG5cclxuXHRmb3IgKGxldCBpID0gMjsgaSA8IF9zdW1fcGFyaXR5OyBpKyspIHsgLy8gYWRkIG5ldyBwYXJpdHliaXRzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIGJpdHNcclxuXHRcdF9idWlsZC5wdXNoKFwieFwiLCAuLi5fZGF0YS5zcGxpY2UoMCwgTWF0aC5wb3coMiwgaSkgLSAxKSlcclxuXHR9XHJcblx0Ly8gXCJwcmVcIi1idWlsZCBteSBhcnJheSwgbm93IHRoZSBcImNhbGN1bGF0aW9uXCIuLi4gZ2V0IHRoZSBwYXJpdHliaXRzIHdvcmtpbmdcclxuXHRmb3IgKGxldCBpbmRleCBvZiBfYnVpbGQucmVkdWNlKGZ1bmN0aW9uIChhLCBlLCBpKSB7IGlmIChlID09IFwieFwiKSBhLnB1c2goaSk7IHJldHVybiBhOyB9LCBbXSkpIHtcclxuXHRcdGxldCBfdGVtcGNvdW50ID0gaW5kZXggKyAxOyAvLyBzZXQgdGhlIFwic3RlcHNpemVcIlxyXG5cdFx0bGV0IF90ZW1wYXJyYXkgPSBbXTsgLy8gdGVtcG9yYXJ5IGFycmF5IHRvIHN0b3JlIHRoZSBjb3JyZXNwb25kaW5nIGJpdHNcclxuXHRcdGxldCBfdGVtcGRhdGEgPSBbLi4uX2J1aWxkXTsgLy8gY29weSB0aGUgXCJidWlsZFwiXHJcblx0XHR3aGlsZSAoX3RlbXBkYXRhW2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7IC8vIGFzIGxvbmcgYXMgdGhlcmUgYXJlIGJpdHMsIGRvIFwiY3V0XCJcclxuXHRcdFx0bGV0IF90ZW1wID0gX3RlbXBkYXRhLnNwbGljZShpbmRleCwgX3RlbXBjb3VudCAqIDIpOyAvLyBnZXQgeCoyIGJpdHMsIHRoZW5cclxuXHRcdFx0X3RlbXBhcnJheS5wdXNoKC4uLl90ZW1wLnNwbGljZSgwLCBfdGVtcGNvdW50KSk7IC8vIC4uIGN1dCB0aGVtIGFuZCBrZWVwIGZpcnN0IGhhbGZcclxuXHRcdH1cclxuXHRcdF90ZW1wYXJyYXkuc3BsaWNlKDAsIDEpOyAvLyByZW1vdmUgZmlyc3QgYml0LCB3aGljaCBpcyB0aGUgcGFyaXR5IG9uZVxyXG5cdFx0X2J1aWxkW2luZGV4XSA9ICgoY291bnQoX3RlbXBhcnJheSwgXCIxXCIpKSAlIDIuKS50b1N0cmluZygpIC8vIHNpbXBsZSBjb3VudCBhbmQgcmVtYWluZGVyIG9mIDIgd2l0aCBcInRvU3RyaW5nXCIgdG8gc3RvcmUgaXRcclxuXHR9XHJcblx0X2J1aWxkLnVuc2hpZnQoKChjb3VudChfYnVpbGQsIFwiMVwiKSkgJSAyLikudG9TdHJpbmcoKSkgLy8gYWRkaW5nIGZpcnN0IGluZGV4LCB3aGljaCBpcyBkb25lIGFzIGxhc3QgZWxlbWVudFxyXG5cdHJldHVybiBfYnVpbGQuam9pbihcIlwiKSAvLyByZXR1cm4gYSBzdHJpbmcgYWdhaW5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEhhbW1pbmdEZWNvZGUoX2RhdGEpIHtcclxuXHRsZXQgX2J1aWxkID0gX2RhdGEuc3BsaXQoXCJcIik7IC8vIHllLCBhbiBhcnJheSBhZ2FpblxyXG5cdGxldCBfdGVzdEFycmF5ID0gW107ICAvL2ZvciB0aGUgXCJ0ZXN0c1wiLiBpZiBhbnkgaXMgZmFsc2UsIGl0IGlzIGJlZW4gYWx0ZXJlZCBkYXRhLCB3aWxsIGNoZWNrIGFuZCBmaXggaXQgbGF0ZXJcclxuXHRsZXQgX3N1bV9wYXJpdHkgPSBNYXRoLmNlaWwoTWF0aC5sb2cyKF9kYXRhLmxlbmd0aCkpOyAvLyBleGNsdWRpbmcgZmlyc3QgYml0XHJcblx0bGV0IGNvdW50ID0gKGFyciwgdmFsKSA9PiBhcnIucmVkdWNlKChhLCB2KSA9PiAodiA9PT0gdmFsID8gYSArIDEgOiBhKSwgMCk7IC8vIGNvdW50Li4uLiBhZ2FpbiA7KVxyXG5cdGxldCBfb3ZlcmFsbFBhcml0eSA9IF9idWlsZC5zcGxpY2UoMCwgMSkuam9pbihcIlwiKTsgLy8gcmVtb3ZlIGZpcnN0IGluZGV4LCBmb3IgY2hlY2tpbmcgYW5kIHRvIHVzZSB0aGUgX2J1aWxkIHByb3Blcmx5IGxhdGVyXHJcblx0X3Rlc3RBcnJheS5wdXNoKChfb3ZlcmFsbFBhcml0eSA9PSAoY291bnQoX2J1aWxkLCBcIjFcIikgJSAyKS50b1N0cmluZygpKSA/IHRydWUgOiBmYWxzZSk7IC8vIGNoZWNraW5nIHRoZSBcIm92ZXJhbGxcIiBwYXJpdHlcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IF9zdW1fcGFyaXR5OyBpKyspIHtcclxuXHRcdGxldCBfdGVtcEluZGV4ID0gTWF0aC5wb3coMiwgaSkgLSAxIC8vIGdldCB0aGUgcGFyaXR5Qml0cyBJbmRleFxyXG5cdFx0bGV0IF90ZW1wU3RlcCA9IF90ZW1wSW5kZXggKyAxIC8vIHNldCB0aGUgc3RlcHNpemVcclxuXHRcdGxldCBfdGVtcERhdGEgPSBbLi4uX2J1aWxkXSAvLyBcImNvcHlcIiB0aGUgYnVpbGQtZGF0YVxyXG5cdFx0bGV0IF90ZW1wQXJyYXkgPSBbXSAvLyBpbml0IGVtcHR5IGFycmF5IGZvciBcInRlc3RpbmdcIlxyXG5cdFx0d2hpbGUgKF90ZW1wRGF0YVtfdGVtcEluZGV4XSAhPSB1bmRlZmluZWQpIHsgLy8gZXh0cmFjdCBmcm9tIHRoZSBjb3BpZWQgZGF0YSB1bnRpbCB0aGUgXCJzdGFydGluZ1wiIGluZGV4IGlzIHVuZGVmaW5lZFxyXG5cdFx0XHR2YXIgX3RlbXAgPSBbLi4uX3RlbXBEYXRhLnNwbGljZShfdGVtcEluZGV4LCBfdGVtcFN0ZXAgKiAyKV0gLy8gZXh0cmFjdCAyKnN0ZXBzaXplXHJcblx0XHRcdF90ZW1wQXJyYXkucHVzaCguLi5fdGVtcC5zcGxpY2UoMCwgX3RlbXBTdGVwKSkgIC8vIGFuZCBjdXQgYWdhaW4gZm9yIGtlZXBpbmcgZmlyc3QgaGFsZlxyXG5cdFx0fVxyXG5cdFx0bGV0IF90ZW1wUGFyaXR5ID0gX3RlbXBBcnJheS5zaGlmdCgpIC8vIGFuZCBjdXQgdGhlIGZpcnN0IGluZGV4IGZvciBjaGVja2luZyB3aXRoIHRoZSByZXN0IG9mIHRoZSBkYXRhXHJcblx0XHRfdGVzdEFycmF5LnB1c2goKChfdGVtcFBhcml0eSA9PSAoY291bnQoX3RlbXBBcnJheSwgXCIxXCIpICUgMikudG9TdHJpbmcoKSkpID8gdHJ1ZSA6IGZhbHNlKSAvLyBpcyB0aGUgX3RlbXBQYXJpdHkgdGhlIGNhbGN1bGF0ZWQgZGF0YT9cclxuXHR9XHJcblx0bGV0IF9maXhJbmRleCA9IDA7IC8vIGluaXQgdGhlIFwiZml4aW5nXCIgaW5kZXggYW1kIHN0YXJ0IHdpdGggLTEsIGJjIHdlIGFscmVhZHkgcmVtb3ZlZCB0aGUgZmlyc3QgYml0XHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBfc3VtX3Bhcml0eSArIDE7IGkrKykge1xyXG5cdFx0X2ZpeEluZGV4ICs9IChfdGVzdEFycmF5W2ldKSA/IDAgOiAoTWF0aC5wb3coMiwgaSkgLyAyKVxyXG5cdH1cclxuXHRfYnVpbGQudW5zaGlmdChfb3ZlcmFsbFBhcml0eSlcclxuXHQvLyBmaXggdGhlIGFjdHVhbCBoYW1taW5nY29kZSBpZiB0aGVyZSBpcyBhbiBlcnJvclxyXG5cdGlmIChfZml4SW5kZXggPiAwICYmIF90ZXN0QXJyYXlbMF0gPT0gZmFsc2UpIHsgIC8vIGlmIHRoZSBvdmVyYWxsIGlzIGZhbHNlIGFuZCB0aGUgc3VtIG9mIGNhbGN1bGF0ZWQgdmFsdWVzIGlzIGdyZWF0ZXIgZXF1YWwgMCwgZml4IHRoZSBjb3JyZXNwb25kaW5nIGhhbW1pbmctYml0XHJcblx0XHRfYnVpbGRbX2ZpeEluZGV4XSA9IChfYnVpbGRbX2ZpeEluZGV4XSA9PSBcIjBcIikgPyBcIjFcIiA6IFwiMFwiXHJcblx0fVxyXG5cdGVsc2UgaWYgKF90ZXN0QXJyYXlbMF0gPT0gZmFsc2UpIHsgLy8gb3RoZXJ3aXNlLCBpZiB0aGUgdGhlIG92ZXJhbGxfcGFyaXR5IGlzIG9ubHkgd3JvbmcsIGZpeCB0aGF0IG9uZVxyXG5cdFx0X292ZXJhbGxQYXJpdHkgPSAoX292ZXJhbGxQYXJpdHkgPT0gXCIwXCIpID8gXCIxXCIgOiBcIjBcIlxyXG5cdH1cclxuXHRlbHNlIGlmIChfdGVzdEFycmF5WzBdID09IHRydWUgJiYgX3Rlc3RBcnJheS5zb21lKCh0cnV0aCkgPT4gdHJ1dGggPT0gZmFsc2UpKSB7XHJcblx0XHRyZXR1cm4gMCAvLyB1aG0sIHRoZXJlJ3Mgc29tZSBzdHJhbmdlIGdvaW5nIG9uLi4uIDIgYml0cyBhcmUgYWx0ZXJlZD8gSG93P1xyXG5cdH1cclxuXHQvLyBvb2YuLiBoYWxmd2F5IHRocm91Z2guLi4gd2UgZml4ZWQgdGhlIGFsdGVyZWQgYml0LCBub3cgXCJleHRyYWN0XCIgdGhlIHBhcml0eSBmcm9tIHRoZSBidWlsZCBhbmQgcGFyc2UgdGhlIGJpbmFyeSBkYXRhXHJcblx0Zm9yICh2YXIgaiA9IF9zdW1fcGFyaXR5OyBqID49IDA7IGotLSkgeyAvLyBzdGFydCBmcm9tIHRoZSBsYXN0IHBhcml0eSBkb3duIHRoZSBzdGFydGluZyBvbmVcclxuXHRcdF9idWlsZC5zcGxpY2UoTWF0aC5wb3coMiwgaiksIDEpXHJcblx0fVxyXG5cdF9idWlsZC5zcGxpY2UoMCwgMSlcclxuXHRyZXR1cm4gcGFyc2VJbnQoX2J1aWxkLmpvaW4oXCJcIiksIDIpXHJcbn1cclxuXHJcblxyXG4vLyBkZWNvbXByZXNzIExaLWNvbXByZXNzZWQgc3RyaW5nLCBvciByZXR1cm4gbnVsbCBpZiBpbnB1dCBpcyBpbnZhbGlkXHJcbmZ1bmN0aW9uIGNvbXByTFpEZWNvZGUoY29tcHIpIHtcclxuXHRsZXQgcGxhaW4gPSBcIlwiO1xyXG5cclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbXByLmxlbmd0aDspIHtcclxuXHRcdGNvbnN0IGxpdGVyYWxfbGVuZ3RoID0gY29tcHIuY2hhckNvZGVBdChpKSAtIDB4MzA7XHJcblxyXG5cdFx0aWYgKGxpdGVyYWxfbGVuZ3RoIDwgMCB8fCBsaXRlcmFsX2xlbmd0aCA+IDkgfHwgaSArIDEgKyBsaXRlcmFsX2xlbmd0aCA+IGNvbXByLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwbGFpbiArPSBjb21wci5zdWJzdHJpbmcoaSArIDEsIGkgKyAxICsgbGl0ZXJhbF9sZW5ndGgpO1xyXG5cdFx0aSArPSAxICsgbGl0ZXJhbF9sZW5ndGg7XHJcblxyXG5cdFx0aWYgKGkgPj0gY29tcHIubGVuZ3RoKSB7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgYmFja3JlZl9sZW5ndGggPSBjb21wci5jaGFyQ29kZUF0KGkpIC0gMHgzMDtcclxuXHJcblx0XHRpZiAoYmFja3JlZl9sZW5ndGggPCAwIHx8IGJhY2tyZWZfbGVuZ3RoID4gOSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH0gZWxzZSBpZiAoYmFja3JlZl9sZW5ndGggPT09IDApIHtcclxuXHRcdFx0KytpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWYgKGkgKyAxID49IGNvbXByLmxlbmd0aCkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBiYWNrcmVmX29mZnNldCA9IGNvbXByLmNoYXJDb2RlQXQoaSArIDEpIC0gMHgzMDtcclxuXHRcdFx0aWYgKChiYWNrcmVmX2xlbmd0aCA+IDAgJiYgKGJhY2tyZWZfb2Zmc2V0IDwgMSB8fCBiYWNrcmVmX29mZnNldCA+IDkpKSB8fCBiYWNrcmVmX29mZnNldCA+IHBsYWluLmxlbmd0aCkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGJhY2tyZWZfbGVuZ3RoOyArK2opIHtcclxuXHRcdFx0XHRwbGFpbiArPSBwbGFpbltwbGFpbi5sZW5ndGggLSBiYWNrcmVmX29mZnNldF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGkgKz0gMjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBwbGFpbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY29sb3JpbmdHcmFwaChkYXRhKSB7XHJcblx0Ly9IZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IG5laWdoYm91cmhvb2Qgb2YgYSB2ZXJ0ZXhcclxuXHRmdW5jdGlvbiBuZWlnaGJvdXJob29kKHZlcnRleCkge1xyXG5cdFx0Y29uc3QgYWRqTGVmdCA9IGRhdGFbMV0uZmlsdGVyKChbYSwgX10pID0+IGEgPT0gdmVydGV4KS5tYXAoKFtfLCBiXSkgPT4gYik7XHJcblx0XHRjb25zdCBhZGpSaWdodCA9IGRhdGFbMV0uZmlsdGVyKChbXywgYl0pID0+IGIgPT0gdmVydGV4KS5tYXAoKFthLCBfXSkgPT4gYSk7XHJcblx0XHRyZXR1cm4gYWRqTGVmdC5jb25jYXQoYWRqUmlnaHQpO1xyXG5cdH1cclxuXHJcblx0Ly9WZXJpZnkgdGhhdCB0aGVyZSBpcyBubyBzb2x1dGlvbiBieSBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBhIHByb3BlciAyLWNvbG9yaW5nLlxyXG5cdGNvbnN0IGNvbG9yaW5nID0gQXJyYXkoZGF0YVswXSkuZmlsbCh1bmRlZmluZWQpO1xyXG5cdHdoaWxlIChjb2xvcmluZy5zb21lKCh2YWwpID0+IHZhbCA9PT0gdW5kZWZpbmVkKSkge1xyXG5cdFx0Ly9Db2xvciBhIHZlcnRleCBpbiB0aGUgZ3JhcGhcclxuXHRcdGNvbnN0IGluaXRpYWxWZXJ0ZXggPSBjb2xvcmluZy5maW5kSW5kZXgoKHZhbCkgPT4gdmFsID09PSB1bmRlZmluZWQpO1xyXG5cdFx0Y29sb3JpbmdbaW5pdGlhbFZlcnRleF0gPSAwO1xyXG5cdFx0Y29uc3QgZnJvbnRpZXIgPSBbaW5pdGlhbFZlcnRleF07XHJcblxyXG5cdFx0Ly9Qcm9wb2dhdGUgdGhlIGNvbG9yaW5nIHRocm91Z2hvdXQgdGhlIGNvbXBvbmVudCBjb250YWluaW5nIHYgZ3JlZWRpbHlcclxuXHRcdHdoaWxlIChmcm9udGllci5sZW5ndGggPiAwKSB7XHJcblx0XHRcdGNvbnN0IHYgPSBmcm9udGllci5wb3AoKSB8fCAwO1xyXG5cdFx0XHRjb25zdCBuZWlnaGJvcnMgPSBuZWlnaGJvdXJob29kKHYpO1xyXG5cclxuXHRcdFx0Ly9Gb3IgZWFjaCB2ZXJ0ZXggdSBhZGphY2VudCB0byB2XHJcblx0XHRcdGZvciAoY29uc3QgaWQgaW4gbmVpZ2hib3JzKSB7XHJcblx0XHRcdFx0Y29uc3QgdSA9IG5laWdoYm9yc1tpZF07XHJcblxyXG5cdFx0XHRcdC8vU2V0IHRoZSBjb2xvciBvZiB1IHRvIHRoZSBvcHBvc2l0ZSBvZiB2J3MgY29sb3IgaWYgaXQgaXMgbmV3LFxyXG5cdFx0XHRcdC8vdGhlbiBhZGQgdSB0byB0aGUgZnJvbnRpZXIgdG8gY29udGludWUgdGhlIGFsZ29yaXRobS5cclxuXHRcdFx0XHRpZiAoY29sb3JpbmdbdV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0aWYgKGNvbG9yaW5nW3ZdID09PSAwKSBjb2xvcmluZ1t1XSA9IDE7XHJcblx0XHRcdFx0XHRlbHNlIGNvbG9yaW5nW3VdID0gMDtcclxuXHJcblx0XHRcdFx0XHRmcm9udGllci5wdXNoKHUpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly9Bc3NlcnQgdSx2IGRvIG5vdCBoYXZlIHRoZSBzYW1lIGNvbG9yXHJcblx0XHRcdFx0ZWxzZSBpZiAoY29sb3JpbmdbdV0gPT09IGNvbG9yaW5nW3ZdKSB7XHJcblx0XHRcdFx0XHQvL0lmIHUsdiBkbyBoYXZlIHRoZSBzYW1lIGNvbG9yLCBubyBwcm9wZXIgMi1jb2xvcmluZyBleGlzdHMsIG1lYW5pbmdcclxuXHRcdFx0XHRcdC8vdGhlIHBsYXllciB3YXMgY29ycmVjdCB0byBzYXkgdGhlcmUgaXMgbm8gcHJvcGVyIDItY29sb3Jpbmcgb2YgdGhlIGdyYXBoLlxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiW11cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGNvbG9yaW5nO1xyXG59XHJcblxyXG4vLyBjb21wcmVzcyBwbGFpbnRlc3Qgc3RyaW5nXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wckxaRW5jb2RlKHBsYWluKSB7XHJcblx0Ly8gZm9yIHN0YXRlW2ldW2pdOlxyXG5cdC8vICAgICAgaWYgaSBpcyAwLCB3ZSdyZSBhZGRpbmcgYSBsaXRlcmFsIG9mIGxlbmd0aCBqXHJcblx0Ly8gICAgICBlbHNlLCB3ZSdyZSBhZGRpbmcgYSBiYWNrcmVmZXJlbmNlIG9mIG9mZnNldCBpIGFuZCBsZW5ndGggalxyXG5cdGxldCBjdXJfc3RhdGUgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApLmZpbGwobnVsbCkpO1xyXG5cdGxldCBuZXdfc3RhdGUgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApKTtcclxuXHJcblx0ZnVuY3Rpb24gc2V0KHN0YXRlLCBpLCBqLCBzdHIpIHtcclxuXHRcdGNvbnN0IGN1cnJlbnQgPSBzdGF0ZVtpXVtqXTtcclxuXHRcdGlmIChjdXJyZW50ID09IG51bGwgfHwgc3RyLmxlbmd0aCA8IGN1cnJlbnQubGVuZ3RoKSB7XHJcblx0XHRcdHN0YXRlW2ldW2pdID0gc3RyO1xyXG5cdFx0fSBlbHNlIGlmIChzdHIubGVuZ3RoID09PSBjdXJyZW50Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XHJcblx0XHRcdC8vIGlmIHR3byBzdHJpbmdzIGFyZSB0aGUgc2FtZSBsZW5ndGgsIHBpY2sgcmFuZG9tbHkgc28gdGhhdFxyXG5cdFx0XHQvLyB3ZSBnZW5lcmF0ZSBtb3JlIHBvc3NpYmxlIGlucHV0cyB0byBDb21wcmVzc2lvbiBJSVxyXG5cdFx0XHRzdGF0ZVtpXVtqXSA9IHN0cjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIGluaXRpYWwgc3RhdGUgaXMgYSBsaXRlcmFsIG9mIGxlbmd0aCAxXHJcblx0Y3VyX3N0YXRlWzBdWzFdID0gXCJcIjtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBwbGFpbi5sZW5ndGg7ICsraSkge1xyXG5cdFx0Zm9yIChjb25zdCByb3cgb2YgbmV3X3N0YXRlKSB7XHJcblx0XHRcdHJvdy5maWxsKG51bGwpO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgYyA9IHBsYWluW2ldO1xyXG5cclxuXHRcdC8vIGhhbmRsZSBsaXRlcmFsc1xyXG5cdFx0Zm9yIChsZXQgbGVuZ3RoID0gMTsgbGVuZ3RoIDw9IDk7ICsrbGVuZ3RoKSB7XHJcblx0XHRcdGNvbnN0IHN0cmluZyA9IGN1cl9zdGF0ZVswXVtsZW5ndGhdO1xyXG5cdFx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGxlbmd0aCA8IDkpIHtcclxuXHRcdFx0XHQvLyBleHRlbmQgY3VycmVudCBsaXRlcmFsXHJcblx0XHRcdFx0c2V0KG5ld19zdGF0ZSwgMCwgbGVuZ3RoICsgMSwgc3RyaW5nKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBzdGFydCBuZXcgbGl0ZXJhbFxyXG5cdFx0XHRcdHNldChuZXdfc3RhdGUsIDAsIDEsIHN0cmluZyArIFwiOVwiICsgcGxhaW4uc3Vic3RyaW5nKGkgLSA5LCBpKSArIFwiMFwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yIChsZXQgb2Zmc2V0ID0gMTsgb2Zmc2V0IDw9IE1hdGgubWluKDksIGkpOyArK29mZnNldCkge1xyXG5cdFx0XHRcdGlmIChwbGFpbltpIC0gb2Zmc2V0XSA9PT0gYykge1xyXG5cdFx0XHRcdFx0Ly8gc3RhcnQgbmV3IGJhY2tyZWZlcmVuY2VcclxuXHRcdFx0XHRcdHNldChuZXdfc3RhdGUsIG9mZnNldCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBwbGFpbi5zdWJzdHJpbmcoaSAtIGxlbmd0aCwgaSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGhhbmRsZSBiYWNrcmVmZXJlbmNlc1xyXG5cdFx0Zm9yIChsZXQgb2Zmc2V0ID0gMTsgb2Zmc2V0IDw9IDk7ICsrb2Zmc2V0KSB7XHJcblx0XHRcdGZvciAobGV0IGxlbmd0aCA9IDE7IGxlbmd0aCA8PSA5OyArK2xlbmd0aCkge1xyXG5cdFx0XHRcdGNvbnN0IHN0cmluZyA9IGN1cl9zdGF0ZVtvZmZzZXRdW2xlbmd0aF07XHJcblx0XHRcdFx0aWYgKHN0cmluZyA9PSBudWxsKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChwbGFpbltpIC0gb2Zmc2V0XSA9PT0gYykge1xyXG5cdFx0XHRcdFx0aWYgKGxlbmd0aCA8IDkpIHtcclxuXHRcdFx0XHRcdFx0Ly8gZXh0ZW5kIGN1cnJlbnQgYmFja3JlZmVyZW5jZVxyXG5cdFx0XHRcdFx0XHRzZXQobmV3X3N0YXRlLCBvZmZzZXQsIGxlbmd0aCArIDEsIHN0cmluZyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQvLyBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxyXG5cdFx0XHRcdFx0XHRzZXQobmV3X3N0YXRlLCBvZmZzZXQsIDEsIHN0cmluZyArIFwiOVwiICsgU3RyaW5nKG9mZnNldCkgKyBcIjBcIik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBzdGFydCBuZXcgbGl0ZXJhbFxyXG5cdFx0XHRcdHNldChuZXdfc3RhdGUsIDAsIDEsIHN0cmluZyArIFN0cmluZyhsZW5ndGgpICsgU3RyaW5nKG9mZnNldCkpO1xyXG5cclxuXHRcdFx0XHQvLyBlbmQgY3VycmVudCBiYWNrcmVmZXJlbmNlIGFuZCBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxyXG5cdFx0XHRcdGZvciAobGV0IG5ld19vZmZzZXQgPSAxOyBuZXdfb2Zmc2V0IDw9IE1hdGgubWluKDksIGkpOyArK25ld19vZmZzZXQpIHtcclxuXHRcdFx0XHRcdGlmIChwbGFpbltpIC0gbmV3X29mZnNldF0gPT09IGMpIHtcclxuXHRcdFx0XHRcdFx0c2V0KG5ld19zdGF0ZSwgbmV3X29mZnNldCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBTdHJpbmcob2Zmc2V0KSArIFwiMFwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB0bXBfc3RhdGUgPSBuZXdfc3RhdGU7XHJcblx0XHRuZXdfc3RhdGUgPSBjdXJfc3RhdGU7XHJcblx0XHRjdXJfc3RhdGUgPSB0bXBfc3RhdGU7XHJcblx0fVxyXG5cclxuXHRsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcblx0Zm9yIChsZXQgbGVuID0gMTsgbGVuIDw9IDk7ICsrbGVuKSB7XHJcblx0XHRsZXQgc3RyaW5nID0gY3VyX3N0YXRlWzBdW2xlbl07XHJcblx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0c3RyaW5nICs9IFN0cmluZyhsZW4pICsgcGxhaW4uc3Vic3RyaW5nKHBsYWluLmxlbmd0aCAtIGxlbiwgcGxhaW4ubGVuZ3RoKTtcclxuXHRcdGlmIChyZXN1bHQgPT0gbnVsbCB8fCBzdHJpbmcubGVuZ3RoIDwgcmVzdWx0Lmxlbmd0aCkge1xyXG5cdFx0XHRyZXN1bHQgPSBzdHJpbmc7XHJcblx0XHR9IGVsc2UgaWYgKHN0cmluZy5sZW5ndGggPT0gcmVzdWx0Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XHJcblx0XHRcdHJlc3VsdCA9IHN0cmluZztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSA5OyArK29mZnNldCkge1xyXG5cdFx0Zm9yIChsZXQgbGVuID0gMTsgbGVuIDw9IDk7ICsrbGVuKSB7XHJcblx0XHRcdGxldCBzdHJpbmcgPSBjdXJfc3RhdGVbb2Zmc2V0XVtsZW5dO1xyXG5cdFx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RyaW5nICs9IFN0cmluZyhsZW4pICsgXCJcIiArIFN0cmluZyhvZmZzZXQpO1xyXG5cdFx0XHRpZiAocmVzdWx0ID09IG51bGwgfHwgc3RyaW5nLmxlbmd0aCA8IHJlc3VsdC5sZW5ndGgpIHtcclxuXHRcdFx0XHRyZXN1bHQgPSBzdHJpbmc7XHJcblx0XHRcdH0gZWxzZSBpZiAoc3RyaW5nLmxlbmd0aCA9PSByZXN1bHQubGVuZ3RoICYmIE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcclxuXHRcdFx0XHRyZXN1bHQgPSBzdHJpbmc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiByZXN1bHQgPz8gXCJcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gUkxFZW5jb2RlKGRhdGEpIHtcclxuXHRsZXQgY2hhcnMgPSBBcnJheS5mcm9tKGRhdGEpO1xyXG5cdGxldCBhbnN3ZXIgPSAnJztcclxuXHRsZXQgY3VycmVudCA9IHVuZGVmaW5lZDtcclxuXHRsZXQgY291bnQgPSAwO1xyXG5cdHdoaWxlIChjaGFycy5sZW5ndGggPiAwKSB7XHJcblx0XHRsZXQgY2hhciA9IGNoYXJzLnNoaWZ0KCk7XHJcblx0XHRzd2l0Y2ggKGN1cnJlbnQpIHtcclxuXHRcdFx0Y2FzZSB1bmRlZmluZWQ6XHJcblx0XHRcdFx0Y3VycmVudCA9IGNoYXI7XHJcblx0XHRcdFx0Y291bnQgPSAxO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIGNoYXI6XHJcblx0XHRcdFx0aWYgKGNvdW50ID09IDkpIHtcclxuXHRcdFx0XHRcdGFuc3dlciA9IGAke2Fuc3dlcn0ke2NvdW50fSR7Y3VycmVudH1gO1xyXG5cdFx0XHRcdFx0Y291bnQgPSAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdGFuc3dlciA9IGAke2Fuc3dlcn0ke2NvdW50fSR7Y3VycmVudH1gO1xyXG5cdFx0XHRcdGN1cnJlbnQgPSBjaGFyO1xyXG5cdFx0XHRcdGNvdW50ID0gMTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblx0YW5zd2VyID0gYCR7YW5zd2VyfSR7Y291bnR9JHtjdXJyZW50fWA7XHJcblx0cmV0dXJuIGFuc3dlcjtcclxufVxyXG4iXX0=\",\"filename\":\"cct.js\",\"server\":\"home\"}}],[\"hud.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint } from \\\"./tables\\\";\\r\\nconst doc = eval('document');\\r\\nconst hook0 = doc.getElementById('overview-extra-hook-0');\\r\\nconst hook1 = doc.getElementById('overview-extra-hook-1');\\r\\nconst hookRootEl = hook0?.parentElement?.parentElement;\\r\\nconst overviewEl = hookRootEl?.parentElement;\\r\\nconst hackRootEl = overviewEl?.children[2];\\r\\nconst hackProgressEl = overviewEl?.children[3];\\r\\nfunction hudErr(ns, test, error) {\\r\\n    if (test) {\\r\\n        ColorPrint(ns, ['Red1', `HUD ERROR: ${error}`]);\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    if (hudErr(ns, hook0 === null, 'Unable to find hook0'))\\r\\n        return;\\r\\n    if (hudErr(ns, hook1 === null, 'Unable to find hook1'))\\r\\n        return;\\r\\n    if (hudErr(ns, hookRootEl === null, 'Unable to find hookRootEl'))\\r\\n        return;\\r\\n    if (hudErr(ns, overviewEl === null, 'Unable to find overviewEl'))\\r\\n        return;\\r\\n    if (hudErr(ns, hackRootEl === null, 'Unable to find hackRootEl'))\\r\\n        return;\\r\\n    if (hudErr(ns, hackProgressEl === null, 'Unable to find hackProgressEl'))\\r\\n        return;\\r\\n    const removeByClassName = (sel) => doc.querySelectorAll(sel).forEach(el => el.remove());\\r\\n    const colorByClassName = (sel, col) => doc.querySelectorAll(sel).forEach(el => {\\r\\n        el.style.color = col;\\r\\n        el.style.fontSize = '0.75rem';\\r\\n    });\\r\\n    // const newRootEl = <HTMLElement>hackProgressEl?.cloneNode(true);\\r\\n    // const newSub1 = <HTMLElement>newRootEl?.children[0]?.children[0];\\r\\n    // const newSub2 = <HTMLElement>newRootEl?.children[0]?.children[0]?.children[0];\\r\\n    // if (!newRootEl || !newSub1 || !newSub2) throw \\\"addProgress init failed\\\";\\r\\n    // newRootEl.classList.add('HUD_el');\\r\\n    // newSub1.classList.add('HUD_el');\\r\\n    // newSub2.classList.add('HUD_el');\\r\\n    // if (hook0 === null || hook1 === null) return;\\r\\n    // const theme = ns.ui.getTheme();\\r\\n    // ns.tprintf(theme['cha']);\\r\\n    // hook0.insertAdjacentHTML('beforebegin', newRootEl.outerHTML);\\r\\n    // await ns.sleep(2000);\\r\\n    // removeByClassName('.HUD_el');\\r\\n    // while (true) {\\r\\n    //   try {\\r\\n    //     const player = ns.getPlayer();\\r\\n    //     const playerCity = player.city; // city\\r\\n    //     const playerLocation = player.location; // location\\r\\n    //     const playerKills = player.numPeopleKilled; // numPeopleKilled\\r\\n    //     const playerKarma = ns.heart.break();\\r\\n    //     const purchased_servers = ns.getPurchasedServers(); // get every bought server if exists, else just create our blank array and add home to it.\\r\\n    //     purchased_servers.push(\\\"home\\\"); // add home to the array.\\r\\n    //     // End paramaters, begin CSS: \\r\\n    //     removeByClassName('.HUD_el');\\r\\n    //     theme = ns.ui.getTheme();\\r\\n    //     removeByClassName('.HUD_sep');\\r\\n    //     hook0.insertAdjacentHTML('beforebegin', `<hr class=\\\"HUD_sep HUD_el\\\">`);\\r\\n    //     hook1.insertAdjacentHTML('beforebegin', `<hr class=\\\"HUD_sep HUD_el\\\">`);\\r\\n    //     // playerCity\\r\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_C HUD_el\\\" title=\\\"The name of the City you are currently in.\\\">City </element><br class=\\\"HUD_el\\\">`)\\r\\n    //     colorByClassName(\\\".HUD_GN_C\\\", theme['cha'])\\r\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_C HUD_el\\\">${playerCity + '<br class=\\\"HUD_el\\\">'}</element>`)\\r\\n    //     colorByClassName(\\\".HUD_GN_C\\\", theme['cha'])\\r\\n    //     // playerLocation\\r\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_L HUD_el\\\" title=\\\"Your current location inside the city.\\\">Location </element><br class=\\\"HUD_el\\\">`)\\r\\n    //     colorByClassName(\\\".HUD_GN_L\\\", theme['cha'])\\r\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_L HUD_el\\\">${playerLocation + '<br class=\\\"HUD_el\\\">'}</element>`)\\r\\n    //     colorByClassName(\\\".HUD_GN_L\\\", theme['cha'])\\r\\n    //     // playerKarma\\r\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Karma_H HUD_el\\\" title=\\\"Your karma.\\\"><br>Karma &nbsp;&nbsp;&nbsp;</element>`)\\r\\n    //     colorByClassName(\\\".HUD_Karma_H\\\", theme['hp'])\\r\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Karma HUD_el\\\"><br>${playerKarma}</element>`)\\r\\n    //     colorByClassName(\\\".HUD_Karma\\\", theme['hp'])\\r\\n    //     removeByClassName('.HUD_Kills_H')\\r\\n    //     // playerKills\\r\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Kills_H HUD_el\\\" title=\\\"Your kill count, increases every successful homicide.\\\"><br>Kills &nbsp;&nbsp;&nbsp;</element>`)\\r\\n    //     colorByClassName(\\\".HUD_Kills_H\\\", theme['hp'])\\r\\n    //     removeByClassName('.HUD_Kills')\\r\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Kills HUD_el\\\"><br>${playerKills}</element>`)\\r\\n    //     colorByClassName(\\\".HUD_Kills\\\", theme['hp'])\\r\\n    //   } catch (err) {\\r\\n    //     ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\r\\n    //   }\\r\\n    //   ns.atExit(function () { removeByClassName('.HUD_el'); })\\r\\n    //   await ns.sleep(200);\\r\\n    // }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2h1ZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXRDLE1BQU0sR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN2QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDMUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzFELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO0FBQ3ZELE1BQU0sVUFBVSxHQUFHLFVBQVUsRUFBRSxhQUFhLENBQUM7QUFDN0MsTUFBTSxVQUFVLEdBQWdCLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsTUFBTSxjQUFjLEdBQWdCLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFNUQsU0FBUyxNQUFNLENBQUMsRUFBTSxFQUFFLElBQWEsRUFBRSxLQUFhO0lBQ2xELElBQUksSUFBSSxFQUFFO1FBQ1IsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxjQUFjLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1gs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IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBDb2xvclByaW50IH0gZnJvbSBcIi4vdGFibGVzXCI7XHJcblxyXG5jb25zdCBkb2M6IERvY3VtZW50ID0gZXZhbCgnZG9jdW1lbnQnKTtcclxuY29uc3QgaG9vazAgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ292ZXJ2aWV3LWV4dHJhLWhvb2stMCcpO1xyXG5jb25zdCBob29rMSA9IGRvYy5nZXRFbGVtZW50QnlJZCgnb3ZlcnZpZXctZXh0cmEtaG9vay0xJyk7XHJcbmNvbnN0IGhvb2tSb290RWwgPSBob29rMD8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudDtcclxuY29uc3Qgb3ZlcnZpZXdFbCA9IGhvb2tSb290RWw/LnBhcmVudEVsZW1lbnQ7XHJcbmNvbnN0IGhhY2tSb290RWwgPSA8SFRNTEVsZW1lbnQ+b3ZlcnZpZXdFbD8uY2hpbGRyZW5bMl07XHJcbmNvbnN0IGhhY2tQcm9ncmVzc0VsID0gPEhUTUxFbGVtZW50Pm92ZXJ2aWV3RWw/LmNoaWxkcmVuWzNdO1xyXG5cclxuZnVuY3Rpb24gaHVkRXJyKG5zOiBOUywgdGVzdDogYm9vbGVhbiwgZXJyb3I6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGlmICh0ZXN0KSB7XHJcbiAgICBDb2xvclByaW50KG5zLCBbJ1JlZDEnLCBgSFVEIEVSUk9SOiAke2Vycm9yfWBdKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG5cclxuICBjb25zdCBhcmdzID0gbnMuZmxhZ3MoW1tcImhlbHBcIiwgZmFsc2VdXSk7XHJcbiAgaWYgKGFyZ3MuaGVscCkge1xyXG4gICAgICBucy50cHJpbnQoXCJUaGlzIHNjcmlwdCB3aWxsIGVuaGFuY2UgeW91ciBIVUQgKEhlYWRzIHVwIERpc3BsYXkpIHdpdGggY3VzdG9tIHN0YXRpc3RpY3MuXCIpO1xyXG4gICAgICBucy50cHJpbnQoYFVzYWdlOiBydW4gJHtucy5nZXRTY3JpcHROYW1lKCl9YCk7XHJcbiAgICAgIG5zLnRwcmludChcIkV4YW1wbGU6XCIpO1xyXG4gICAgICBucy50cHJpbnQoYD4gcnVuICR7bnMuZ2V0U2NyaXB0TmFtZSgpfWApO1xyXG4gICAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoaHVkRXJyKG5zLCBob29rMCA9PT0gbnVsbCwgJ1VuYWJsZSB0byBmaW5kIGhvb2swJykpIHJldHVybjtcclxuICBpZiAoaHVkRXJyKG5zLCBob29rMSA9PT0gbnVsbCwgJ1VuYWJsZSB0byBmaW5kIGhvb2sxJykpIHJldHVybjtcclxuICBpZiAoaHVkRXJyKG5zLCBob29rUm9vdEVsID09PSBudWxsLCAnVW5hYmxlIHRvIGZpbmQgaG9va1Jvb3RFbCcpKSByZXR1cm47XHJcbiAgaWYgKGh1ZEVycihucywgb3ZlcnZpZXdFbCA9PT0gbnVsbCwgJ1VuYWJsZSB0byBmaW5kIG92ZXJ2aWV3RWwnKSkgcmV0dXJuO1xyXG4gIGlmIChodWRFcnIobnMsIGhhY2tSb290RWwgPT09IG51bGwsICdVbmFibGUgdG8gZmluZCBoYWNrUm9vdEVsJykpIHJldHVybjtcclxuICBpZiAoaHVkRXJyKG5zLCBoYWNrUHJvZ3Jlc3NFbCA9PT0gbnVsbCwgJ1VuYWJsZSB0byBmaW5kIGhhY2tQcm9ncmVzc0VsJykpIHJldHVybjtcclxuXHJcbiAgY29uc3QgcmVtb3ZlQnlDbGFzc05hbWUgPSAoc2VsOiBzdHJpbmcpID0+IGRvYy5xdWVyeVNlbGVjdG9yQWxsKHNlbCkuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XHJcbiAgY29uc3QgY29sb3JCeUNsYXNzTmFtZSA9IChzZWw6IHN0cmluZywgY29sOiBzdHJpbmcpID0+IGRvYy5xdWVyeVNlbGVjdG9yQWxsKHNlbCkuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAoZWwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmNvbG9yID0gY29sOyBcclxuICAgIChlbCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZm9udFNpemUgPSAnMC43NXJlbSdcclxuICB9KTtcclxuICBcclxuICAvLyBjb25zdCBuZXdSb290RWwgPSA8SFRNTEVsZW1lbnQ+aGFja1Byb2dyZXNzRWw/LmNsb25lTm9kZSh0cnVlKTtcclxuICAvLyBjb25zdCBuZXdTdWIxID0gPEhUTUxFbGVtZW50Pm5ld1Jvb3RFbD8uY2hpbGRyZW5bMF0/LmNoaWxkcmVuWzBdO1xyXG4gIC8vIGNvbnN0IG5ld1N1YjIgPSA8SFRNTEVsZW1lbnQ+bmV3Um9vdEVsPy5jaGlsZHJlblswXT8uY2hpbGRyZW5bMF0/LmNoaWxkcmVuWzBdO1xyXG5cclxuICAvLyBpZiAoIW5ld1Jvb3RFbCB8fCAhbmV3U3ViMSB8fCAhbmV3U3ViMikgdGhyb3cgXCJhZGRQcm9ncmVzcyBpbml0IGZhaWxlZFwiO1xyXG5cclxuICAvLyBuZXdSb290RWwuY2xhc3NMaXN0LmFkZCgnSFVEX2VsJyk7XHJcbiAgLy8gbmV3U3ViMS5jbGFzc0xpc3QuYWRkKCdIVURfZWwnKTtcclxuICAvLyBuZXdTdWIyLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xyXG4gIFxyXG4gIC8vIGlmIChob29rMCA9PT0gbnVsbCB8fCBob29rMSA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAvLyBjb25zdCB0aGVtZSA9IG5zLnVpLmdldFRoZW1lKCk7XHJcbiAgLy8gbnMudHByaW50Zih0aGVtZVsnY2hhJ10pO1xyXG5cclxuICAvLyBob29rMC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJywgbmV3Um9vdEVsLm91dGVySFRNTCk7XHJcblxyXG4gIC8vIGF3YWl0IG5zLnNsZWVwKDIwMDApO1xyXG4gIC8vIHJlbW92ZUJ5Q2xhc3NOYW1lKCcuSFVEX2VsJyk7XHJcbiAgLy8gd2hpbGUgKHRydWUpIHtcclxuICAvLyAgIHRyeSB7XHJcbiAgLy8gICAgIGNvbnN0IHBsYXllciA9IG5zLmdldFBsYXllcigpO1xyXG5cclxuICAvLyAgICAgY29uc3QgcGxheWVyQ2l0eSA9IHBsYXllci5jaXR5OyAvLyBjaXR5XHJcbiAgLy8gICAgIGNvbnN0IHBsYXllckxvY2F0aW9uID0gcGxheWVyLmxvY2F0aW9uOyAvLyBsb2NhdGlvblxyXG4gIC8vICAgICBjb25zdCBwbGF5ZXJLaWxscyA9IHBsYXllci5udW1QZW9wbGVLaWxsZWQ7IC8vIG51bVBlb3BsZUtpbGxlZFxyXG4gIC8vICAgICBjb25zdCBwbGF5ZXJLYXJtYSA9IG5zLmhlYXJ0LmJyZWFrKCk7XHJcblxyXG4gIC8vICAgICBjb25zdCBwdXJjaGFzZWRfc2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTsgLy8gZ2V0IGV2ZXJ5IGJvdWdodCBzZXJ2ZXIgaWYgZXhpc3RzLCBlbHNlIGp1c3QgY3JlYXRlIG91ciBibGFuayBhcnJheSBhbmQgYWRkIGhvbWUgdG8gaXQuXHJcbiAgLy8gICAgIHB1cmNoYXNlZF9zZXJ2ZXJzLnB1c2goXCJob21lXCIpOyAvLyBhZGQgaG9tZSB0byB0aGUgYXJyYXkuXHJcblxyXG4gIC8vICAgICAvLyBFbmQgcGFyYW1hdGVycywgYmVnaW4gQ1NTOiBcclxuXHJcbiAgLy8gICAgIHJlbW92ZUJ5Q2xhc3NOYW1lKCcuSFVEX2VsJyk7XHJcbiAgLy8gICAgIHRoZW1lID0gbnMudWkuZ2V0VGhlbWUoKTtcclxuICAvLyAgICAgcmVtb3ZlQnlDbGFzc05hbWUoJy5IVURfc2VwJyk7XHJcblxyXG4gIC8vICAgICBob29rMC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJywgYDxociBjbGFzcz1cIkhVRF9zZXAgSFVEX2VsXCI+YCk7XHJcbiAgLy8gICAgIGhvb2sxLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlYmVnaW4nLCBgPGhyIGNsYXNzPVwiSFVEX3NlcCBIVURfZWxcIj5gKTtcclxuXHJcbiAgLy8gICAgIC8vIHBsYXllckNpdHlcclxuICAvLyAgICAgaG9vazAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfR05fQyBIVURfZWxcIiB0aXRsZT1cIlRoZSBuYW1lIG9mIHRoZSBDaXR5IHlvdSBhcmUgY3VycmVudGx5IGluLlwiPkNpdHkgPC9lbGVtZW50PjxiciBjbGFzcz1cIkhVRF9lbFwiPmApXHJcbiAgLy8gICAgIGNvbG9yQnlDbGFzc05hbWUoXCIuSFVEX0dOX0NcIiwgdGhlbWVbJ2NoYSddKVxyXG4gIC8vICAgICBob29rMS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9HTl9DIEhVRF9lbFwiPiR7cGxheWVyQ2l0eSArICc8YnIgY2xhc3M9XCJIVURfZWxcIj4nfTwvZWxlbWVudD5gKVxyXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9HTl9DXCIsIHRoZW1lWydjaGEnXSlcclxuXHJcbiAgLy8gICAgIC8vIHBsYXllckxvY2F0aW9uXHJcbiAgLy8gICAgIGhvb2swLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxlbGVtZW50IGNsYXNzPVwiSFVEX0dOX0wgSFVEX2VsXCIgdGl0bGU9XCJZb3VyIGN1cnJlbnQgbG9jYXRpb24gaW5zaWRlIHRoZSBjaXR5LlwiPkxvY2F0aW9uIDwvZWxlbWVudD48YnIgY2xhc3M9XCJIVURfZWxcIj5gKVxyXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9HTl9MXCIsIHRoZW1lWydjaGEnXSlcclxuICAvLyAgICAgaG9vazEuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfR05fTCBIVURfZWxcIj4ke3BsYXllckxvY2F0aW9uICsgJzxiciBjbGFzcz1cIkhVRF9lbFwiPid9PC9lbGVtZW50PmApXHJcbiAgLy8gICAgIGNvbG9yQnlDbGFzc05hbWUoXCIuSFVEX0dOX0xcIiwgdGhlbWVbJ2NoYSddKVxyXG5cclxuICAvLyAgICAgLy8gcGxheWVyS2FybWFcclxuICAvLyAgICAgaG9vazAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfS2FybWFfSCBIVURfZWxcIiB0aXRsZT1cIllvdXIga2FybWEuXCI+PGJyPkthcm1hICZuYnNwOyZuYnNwOyZuYnNwOzwvZWxlbWVudD5gKVxyXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LYXJtYV9IXCIsIHRoZW1lWydocCddKVxyXG4gIC8vICAgICBob29rMS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9LYXJtYSBIVURfZWxcIj48YnI+JHtwbGF5ZXJLYXJtYX08L2VsZW1lbnQ+YClcclxuICAvLyAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfS2FybWFcIiwgdGhlbWVbJ2hwJ10pXHJcblxyXG4gIC8vICAgICByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9LaWxsc19IJylcclxuXHJcbiAgLy8gICAgIC8vIHBsYXllcktpbGxzXHJcbiAgLy8gICAgIGhvb2swLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxlbGVtZW50IGNsYXNzPVwiSFVEX0tpbGxzX0ggSFVEX2VsXCIgdGl0bGU9XCJZb3VyIGtpbGwgY291bnQsIGluY3JlYXNlcyBldmVyeSBzdWNjZXNzZnVsIGhvbWljaWRlLlwiPjxicj5LaWxscyAmbmJzcDsmbmJzcDsmbmJzcDs8L2VsZW1lbnQ+YClcclxuICAvLyAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfS2lsbHNfSFwiLCB0aGVtZVsnaHAnXSlcclxuICAvLyAgICAgcmVtb3ZlQnlDbGFzc05hbWUoJy5IVURfS2lsbHMnKVxyXG4gIC8vICAgICBob29rMS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9LaWxscyBIVURfZWxcIj48YnI+JHtwbGF5ZXJLaWxsc308L2VsZW1lbnQ+YClcclxuICAvLyAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfS2lsbHNcIiwgdGhlbWVbJ2hwJ10pXHJcbiAgLy8gICB9IGNhdGNoIChlcnIpIHtcclxuICAvLyAgICAgbnMucHJpbnQoXCJFUlJPUjogVXBkYXRlIFNraXBwZWQ6IFwiICsgU3RyaW5nKGVycikpO1xyXG4gIC8vICAgfVxyXG5cclxuICAvLyAgIG5zLmF0RXhpdChmdW5jdGlvbiAoKSB7IHJlbW92ZUJ5Q2xhc3NOYW1lKCcuSFVEX2VsJyk7IH0pXHJcbiAgLy8gICBhd2FpdCBucy5zbGVlcCgyMDApO1xyXG4gIC8vIH1cclxufSJdfQ==\",\"filename\":\"hud.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"PS-01\",\"PS-02\",\"PS-03\",\"PS-04\",\"PS-05\",\"PS-06\",\"PS-07\",\"PS-08\",\"PS-09\",\"PS-10\",\"PS-11\",\"PS-12\",\"PS-13\",\"PS-14\",\"PS-15\",\"PS-16\",\"PS-17\",\"PS-18\",\"PS-19\",\"PS-20\",\"PS-21\",\"PS-22\",\"PS-23\",\"PS-24\",\"PS-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"super-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1835395591.17457,\"onlineMoneyMade\":304436646051239.4,\"onlineRunningTime\":2062.810000000285,\"ramUsage\":9.05,\"server\":\"home\",\"scriptKey\":\"super-hack.js*[\\\"rho-construction\\\"]\",\"title\":\"super-hack.js rho-construction\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"92.0.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":41421561077,\"moneyMax\":1035539026925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1372,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"62.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49479897921,\"moneyMax\":1236997448025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1166,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"58.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":18012717125,\"moneyMax\":450317928125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1062,\"serverGrowth\":72,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"15.1.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":33303886259,\"moneyMax\":832597156475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":71,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"96.2.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":28685254827,\"moneyMax\":717131370675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":82,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"13.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":16730081015,\"moneyMax\":418252025375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1074,\"serverGrowth\":52,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"41.6.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":13157380491,\"moneyMax\":328934512275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1071,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"77.4.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":24452319823,\"moneyMax\":611307995575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":981,\"serverGrowth\":78,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"75.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":29283784875,\"moneyMax\":732094621875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1034,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"19.7.1.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1432305487,\"moneyMax\":35807637175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1230,\"serverGrowth\":85,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"64.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1594,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"55.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1152199911,\"moneyMax\":28804997775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1059,\"serverGrowth\":76,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"17.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":928621066,\"moneyMax\":23215526650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":64,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"75.0.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":856358037,\"moneyMax\":21408950925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":54,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"37.1.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"helios\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"helios\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":707370204,\"moneyMax\":17684255100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":79,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"93.0.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"vitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"vitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":765928093,\"moneyMax\":19148202325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"12.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":961091966,\"moneyMax\":24027299150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"58.9.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1192576878,\"moneyMax\":29814421950,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":84,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"98.9.9.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"titan-labs\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"titan-labs\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":780316539,\"moneyMax\":19507913475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":78,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"30.9.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"microdyne\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"microdyne\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":589549237,\"moneyMax\":14738730925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":85,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"30.7.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":807676670,\"moneyMax\":20191916750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":901,\"serverGrowth\":75,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"70.4.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":754081166,\"moneyMax\":18852029150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":73,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"77.8.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1158703707,\"moneyMax\":28967592675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"64.4.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"omnia\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"omnia\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":961628512,\"moneyMax\":24040712800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":67,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"56.1.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":1041350246,\"moneyMax\":26033756150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":780,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"12.7.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":858405297,\"moneyMax\":21460132425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":796,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"1.3.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"solaris\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"solaris\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":817364782,\"moneyMax\":20434119550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":71,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"26.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1488222158,\"moneyMax\":37205553950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":51,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"32.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1741086016,\"moneyMax\":43527150400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":86,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"95.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1119119053,\"moneyMax\":27977976325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"56.4.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1489580398,\"moneyMax\":37239509950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"20.7.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1005296604,\"moneyMax\":25132415100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":80,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"57.1.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":720077313,\"moneyMax\":18001932825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":683,\"serverGrowth\":57,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"1.5.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":43.82199999999965,\"minDifficulty\":15,\"moneyAvailable\":1197698.9374820255,\"moneyMax\":16868901675,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":501,\"serverGrowth\":55,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"56.0.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":674358472,\"moneyMax\":16858961800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":505,\"serverGrowth\":52,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"26.3.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":211640075,\"moneyMax\":5291001875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":447,\"serverGrowth\":43,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"84.3.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":186104773,\"moneyMax\":4652619325,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":406,\"serverGrowth\":45,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"9.2.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"zb-institute\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":868243613,\"moneyMax\":21706090325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":75,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"91.7.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":234575731,\"moneyMax\":5864393275,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":473,\"serverGrowth\":57,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"3.9.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":557818977,\"moneyMax\":13945474425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":571,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"0.8.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":373864064,\"moneyMax\":9346601600,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":415,\"serverGrowth\":48,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"92.9.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":186186728,\"moneyMax\":4654668200,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":310,\"serverGrowth\":53,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"89.3.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":232468807,\"moneyMax\":5811720175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":383,\"serverGrowth\":63,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"85.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":60,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"99.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":83501602,\"moneyMax\":2087540050,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":253,\"serverGrowth\":46,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.7.4.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"60.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"69.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"9.0.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"49.7.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"60.4.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"91.9.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"30.3.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"74.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"5.5.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"63.0.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"68.8.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"50.6.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":61925476,\"moneyMax\":1548136900,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":200,\"serverGrowth\":39,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"11.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":59165386,\"moneyMax\":1479134650,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":252,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"80.8.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"64.1.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":482,\"serverGrowth\":42,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"22.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1087,\"serverGrowth\":57,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"13.5.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":676,\"serverGrowth\":57,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"73.9.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":512,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"2.7.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":356,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"86.1.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":205,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"67.8.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":542,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"39.5.8.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":53,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"14.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"6.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"66.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-01\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-01\",\"httpPortOpen\":false,\"ip\":\"87.1.2.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-01\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-01\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-01\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-02\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-02\",\"httpPortOpen\":false,\"ip\":\"5.2.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-02\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-02\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-02\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-03\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-03\",\"httpPortOpen\":false,\"ip\":\"98.9.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-03\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-03\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-03\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-04\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-04\",\"httpPortOpen\":false,\"ip\":\"37.2.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-04\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-04\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-04\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-05\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-05\",\"httpPortOpen\":false,\"ip\":\"2.5.7.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-05\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-05\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-05\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-06\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-06\",\"httpPortOpen\":false,\"ip\":\"80.4.5.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-06\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-06\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-06\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-07\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-07\",\"httpPortOpen\":false,\"ip\":\"38.5.5.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-07\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-07\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-07\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-08\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-08\",\"httpPortOpen\":false,\"ip\":\"77.7.8.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-08\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-08\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-08\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-09\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-09\",\"httpPortOpen\":false,\"ip\":\"88.4.9.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-09\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-09\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-09\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-10\",\"httpPortOpen\":false,\"ip\":\"63.7.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-10\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-11\",\"httpPortOpen\":false,\"ip\":\"66.5.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-11\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-12\",\"httpPortOpen\":false,\"ip\":\"70.9.5.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-12\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-13\",\"httpPortOpen\":false,\"ip\":\"68.1.2.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-13\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-14\",\"httpPortOpen\":false,\"ip\":\"69.2.6.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-14\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-14\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-15\",\"httpPortOpen\":false,\"ip\":\"60.0.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-15\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-15\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-16\",\"httpPortOpen\":false,\"ip\":\"85.9.6.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-16\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-16\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-17\",\"httpPortOpen\":false,\"ip\":\"63.5.4.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-17\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-17\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-18\",\"httpPortOpen\":false,\"ip\":\"33.3.9.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-18\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-18\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-19\",\"httpPortOpen\":false,\"ip\":\"43.0.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-19\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-19\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-20\",\"httpPortOpen\":false,\"ip\":\"99.0.1.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-20\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-20\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-21\",\"httpPortOpen\":false,\"ip\":\"86.2.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-21\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-21\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-22\",\"httpPortOpen\":false,\"ip\":\"18.5.8.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-22\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-22\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-23\",\"httpPortOpen\":false,\"ip\":\"71.5.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-23\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-23\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-24\",\"httpPortOpen\":false,\"ip\":\"84.3.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-24\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-24\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-25\",\"httpPortOpen\":false,\"ip\":\"86.0.7.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuaGFjayh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"hack.js\",\"server\":\"PS-25\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgbGV0IHRhcmdldCA9IFwibjAwZGxlc1wiO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXHJcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xyXG5cclxuICBsZXQgbXMgPSAwO1xyXG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcclxuXHJcbiAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"grow.js\",\"server\":\"PS-25\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLndlYWtlbih0YXJnZXQsIHsgYWRkaXRpb25hbE1zZWM6IG1zIH0pO1xyXG59XHJcbiJdfQ==\",\"filename\":\"weaken.js\",\"server\":\"PS-25\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":61.1049,\"discovery\":\"known\",\"playerReputation\":104443.4564716095}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":57.0862,\"discovery\":\"known\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":9.8163,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":26.3417,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{\"ll\":\"run ll.js\",\"ka\":\"./ka.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; buy Formulas.exe\",\"peek\":\"./execute.js PEEK\",\"sh\":\"./super-hack.js\",\"sa\":\"scan-analyze 10\",\"t\":\"./test.js\",\"kh\":\"./kh.js\",\"eval\":\"./eval.js\",\"sb\":\"./super-break.js\",\"aug\":\"./augs.js\",\"cct\":\"./cct.js\",\"exp\":\"./exp.js\",\"bs\":\"./pserver.js\",\"rep\":\"./rep.js\",\"hud\":\"./hud.js\",\"khud\":\"kill hud.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#918D8B\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.2,\"fontFamily\":\"JetBrainsMono Nerd Font\"},\"overview\":{\"x\":-1,\"y\":1,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"JetBrainsMono NFP\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"","LastExportBonus":"1702269219236","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}