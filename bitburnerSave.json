{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":15,\"max\":15},\"skills\":{\"hacking\":1,\"strength\":58,\"defense\":58,\"dexterity\":58,\"agility\":58,\"charisma\":78,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":2722.079999999991,\"defense\":2722.079999999991,\"dexterity\":2722.079999999991,\"agility\":2722.079999999991,\"charisma\":5444.159999999982,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"hacking_exp\":1,\"strength_exp\":1,\"defense_exp\":1,\"dexterity_exp\":1,\"agility_exp\":1,\"charisma_exp\":1,\"company_rep\":1,\"faction_rep\":1,\"crime_money\":1,\"crime_success\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"work_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"FoodNStuff\":\"Employee\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"FoodNStuff\",\"money\":2995400.9999999963,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2994287.9999999963,\"work\":2994287.9999999963,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2994287.9999999963,\"work\":2994287.9999999963,\"servers\":0,\"other\":0,\"augmentations\":0}},\"playtimeSinceLastAug\":42605800,\"playtimeSinceLastBitnode\":42605800,\"lastAugReset\":-1,\"lastNodeReset\":-1,\"purchasedServers\":[],\"scriptProdSinceLastAug\":0,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1701145827995}],\"terminalCommandHistory\":[\"ls\",\"cat hackers-starting-handbook.lit \",\"\",\"ls\",\"run template.js \",\"connect foodnstuff\",\"connect\",\"home\",\"run template.js \",\"ps\",\"run template.js \",\"ls\",\"run table.js\",\"dir\",\"ls\",\"run tables.js \",\"ls\",\"run tables.js \",\"run template.js \",\"run connected.js \",\"ls\",\"run connected.js \",\"ls\",\"run connected.js \",\"ls\",\"./connected.js \"],\"lastUpdate\":1701183632396,\"lastSave\":1701183623258,\"totalPlaytime\":42605800,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"68b2bba17d5b1\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"50.8.4.7\",\"isConnectedTo\":true,\"maxRam\":8,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"tables.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const HEADER = 0; // Index of the header styles\\r\\nconst DIVIDER = 1; // Index of the horizontal divider style\\r\\nconst FOOTER = 2; // Index of the footer style\\r\\nconst OPENER = 0; // Index of the opener line character\\r\\nconst SEPARATOR = 1; // Index of the separator line character (where columns meet)\\r\\nconst CLOSER = 2; // Index of the closer line character\\r\\nconst FILLER = 3; // Index of the filler line character\\r\\nconst BAR = 4; // Index of the straight vertical bar line character\\r\\nexport let win = globalThis, doc = win[\\\"document\\\"];\\r\\nlet fmt = Intl.NumberFormat('en', { notation: 'compact' });\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    // Some sample data, basic information on root servers\\r\\n    // Note that if you want color, you need to use ColorPrint as the printing function\\r\\n    // Colored cells need to be an object with color and text, instead of \\\"any\\\".. Red cell example here\\r\\n    let data = ns.scan('home').map(s => [{ color: 'red', text: s }, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]);\\r\\n    // For bold we need to correct the spacing... Sketch AF, not sure how else.\\r\\n    // let boldText = 'bold text example blah';\\r\\n    // let spacing = -0.00666666666666666666666666666667 * boldText.length;\\r\\n    data.push([\\r\\n        { style: { color: 'red' }, text: 'nope' },\\r\\n        //{ style: { color: 'red', fontWeight: 'bold', letterSpacing: spacing }, text: boldText },\\r\\n        { style: { color: 'white', fontStyle: 'italic' }, text: 'italic text' },\\r\\n        { style: { color: 'white', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }, text: 'strikethrough text' }\\r\\n    ]);\\r\\n    // Free style, no columns, the table adjusts to contents\\r\\n    PrintTable(ns, data, undefined, DefaultStyle(), ColorPrint);\\r\\n    // Example of adding a break line in the middle of the table:\\r\\n    // data.push(null);\\r\\n    // data.push(...ns.scan('sigma-cosmetics').slice(1).map(s => [s, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]));\\r\\n    // We use pre-defined columns\\r\\n    // header: The text to display\\r\\n    // width : Width of the column content\\r\\n    // pad   : 0 for center, < 0 for left, > 0 for right\\r\\n    const columns = [\\r\\n        { header: 'Servers', width: 40 },\\r\\n        { header: 'Ram', width: 13 },\\r\\n        { header: 'Money', width: 20 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\nexport function PrintTable(ns, data, columns, style = DefaultStyle(), printfunc = ns.print) {\\r\\n    // if (printfunc != ns.print)\\r\\n    // \\tprintfunc = ns.tprint; // Temp fix until I get ansi colors working\\r\\n    // Create default columns if no definition were provided\\r\\n    let columnsProvided = true;\\r\\n    if (columns == undefined) {\\r\\n        columnsProvided = false;\\r\\n        columns = [];\\r\\n        for (let i = 0; i < data[0].length; i++) {\\r\\n            let longest = 0;\\r\\n            for (let ii = 0; ii < data.length; ii++) {\\r\\n                if (data[ii] == null)\\r\\n                    continue;\\r\\n                let len = data[ii][i].text != undefined ? data[ii][i].text.length : data[ii][i].toString().length;\\r\\n                if (len > longest)\\r\\n                    longest = len;\\r\\n            }\\r\\n            columns.push({ header: '', width: longest, padHeader: 0, padContent: 0 });\\r\\n        }\\r\\n    }\\r\\n    PrintBorder(ns, columns, style[HEADER], printfunc);\\r\\n    if (columnsProvided) {\\r\\n        PrintHeader(ns, columns, style[HEADER], printfunc);\\r\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\r\\n    }\\r\\n    let i = 0;\\r\\n    for (const line of data) {\\r\\n        PrintLine(ns, columns, line, style, printfunc, i++ % 2 == 0);\\r\\n    }\\r\\n    PrintBorder(ns, columns, style[FOOTER], printfunc);\\r\\n}\\r\\nexport function DefaultStyle() {\\r\\n    return [\\r\\n        ['╭', '┬', '╮', '─', '│'],\\r\\n        ['├', '┼', '┤', '─', '│'],\\r\\n        ['╰', '┴', '╯', '─', '│']\\r\\n    ];\\r\\n}\\r\\nfunction PrintBorder(ns, columns, style, printfunc = ns.print) {\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[OPENER]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        printStack.push('white', ''.padEnd(columns[c].width, style[FILLER]));\\r\\n        if (c == columns.length - 1)\\r\\n            printStack.push('white', style[CLOSER]);\\r\\n        else\\r\\n            printStack.push('white', style[SEPARATOR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nfunction PrintHeader(ns, columns, style, printfunc = ns.print) {\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[BAR]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        printStack.push('white', columns[c].header.padEnd(columns[c].width));\\r\\n        printStack.push('white', style[BAR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nfunction PrintLine(ns, columns, data, style, printfunc = ns.print, highlight) {\\r\\n    if (data == null) {\\r\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\r\\n        return;\\r\\n    }\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[0][BAR]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        if (data[c].style != undefined)\\r\\n            printStack.push({ style: data[c].style }, data[c].text.padEnd(columns[c].width));\\r\\n        else if (data[c].color != undefined)\\r\\n            printStack.push(CreateStyle(data[c].color, highlight), data[c].text.padEnd(columns[c].width));\\r\\n        else\\r\\n            printStack.push(CreateStyle('white', highlight), data[c].toString().padEnd(columns[c].width));\\r\\n        printStack.push('white', style[0][BAR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nexport function CreateStyle(color, highlight) {\\r\\n    //return color;\\r\\n    let backColor = highlight ? '#000000' : '#1A1A1A';\\r\\n    return { style: { color: color, backgroundColor: backColor } };\\r\\n}\\r\\nfunction PrintStack(ns, printStack, printfunc) {\\r\\n    if (printfunc == ns.tprint || printfunc == ns.print || printfunc == ns.tprintf) {\\r\\n        ColorPrint(ns, printStack, false);\\r\\n    }\\r\\n    else {\\r\\n        printfunc(ns, printStack, true);\\r\\n    }\\r\\n}\\r\\n// Selects a color based on a 1-based percentage\\r\\nexport function pctColor(pct) {\\r\\n    if (pct >= 1)\\r\\n        return 'Lime';\\r\\n    else if (pct >= 0.9)\\r\\n        return 'Green';\\r\\n    else if (pct >= 0.75)\\r\\n        return 'DarkGreen';\\r\\n    else if (pct >= 0.6)\\r\\n        return 'GreenYellow';\\r\\n    else if (pct >= 0.3)\\r\\n        return 'Yellow';\\r\\n    else if (pct != 0)\\r\\n        return 'DarkOrange';\\r\\n    return 'Red';\\r\\n}\\r\\n// Usage: ColorPrint(ns, ['red', 'This is some red text', '#FFFFFF', ' This is some white text], true);\\r\\nexport function ColorPrint(ns, stack, toTerminal = true) {\\r\\n    let out = '';\\r\\n    for (let i = 0; i < stack.length; i += 2) {\\r\\n        let style = stack[i];\\r\\n        if (style.style == undefined) {\\r\\n            style = { style: { color: stack[i], backgroundColor: '#000000' } };\\r\\n        }\\r\\n        let color = style;\\r\\n        if (style.style)\\r\\n            color = style.style.color;\\r\\n        let match = COLORS.find(s => s.html == color || s.desc.toLowerCase() == color.toLowerCase());\\r\\n        if (!match && color.startsWith('#'))\\r\\n            match = FindHtmlColorEquivalent(ns, color);\\r\\n        if (!match)\\r\\n            match = COLORS.find(s => s.desc.toLowerCase().startsWith(color.toLowerCase()));\\r\\n        if (match)\\r\\n            color = '\\\\x1b[38;5;' + match.ansi + 'm';\\r\\n        else\\r\\n            ns.tprint('FAIL: unsupported color: ' + color);\\r\\n        let text = stack[i + 1].replace('%', '%%');\\r\\n        out = out + color + text;\\r\\n    }\\r\\n    if (toTerminal)\\r\\n        ns.tprintf(out);\\r\\n    else\\r\\n        ns.printf(out);\\r\\n}\\r\\n// ANSI colors supported by the game are 256 colors, HTML color is RGB\\r\\n// This functions finds the closest match to a full range HTML color code in the 256 color ANSI colors we have to work with\\r\\nfunction FindHtmlColorEquivalent(ns, htmlCode) {\\r\\n    let copy = COLORS.map(s => s);\\r\\n    copy.sort(function (a, b) {\\r\\n        let ca = rgbFromHtml(a.html);\\r\\n        let cb = rgbFromHtml(b.html);\\r\\n        let col = rgbFromHtml(htmlCode);\\r\\n        let oa = Math.abs(ca.r - col.r) + Math.abs(ca.g - col.g) + Math.abs(ca.b - col.b);\\r\\n        let ob = Math.abs(cb.r - col.r) + Math.abs(cb.g - col.g) + Math.abs(cb.b - col.b);\\r\\n        return oa - ob;\\r\\n    });\\r\\n    return copy[0];\\r\\n}\\r\\n// Converts a hexadecimal HTML color back to RGB int values\\r\\nfunction rgbFromHtml(htmlCode) {\\r\\n    let r = Number.parseInt('0x' + htmlCode.substr(1, 2));\\r\\n    let g = Number.parseInt('0x' + htmlCode.substr(3, 2));\\r\\n    let b = Number.parseInt('0x' + htmlCode.substr(5, 2));\\r\\n    return { r: r, g: g, b: b };\\r\\n}\\r\\n/**\\r\\n * @param {ns}\\r\\n * @param {Array} JSON DATA in form of [{id:1,name:\\\"Lexicon\\\"},{id:2,name:\\\"Paradox\\\"}]\\r\\n * @param {Array} pass an array of columns\\r\\n * @returns {HTMLTableElement} Returns a HTMLTableElement that you can use DOM.appendChild(table);\\r\\n */\\r\\nexport function createHTMLTableFromJSON(ns, data, columns) {\\r\\n    var formattedData = JSON.parse(JSON.stringify(data, columns));\\r\\n    var col = [];\\r\\n    for (var i = 0; i < formattedData.length; i++) {\\r\\n        for (var key in formattedData[i]) {\\r\\n            if (col.indexOf(key) === -1) {\\r\\n                col.push(key);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    var table = doc.createElement(\\\"table\\\");\\r\\n    table.style.width = '100%';\\r\\n    var tr = table.insertRow(-1); // TABLE ROW.\\r\\n    for (var i = 0; i < col.length; i++) {\\r\\n        var th = doc.createElement(\\\"th\\\"); // TABLE HEADER.\\r\\n        th.innerHTML = col[i];\\r\\n        tr.appendChild(th);\\r\\n    }\\r\\n    for (var i = 0; i < formattedData.length; i++) {\\r\\n        tr = table.insertRow(-1);\\r\\n        for (var j = 0; j < col.length; j++) {\\r\\n            var tabCell = tr.insertCell(-1);\\r\\n            if (typeof (formattedData[i][col[j]]) == 'number') {\\r\\n                var number = formattedData[i][col[j]];\\r\\n                if (number > 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"green\\\");\\r\\n                else if (number == 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"white\\\");\\r\\n                else if (number < 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"red\\\");\\r\\n            }\\r\\n            else {\\r\\n                tabCell.innerHTML = formattedData[i][col[j]];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return table;\\r\\n}\\r\\nlet addHtmlWithColor = (tag, data, color) => {\\r\\n    return \\\"<\\\" + tag + \\\" style='color:\\\" + color + \\\"'>\\\" + data + \\\"</\\\" + tag + \\\">\\\";\\r\\n};\\r\\nexport let COLORS = [\\r\\n    {\\r\\n        \\\"ansi\\\": 0,\\r\\n        \\\"desc\\\": \\\"Grey\\\",\\r\\n        \\\"html\\\": \\\"#808080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 1,\\r\\n        \\\"desc\\\": \\\"Red\\\",\\r\\n        \\\"html\\\": \\\"#ff0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 2,\\r\\n        \\\"desc\\\": \\\"Lime\\\",\\r\\n        \\\"html\\\": \\\"#00ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 3,\\r\\n        \\\"desc\\\": \\\"Yellow\\\",\\r\\n        \\\"html\\\": \\\"#ffff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 4,\\r\\n        \\\"desc\\\": \\\"Blue\\\",\\r\\n        \\\"html\\\": \\\"#0000ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 5,\\r\\n        \\\"desc\\\": \\\"Fuchsia\\\",\\r\\n        \\\"html\\\": \\\"#ff00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 6,\\r\\n        \\\"desc\\\": \\\"Aqua\\\",\\r\\n        \\\"html\\\": \\\"#00ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 7,\\r\\n        \\\"desc\\\": \\\"White\\\",\\r\\n        \\\"html\\\": \\\"#ffffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 8,\\r\\n        \\\"desc\\\": \\\"Black\\\",\\r\\n        \\\"html\\\": \\\"#000000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 9,\\r\\n        \\\"desc\\\": \\\"Maroon\\\",\\r\\n        \\\"html\\\": \\\"#800000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 10,\\r\\n        \\\"desc\\\": \\\"Green\\\",\\r\\n        \\\"html\\\": \\\"#008000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,128,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 11,\\r\\n        \\\"desc\\\": \\\"Olive\\\",\\r\\n        \\\"html\\\": \\\"#808000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 12,\\r\\n        \\\"desc\\\": \\\"Navy\\\",\\r\\n        \\\"html\\\": \\\"#000080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 13,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#800080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,0,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 14,\\r\\n        \\\"desc\\\": \\\"Teal\\\",\\r\\n        \\\"html\\\": \\\"#008080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 15,\\r\\n        \\\"desc\\\": \\\"Silver\\\",\\r\\n        \\\"html\\\": \\\"#c0c0c0\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(192,192,192)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,75%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 16,\\r\\n        \\\"desc\\\": \\\"Grey0\\\",\\r\\n        \\\"html\\\": \\\"#000000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 17,\\r\\n        \\\"desc\\\": \\\"NavyBlue\\\",\\r\\n        \\\"html\\\": \\\"#00005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 18,\\r\\n        \\\"desc\\\": \\\"DarkBlue\\\",\\r\\n        \\\"html\\\": \\\"#000087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 19,\\r\\n        \\\"desc\\\": \\\"Blue3\\\",\\r\\n        \\\"html\\\": \\\"#0000af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 20,\\r\\n        \\\"desc\\\": \\\"Blue3\\\",\\r\\n        \\\"html\\\": \\\"#0000d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 21,\\r\\n        \\\"desc\\\": \\\"Blue1\\\",\\r\\n        \\\"html\\\": \\\"#0000ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 22,\\r\\n        \\\"desc\\\": \\\"DarkGreen\\\",\\r\\n        \\\"html\\\": \\\"#005f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 23,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 24,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(97,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 25,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(07,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 26,\\r\\n        \\\"desc\\\": \\\"DodgerBlue3\\\",\\r\\n        \\\"html\\\": \\\"#005fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(13,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 27,\\r\\n        \\\"desc\\\": \\\"DodgerBlue2\\\",\\r\\n        \\\"html\\\": \\\"#005fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(17,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 28,\\r\\n        \\\"desc\\\": \\\"Green4\\\",\\r\\n        \\\"html\\\": \\\"#008700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 29,\\r\\n        \\\"desc\\\": \\\"SpringGreen4\\\",\\r\\n        \\\"html\\\": \\\"#00875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(62,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 30,\\r\\n        \\\"desc\\\": \\\"Turquoise4\\\",\\r\\n        \\\"html\\\": \\\"#008787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 31,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#0087af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(93,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 32,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#0087d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(02,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 33,\\r\\n        \\\"desc\\\": \\\"DodgerBlue1\\\",\\r\\n        \\\"html\\\": \\\"#0087ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(08,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 34,\\r\\n        \\\"desc\\\": \\\"Green3\\\",\\r\\n        \\\"html\\\": \\\"#00af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 35,\\r\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\r\\n        \\\"html\\\": \\\"#00af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(52,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 36,\\r\\n        \\\"desc\\\": \\\"DarkCyan\\\",\\r\\n        \\\"html\\\": \\\"#00af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(66,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 37,\\r\\n        \\\"desc\\\": \\\"LightSeaGreen\\\",\\r\\n        \\\"html\\\": \\\"#00afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 38,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue2\\\",\\r\\n        \\\"html\\\": \\\"#00afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(91,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 39,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#00afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(98,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 40,\\r\\n        \\\"desc\\\": \\\"Green3\\\",\\r\\n        \\\"html\\\": \\\"#00d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 41,\\r\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\r\\n        \\\"html\\\": \\\"#00d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(46,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 42,\\r\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\r\\n        \\\"html\\\": \\\"#00d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(57,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 43,\\r\\n        \\\"desc\\\": \\\"Cyan3\\\",\\r\\n        \\\"html\\\": \\\"#00d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(68,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 44,\\r\\n        \\\"desc\\\": \\\"DarkTurquoise\\\",\\r\\n        \\\"html\\\": \\\"#00d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 45,\\r\\n        \\\"desc\\\": \\\"Turquoise2\\\",\\r\\n        \\\"html\\\": \\\"#00d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(89,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 46,\\r\\n        \\\"desc\\\": \\\"Green1\\\",\\r\\n        \\\"html\\\": \\\"#00ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 47,\\r\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\r\\n        \\\"html\\\": \\\"#00ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(42,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 48,\\r\\n        \\\"desc\\\": \\\"SpringGreen1\\\",\\r\\n        \\\"html\\\": \\\"#00ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(51,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 49,\\r\\n        \\\"desc\\\": \\\"MediumSpringGreen\\\",\\r\\n        \\\"html\\\": \\\"#00ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(61,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 50,\\r\\n        \\\"desc\\\": \\\"Cyan2\\\",\\r\\n        \\\"html\\\": \\\"#00ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(70,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 51,\\r\\n        \\\"desc\\\": \\\"Cyan1\\\",\\r\\n        \\\"html\\\": \\\"#00ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 52,\\r\\n        \\\"desc\\\": \\\"DarkRed\\\",\\r\\n        \\\"html\\\": \\\"#5f0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 53,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#5f005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 54,\\r\\n        \\\"desc\\\": \\\"Purple4\\\",\\r\\n        \\\"html\\\": \\\"#5f0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(82,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 55,\\r\\n        \\\"desc\\\": \\\"Purple4\\\",\\r\\n        \\\"html\\\": \\\"#5f00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(72,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 56,\\r\\n        \\\"desc\\\": \\\"Purple3\\\",\\r\\n        \\\"html\\\": \\\"#5f00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(66,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 57,\\r\\n        \\\"desc\\\": \\\"BlueViolet\\\",\\r\\n        \\\"html\\\": \\\"#5f00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(62,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 58,\\r\\n        \\\"desc\\\": \\\"Orange4\\\",\\r\\n        \\\"html\\\": \\\"#5f5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 59,\\r\\n        \\\"desc\\\": \\\"Grey37\\\",\\r\\n        \\\"html\\\": \\\"#5f5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 60,\\r\\n        \\\"desc\\\": \\\"MediumPurple4\\\",\\r\\n        \\\"html\\\": \\\"#5f5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 61,\\r\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 62,\\r\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 63,\\r\\n        \\\"desc\\\": \\\"RoyalBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5f5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 64,\\r\\n        \\\"desc\\\": \\\"Chartreuse4\\\",\\r\\n        \\\"html\\\": \\\"#5f8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 65,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\r\\n        \\\"html\\\": \\\"#5f875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 66,\\r\\n        \\\"desc\\\": \\\"PaleTurquoise4\\\",\\r\\n        \\\"html\\\": \\\"#5f8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 67,\\r\\n        \\\"desc\\\": \\\"SteelBlue\\\",\\r\\n        \\\"html\\\": \\\"#5f87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 68,\\r\\n        \\\"desc\\\": \\\"SteelBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(220,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 69,\\r\\n        \\\"desc\\\": \\\"CornflowerBlue\\\",\\r\\n        \\\"html\\\": \\\"#5f87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(225,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 70,\\r\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\r\\n        \\\"html\\\": \\\"#5faf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 71,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\r\\n        \\\"html\\\": \\\"#5faf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 72,\\r\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\r\\n        \\\"html\\\": \\\"#5faf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 73,\\r\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\r\\n        \\\"html\\\": \\\"#5fafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 74,\\r\\n        \\\"desc\\\": \\\"SkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5fafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(200,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 75,\\r\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5fafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 76,\\r\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\r\\n        \\\"html\\\": \\\"#5fd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(3,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 77,\\r\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\r\\n        \\\"html\\\": \\\"#5fd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 78,\\r\\n        \\\"desc\\\": \\\"SeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#5fd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(140,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 79,\\r\\n        \\\"desc\\\": \\\"Aquamarine3\\\",\\r\\n        \\\"html\\\": \\\"#5fd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(160,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 80,\\r\\n        \\\"desc\\\": \\\"MediumTurquoise\\\",\\r\\n        \\\"html\\\": \\\"#5fd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 81,\\r\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5fd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(195,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 82,\\r\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\r\\n        \\\"html\\\": \\\"#5fff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 83,\\r\\n        \\\"desc\\\": \\\"SeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#5fff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 84,\\r\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#5fff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(135,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 85,\\r\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#5fffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 86,\\r\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\r\\n        \\\"html\\\": \\\"#5fffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(165,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 87,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray2\\\",\\r\\n        \\\"html\\\": \\\"#5fffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 88,\\r\\n        \\\"desc\\\": \\\"DarkRed\\\",\\r\\n        \\\"html\\\": \\\"#870000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 89,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#87005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(17,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 90,\\r\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\r\\n        \\\"html\\\": \\\"#870087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 91,\\r\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\r\\n        \\\"html\\\": \\\"#8700af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(86,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 92,\\r\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\r\\n        \\\"html\\\": \\\"#8700d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(77,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 93,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#8700ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(71,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 94,\\r\\n        \\\"desc\\\": \\\"Orange4\\\",\\r\\n        \\\"html\\\": \\\"#875f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 95,\\r\\n        \\\"desc\\\": \\\"LightPink4\\\",\\r\\n        \\\"html\\\": \\\"#875f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 96,\\r\\n        \\\"desc\\\": \\\"Plum4\\\",\\r\\n        \\\"html\\\": \\\"#875f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 97,\\r\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\r\\n        \\\"html\\\": \\\"#875faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 98,\\r\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\r\\n        \\\"html\\\": \\\"#875fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(260,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 99,\\r\\n        \\\"desc\\\": \\\"SlateBlue1\\\",\\r\\n        \\\"html\\\": \\\"#875fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(255,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 100,\\r\\n        \\\"desc\\\": \\\"Yellow4\\\",\\r\\n        \\\"html\\\": \\\"#878700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 101,\\r\\n        \\\"desc\\\": \\\"Wheat4\\\",\\r\\n        \\\"html\\\": \\\"#87875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 102,\\r\\n        \\\"desc\\\": \\\"Grey53\\\",\\r\\n        \\\"html\\\": \\\"#878787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 103,\\r\\n        \\\"desc\\\": \\\"LightSlateGrey\\\",\\r\\n        \\\"html\\\": \\\"#8787af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 104,\\r\\n        \\\"desc\\\": \\\"MediumPurple\\\",\\r\\n        \\\"html\\\": \\\"#8787d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 105,\\r\\n        \\\"desc\\\": \\\"LightSlateBlue\\\",\\r\\n        \\\"html\\\": \\\"#8787ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 106,\\r\\n        \\\"desc\\\": \\\"Yellow4\\\",\\r\\n        \\\"html\\\": \\\"#87af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(3,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 107,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 108,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen\\\",\\r\\n        \\\"html\\\": \\\"#87af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 109,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#87afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 110,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#87afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 111,\\r\\n        \\\"desc\\\": \\\"SkyBlue2\\\",\\r\\n        \\\"html\\\": \\\"#87afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(220,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 112,\\r\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\r\\n        \\\"html\\\": \\\"#87d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 113,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(100,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 114,\\r\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 115,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 116,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray3\\\",\\r\\n        \\\"html\\\": \\\"#87d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 117,\\r\\n        \\\"desc\\\": \\\"SkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#87d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(200,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 118,\\r\\n        \\\"desc\\\": \\\"Chartreuse1\\\",\\r\\n        \\\"html\\\": \\\"#87ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 119,\\r\\n        \\\"desc\\\": \\\"LightGreen\\\",\\r\\n        \\\"html\\\": \\\"#87ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(105,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 120,\\r\\n        \\\"desc\\\": \\\"LightGreen\\\",\\r\\n        \\\"html\\\": \\\"#87ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 121,\\r\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\r\\n        \\\"html\\\": \\\"#87ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(140,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 122,\\r\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\r\\n        \\\"html\\\": \\\"#87ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(160,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 123,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray1\\\",\\r\\n        \\\"html\\\": \\\"#87ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 124,\\r\\n        \\\"desc\\\": \\\"Red3\\\",\\r\\n        \\\"html\\\": \\\"#af0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 125,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#af005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(27,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 126,\\r\\n        \\\"desc\\\": \\\"MediumVioletRed\\\",\\r\\n        \\\"html\\\": \\\"#af0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(13,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 127,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#af00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 128,\\r\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\r\\n        \\\"html\\\": \\\"#af00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(88,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 129,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#af00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(81,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 130,\\r\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\r\\n        \\\"html\\\": \\\"#af5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 131,\\r\\n        \\\"desc\\\": \\\"IndianRed\\\",\\r\\n        \\\"html\\\": \\\"#af5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 132,\\r\\n        \\\"desc\\\": \\\"HotPink3\\\",\\r\\n        \\\"html\\\": \\\"#af5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 133,\\r\\n        \\\"desc\\\": \\\"MediumOrchid3\\\",\\r\\n        \\\"html\\\": \\\"#af5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 134,\\r\\n        \\\"desc\\\": \\\"MediumOrchid\\\",\\r\\n        \\\"html\\\": \\\"#af5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(280,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 135,\\r\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\r\\n        \\\"html\\\": \\\"#af5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 136,\\r\\n        \\\"desc\\\": \\\"DarkGoldenrod\\\",\\r\\n        \\\"html\\\": \\\"#af8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(6,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 137,\\r\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\r\\n        \\\"html\\\": \\\"#af875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 138,\\r\\n        \\\"desc\\\": \\\"RosyBrown\\\",\\r\\n        \\\"html\\\": \\\"#af8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 139,\\r\\n        \\\"desc\\\": \\\"Grey63\\\",\\r\\n        \\\"html\\\": \\\"#af87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 140,\\r\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\r\\n        \\\"html\\\": \\\"#af87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 141,\\r\\n        \\\"desc\\\": \\\"MediumPurple1\\\",\\r\\n        \\\"html\\\": \\\"#af87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(260,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 142,\\r\\n        \\\"desc\\\": \\\"Gold3\\\",\\r\\n        \\\"html\\\": \\\"#afaf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 143,\\r\\n        \\\"desc\\\": \\\"DarkKhaki\\\",\\r\\n        \\\"html\\\": \\\"#afaf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 144,\\r\\n        \\\"desc\\\": \\\"NavajoWhite3\\\",\\r\\n        \\\"html\\\": \\\"#afaf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 145,\\r\\n        \\\"desc\\\": \\\"Grey69\\\",\\r\\n        \\\"html\\\": \\\"#afafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 146,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue3\\\",\\r\\n        \\\"html\\\": \\\"#afafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 147,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue\\\",\\r\\n        \\\"html\\\": \\\"#afafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 148,\\r\\n        \\\"desc\\\": \\\"Yellow3\\\",\\r\\n        \\\"html\\\": \\\"#afd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 149,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#afd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(80,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 150,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#afd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 151,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 152,\\r\\n        \\\"desc\\\": \\\"LightCyan3\\\",\\r\\n        \\\"html\\\": \\\"#afd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 153,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#afd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 154,\\r\\n        \\\"desc\\\": \\\"GreenYellow\\\",\\r\\n        \\\"html\\\": \\\"#afff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 155,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 156,\\r\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\r\\n        \\\"html\\\": \\\"#afff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(100,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 157,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 158,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#afffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 159,\\r\\n        \\\"desc\\\": \\\"PaleTurquoise1\\\",\\r\\n        \\\"html\\\": \\\"#afffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 160,\\r\\n        \\\"desc\\\": \\\"Red3\\\",\\r\\n        \\\"html\\\": \\\"#d70000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 161,\\r\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\r\\n        \\\"html\\\": \\\"#d7005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(33,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 162,\\r\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\r\\n        \\\"html\\\": \\\"#d70087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(22,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 163,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#d700af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(11,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 164,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#d700d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 165,\\r\\n        \\\"desc\\\": \\\"Magenta2\\\",\\r\\n        \\\"html\\\": \\\"#d700ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 166,\\r\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\r\\n        \\\"html\\\": \\\"#d75f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(6,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 167,\\r\\n        \\\"desc\\\": \\\"IndianRed\\\",\\r\\n        \\\"html\\\": \\\"#d75f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 168,\\r\\n        \\\"desc\\\": \\\"HotPink3\\\",\\r\\n        \\\"html\\\": \\\"#d75f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(340,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 169,\\r\\n        \\\"desc\\\": \\\"HotPink2\\\",\\r\\n        \\\"html\\\": \\\"#d75faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(320,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 170,\\r\\n        \\\"desc\\\": \\\"Orchid\\\",\\r\\n        \\\"html\\\": \\\"#d75fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 171,\\r\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\r\\n        \\\"html\\\": \\\"#d75fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(285,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 172,\\r\\n        \\\"desc\\\": \\\"Orange3\\\",\\r\\n        \\\"html\\\": \\\"#d78700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 173,\\r\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\r\\n        \\\"html\\\": \\\"#d7875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(20,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 174,\\r\\n        \\\"desc\\\": \\\"LightPink3\\\",\\r\\n        \\\"html\\\": \\\"#d78787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 175,\\r\\n        \\\"desc\\\": \\\"Pink3\\\",\\r\\n        \\\"html\\\": \\\"#d787af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 176,\\r\\n        \\\"desc\\\": \\\"Plum3\\\",\\r\\n        \\\"html\\\": \\\"#d787d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 177,\\r\\n        \\\"desc\\\": \\\"Violet\\\",\\r\\n        \\\"html\\\": \\\"#d787ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(280,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 178,\\r\\n        \\\"desc\\\": \\\"Gold3\\\",\\r\\n        \\\"html\\\": \\\"#d7af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 179,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod3\\\",\\r\\n        \\\"html\\\": \\\"#d7af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(40,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 180,\\r\\n        \\\"desc\\\": \\\"Tan\\\",\\r\\n        \\\"html\\\": \\\"#d7af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 181,\\r\\n        \\\"desc\\\": \\\"MistyRose3\\\",\\r\\n        \\\"html\\\": \\\"#d7afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 182,\\r\\n        \\\"desc\\\": \\\"Thistle3\\\",\\r\\n        \\\"html\\\": \\\"#d7afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 183,\\r\\n        \\\"desc\\\": \\\"Plum2\\\",\\r\\n        \\\"html\\\": \\\"#d7afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 184,\\r\\n        \\\"desc\\\": \\\"Yellow3\\\",\\r\\n        \\\"html\\\": \\\"#d7d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 185,\\r\\n        \\\"desc\\\": \\\"Khaki3\\\",\\r\\n        \\\"html\\\": \\\"#d7d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 186,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#d7d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 187,\\r\\n        \\\"desc\\\": \\\"LightYellow3\\\",\\r\\n        \\\"html\\\": \\\"#d7d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 188,\\r\\n        \\\"desc\\\": \\\"Grey84\\\",\\r\\n        \\\"html\\\": \\\"#d7d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 189,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#d7d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 190,\\r\\n        \\\"desc\\\": \\\"Yellow2\\\",\\r\\n        \\\"html\\\": \\\"#d7ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(9,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 191,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(75,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 192,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(80,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 193,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 194,\\r\\n        \\\"desc\\\": \\\"Honeydew2\\\",\\r\\n        \\\"html\\\": \\\"#d7ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 195,\\r\\n        \\\"desc\\\": \\\"LightCyan1\\\",\\r\\n        \\\"html\\\": \\\"#d7ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 196,\\r\\n        \\\"desc\\\": \\\"Red1\\\",\\r\\n        \\\"html\\\": \\\"#ff0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 197,\\r\\n        \\\"desc\\\": \\\"DeepPink2\\\",\\r\\n        \\\"html\\\": \\\"#ff005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(37,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 198,\\r\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\r\\n        \\\"html\\\": \\\"#ff0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(28,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 199,\\r\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\r\\n        \\\"html\\\": \\\"#ff00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(18,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 200,\\r\\n        \\\"desc\\\": \\\"Magenta2\\\",\\r\\n        \\\"html\\\": \\\"#ff00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(09,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 201,\\r\\n        \\\"desc\\\": \\\"Magenta1\\\",\\r\\n        \\\"html\\\": \\\"#ff00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 202,\\r\\n        \\\"desc\\\": \\\"OrangeRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 203,\\r\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 204,\\r\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(345,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 205,\\r\\n        \\\"desc\\\": \\\"HotPink\\\",\\r\\n        \\\"html\\\": \\\"#ff5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 206,\\r\\n        \\\"desc\\\": \\\"HotPink\\\",\\r\\n        \\\"html\\\": \\\"#ff5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(315,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 207,\\r\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\r\\n        \\\"html\\\": \\\"#ff5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 208,\\r\\n        \\\"desc\\\": \\\"DarkOrange\\\",\\r\\n        \\\"html\\\": \\\"#ff8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 209,\\r\\n        \\\"desc\\\": \\\"Salmon1\\\",\\r\\n        \\\"html\\\": \\\"#ff875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(15,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 210,\\r\\n        \\\"desc\\\": \\\"LightCoral\\\",\\r\\n        \\\"html\\\": \\\"#ff8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 211,\\r\\n        \\\"desc\\\": \\\"PaleVioletRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(340,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 212,\\r\\n        \\\"desc\\\": \\\"Orchid2\\\",\\r\\n        \\\"html\\\": \\\"#ff87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(320,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 213,\\r\\n        \\\"desc\\\": \\\"Orchid1\\\",\\r\\n        \\\"html\\\": \\\"#ff87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 214,\\r\\n        \\\"desc\\\": \\\"Orange1\\\",\\r\\n        \\\"html\\\": \\\"#ffaf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 215,\\r\\n        \\\"desc\\\": \\\"SandyBrown\\\",\\r\\n        \\\"html\\\": \\\"#ffaf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 216,\\r\\n        \\\"desc\\\": \\\"LightSalmon1\\\",\\r\\n        \\\"html\\\": \\\"#ffaf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(20,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 217,\\r\\n        \\\"desc\\\": \\\"LightPink1\\\",\\r\\n        \\\"html\\\": \\\"#ffafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 218,\\r\\n        \\\"desc\\\": \\\"Pink1\\\",\\r\\n        \\\"html\\\": \\\"#ffafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 219,\\r\\n        \\\"desc\\\": \\\"Plum1\\\",\\r\\n        \\\"html\\\": \\\"#ffafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 220,\\r\\n        \\\"desc\\\": \\\"Gold1\\\",\\r\\n        \\\"html\\\": \\\"#ffd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 221,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#ffd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(45,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 222,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#ffd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(40,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 223,\\r\\n        \\\"desc\\\": \\\"NavajoWhite1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 224,\\r\\n        \\\"desc\\\": \\\"MistyRose1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 225,\\r\\n        \\\"desc\\\": \\\"Thistle1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 226,\\r\\n        \\\"desc\\\": \\\"Yellow1\\\",\\r\\n        \\\"html\\\": \\\"#ffff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 227,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod1\\\",\\r\\n        \\\"html\\\": \\\"#ffff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 228,\\r\\n        \\\"desc\\\": \\\"Khaki1\\\",\\r\\n        \\\"html\\\": \\\"#ffff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 229,\\r\\n        \\\"desc\\\": \\\"Wheat1\\\",\\r\\n        \\\"html\\\": \\\"#ffffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 230,\\r\\n        \\\"desc\\\": \\\"Cornsilk1\\\",\\r\\n        \\\"html\\\": \\\"#ffffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 231,\\r\\n        \\\"desc\\\": \\\"Grey100\\\",\\r\\n        \\\"html\\\": \\\"#ffffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 232,\\r\\n        \\\"desc\\\": \\\"Grey3\\\",\\r\\n        \\\"html\\\": \\\"#080808\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(8,8,8)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,3%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 233,\\r\\n        \\\"desc\\\": \\\"Grey7\\\",\\r\\n        \\\"html\\\": \\\"#121212\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(18,18,18)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,7%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 234,\\r\\n        \\\"desc\\\": \\\"Grey11\\\",\\r\\n        \\\"html\\\": \\\"#1c1c1c\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(28,28,28)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,10%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 235,\\r\\n        \\\"desc\\\": \\\"Grey15\\\",\\r\\n        \\\"html\\\": \\\"#262626\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(38,38,38)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,14%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 236,\\r\\n        \\\"desc\\\": \\\"Grey19\\\",\\r\\n        \\\"html\\\": \\\"#303030\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(48,48,48)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 237,\\r\\n        \\\"desc\\\": \\\"Grey23\\\",\\r\\n        \\\"html\\\": \\\"#3a3a3a\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(58,58,58)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,22%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 238,\\r\\n        \\\"desc\\\": \\\"Grey27\\\",\\r\\n        \\\"html\\\": \\\"#444444\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(68,68,68)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 239,\\r\\n        \\\"desc\\\": \\\"Grey30\\\",\\r\\n        \\\"html\\\": \\\"#4e4e4e\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(78,78,78)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,30%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 240,\\r\\n        \\\"desc\\\": \\\"Grey35\\\",\\r\\n        \\\"html\\\": \\\"#585858\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(88,88,88)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 241,\\r\\n        \\\"desc\\\": \\\"Grey39\\\",\\r\\n        \\\"html\\\": \\\"#626262\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(98,98,98)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 242,\\r\\n        \\\"desc\\\": \\\"Grey42\\\",\\r\\n        \\\"html\\\": \\\"#6c6c6c\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(108,108,108)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,40%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 243,\\r\\n        \\\"desc\\\": \\\"Grey46\\\",\\r\\n        \\\"html\\\": \\\"#767676\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(118,118,118)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,46%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 244,\\r\\n        \\\"desc\\\": \\\"Grey50\\\",\\r\\n        \\\"html\\\": \\\"#808080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 245,\\r\\n        \\\"desc\\\": \\\"Grey54\\\",\\r\\n        \\\"html\\\": \\\"#8a8a8a\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(138,138,138)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,54%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 246,\\r\\n        \\\"desc\\\": \\\"Grey58\\\",\\r\\n        \\\"html\\\": \\\"#949494\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(148,148,148)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,58%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 247,\\r\\n        \\\"desc\\\": \\\"Grey62\\\",\\r\\n        \\\"html\\\": \\\"#9e9e9e\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(158,158,158)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,61%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 248,\\r\\n        \\\"desc\\\": \\\"Grey66\\\",\\r\\n        \\\"html\\\": \\\"#a8a8a8\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(168,168,168)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,65%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 249,\\r\\n        \\\"desc\\\": \\\"Grey70\\\",\\r\\n        \\\"html\\\": \\\"#b2b2b2\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(178,178,178)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,69%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 250,\\r\\n        \\\"desc\\\": \\\"Grey74\\\",\\r\\n        \\\"html\\\": \\\"#bcbcbc\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(188,188,188)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,73%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 251,\\r\\n        \\\"desc\\\": \\\"Grey78\\\",\\r\\n        \\\"html\\\": \\\"#c6c6c6\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(198,198,198)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,77%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 252,\\r\\n        \\\"desc\\\": \\\"Grey82\\\",\\r\\n        \\\"html\\\": \\\"#d0d0d0\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(208,208,208)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,81%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 253,\\r\\n        \\\"desc\\\": \\\"Grey85\\\",\\r\\n        \\\"html\\\": \\\"#dadada\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(218,218,218)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,85%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 254,\\r\\n        \\\"desc\\\": \\\"Grey89\\\",\\r\\n        \\\"html\\\": \\\"#e4e4e4\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(228,228,228)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,89%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 255,\\r\\n        \\\"desc\\\": \\\"Grey93\\\",\\r\\n        \\\"html\\\": \\\"#eeeeee\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(238,238,238)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,93%)\\\"\\r\\n    }\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RhYmxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFDL0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBLENBQUMsd0NBQXdDO0FBQzFELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtBQUU5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO0FBQ2xGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztBQUN2RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsb0RBQW9EO0FBRXBFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxVQUFVLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRTNELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsc0RBQXNEO0lBQ3RELG1GQUFtRjtJQUNuRixtR0FBbUc7SUFDbkcsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FB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Q0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLENBQUMsQ0FDQSxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUVELDJEQUEyRDtBQUMzRCxTQUFTLFdBQVcsQ0FBQyxRQUFRO0lBQzVCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FB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IHN0eWxlc1xyXG5jb25zdCBESVZJREVSID0gMVx0Ly8gSW5kZXggb2YgdGhlIGhvcml6b250YWwgZGl2aWRlciBzdHlsZVxyXG5jb25zdCBGT09URVIgPSAyO1x0Ly8gSW5kZXggb2YgdGhlIGZvb3RlciBzdHlsZVxyXG5cclxuY29uc3QgT1BFTkVSID0gMDtcdC8vIEluZGV4IG9mIHRoZSBvcGVuZXIgbGluZSBjaGFyYWN0ZXJcclxuY29uc3QgU0VQQVJBVE9SID0gMTsgLy8gSW5kZXggb2YgdGhlIHNlcGFyYXRvciBsaW5lIGNoYXJhY3RlciAod2hlcmUgY29sdW1ucyBtZWV0KVxyXG5jb25zdCBDTE9TRVIgPSAyO1x0Ly8gSW5kZXggb2YgdGhlIGNsb3NlciBsaW5lIGNoYXJhY3RlclxyXG5jb25zdCBGSUxMRVIgPSAzO1x0Ly8gSW5kZXggb2YgdGhlIGZpbGxlciBsaW5lIGNoYXJhY3RlclxyXG5jb25zdCBCQVIgPSA0O1x0XHQvLyBJbmRleCBvZiB0aGUgc3RyYWlnaHQgdmVydGljYWwgYmFyIGxpbmUgY2hhcmFjdGVyXHJcblxyXG5leHBvcnQgbGV0IHdpbiA9IGdsb2JhbFRoaXMsIGRvYyA9IHdpbltcImRvY3VtZW50XCJdXHJcbmxldCBmbXQgPSBJbnRsLk51bWJlckZvcm1hdCgnZW4nLCB7IG5vdGF0aW9uOiAnY29tcGFjdCcgfSk7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuXHRucy5kaXNhYmxlTG9nKCdBTEwnKTtcclxuXHJcblx0Ly8gU29tZSBzYW1wbGUgZGF0YSwgYmFzaWMgaW5mb3JtYXRpb24gb24gcm9vdCBzZXJ2ZXJzXHJcblx0Ly8gTm90ZSB0aGF0IGlmIHlvdSB3YW50IGNvbG9yLCB5b3UgbmVlZCB0byB1c2UgQ29sb3JQcmludCBhcyB0aGUgcHJpbnRpbmcgZnVuY3Rpb25cclxuXHQvLyBDb2xvcmVkIGNlbGxzIG5lZWQgdG8gYmUgYW4gb2JqZWN0IHdpdGggY29sb3IgYW5kIHRleHQsIGluc3RlYWQgb2YgXCJhbnlcIi4uIFJlZCBjZWxsIGV4YW1wbGUgaGVyZVxyXG5cdGxldCBkYXRhID0gbnMuc2NhbignaG9tZScpLm1hcChzID0+IFt7IGNvbG9yOiAncmVkJywgdGV4dDogcyB9LCBucy5nZXRTZXJ2ZXJNYXhSYW0ocyksIG5zLmdldFNlcnZlck1heE1vbmV5KHMpXSk7XHJcblxyXG5cdC8vIEZvciBib2xkIHdlIG5lZWQgdG8gY29ycmVjdCB0aGUgc3BhY2luZy4uLiBTa2V0Y2ggQUYsIG5vdCBzdXJlIGhvdyBlbHNlLlxyXG5cdC8vIGxldCBib2xkVGV4dCA9ICdib2xkIHRleHQgZXhhbXBsZSBibGFoJztcclxuXHQvLyBsZXQgc3BhY2luZyA9IC0wLjAwNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY3ICogYm9sZFRleHQubGVuZ3RoO1xyXG5cdGRhdGEucHVzaChbXHJcblx0XHR7IHN0eWxlOiB7IGNvbG9yOiAncmVkJyB9LCB0ZXh0OiAnbm9wZScgfSxcclxuXHRcdC8veyBzdHlsZTogeyBjb2xvcjogJ3JlZCcsIGZvbnRXZWlnaHQ6ICdib2xkJywgbGV0dGVyU3BhY2luZzogc3BhY2luZyB9LCB0ZXh0OiBib2xkVGV4dCB9LFxyXG5cdFx0eyBzdHlsZTogeyBjb2xvcjogJ3doaXRlJywgZm9udFN0eWxlOiAnaXRhbGljJyB9LCB0ZXh0OiAnaXRhbGljIHRleHQnIH0sXHJcblx0XHR7IHN0eWxlOiB7IGNvbG9yOiAnd2hpdGUnLCB0ZXh0RGVjb3JhdGlvbkxpbmU6ICdsaW5lLXRocm91Z2gnLCB0ZXh0RGVjb3JhdGlvblN0eWxlOiAnc29saWQnIH0sIHRleHQ6ICdzdHJpa2V0aHJvdWdoIHRleHQnIH1cclxuXHRdKTtcclxuXHJcblx0Ly8gRnJlZSBzdHlsZSwgbm8gY29sdW1ucywgdGhlIHRhYmxlIGFkanVzdHMgdG8gY29udGVudHNcclxuXHRQcmludFRhYmxlKG5zLCBkYXRhLCB1bmRlZmluZWQsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxuXHJcblx0Ly8gRXhhbXBsZSBvZiBhZGRpbmcgYSBicmVhayBsaW5lIGluIHRoZSBtaWRkbGUgb2YgdGhlIHRhYmxlOlxyXG5cdC8vIGRhdGEucHVzaChudWxsKTtcclxuXHQvLyBkYXRhLnB1c2goLi4ubnMuc2Nhbignc2lnbWEtY29zbWV0aWNzJykuc2xpY2UoMSkubWFwKHMgPT4gW3MsIG5zLmdldFNlcnZlck1heFJhbShzKSwgbnMuZ2V0U2VydmVyTWF4TW9uZXkocyldKSk7XHJcblxyXG5cdC8vIFdlIHVzZSBwcmUtZGVmaW5lZCBjb2x1bW5zXHJcblx0Ly8gaGVhZGVyOiBUaGUgdGV4dCB0byBkaXNwbGF5XHJcblx0Ly8gd2lkdGggOiBXaWR0aCBvZiB0aGUgY29sdW1uIGNvbnRlbnRcclxuXHQvLyBwYWQgICA6IDAgZm9yIGNlbnRlciwgPCAwIGZvciBsZWZ0LCA+IDAgZm9yIHJpZ2h0XHJcblx0Y29uc3QgY29sdW1ucyA9IFtcclxuXHRcdHsgaGVhZGVyOiAnU2VydmVycycsIHdpZHRoOiA0MCB9LFxyXG5cdFx0eyBoZWFkZXI6ICdSYW0nLCB3aWR0aDogMTMgfSxcclxuXHRcdHsgaGVhZGVyOiAnTW9uZXknLCB3aWR0aDogMjAgfVxyXG5cdF07XHJcblx0UHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgc3R5bGUgPSBEZWZhdWx0U3R5bGUoKSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcclxuXHQvLyBpZiAocHJpbnRmdW5jICE9IG5zLnByaW50KVxyXG5cdC8vIFx0cHJpbnRmdW5jID0gbnMudHByaW50OyAvLyBUZW1wIGZpeCB1bnRpbCBJIGdldCBhbnNpIGNvbG9ycyB3b3JraW5nXHJcblxyXG5cdC8vIENyZWF0ZSBkZWZhdWx0IGNvbHVtbnMgaWYgbm8gZGVmaW5pdGlvbiB3ZXJlIHByb3ZpZGVkXHJcblx0bGV0IGNvbHVtbnNQcm92aWRlZCA9IHRydWU7XHJcblx0aWYgKGNvbHVtbnMgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRjb2x1bW5zUHJvdmlkZWQgPSBmYWxzZTtcclxuXHRcdGNvbHVtbnMgPSBbXTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YVswXS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgbG9uZ2VzdCA9IDA7XHJcblx0XHRcdGZvciAobGV0IGlpID0gMDsgaWkgPCBkYXRhLmxlbmd0aDsgaWkrKykge1xyXG5cdFx0XHRcdGlmIChkYXRhW2lpXSA9PSBudWxsKSBjb250aW51ZTtcclxuXHRcdFx0XHRsZXQgbGVuID0gZGF0YVtpaV1baV0udGV4dCAhPSB1bmRlZmluZWQgPyBkYXRhW2lpXVtpXS50ZXh0Lmxlbmd0aCA6IGRhdGFbaWldW2ldLnRvU3RyaW5nKCkubGVuZ3RoO1xyXG5cdFx0XHRcdGlmIChsZW4gPiBsb25nZXN0KSBsb25nZXN0ID0gbGVuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbHVtbnMucHVzaCh7IGhlYWRlcjogJycsIHdpZHRoOiBsb25nZXN0LCBwYWRIZWFkZXI6IDAsIHBhZENvbnRlbnQ6IDAgfSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRQcmludEJvcmRlcihucywgY29sdW1ucywgc3R5bGVbSEVBREVSXSwgcHJpbnRmdW5jKTtcclxuXHRpZiAoY29sdW1uc1Byb3ZpZGVkKSB7XHJcblx0XHRQcmludEhlYWRlcihucywgY29sdW1ucywgc3R5bGVbSEVBREVSXSwgcHJpbnRmdW5jKVxyXG5cdFx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0RJVklERVJdLCBwcmludGZ1bmMpO1xyXG5cdH1cclxuXHRsZXQgaSA9IDA7XHJcblx0Zm9yIChjb25zdCBsaW5lIG9mIGRhdGEpIHtcclxuXHRcdFByaW50TGluZShucywgY29sdW1ucywgbGluZSwgc3R5bGUsIHByaW50ZnVuYywgaSsrICUgMiA9PSAwKTtcclxuXHR9XHJcblx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0ZPT1RFUl0sIHByaW50ZnVuYyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEZWZhdWx0U3R5bGUoKSB7XHJcblx0cmV0dXJuIFtcclxuXHRcdFsn4pWtJywgJ+KUrCcsICfila4nLCAn4pSAJywgJ+KUgiddLFxyXG5cdFx0WyfilJwnLCAn4pS8JywgJ+KUpCcsICfilIAnLCAn4pSCJ10sXHJcblx0XHRbJ+KVsCcsICfilLQnLCAn4pWvJywgJ+KUgCcsICfilIInXVxyXG5cdF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFByaW50Qm9yZGVyKG5zLCBjb2x1bW5zLCBzdHlsZSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcclxuXHRsZXQgcHJpbnRTdGFjayA9IFtdO1xyXG5cdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtPUEVORVJdKTtcclxuXHRmb3IgKGxldCBjID0gMDsgYyA8IGNvbHVtbnMubGVuZ3RoOyBjKyspIHtcclxuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCAnJy5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCwgc3R5bGVbRklMTEVSXSkpO1xyXG5cdFx0aWYgKGMgPT0gY29sdW1ucy5sZW5ndGggLSAxKVxyXG5cdFx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbQ0xPU0VSXSk7XHJcblx0XHRlbHNlXHJcblx0XHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtTRVBBUkFUT1JdKTtcclxuXHJcblx0fVxyXG5cdFByaW50U3RhY2sobnMsIHByaW50U3RhY2ssIHByaW50ZnVuYyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFByaW50SGVhZGVyKG5zLCBjb2x1bW5zLCBzdHlsZSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcclxuXHRsZXQgcHJpbnRTdGFjayA9IFtdO1xyXG5cdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtCQVJdKTtcclxuXHRmb3IgKGxldCBjID0gMDsgYyA8IGNvbHVtbnMubGVuZ3RoOyBjKyspIHtcclxuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBjb2x1bW5zW2NdLmhlYWRlci5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW0JBUl0pO1xyXG5cdH1cclxuXHRQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBQcmludExpbmUobnMsIGNvbHVtbnMsIGRhdGEsIHN0eWxlLCBwcmludGZ1bmMgPSBucy5wcmludCwgaGlnaGxpZ2h0KSB7XHJcblx0aWYgKGRhdGEgPT0gbnVsbCkge1xyXG5cdFx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0RJVklERVJdLCBwcmludGZ1bmMpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0bGV0IHByaW50U3RhY2sgPSBbXTtcclxuXHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbMF1bQkFSXSk7XHJcblx0Zm9yIChsZXQgYyA9IDA7IGMgPCBjb2x1bW5zLmxlbmd0aDsgYysrKSB7XHJcblx0XHRpZiAoZGF0YVtjXS5zdHlsZSAhPSB1bmRlZmluZWQpXHJcblx0XHRcdHByaW50U3RhY2sucHVzaCh7IHN0eWxlOiBkYXRhW2NdLnN0eWxlIH0sIGRhdGFbY10udGV4dC5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0ZWxzZSBpZiAoZGF0YVtjXS5jb2xvciAhPSB1bmRlZmluZWQpXHJcblx0XHRcdHByaW50U3RhY2sucHVzaChDcmVhdGVTdHlsZShkYXRhW2NdLmNvbG9yLCBoaWdobGlnaHQpLCBkYXRhW2NdLnRleHQucGFkRW5kKGNvbHVtbnNbY10ud2lkdGgpKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cHJpbnRTdGFjay5wdXNoKENyZWF0ZVN0eWxlKCd3aGl0ZScsIGhpZ2hsaWdodCksIGRhdGFbY10udG9TdHJpbmcoKS5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlWzBdW0JBUl0pO1xyXG5cdH1cclxuXHJcblx0UHJpbnRTdGFjayhucywgcHJpbnRTdGFjaywgcHJpbnRmdW5jKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVN0eWxlKGNvbG9yLCBoaWdobGlnaHQpIHtcclxuXHQvL3JldHVybiBjb2xvcjtcclxuXHRsZXQgYmFja0NvbG9yID0gaGlnaGxpZ2h0ID8gJyMwMDAwMDAnIDogJyMxQTFBMUEnO1xyXG5cdHJldHVybiB7IHN0eWxlOiB7IGNvbG9yOiBjb2xvciwgYmFja2dyb3VuZENvbG9yOiBiYWNrQ29sb3IgfSB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpIHtcclxuXHRpZiAocHJpbnRmdW5jID09IG5zLnRwcmludCB8fCBwcmludGZ1bmMgPT0gbnMucHJpbnQgfHwgcHJpbnRmdW5jID09IG5zLnRwcmludGYpIHtcclxuXHRcdENvbG9yUHJpbnQobnMsIHByaW50U3RhY2ssIGZhbHNlKTtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHRwcmludGZ1bmMobnMsIHByaW50U3RhY2ssIHRydWUpO1xyXG5cdH1cclxufVxyXG5cclxuLy8gU2VsZWN0cyBhIGNvbG9yIGJhc2VkIG9uIGEgMS1iYXNlZCBwZXJjZW50YWdlXHJcbmV4cG9ydCBmdW5jdGlvbiBwY3RDb2xvcihwY3QpIHtcclxuXHRpZiAocGN0ID49IDEpIHJldHVybiAnTGltZSc7XHJcblx0ZWxzZSBpZiAocGN0ID49IDAuOSkgcmV0dXJuICdHcmVlbic7XHJcblx0ZWxzZSBpZiAocGN0ID49IDAuNzUpIHJldHVybiAnRGFya0dyZWVuJztcclxuXHRlbHNlIGlmIChwY3QgPj0gMC42KSByZXR1cm4gJ0dyZWVuWWVsbG93JztcclxuXHRlbHNlIGlmIChwY3QgPj0gMC4zKSByZXR1cm4gJ1llbGxvdyc7XHJcblx0ZWxzZSBpZiAocGN0ICE9IDApIHJldHVybiAnRGFya09yYW5nZSc7XHJcblx0cmV0dXJuICdSZWQnO1xyXG59XHJcblxyXG4vLyBVc2FnZTogQ29sb3JQcmludChucywgWydyZWQnLCAnVGhpcyBpcyBzb21lIHJlZCB0ZXh0JywgJyNGRkZGRkYnLCAnIFRoaXMgaXMgc29tZSB3aGl0ZSB0ZXh0XSwgdHJ1ZSk7XHJcbmV4cG9ydCBmdW5jdGlvbiBDb2xvclByaW50KG5zLCBzdGFjaywgdG9UZXJtaW5hbCA9IHRydWUpIHtcclxuXHRsZXQgb3V0ID0gJyc7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkgKz0gMikge1xyXG5cdFx0bGV0IHN0eWxlID0gc3RhY2tbaV07XHJcblx0XHRpZiAoc3R5bGUuc3R5bGUgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHN0eWxlID0geyBzdHlsZTogeyBjb2xvcjogc3RhY2tbaV0sIGJhY2tncm91bmRDb2xvcjogJyMwMDAwMDAnIH0gfTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgY29sb3IgPSBzdHlsZTtcclxuXHRcdGlmIChzdHlsZS5zdHlsZSkgY29sb3IgPSBzdHlsZS5zdHlsZS5jb2xvcjtcclxuXHJcblx0XHRsZXQgbWF0Y2ggPSBDT0xPUlMuZmluZChzID0+IHMuaHRtbCA9PSBjb2xvciB8fCBzLmRlc2MudG9Mb3dlckNhc2UoKSA9PSBjb2xvci50b0xvd2VyQ2FzZSgpKTtcclxuXHRcdGlmICghbWF0Y2ggJiYgY29sb3Iuc3RhcnRzV2l0aCgnIycpKSBtYXRjaCA9IEZpbmRIdG1sQ29sb3JFcXVpdmFsZW50KG5zLCBjb2xvcik7XHJcblx0XHRpZiAoIW1hdGNoKSBtYXRjaCA9IENPTE9SUy5maW5kKHMgPT4gcy5kZXNjLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChjb2xvci50b0xvd2VyQ2FzZSgpKSk7XHJcblx0XHRpZiAobWF0Y2gpIGNvbG9yID0gJ1xceDFiWzM4OzU7JyArIG1hdGNoLmFuc2kgKyAnbSc7XHJcblx0XHRlbHNlIG5zLnRwcmludCgnRkFJTDogdW5zdXBwb3J0ZWQgY29sb3I6ICcgKyBjb2xvcik7XHJcblxyXG5cdFx0bGV0IHRleHQgPSBzdGFja1tpICsgMV0ucmVwbGFjZSgnJScsICclJScpO1xyXG5cdFx0b3V0ID0gb3V0ICsgY29sb3IgKyB0ZXh0O1xyXG5cdH1cclxuXHJcblx0aWYgKHRvVGVybWluYWwpXHJcblx0XHRucy50cHJpbnRmKG91dCk7XHJcblx0ZWxzZVxyXG5cdFx0bnMucHJpbnRmKG91dCk7XHJcbn1cclxuXHJcbi8vIEFOU0kgY29sb3JzIHN1cHBvcnRlZCBieSB0aGUgZ2FtZSBhcmUgMjU2IGNvbG9ycywgSFRNTCBjb2xvciBpcyBSR0JcclxuLy8gVGhpcyBmdW5jdGlvbnMgZmluZHMgdGhlIGNsb3Nlc3QgbWF0Y2ggdG8gYSBmdWxsIHJhbmdlIEhUTUwgY29sb3IgY29kZSBpbiB0aGUgMjU2IGNvbG9yIEFOU0kgY29sb3JzIHdlIGhhdmUgdG8gd29yayB3aXRoXHJcbmZ1bmN0aW9uIEZpbmRIdG1sQ29sb3JFcXVpdmFsZW50KG5zLCBodG1sQ29kZSkge1xyXG5cdGxldCBjb3B5ID0gQ09MT1JTLm1hcChzID0+IHMpO1xyXG5cclxuXHRjb3B5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuXHRcdGxldCBjYSA9IHJnYkZyb21IdG1sKGEuaHRtbCk7XHJcblx0XHRsZXQgY2IgPSByZ2JGcm9tSHRtbChiLmh0bWwpO1xyXG5cdFx0bGV0IGNvbCA9IHJnYkZyb21IdG1sKGh0bWxDb2RlKTtcclxuXHJcblx0XHRsZXQgb2EgPSBNYXRoLmFicyhjYS5yIC0gY29sLnIpICsgTWF0aC5hYnMoY2EuZyAtIGNvbC5nKSArIE1hdGguYWJzKGNhLmIgLSBjb2wuYik7XHJcblx0XHRsZXQgb2IgPSBNYXRoLmFicyhjYi5yIC0gY29sLnIpICsgTWF0aC5hYnMoY2IuZyAtIGNvbC5nKSArIE1hdGguYWJzKGNiLmIgLSBjb2wuYik7XHJcblx0XHRyZXR1cm4gb2EgLSBvYjtcclxuXHR9XHJcblx0KTtcclxuXHJcblx0cmV0dXJuIGNvcHlbMF07XHJcbn1cclxuXHJcbi8vIENvbnZlcnRzIGEgaGV4YWRlY2ltYWwgSFRNTCBjb2xvciBiYWNrIHRvIFJHQiBpbnQgdmFsdWVzXHJcbmZ1bmN0aW9uIHJnYkZyb21IdG1sKGh0bWxDb2RlKSB7XHJcblx0bGV0IHIgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cigxLCAyKSk7XHJcblx0bGV0IGcgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cigzLCAyKSk7XHJcblx0bGV0IGIgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cig1LCAyKSk7XHJcblx0cmV0dXJuIHsgcjogciwgZzogZywgYjogYiB9O1xyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtuc30gXHJcbiAqIEBwYXJhbSB7QXJyYXl9IEpTT04gREFUQSBpbiBmb3JtIG9mIFt7aWQ6MSxuYW1lOlwiTGV4aWNvblwifSx7aWQ6MixuYW1lOlwiUGFyYWRveFwifV1cclxuICogQHBhcmFtIHtBcnJheX0gcGFzcyBhbiBhcnJheSBvZiBjb2x1bW5zIFxyXG4gKiBAcmV0dXJucyB7SFRNTFRhYmxlRWxlbWVudH0gUmV0dXJucyBhIEhUTUxUYWJsZUVsZW1lbnQgdGhhdCB5b3UgY2FuIHVzZSBET00uYXBwZW5kQ2hpbGQodGFibGUpO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhUTUxUYWJsZUZyb21KU09OKG5zLCBkYXRhLCBjb2x1bW5zKSB7XHJcblxyXG5cdHZhciBmb3JtYXR0ZWREYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhLCBjb2x1bW5zKSk7XHJcblx0dmFyIGNvbCA9IFtdO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0dGVkRGF0YS5sZW5ndGg7IGkrKykge1xyXG5cdFx0Zm9yICh2YXIga2V5IGluIGZvcm1hdHRlZERhdGFbaV0pIHtcclxuXHRcdFx0aWYgKGNvbC5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcblx0XHRcdFx0Y29sLnB1c2goa2V5KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dmFyIHRhYmxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcclxuXHR0YWJsZS5zdHlsZS53aWR0aCA9ICcxMDAlJ1xyXG5cclxuXHR2YXIgdHIgPSB0YWJsZS5pbnNlcnRSb3coLTEpOyAgICAgICAgICAgICAgICAgICAvLyBUQUJMRSBST1cuXHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgY29sLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgdGggPSBkb2MuY3JlYXRlRWxlbWVudChcInRoXCIpOyAgICAgIC8vIFRBQkxFIEhFQURFUi5cclxuXHRcdHRoLmlubmVySFRNTCA9IGNvbFtpXTtcclxuXHRcdHRyLmFwcGVuZENoaWxkKHRoKTtcclxuXHR9XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0dGVkRGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdHRyID0gdGFibGUuaW5zZXJ0Um93KC0xKTtcclxuXHJcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNvbC5sZW5ndGg7IGorKykge1xyXG5cdFx0XHR2YXIgdGFiQ2VsbCA9IHRyLmluc2VydENlbGwoLTEpO1xyXG5cdFx0XHRpZiAodHlwZW9mIChmb3JtYXR0ZWREYXRhW2ldW2NvbFtqXV0pID09ICdudW1iZXInKSB7XHJcblx0XHRcdFx0dmFyIG51bWJlciA9IGZvcm1hdHRlZERhdGFbaV1bY29sW2pdXVxyXG5cdFx0XHRcdGlmIChudW1iZXIgPiAwKVxyXG5cdFx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBhZGRIdG1sV2l0aENvbG9yKFwiYVwiLCBmbXQuZm9ybWF0KG51bWJlciksIFwiZ3JlZW5cIik7XHJcblx0XHRcdFx0ZWxzZSBpZiAobnVtYmVyID09IDApXHJcblx0XHRcdFx0XHR0YWJDZWxsLmlubmVySFRNTCA9IGFkZEh0bWxXaXRoQ29sb3IoXCJhXCIsIGZtdC5mb3JtYXQobnVtYmVyKSwgXCJ3aGl0ZVwiKTtcclxuXHRcdFx0XHRlbHNlIGlmIChudW1iZXIgPCAwKVxyXG5cdFx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBhZGRIdG1sV2l0aENvbG9yKFwiYVwiLCBmbXQuZm9ybWF0KG51bWJlciksIFwicmVkXCIpO1xyXG5cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBmb3JtYXR0ZWREYXRhW2ldW2NvbFtqXV07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gdGFibGU7XHJcbn1cclxuXHJcbmxldCBhZGRIdG1sV2l0aENvbG9yID0gKHRhZywgZGF0YSwgY29sb3IpID0+IHtcclxuXHRyZXR1cm4gXCI8XCIgKyB0YWcgKyBcIiBzdHlsZT0nY29sb3I6XCIgKyBjb2xvciArIFwiJz5cIiArIGRhdGEgKyBcIjwvXCIgKyB0YWcgKyBcIj5cIjtcclxufVxyXG5cclxuZXhwb3J0IGxldCBDT0xPUlMgPSBbXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDAsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODA4MDgwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMjgsMTI4LDEyOClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMSxcclxuXHRcdFwiZGVzY1wiOiBcIlJlZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGltZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDMsXHJcblx0XHRcImRlc2NcIjogXCJZZWxsb3dcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNCxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRnVjaHNpYVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNixcclxuXHRcdFwiZGVzY1wiOiBcIkFxdWFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcsXHJcblx0XHRcImRlc2NcIjogXCJXaGl0ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDEwMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4LFxyXG5cdFx0XCJkZXNjXCI6IFwiQmxhY2tcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDksXHJcblx0XHRcImRlc2NcIjogXCJNYXJvb25cIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMjgsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDI1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExLFxyXG5cdFx0XCJkZXNjXCI6IFwiT2xpdmVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDgwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTIsXHJcblx0XHRcImRlc2NcIjogXCJOYXZ5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDgwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTMsXHJcblx0XHRcImRlc2NcIjogXCJQdXJwbGVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDAwODBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwwLDEyOClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDI1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0LFxyXG5cdFx0XCJkZXNjXCI6IFwiVGVhbFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODA4MFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMjgsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTUsXHJcblx0XHRcImRlc2NcIjogXCJTaWx2ZXJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNjMGMwYzBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE5MiwxOTIsMTkyKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkwXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNyxcclxuXHRcdFwiZGVzY1wiOiBcIk5hdnlCbHVlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtCbHVlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTksXHJcblx0XHRcImRlc2NcIjogXCJCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwMDBhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMSxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWU0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMTglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjQsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTcsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNSxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBTa3lCbHVlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwNWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwNywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI2LFxyXG5cdFx0XCJkZXNjXCI6IFwiRG9kZ2VyQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTMsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNyxcclxuXHRcdFwiZGVzY1wiOiBcIkRvZGdlckJsdWUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE3LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjgsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlbjRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyOSxcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MiwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDMwLFxyXG5cdFx0XCJkZXNjXCI6IFwiVHVycXVvaXNlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzEsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkzLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzIsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAyLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzMsXHJcblx0XHRcImRlc2NcIjogXCJEb2RnZXJCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMDgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzNCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwYWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM1LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3ByaW5nR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDUyLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzYsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrQ3lhblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjYsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzNyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2VhR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGFmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM4LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MSwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM5LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5OCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQwLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkNzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDEsXHJcblx0XHRcImRlc2NcIjogXCJTcHJpbmdHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDYsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0MixcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZDc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyMTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNTcsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0MyxcclxuXHRcdFwiZGVzY1wiOiBcIkN5YW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2OCwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQ0LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1R1cnF1b2lzZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyMTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDUsXHJcblx0XHRcImRlc2NcIjogXCJUdXJxdW9pc2UyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkN2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4OSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQ2LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDcsXHJcblx0XHRcImRlc2NcIjogXCJTcHJpbmdHcmVlbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDIsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0OCxcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNTEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0OSxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVNwcmluZ0dyZWVuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDUwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ3lhbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDcwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTEsXHJcblx0XHRcImRlc2NcIjogXCJDeWFuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTIsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWYwMDAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMTglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTMsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NCxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woODIsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NSxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzIsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NixcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjYsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NyxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWVWaW9sZXRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjIsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1OCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU5LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTM3XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMzclKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjAsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGU0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1Zjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTclLDQ1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDYxLFxyXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmNWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2MixcclxuXHRcdFwiZGVzY1wiOiBcIlNsYXRlQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjMsXHJcblx0XHRcImRlc2NcIjogXCJSb3lhbEJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2NCxcclxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2U0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY4NzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDcsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2NSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjYsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlVHVycXVvaXNlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjcsXHJcblx0XHRcImRlc2NcIjogXCJTdGVlbEJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMTAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDY4LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjksXHJcblx0XHRcImRlc2NcIjogXCJDb3JuZmxvd2VyQmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyNSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcxLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA3MixcclxuXHRcdFwiZGVzY1wiOiBcIkNhZGV0Qmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzMsXHJcblx0XHRcImRlc2NcIjogXCJDYWRldEJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc0LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMDAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc1LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIxMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc2LFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMywxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc3LFxyXG5cdFx0XCJkZXNjXCI6IFwiUGFsZUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA3OCxcclxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzksXHJcblx0XHRcImRlc2NcIjogXCJBcXVhbWFyaW5lM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE2MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODAsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1UdXJxdW9pc2VcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgxLFxyXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE5NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgyLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNywxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgzLFxyXG5cdFx0XCJkZXNjXCI6IFwiU2VhR3JlZW4yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZmZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4NCxcclxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEzNSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDg1LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2VhR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTUwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODYsXHJcblx0XHRcImRlc2NcIjogXCJBcXVhbWFyaW5lMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE2NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDg3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NsYXRlR3JheTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4OCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtSZWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODksXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTcsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5MCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtNYWdlbnRhXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODcwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5MSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtNYWdlbnRhXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODcwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4NiwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDkyLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1Zpb2xldFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3MDBkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDAsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzcsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5MyxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3MDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5NCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMiwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDk1LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRQaW5rNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTYsXHJcblx0XHRcImRlc2NcIjogXCJQbHVtNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTcsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjcwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5OCxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDk5LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI1NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwMCxcclxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAxLFxyXG5cdFx0XCJkZXNjXCI6IFwiV2hlYXQ0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4NzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTclLDQ1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwMixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwMyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2xhdGVHcmV5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4N2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA1LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTbGF0ZUJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA2LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93NFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwNyxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2FmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNreUJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTEwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTa3lCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMTAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExMSxcclxuXHRcdFwiZGVzY1wiOiBcIlNreUJsdWUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExMixcclxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2UyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkNzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTEzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTAwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTQsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ZDdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxNTAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExNixcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTbGF0ZUdyYXkzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkN2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE3LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2t5Qmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjAwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE4LFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdyZWVuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTA1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTIwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDI1NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjEsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE0MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyMixcclxuXHRcdFwiZGVzY1wiOiBcIkFxdWFtYXJpbmUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE2MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyMyxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTbGF0ZUdyYXkxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyNCxcclxuXHRcdFwiZGVzY1wiOiBcIlJlZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbms0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3LDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI2LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtVmlvbGV0UmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyNyxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrVmlvbGV0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMGQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4OCwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyOSxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woODEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzAsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT3JhbmdlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmNWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTMxLFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzIsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmNWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTMzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmNWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjgwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzUsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjcwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM2LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya0dvbGRlbnJvZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNiwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEzNyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2FsbW9uM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzgsXHJcblx0XHRcImRlc2NcIjogXCJSb3N5QnJvd25cIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjg3ODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM5LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTYzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY4N2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNzAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0MSxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjg3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjYwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQyLFxyXG5cdFx0XCJkZXNjXCI6IFwiR29sZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya0toYWtpXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0NCxcclxuXHRcdFwiZGVzY1wiOiBcIk5hdmFqb1doaXRlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ1LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTY5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ2LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTdGVlbEJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwzMyUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTdGVlbEJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ4LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMSwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0OSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTAsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTEsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwzMyUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTUyLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRDeWFuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMzMlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1MyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2t5Qmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmQ3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjEwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTU0LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW5ZZWxsb3dcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTUsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT2xpdmVHcmVlbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1NixcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTAwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTU3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZmZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1OSxcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVUdXJxdW9pc2UxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2MCxcclxuXHRcdFwiZGVzY1wiOiBcIlJlZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTYxLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTYyLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMiwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2MyxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMSwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2NCxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMGQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjUsXHJcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3MDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjYsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT3JhbmdlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2LDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTY3LFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjgsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDM0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTY5LFxyXG5cdFx0XCJkZXNjXCI6IFwiSG90UGluazJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzVmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3MCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yY2hpZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTcxLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3MixcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDcsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzMsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNhbG1vbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzUsXHJcblx0XHRcImRlc2NcIjogXCJQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMzAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3NixcclxuXHRcdFwiZGVzY1wiOiBcIlBsdW0zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc3LFxyXG5cdFx0XCJkZXNjXCI6IFwiVmlvbGV0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc4N2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3OCxcclxuXHRcdFwiZGVzY1wiOiBcIkdvbGQzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4LDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc5LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4MCxcclxuXHRcdFwiZGVzY1wiOiBcIlRhblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTgxLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWlzdHlSb3NlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDMzJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODIsXHJcblx0XHRcImRlc2NcIjogXCJUaGlzdGxlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMzMlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4MyxcclxuXHRcdFwiZGVzY1wiOiBcIlBsdW0yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4NCxcclxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTg1LFxyXG5cdFx0XCJkZXNjXCI6IFwiS2hha2kzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4NixcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZDc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTg3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRZZWxsb3czXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDMzJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODgsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFN0ZWVsQmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkwLFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5MSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDc1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkyLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5NCxcclxuXHRcdFwiZGVzY1wiOiBcIkhvbmV5ZGV3MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw5MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTUsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEN5YW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDkyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5NixcclxuXHRcdFwiZGVzY1wiOiBcIlJlZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmsyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDM3LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk4LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyOCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5OSxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBQaW5rMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDAsXHJcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMDksMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDEsXHJcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjAyLFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JhbmdlUmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjAzLFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwNCxcclxuXHRcdFwiZGVzY1wiOiBcIkluZGlhblJlZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjVmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzNDUsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDUsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzMwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjA2LFxyXG5cdFx0XCJkZXNjXCI6IFwiSG90UGlua1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMxNSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwNyxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bU9yY2hpZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjVmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT3JhbmdlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4NzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjA5LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2FsbW9uMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjEwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRDb3JhbFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjExLFxyXG5cdFx0XCJkZXNjXCI6IFwiUGFsZVZpb2xldFJlZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjEyLFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JjaGlkMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTMsXHJcblx0XHRcImRlc2NcIjogXCJPcmNoaWQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4N2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxNCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTUsXHJcblx0XHRcImRlc2NcIjogXCJTYW5keUJyb3duXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTYsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNhbG1vbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTcsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFBpbmsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTgsXHJcblx0XHRcImRlc2NcIjogXCJQaW5rMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMzAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTksXHJcblx0XHRcImRlc2NcIjogXCJQbHVtMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjAsXHJcblx0XHRcImRlc2NcIjogXCJHb2xkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyMSxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDQ1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIyLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTmF2YWpvV2hpdGUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWlzdHlSb3NlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI1LFxyXG5cdFx0XCJkZXNjXCI6IFwiVGhpc3RsZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmQ3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI2LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93MVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjcsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdvbGRlbnJvZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyOCxcclxuXHRcdFwiZGVzY1wiOiBcIktoYWtpMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyOSxcclxuXHRcdFwiZGVzY1wiOiBcIldoZWF0MVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzMCxcclxuXHRcdFwiZGVzY1wiOiBcIkNvcm5zaWxrMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDkyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzMSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxMDBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMDAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjMyLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwODA4MDhcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDgsOCw4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzMyxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk3XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMTIxMjEyXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxOCwxOCwxOClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzQsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMxYzFjMWNcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI4LDI4LDI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MTVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMyNjI2MjZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDM4LDM4LDM4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzYsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MTlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMzMDMwMzBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDQ4LDQ4LDQ4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzcsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMzYTNhM2FcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDU4LDU4LDU4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwyMiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzgsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MjdcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM0NDQ0NDRcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDY4LDY4LDY4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzksXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM0ZTRlNGVcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDc4LDc4LDc4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDAsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ODU4NThcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDg4LDg4LDg4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDEsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM2MjYyNjJcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk4LDk4LDk4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDIsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NDJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM2YzZjNmNcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEwOCwxMDgsMTA4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw0MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDMsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NDZcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM3Njc2NzZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDExOCwxMTgsMTE4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw0NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDQsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NTBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDgwODBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4YThhOGFcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzOCwxMzgsMTM4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDYsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NThcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM5NDk0OTRcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE0OCwxNDgsMTQ4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDcsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM5ZTllOWVcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE1OCwxNTgsMTU4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2MSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDgsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NjZcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhOGE4YThcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE2OCwxNjgsMTY4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDksXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NzBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNiMmIyYjJcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3OCwxNzgsMTc4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2OSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTAsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NzRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNiY2JjYmNcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE4OCwxODgsMTg4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3MyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTEsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NzhcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNjNmM2YzZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE5OCwxOTgsMTk4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3NyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTIsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkMGQwZDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIwOCwyMDgsMjA4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4MSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTMsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkYWRhZGFcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxOCwyMTgsMjE4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTQsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNlNGU0ZTRcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIyOCwyMjgsMjI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4OSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5OTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNlZWVlZWVcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIzOCwyMzgsMjM4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw5MyUpXCJcclxuXHR9XHJcbl07XHJcbiJdfQ==\",\"filename\":\"tables.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprintf(\\\"Hello World\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLnRwcmludGYoXCJIZWxsbyBXb3JsZFwiKTtcbn1cbiJdfQ==\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"connected.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nfunction getAllServers(ns) {\\r\\n    let servers = new Set();\\r\\n    let queue = ['home'];\\r\\n    while (true) {\\r\\n        const host = queue.pop();\\r\\n        if (host === undefined)\\r\\n            break;\\r\\n        servers.add(host);\\r\\n        const connectedServers = ns.scan(host);\\r\\n        queue.push(...connectedServers.filter(server => !servers.has(server)));\\r\\n    }\\r\\n    return Array.from(servers);\\r\\n}\\r\\nfunction showConnected(ns, parent, host, pre) {\\r\\n    const connectedServers = ns.scan(host);\\r\\n    ns.tprintf(`${pre}${host}`);\\r\\n    for (const serverName of connectedServers) {\\r\\n        if (serverName === parent)\\r\\n            continue;\\r\\n        showConnected(ns, host, serverName, `-${pre}`);\\r\\n    }\\r\\n}\\r\\nfunction serverHackedStatusColor(ns, s) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return 'green';\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    if (hackLv >= hackReq)\\r\\n        return 'Gold1';\\r\\n    return 'IndianRed';\\r\\n}\\r\\nfunction isHackable(ns, s) {\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    if (hackLv >= hackReq || ns.hasRootAccess(s))\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    //showConnected(ns, '', 'home', '');\\r\\n    ns.ui.clearTerminal();\\r\\n    // for (const server of getAllServers(ns)) {\\r\\n    //   ns.tprintf(`${server}`);\\r\\n    // }\\r\\n    // ns.tprintf(`${ns.ui.windowSize()}`)\\r\\n    const sortedServers = getAllServers(ns).sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b));\\r\\n    const filteredServers = sortedServers.filter(s => ns.getServerMaxMoney(s) > 0);\\r\\n    const hackableServerCount = filteredServers.filter(s => isHackable(ns, s)).length;\\r\\n    const truncatedServers = filteredServers; //.slice(0, hackableServerCount + 5);\\r\\n    let data = truncatedServers.map(s => {\\r\\n        const hackLevelStr = ns.getServerRequiredHackingLevel(s).toString();\\r\\n        return [\\r\\n            { color: serverHackedStatusColor(ns, s), text: s },\\r\\n            hackLevelStr.padStart(5),\\r\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\r\\n            ns.formatRam(ns.getServerMaxRam(s), 0).padStart(6),\\r\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(9)\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: 'Servers', width: 19 },\\r\\n        { header: 'Level', width: 6, pad: 1 },\\r\\n        { header: 'Base Sec.', width: 10, pad: 1 },\\r\\n        { header: '   Ram', width: 7, pad: 1 },\\r\\n        { header: '    Money', width: 10 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nvbm5lY3RlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHOUQsU0FBUyxhQUFhLENBQUMsRUFBTTtJQUMzQixJQUFJLE9BQU8sR0FBZ0IsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUM3QyxJQUFJLEtBQUssR0FBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLE9BQU0sSUFBSSxFQUFFO1FBQ1YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxNQUFNO1FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxFQUFNLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxHQUFXO0lBQ3RFLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2QyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7SUFFNUIsS0FBSyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRTtRQUN6QyxJQUFJLFVBQVUsS0FBSyxNQUFN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LE9BQU8sR0FBRztRQUNmLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2hDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7UUFDckMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtRQUMxQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ3RDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO0tBQ2xDLENBQUM7SUFFRixVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgUHJpbnRUYWJsZSwgQ29sb3JQcmludCwgRGVmYXVsdFN0eWxlIH0gZnJvbSBcInRhYmxlc1wiO1xuXG5cbmZ1bmN0aW9uIGdldEFsbFNlcnZlcnMobnM6IE5TKTogc3RyaW5nW10ge1xuICBsZXQgc2VydmVyczogU2V0PHN0cmluZz4gPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgbGV0IHF1ZXVlOiBzdHJpbmdbXSA9IFsnaG9tZSddO1xuXG4gIHdoaWxlKHRydWUpIHtcbiAgICBjb25zdCBob3N0ID0gcXVldWUucG9wKCk7XG4gICAgaWYgKGhvc3QgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG5cbiAgICBzZXJ2ZXJzLmFkZChob3N0KTtcbiAgICBjb25zdCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2Nhbihob3N0KTtcbiAgICBxdWV1ZS5wdXNoKC4uLmNvbm5lY3RlZFNlcnZlcnMuZmlsdGVyKHNlcnZlciA9PiAhc2VydmVycy5oYXMoc2VydmVyKSkpO1xuICB9XG5cbiAgcmV0dXJuIEFycmF5LmZyb20oc2VydmVycyk7XG59XG5cbmZ1bmN0aW9uIHNob3dDb25uZWN0ZWQobnM6IE5TLCBwYXJlbnQ6IHN0cmluZywgaG9zdDogc3RyaW5nLCBwcmU6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBjb25uZWN0ZWRTZXJ2ZXJzID0gbnMuc2Nhbihob3N0KTtcblxuICBucy50cHJpbnRmKGAke3ByZX0ke2hvc3R9YCk7XG5cbiAgZm9yIChjb25zdCBzZXJ2ZXJOYW1lIG9mIGNvbm5lY3RlZFNlcnZlcnMpIHtcbiAgICBpZiAoc2VydmVyTmFtZSA9PT0gcGFyZW50KSBjb250aW51ZTtcblxuICAgIHNob3dDb25uZWN0ZWQobnMsIGhvc3QsIHNlcnZlck5hbWUsIGAtJHtwcmV9YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VydmVySGFja2VkU3RhdHVzQ29sb3IobnM6IE5TLCBzOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAobnMuaGFzUm9vdEFjY2VzcyhzKSkgcmV0dXJuICdncmVlbic7XG5cbiAgY29uc3QgaGFja1JlcSA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpO1xuICBjb25zdCBoYWNrTHYgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcblxuICBpZiAoaGFja0x2ID49IGhhY2tSZXEpIHJldHVybiAnR29sZDEnO1xuXG4gIHJldHVybiAnSW5kaWFuUmVkJztcbn1cblxuZnVuY3Rpb24gaXNIYWNrYWJsZShuczogTlMsIHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBoYWNrUmVxID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocyk7XG4gIGNvbnN0IGhhY2tMdiA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xuXG4gIGlmIChoYWNrTHYgPj0gaGFja1JlcSB8fCBucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xuICAvL3Nob3dDb25uZWN0ZWQobnMsICcnLCAnaG9tZScsICcnKTtcblxuICBucy51aS5jbGVhclRlcm1pbmFsKCk7XG5cbiAgLy8gZm9yIChjb25zdCBzZXJ2ZXIgb2YgZ2V0QWxsU2VydmVycyhucykpIHtcbiAgLy8gICBucy50cHJpbnRmKGAke3NlcnZlcn1gKTtcbiAgLy8gfVxuXG4gIC8vIG5zLnRwcmludGYoYCR7bnMudWkud2luZG93U2l6ZSgpfWApXG4gIGNvbnN0IHNvcnRlZFNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKS5zb3J0KChhLCBiKSA9PiBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChhKSAtIG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKGIpKTtcbiAgY29uc3QgZmlsdGVyZWRTZXJ2ZXJzID0gc29ydGVkU2VydmVycy5maWx0ZXIocyA9PiBucy5nZXRTZXJ2ZXJNYXhNb25leShzKSA+IDApO1xuICBjb25zdCBoYWNrYWJsZVNlcnZlckNvdW50ID0gZmlsdGVyZWRTZXJ2ZXJzLmZpbHRlcihzID0+IGlzSGFja2FibGUobnMsIHMpKS5sZW5ndGg7XG4gIGNvbnN0IHRydW5jYXRlZFNlcnZlcnMgPSBmaWx0ZXJlZFNlcnZlcnMvLy5zbGljZSgwLCBoYWNrYWJsZVNlcnZlckNvdW50ICsgNSk7XG4gIFxuICBsZXQgZGF0YSA9IHRydW5jYXRlZFNlcnZlcnMubWFwKHMgPT4ge1xuICAgIGNvbnN0IGhhY2tMZXZlbFN0ciA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgY29sb3I6IHNlcnZlckhhY2tlZFN0YXR1c0NvbG9yKG5zLCBzKSwgdGV4dDogcyB9LFxuICAgICAgaGFja0xldmVsU3RyLnBhZFN0YXJ0KDUpLFxuICAgICAgbnMuZ2V0U2VydmVyQmFzZVNlY3VyaXR5TGV2ZWwocykudG9TdHJpbmcoKS5wYWRTdGFydCg5KSxcbiAgICAgIG5zLmZvcm1hdFJhbShucy5nZXRTZXJ2ZXJNYXhSYW0ocyksIDApLnBhZFN0YXJ0KDYpLFxuICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFNlcnZlck1heE1vbmV5KHMpLDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDkpXG4gICAgXVxuICB9KTtcblxuXHRjb25zdCBjb2x1bW5zID0gW1xuXHRcdHsgaGVhZGVyOiAnU2VydmVycycsIHdpZHRoOiAxOSB9LFxuXHRcdHsgaGVhZGVyOiAnTGV2ZWwnLCB3aWR0aDogNiwgcGFkOiAxIH0sXG5cdFx0eyBoZWFkZXI6ICdCYXNlIFNlYy4nLCB3aWR0aDogMTAsIHBhZDogMSB9LFxuXHRcdHsgaGVhZGVyOiAnICAgUmFtJywgd2lkdGg6IDcsIHBhZDogMSB9LFxuXHRcdHsgaGVhZGVyOiAnICAgIE1vbmV5Jywgd2lkdGg6IDEwIH1cblx0XTtcblxuXHRQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBEZWZhdWx0U3R5bGUoKSwgQ29sb3JQcmludCk7XG59XG4iXX0=\",\"filename\":\"connected.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"6.8.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":67359147469,\"moneyMax\":1683978686725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1333,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"94.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43408442035,\"moneyMax\":1085211050875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"1.1.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":21666866090,\"moneyMax\":541671652250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1145,\"serverGrowth\":76,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"7.5.0.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17145475136,\"moneyMax\":428636878400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":998,\"serverGrowth\":83,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"12.3.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23171932304,\"moneyMax\":579298307600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1032,\"serverGrowth\":71,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"0.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":16853939759,\"moneyMax\":421348493975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1131,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"21.3.8.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":20253361797,\"moneyMax\":506334044925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"4.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":19501574745,\"moneyMax\":487539368625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1135,\"serverGrowth\":98,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"25.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":22995662019,\"moneyMax\":574891550475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1233,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"53.1.5.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1485016313,\"moneyMax\":37125407825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1161,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"13.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1551,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"24.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1191709620,\"moneyMax\":29792740500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":953,\"serverGrowth\":84,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"0.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":801545319,\"moneyMax\":20038632975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"85.0.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":814720264,\"moneyMax\":20368006600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":49,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"29.0.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":613051530,\"moneyMax\":15326288250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":79,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"66.6.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":711422102,\"moneyMax\":17785552550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":66,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"5.7.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":904076334,\"moneyMax\":22601908350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":95,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298507.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":238138,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"74.2.7.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1165797944,\"moneyMax\":29144948600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":86,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"18.1.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":828114437,\"moneyMax\":20702860925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":61,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"1.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":514434466,\"moneyMax\":12860861650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":89,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"89.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":813228149,\"moneyMax\":20330703725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":76,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"98.5.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":798023930,\"moneyMax\":19950598250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":88,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"12.4.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1189545927,\"moneyMax\":29738648175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-5969-FoodNStuff.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[138,169,11,88,191,94,160,72,184,123,78,30,60,187,87,191,142,192,166,78,167,174,16,23,46,81,48,146,160,166,65,86],\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"94.7.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":962513526,\"moneyMax\":24062838150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":943,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"97.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":959024595,\"moneyMax\":23975614875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":75,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"41.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":714035117,\"moneyMax\":17850877925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"8.7.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":802793041,\"moneyMax\":20069826025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":77,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"27.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1600338885,\"moneyMax\":40008472125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":51,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"69.1.7.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1538300760,\"moneyMax\":38457519000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":82,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79251.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,22,46,22,42,39,27,4,18,8,25],[22,18,7,30,16,35,39,45,3,2,2],[41,50,37,5,43,15,39,42,9,6,5],[36,44,50,27,44,20,15,10,47,47,7],[27,29,30,21,4,44,18,14,29,3,34],[16,41,40,4,34,24,12,3,47,2,4],[27,18,14,29,21,18,48,13,30,14,13],[40,33,1,50,34,21,7,42,38,8,31],[8,39,48,2,44,37,46,20,15,30,36]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"46.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1192783588,\"moneyMax\":29819589700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":71,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42413.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8qieRqZy5372lX868Xp8hFYCl719PLL64yPLY543rdS711A477dHBLygc31\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"45.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1302601646,\"moneyMax\":32565041150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":71,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"74.2.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1004469672,\"moneyMax\":25111741800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":80,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"85.8.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":703090087,\"moneyMax\":17577252175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":733,\"serverGrowth\":56,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"47.4.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":637715529,\"moneyMax\":15942888225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":486,\"serverGrowth\":48,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"21.8.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":661824034,\"moneyMax\":16545600850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":55,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"92.9.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":236543671,\"moneyMax\":5913591775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":41,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"81.1.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":232507179,\"moneyMax\":5812679475,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":44,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"75.7.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1057862365,\"moneyMax\":26446559125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":757,\"serverGrowth\":81,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"71.3.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":202796991,\"moneyMax\":5069924775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":475,\"serverGrowth\":55,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729585-FoodNStuff.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"13612149242\",\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"44.6.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":488855441,\"moneyMax\":12221386025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":608,\"serverGrowth\":64,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501232.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[111,81,180,161,29,17,114,148,2,157,2,115,145,2,165,198,40,173,30,109,112,125,109,163,73,91,42,66,48,167,80,84,114,189,171,132,18,50,92,73,19,17,181,98,156,143,136]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"20.8.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":446926857,\"moneyMax\":11173171425,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":447,\"serverGrowth\":40,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"16.1.3.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":158943242,\"moneyMax\":3973581050,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":291,\"serverGrowth\":54,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"10.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":240592249,\"moneyMax\":6014806225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":301,\"serverGrowth\":57,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"86.8.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":388,\"serverGrowth\":48,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"70.9.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":80080019,\"moneyMax\":2002000475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":261,\"serverGrowth\":50,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"59.3.1.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"71.7.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"92.3.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"45.5.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"72.6.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"22.3.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"12.3.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-468372.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[154,149,85,173,194,157,96,184,131,136,123,189,18],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824112-FoodNStuff.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":15471134777299,\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"98.2.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"62.7.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"53.9.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"13.9.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"50.7.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"40.7.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":66395250,\"moneyMax\":1659881250,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":190,\"serverGrowth\":37,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"69.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":40295705,\"moneyMax\":1007392625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":27,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"19.0.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"8.5.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":480,\"serverGrowth\":44,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"55.0.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1076,\"serverGrowth\":58,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"29.9.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":733,\"serverGrowth\":60,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"74.6.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"45.9.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":358,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982545-FoodNStuff.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()((a))())\",\"reward\":{\"type\":2,\"name\":\"FoodNStuff\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"9.1.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":209,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"67.1.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"0.6.6.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":54,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"7.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"27.5.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"26.8.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":1170.8417025641052}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"JetBrainsMonoNL NF, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"JetBrainsMono NFP\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1701183632542","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}