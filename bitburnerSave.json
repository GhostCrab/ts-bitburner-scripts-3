{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":21,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":351},\"exp\":{\"hacking\":346.62071602009985,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":30448435.099855896},\"mults\":{\"hacking_chance\":2.014050148866364,\"hacking_speed\":1.8700718044947966,\"hacking_money\":2.3872991869679634,\"hacking_grow\":1.6607298691951051,\"hacking\":2.4907800669178926,\"hacking_exp\":3.551441762501022,\"strength\":1.45678058701325,\"strength_exp\":1.8428274425717612,\"defense\":1.45678058701325,\"defense_exp\":1.8428274425717612,\"dexterity\":1.45678058701325,\"dexterity_exp\":1.8428274425717612,\"agility\":1.45678058701325,\"agility_exp\":1.8428274425717612,\"charisma\":1.9229503748574903,\"charisma_exp\":1.8428274425717612,\"hacknet_node_money\":3.6741372136274477,\"hacknet_node_purchase_cost\":0.5251305562551692,\"hacknet_node_ram_cost\":0.6864451715753844,\"hacknet_node_core_cost\":0.6864451715753844,\"hacknet_node_level_cost\":0.5834783958390768,\"company_rep\":2.4325322241947256,\"faction_rep\":1.8428274425717612,\"work_money\":1.602458645714575,\"crime_success\":1.45678058701325,\"crime_money\":1.45678058701325,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":9,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"NiteSec\",\"Sector-12\",\"Netburners\",\"CyberSec\",\"Tian Di Hui\",\"Aevum\",\"Shadows of Anarchy\"]},\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":192,\"hashes\":0.7376296385012595,\"upgrades\":{\"Sell for Money\":17,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Rothman University\",\"money\":1049337.1931821692,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-11712,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":17000000,\"hacknet_expenses\":-16738950.80681783,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":49337.19318216969,\"work\":0,\"servers\":0,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2078784,\"codingcontract\":10912500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":94261535625.91685,\"hacknet\":710759977053.8713,\"hacknet_expenses\":-639084923192.0405,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":14659205314.115921,\"work\":2018713.2300945218,\"servers\":-23216018709.024063,\"other\":-634200000,\"augmentations\":-138339605393.8469}},\"playtimeSinceLastAug\":1373200,\"playtimeSinceLastBitnode\":233913600,\"lastAugReset\":1703106185118,\"lastNodeReset\":1702873644234,\"purchasedServers\":[],\"scriptProdSinceLastAug\":0,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3],[5,3]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1701145827995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1701202374276},{\"ID\":\"TOR\",\"unlockedOn\":1701204414269},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1701204774270},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1701208374382},{\"ID\":\"TRAVEL\",\"unlockedOn\":1701242031010},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1701271371001},{\"ID\":\"NITESEC\",\"unlockedOn\":1701280769859},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1701284874684},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701300894746},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1701302696087},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1701302696090},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1701302696092},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1701307089796},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1701324411006},{\"ID\":\"DONATION\",\"unlockedOn\":1701385029644},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701389755155},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1701394988151},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1701397071007},{\"ID\":\"SF1.1\",\"unlockedOn\":1701404107814},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701475371158},{\"ID\":\"FROZE\",\"unlockedOn\":1701651553761},{\"ID\":\"SF4.1\",\"unlockedOn\":1701668013083},{\"ID\":\"SF5.1\",\"unlockedOn\":1701890115524},{\"ID\":\"INTELLIGENCE_255\",\"unlockedOn\":1702033193607},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1702333219049},{\"ID\":\"FAST_BN\",\"unlockedOn\":1702422790111},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1702873693943},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1702878129968},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1702880109833},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1702880109835}],\"terminalCommandHistory\":[\"sb\",\"bd\",\"eval\",\"evak\",\"eval\",\"sh n00dles \",\"kh\",\"exp\",\"sb\",\"buy -l\",\"s\",\"sb\",\"eval foodnstuff \",\"cct\",\"bd\",\"t\",\"tail test.js \",\"d\",\"sb\",\"bd\",\"eval\",\"sb\",\"bd\",\"eval\",\"bd\",\"sb\",\"b\",\"bd\",\"cct\",\"aug\",\"tail test.js \",\"kill test.js \",\"bd\",\"sb\",\"bd\",\"cct\",\"aug i\",\"reset\",\"./reset.js \",\"t\",\"bd\",\"sb\",\"bd\",\"eval\",\"kill te\",\"kill test.js \",\"t\",\"tail test.js\",\"./learn.js \",\"tail test.js\"],\"lastUpdate\":1703107558239,\"lastSave\":1703107558011,\"totalPlaytime\":1966522600,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"68b2bba17d5b1\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"50.8.4.7\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"util.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HGW_RAM = 1.75;\\nexport const GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\nexport const WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\nexport const HOME_RESERVE = 512;\\nexport const MS_BETWEEN_OPERATIONS = 10;\\nexport const HACK_PERCENT = 0.1;\\nexport const HACK_PERCENT_MAX = 0.8;\\nexport const MAX_BATCHES_PER_CYCLE = 2000;\\nexport const GROW_THREAD_MULT = 1.4;\\nexport function getAllServers(ns) {\\n    const servers = new Set();\\n    const queue = ['home'];\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const host = queue.pop();\\n        if (host === undefined)\\n            break;\\n        servers.add(host);\\n        const connectedServers = ns.scan(host);\\n        queue.push(...connectedServers.filter(server => !servers.has(server)));\\n    }\\n    return Array.from(servers);\\n}\\n// returns growth multiplier when executing grow with the given number of threads\\nexport function invGrowthAnalyze(ns, target, threads, max, min) {\\n    if (ns.getServerMaxMoney(target) === ns.getServerMoneyAvailable(target))\\n        return 1;\\n    // if (min !== undefined && min <= 1) return 1;\\n    max = max || ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1);\\n    min = min || 1.000001;\\n    if (Math.round(min * 100000) >= Math.round(max * 100000))\\n        return min;\\n    const mid = min + ((max - min) / 2);\\n    // ns.tprintf(`min:${min}|mid:${mid}|max:${max}`);\\n    const ga = Math.floor(ns.growthAnalyze(target, mid));\\n    // ns.tprintf(`ga:${ga}`);\\n    if (ga === threads)\\n        return mid;\\n    if (ga > threads)\\n        return invGrowthAnalyze(ns, target, threads, mid, min);\\n    return invGrowthAnalyze(ns, target, threads, max, mid);\\n}\\nexport function formatTime(time, showms = false) {\\n    const ms = time % 1000;\\n    const seconds = Math.floor(time / 1000) % 60;\\n    const minutes = Math.floor(time / 1000 / 60) % 60;\\n    const hours = Math.floor(time / 1000 / 60 / 60);\\n    if (showms)\\n        return `${(minutes > 0 ? minutes.toFixed(0) + ':' : '')}${seconds.toFixed(0).padStart(2, '0')}.${ms.toFixed(0).padStart(3, '0')}`;\\n    return `${(hours > 0 ? hours.toFixed(0) + ':' : '')}${((minutes > 0 || hours > 0) ? minutes.toFixed(0).padStart(2, '0') + ':' : '')}${seconds.toFixed(0).padStart(2, '0')}`;\\n}\\nexport function getSlaves(ns) {\\n    const servers = getAllServers(ns);\\n    return servers.filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s) && !s.startsWith('hacknet')).sort((a, b) => getSlaveThreads(ns, b) - getSlaveThreads(ns, a));\\n    //return servers.filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s)).sort((a, b) => getSlaveThreads(ns, b) - getSlaveThreads(ns, a));\\n}\\nexport function getTotalThreads(ns, slaves, homeReserve = HOME_RESERVE) {\\n    if (homeReserve > ns.getServerMaxRam('home'))\\n        homeReserve = ns.getServerMaxRam('home');\\n    let totalThreads = slaves.reduce((count, slave) => count + Math.floor(ns.getServerMaxRam(slave) / HGW_RAM), 0);\\n    if (slaves.includes('home')) {\\n        totalThreads -= Math.ceil(homeReserve / HGW_RAM);\\n    }\\n    return totalThreads;\\n}\\nexport function getSlaveThreads(ns, slave, homeReserve = HOME_RESERVE) {\\n    if (homeReserve > ns.getServerMaxRam('home'))\\n        homeReserve = ns.getServerMaxRam('home');\\n    let slaveThreads = Math.floor(ns.getServerMaxRam(slave) / HGW_RAM);\\n    if (slave === 'home') {\\n        slaveThreads -= Math.ceil(homeReserve / HGW_RAM);\\n        slaveThreads = Math.max(0, slaveThreads);\\n    }\\n    return slaveThreads;\\n}\\nexport async function doHackWeakenGrowWeaken(ns, target) {\\n    const slaves = getSlaves(ns);\\n    const totalThreads = getTotalThreads(ns, slaves);\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\n    const current = ns.getServerMoneyAvailable(target);\\n    let hackThreads = 1;\\n    let maxGain = 0;\\n    let finalHackThreads = 0;\\n    while (true) {\\n        const hackPercent = ns.hackAnalyze(target) * hackThreads;\\n        if (hackPercent > .9)\\n            break;\\n        const future = current - (current * hackPercent);\\n        const growMult = current / future;\\n        const growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\n        const gain = current - future;\\n        const hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / WEAK_SEC);\\n        const gwT = Math.ceil(growThreads / (WEAK_SEC / GROW_SEC));\\n        const totalHWGWThreads = hackThreads + hackWeakenThreads + growThreads + gwT;\\n        if (totalHWGWThreads > totalThreads)\\n            break;\\n        if (gain > maxGain) {\\n            maxGain = gain;\\n            finalHackThreads = hackThreads;\\n        }\\n        hackThreads++;\\n    }\\n    hackThreads = finalHackThreads;\\n    const hackPercent = ns.hackAnalyze(target) * hackThreads;\\n    const future = current - (current * hackPercent);\\n    const growMult = current / future;\\n    let growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\n    const gain = current - future;\\n    let hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / WEAK_SEC);\\n    let growWeakenThreads = Math.ceil(growThreads / (WEAK_SEC / GROW_SEC));\\n    const totalHWGWThreads = hackThreads + hackWeakenThreads + growThreads + growWeakenThreads;\\n    const curStr = ns.formatNumber(current, 3, 1000, true);\\n    const futStr = ns.formatNumber(future, 3, 1000, true);\\n    const resStr = ns.formatNumber(future * growMult, 3, 1000, true);\\n    const gainStr = ns.formatNumber(gain, 3, 1000, true);\\n    // hack finish first, then hw, then grow, then gw\\n    const hackMSBuf = weakTime - hackTime - 200;\\n    const hackWeakMSBuf = 0;\\n    const growMSBuf = (weakTime - growTime) + 200;\\n    const growWeakMSBuf = 400;\\n    ns.tprintf(`current:${curStr}|future:${futStr}|growMult:${growMult}|result:${resStr}|gain:${gainStr}|tot:${totalHWGWThreads}|${formatTime(weakTime + growWeakMSBuf)}`);\\n    for (const s of slaves) {\\n        let slaveThreads = getSlaveThreads(ns, s);\\n        const slaveHackThreads = Math.min(slaveThreads, hackThreads);\\n        slaveThreads -= slaveHackThreads;\\n        hackThreads -= slaveHackThreads;\\n        const slaveHackWeakenThreads = Math.min(slaveThreads, hackWeakenThreads);\\n        slaveThreads -= slaveHackWeakenThreads;\\n        hackWeakenThreads -= slaveHackWeakenThreads;\\n        const slaveGrowThreads = Math.min(slaveThreads, growThreads);\\n        slaveThreads -= slaveGrowThreads;\\n        growThreads -= slaveGrowThreads;\\n        const slaveWeakenGrowThreads = Math.min(slaveThreads, growWeakenThreads);\\n        slaveThreads -= slaveWeakenGrowThreads;\\n        growWeakenThreads -= slaveWeakenGrowThreads;\\n        if (slaveHackThreads > 0)\\n            ns.exec('hack.js', s, slaveHackThreads, target, hackMSBuf);\\n        if (slaveHackWeakenThreads > 0)\\n            ns.exec('weaken.js', s, slaveHackWeakenThreads, target, hackWeakMSBuf);\\n        if (slaveGrowThreads > 0)\\n            ns.exec('grow.js', s, slaveGrowThreads, target, growMSBuf);\\n        if (slaveWeakenGrowThreads > 0)\\n            ns.exec('weaken.js', s, slaveWeakenGrowThreads, target, growWeakMSBuf);\\n    }\\n    await waitForHGWScripts(ns, slaves);\\n}\\nexport async function doGrowWeaken(ns, target) {\\n    const slaves = getSlaves(ns);\\n    const totalThreads = getTotalThreads(ns, slaves);\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\n    const growMSBuf = weakTime - growTime;\\n    // run 1 weaken thread for every 12.5 grow threads;\\n    let weakenThreads = Math.ceil(totalThreads / (WEAK_SEC / GROW_SEC));\\n    let growThreads = totalThreads - weakenThreads;\\n    const availableMoney = ns.getServerMoneyAvailable(target);\\n    const maxMoney = ns.getServerMaxMoney(target);\\n    const growResult = invGrowthAnalyze(ns, target, growThreads) * availableMoney;\\n    ns.tprintf(`Growing ${target} sec:${ns.getServerSecurityLevel(target)}|wt:${weakenThreads}|gt:${growThreads} ${ns.formatNumber(availableMoney, 3, 1000, true)} => ${ns.formatNumber(growResult, 3, 1000, true)} / ${ns.formatNumber(maxMoney, 3, 1000, true)} ${formatTime(weakTime + 200)}`);\\n    for (const s of slaves) {\\n        let slaveThreads = getSlaveThreads(ns, s);\\n        const slaveWeakenThreads = Math.min(slaveThreads, weakenThreads);\\n        slaveThreads -= slaveWeakenThreads;\\n        weakenThreads -= slaveWeakenThreads;\\n        const slaveGrowThreads = Math.min(slaveThreads, growThreads);\\n        slaveThreads -= slaveGrowThreads;\\n        growThreads -= slaveGrowThreads;\\n        if (slaveWeakenThreads > 0)\\n            ns.exec('weaken.js', s, slaveWeakenThreads, target, 200);\\n        if (slaveGrowThreads > 0)\\n            ns.exec('grow.js', s, slaveGrowThreads, target, growMSBuf);\\n    }\\n    if (weakenThreads > 0)\\n        ns.tprint(`WARNING [doGrowWeaken]: ${weakenThreads} Weaken Threads unaccounted`);\\n    if (growThreads > 0)\\n        ns.tprint(`WARNING [doGrowWeaken]: ${growThreads} Grow Threads unaccounted`);\\n    await waitForHGWScripts(ns, slaves);\\n}\\nexport async function doWeaken(ns, target) {\\n    const slaves = getSlaves(ns);\\n    const totalThreads = getTotalThreads(ns, slaves);\\n    const weakenPerRound = totalThreads * 0.05;\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\n    const currentSec = ns.getServerSecurityLevel(target);\\n    const targetSec = Math.max(currentSec - weakenPerRound, ns.getServerMinSecurityLevel(target));\\n    ns.tprintf(`Weakening ${target} ${currentSec.toFixed(2)} => ${targetSec} / ${ns.getServerMinSecurityLevel(target)} ${formatTime(weakTime + 200)}`);\\n    let weakenThreads = Math.min(Math.ceil((currentSec - targetSec) / WEAK_SEC), totalThreads);\\n    for (const s of slaves) {\\n        let slaveThreads = getSlaveThreads(ns, s);\\n        const slaveWeakenThreads = Math.min(slaveThreads, weakenThreads);\\n        slaveThreads -= slaveWeakenThreads;\\n        weakenThreads -= slaveWeakenThreads;\\n        if (slaveWeakenThreads > 0)\\n            ns.exec('weaken.js', s, slaveWeakenThreads, target, 200);\\n    }\\n    await waitForHGWScripts(ns, slaves);\\n}\\nexport async function waitForHGWScripts(ns, slaves) {\\n    while (slaves.some(s => ns.ps(s).some(script => script.filename === 'hack.js' || script.filename === 'grow.js' || script.filename === 'weaken.js')))\\n        await ns.sleep(20);\\n}\\nexport const ALL_FACTIONS = [\\n    \\\"Illuminati\\\",\\n    \\\"Daedalus\\\",\\n    \\\"The Covenant\\\",\\n    \\\"ECorp\\\",\\n    \\\"MegaCorp\\\",\\n    \\\"Bachman & Associates\\\",\\n    \\\"Blade Industries\\\",\\n    \\\"NWO\\\",\\n    \\\"Clarke Incorporated\\\",\\n    \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\",\\n    \\\"KuaiGong International\\\",\\n    \\\"Fulcrum Secret Technologies\\\",\\n    \\\"BitRunners\\\",\\n    \\\"The Black Hand\\\",\\n    \\\"NiteSec\\\",\\n    \\\"Aevum\\\",\\n    \\\"Chongqing\\\",\\n    \\\"Ishima\\\",\\n    \\\"New Tokyo\\\",\\n    \\\"Sector-12\\\",\\n    \\\"Volhaven\\\",\\n    \\\"Speakers for the Dead\\\",\\n    \\\"The Dark Army\\\",\\n    \\\"The Syndicate\\\",\\n    \\\"Silhouette\\\",\\n    \\\"Tetrads\\\",\\n    \\\"Slum Snakes\\\",\\n    \\\"Netburners\\\",\\n    \\\"Tian Di Hui\\\",\\n    \\\"CyberSec\\\",\\n    \\\"Bladeburners\\\",\\n    \\\"Church of the Machine God\\\",\\n    \\\"Shadows of Anarchy\\\",\\n];\\nexport function isRootable(ns, s, pCount) {\\n    if (ns.hasRootAccess(s))\\n        return false;\\n    if (ns.getServerNumPortsRequired(s) <= pCount)\\n        return true;\\n    return false;\\n}\\nexport function isHackable(ns, s, pCount) {\\n    if (ns.hasRootAccess(s))\\n        return false;\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\n    const hackLv = ns.getHackingLevel();\\n    const portsRequired = ns.getServerNumPortsRequired(s);\\n    if (hackLv >= hackReq && portsRequired <= pCount)\\n        return true;\\n    return false;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDNUIsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUMzRSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7QUFFaEMsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDaEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFFcEMsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFNO0lBQ2xDLE1BQU0sT0FBTyxHQUFnQixJQUFJLEdBQUcsRUFBVSxDQUFDO0lBQy9DLE1BQU0sS0FBSyxHQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakMsaURBQWlEO0lBQ2pELE9BQU0sSUFBSSxFQUFFO1FBQ1YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxNQUFNO1FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxD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QkFBeUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFM0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxFQUFNLEVBQUUsQ0FBUyxFQUFFLE1BQWM7SUFDMUQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXRDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDcEMsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxhQUFhLElBQUksTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTlELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgY29uc3QgSEdXX1JBTSA9IDEuNzU7XG5leHBvcnQgY29uc3QgR1JPV19TRUMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDEsICdvbWVnYS1uZXQnKTtcbmV4cG9ydCBjb25zdCBXRUFLX1NFQyA9IDAuMDU7IC8vIG5zLndlYWtlbkFuYWx5emUoMSk7XG5leHBvcnQgY29uc3QgSE9NRV9SRVNFUlZFID0gNTEyO1xuXG5leHBvcnQgY29uc3QgTVNfQkVUV0VFTl9PUEVSQVRJT05TID0gMTA7XG5leHBvcnQgY29uc3QgSEFDS19QRVJDRU5UID0gMC4xO1xuZXhwb3J0IGNvbnN0IEhBQ0tfUEVSQ0VOVF9NQVggPSAwLjg7XG5leHBvcnQgY29uc3QgTUFYX0JBVENIRVNfUEVSX0NZQ0xFID0gMjAwMDtcbmV4cG9ydCBjb25zdCBHUk9XX1RIUkVBRF9NVUxUID0gMS40O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsU2VydmVycyhuczogTlMpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHNlcnZlcnM6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGNvbnN0IHF1ZXVlOiBzdHJpbmdbXSA9IFsnaG9tZSddO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgd2hpbGUodHJ1ZSkge1xuICAgIGNvbnN0IGhvc3QgPSBxdWV1ZS5wb3AoKTtcbiAgICBpZiAoaG9zdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcblxuICAgIHNlcnZlcnMuYWRkKGhvc3QpO1xuICAgIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGhvc3QpO1xuICAgIHF1ZXVlLnB1c2goLi4uY29ubmVjdGVkU2VydmVycy5maWx0ZXIoc2VydmVyID0+ICFzZXJ2ZXJzLmhhcyhzZXJ2ZXIpKSk7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuZnJvbShzZXJ2ZXJzKTtcbn1cblxuLy8gcmV0dXJucyBncm93dGggbXVsdGlwbGllciB3aGVuIGV4ZWN1dGluZyBncm93IHdpdGggdGhlIGdpdmVuIG51bWJlciBvZiB0aHJlYWRzXG5leHBvcnQgZnVuY3Rpb24gaW52R3Jvd3RoQW5hbHl6ZShuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlYWRzOiBudW1iZXIsIG1heD86IG51bWJlciwgbWluPzogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkgPT09IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkpIHJldHVybiAxO1xuICAvLyBpZiAobWluICE9PSB1bmRlZmluZWQgJiYgbWluIDw9IDEpIHJldHVybiAxO1xuXG4gIG1heCA9IG1heCB8fCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgKyAxKTtcbiAgbWluID0gbWluIHx8IDEuMDAwMDAxO1xuICBcbiAgaWYoTWF0aC5yb3VuZChtaW4qMTAwMDAwKSA+PSBNYXRoLnJvdW5kKG1heCoxMDAwMDApKSByZXR1cm4gbWluO1xuICBcbiAgY29uc3QgbWlkID0gbWluICsgKChtYXggLSBtaW4pIC8gMik7XG5cbiAgLy8gbnMudHByaW50ZihgbWluOiR7bWlufXxtaWQ6JHttaWR9fG1heDoke21heH1gKTtcbiAgXG4gIGNvbnN0IGdhID0gTWF0aC5mbG9vcihucy5ncm93dGhBbmFseXplKHRhcmdldCwgbWlkKSk7XG4gIFxuICAvLyBucy50cHJpbnRmKGBnYToke2dhfWApO1xuXG4gIGlmIChnYSA9PT0gdGhyZWFkcykgcmV0dXJuIG1pZDtcblxuICBpZiAoZ2EgPiB0aHJlYWRzKSByZXR1cm4gaW52R3Jvd3RoQW5hbHl6ZShucywgdGFyZ2V0LCB0aHJlYWRzLCBtaWQsIG1pbik7XG5cbiAgcmV0dXJuIGludkdyb3d0aEFuYWx5emUobnMsIHRhcmdldCwgdGhyZWFkcywgbWF4LCBtaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZSh0aW1lOiBudW1iZXIsIHNob3dtcyA9IGZhbHNlKTogc3RyaW5nIHtcbiAgY29uc3QgbXMgPSB0aW1lICUgMTAwMDtcbiAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IodGltZSAvIDEwMDApICUgNjA7XG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRpbWUgLyAxMDAwIC8gNjApICUgNjA7XG4gIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0aW1lIC8gMTAwMCAvIDYwIC8gNjApO1xuXG4gIGlmIChzaG93bXMpXG4gICAgcmV0dXJuIGAkeyhtaW51dGVzID4gMCA/IG1pbnV0ZXMudG9GaXhlZCgwKSArICc6JyA6ICcnKX0ke3NlY29uZHMudG9GaXhlZCgwKS5wYWRTdGFydCgyLCAnMCcpfS4ke21zLnRvRml4ZWQoMCkucGFkU3RhcnQoMywgJzAnKX1gO1xuICBcbiAgcmV0dXJuIGAkeyhob3VycyA+IDAgPyBob3Vycy50b0ZpeGVkKDApICsgJzonIDogJycpfSR7KChtaW51dGVzID4gMCB8fCBob3VycyA+IDApID8gbWludXRlcy50b0ZpeGVkKDApLnBhZFN0YXJ0KDIsICcwJykgKyAnOicgOiAnJyl9JHtzZWNvbmRzLnRvRml4ZWQoMCkucGFkU3RhcnQoMiwgJzAnKX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xhdmVzKG5zOiBOUykge1xuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XG4gIHJldHVybiBzZXJ2ZXJzLmZpbHRlcihzID0+IG5zLmdldFNlcnZlck1heFJhbShzKSA+IDAgJiYgbnMuaGFzUm9vdEFjY2VzcyhzKSAmJiAhcy5zdGFydHNXaXRoKCdoYWNrbmV0JykpLnNvcnQoKGEsIGIpID0+IGdldFNsYXZlVGhyZWFkcyhucywgYikgLSBnZXRTbGF2ZVRocmVhZHMobnMsIGEpKTtcbiAgLy9yZXR1cm4gc2VydmVycy5maWx0ZXIocyA9PiBucy5nZXRTZXJ2ZXJNYXhSYW0ocykgPiAwICYmIG5zLmhhc1Jvb3RBY2Nlc3MocykpLnNvcnQoKGEsIGIpID0+IGdldFNsYXZlVGhyZWFkcyhucywgYikgLSBnZXRTbGF2ZVRocmVhZHMobnMsIGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvdGFsVGhyZWFkcyhuczogTlMsIHNsYXZlczogc3RyaW5nW10sIGhvbWVSZXNlcnZlID0gSE9NRV9SRVNFUlZFKSB7XG4gIGlmIChob21lUmVzZXJ2ZSA+IG5zLmdldFNlcnZlck1heFJhbSgnaG9tZScpKSBob21lUmVzZXJ2ZSA9IG5zLmdldFNlcnZlck1heFJhbSgnaG9tZScpO1xuICBsZXQgdG90YWxUaHJlYWRzID0gc2xhdmVzLnJlZHVjZSgoY291bnQsIHNsYXZlKSA9PiBjb3VudCArIE1hdGguZmxvb3IobnMuZ2V0U2VydmVyTWF4UmFtKHNsYXZlKSAvIEhHV19SQU0pLCAwKTtcblxuICBpZihzbGF2ZXMuaW5jbHVkZXMoJ2hvbWUnKSkge1xuICAgIHRvdGFsVGhyZWFkcyAtPSBNYXRoLmNlaWwoaG9tZVJlc2VydmUgLyBIR1dfUkFNKTtcbiAgfVxuXG4gIHJldHVybiB0b3RhbFRocmVhZHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTbGF2ZVRocmVhZHMobnM6IE5TLCBzbGF2ZTogc3RyaW5nLCBob21lUmVzZXJ2ZSA9IEhPTUVfUkVTRVJWRSkge1xuICBpZiAoaG9tZVJlc2VydmUgPiBucy5nZXRTZXJ2ZXJNYXhSYW0oJ2hvbWUnKSkgaG9tZVJlc2VydmUgPSBucy5nZXRTZXJ2ZXJNYXhSYW0oJ2hvbWUnKTtcbiAgbGV0IHNsYXZlVGhyZWFkcyA9IE1hdGguZmxvb3IobnMuZ2V0U2VydmVyTWF4UmFtKHNsYXZlKSAvIEhHV19SQU0pO1xuICBpZiAoc2xhdmUgPT09ICdob21lJykge1xuICAgIHNsYXZlVGhyZWFkcyAtPSBNYXRoLmNlaWwoaG9tZVJlc2VydmUgLyBIR1dfUkFNKVxuICAgIHNsYXZlVGhyZWFkcyA9IE1hdGgubWF4KDAsIHNsYXZlVGhyZWFkcyk7XG4gIH1cblxuICByZXR1cm4gc2xhdmVUaHJlYWRzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9IYWNrV2Vha2VuR3Jvd1dlYWtlbihuczogTlMsIHRhcmdldDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHNsYXZlcyA9IGdldFNsYXZlcyhucyk7XG4gIGNvbnN0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcblxuICBjb25zdCB3ZWFrVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xuICBjb25zdCBncm93VGltZSA9IE1hdGguY2VpbChucy5nZXRHcm93VGltZSh0YXJnZXQpKTtcbiAgY29uc3QgaGFja1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0SGFja1RpbWUodGFyZ2V0KSk7XG5cbiAgY29uc3QgY3VycmVudCA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XG4gIGxldCBoYWNrVGhyZWFkcyA9IDE7XG4gIGxldCBtYXhHYWluID0gMDtcbiAgbGV0IGZpbmFsSGFja1RocmVhZHMgPSAwO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuaGFja0FuYWx5emUodGFyZ2V0KSAqIGhhY2tUaHJlYWRzO1xuICAgIGlmIChoYWNrUGVyY2VudCA+IC45KSBicmVhaztcblxuICAgIGNvbnN0IGZ1dHVyZSA9IGN1cnJlbnQgLSAoY3VycmVudCAqIGhhY2tQZXJjZW50KTtcbiAgICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XG4gICAgY29uc3QgZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIGdyb3dNdWx0KSk7XG4gICAgY29uc3QgZ2FpbiA9IGN1cnJlbnQgLSBmdXR1cmU7XG5cbiAgICBjb25zdCBoYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xuICAgIGNvbnN0IGd3VCA9IE1hdGguY2VpbChncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XG4gICAgY29uc3QgdG90YWxIV0dXVGhyZWFkcyA9IGhhY2tUaHJlYWRzK2hhY2tXZWFrZW5UaHJlYWRzK2dyb3dUaHJlYWRzK2d3VDtcbiAgICBpZiAodG90YWxIV0dXVGhyZWFkcyA+IHRvdGFsVGhyZWFkcykgYnJlYWs7XG5cbiAgICBpZiAoZ2FpbiA+IG1heEdhaW4pIHtcbiAgICAgIG1heEdhaW4gPSBnYWluO1xuICAgICAgZmluYWxIYWNrVGhyZWFkcyA9IGhhY2tUaHJlYWRzO1xuICAgIH1cbiAgICBcbiAgICBoYWNrVGhyZWFkcysrO1xuICB9XG5cbiAgaGFja1RocmVhZHMgPSBmaW5hbEhhY2tUaHJlYWRzO1xuICBjb25zdCBoYWNrUGVyY2VudCA9IG5zLmhhY2tBbmFseXplKHRhcmdldCkgKiBoYWNrVGhyZWFkcztcbiAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xuICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XG4gIGxldCBncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgZ3Jvd011bHQpKTtcbiAgY29uc3QgZ2FpbiA9IGN1cnJlbnQgLSBmdXR1cmU7XG5cbiAgbGV0IGhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoaGFja1RocmVhZHMsIHRhcmdldCkgLyBXRUFLX1NFQyk7XG4gIGxldCBncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XG4gIGNvbnN0IHRvdGFsSFdHV1RocmVhZHMgPSBoYWNrVGhyZWFkcytoYWNrV2Vha2VuVGhyZWFkcytncm93VGhyZWFkcytncm93V2Vha2VuVGhyZWFkcztcblxuICBjb25zdCBjdXJTdHIgPSBucy5mb3JtYXROdW1iZXIoY3VycmVudCwgMywgMTAwMCwgdHJ1ZSk7XG4gIGNvbnN0IGZ1dFN0ciA9IG5zLmZvcm1hdE51bWJlcihmdXR1cmUsIDMsIDEwMDAsIHRydWUpO1xuICBjb25zdCByZXNTdHIgPSBucy5mb3JtYXROdW1iZXIoZnV0dXJlKmdyb3dNdWx0LCAzLCAxMDAwLCB0cnVlKTtcbiAgY29uc3QgZ2FpblN0ciA9IG5zLmZvcm1hdE51bWJlcihnYWluLCAzLCAxMDAwLCB0cnVlKTtcblxuICAvLyBoYWNrIGZpbmlzaCBmaXJzdCwgdGhlbiBodywgdGhlbiBncm93LCB0aGVuIGd3XG4gIGNvbnN0IGhhY2tNU0J1ZiA9IHdlYWtUaW1lIC0gaGFja1RpbWUgLSAyMDA7XG4gIGNvbnN0IGhhY2tXZWFrTVNCdWYgPSAwO1xuICBjb25zdCBncm93TVNCdWYgPSAod2Vha1RpbWUgLSBncm93VGltZSkgKyAyMDA7XG4gIGNvbnN0IGdyb3dXZWFrTVNCdWYgPSA0MDA7XG5cbiAgbnMudHByaW50ZihgY3VycmVudDoke2N1clN0cn18ZnV0dXJlOiR7ZnV0U3RyfXxncm93TXVsdDoke2dyb3dNdWx0fXxyZXN1bHQ6JHtyZXNTdHJ9fGdhaW46JHtnYWluU3RyfXx0b3Q6JHt0b3RhbEhXR1dUaHJlYWRzfXwke2Zvcm1hdFRpbWUod2Vha1RpbWUrZ3Jvd1dlYWtNU0J1Zil9YCk7XG4gIFxuICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XG5cbiAgICBjb25zdCBzbGF2ZUhhY2tUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBoYWNrVGhyZWFkcyk7XG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlSGFja1RocmVhZHM7XG4gICAgaGFja1RocmVhZHMgLT0gc2xhdmVIYWNrVGhyZWFkcztcblxuICAgIGNvbnN0IHNsYXZlSGFja1dlYWtlblRocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIGhhY2tXZWFrZW5UaHJlYWRzKTtcbiAgICBzbGF2ZVRocmVhZHMgLT0gc2xhdmVIYWNrV2Vha2VuVGhyZWFkcztcbiAgICBoYWNrV2Vha2VuVGhyZWFkcyAtPSBzbGF2ZUhhY2tXZWFrZW5UaHJlYWRzO1xuXG4gICAgY29uc3Qgc2xhdmVHcm93VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgZ3Jvd1RocmVhZHMpO1xuICAgIHNsYXZlVGhyZWFkcyAtPSBzbGF2ZUdyb3dUaHJlYWRzO1xuICAgIGdyb3dUaHJlYWRzIC09IHNsYXZlR3Jvd1RocmVhZHM7XG5cbiAgICBjb25zdCBzbGF2ZVdlYWtlbkdyb3dUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBncm93V2Vha2VuVGhyZWFkcyk7XG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlV2Vha2VuR3Jvd1RocmVhZHM7XG4gICAgZ3Jvd1dlYWtlblRocmVhZHMgLT0gc2xhdmVXZWFrZW5Hcm93VGhyZWFkcztcblxuICAgIGlmIChzbGF2ZUhhY2tUaHJlYWRzID4gMCkgbnMuZXhlYygnaGFjay5qcycsIHMsIHNsYXZlSGFja1RocmVhZHMsIHRhcmdldCwgaGFja01TQnVmKTtcbiAgICBpZiAoc2xhdmVIYWNrV2Vha2VuVGhyZWFkcyA+IDApIG5zLmV4ZWMoJ3dlYWtlbi5qcycsIHMsIHNsYXZlSGFja1dlYWtlblRocmVhZHMsIHRhcmdldCwgaGFja1dlYWtNU0J1Zik7XG4gICAgaWYgKHNsYXZlR3Jvd1RocmVhZHMgPiAwKSBucy5leGVjKCdncm93LmpzJywgcywgc2xhdmVHcm93VGhyZWFkcywgdGFyZ2V0LCBncm93TVNCdWYpO1xuICAgIGlmIChzbGF2ZVdlYWtlbkdyb3dUaHJlYWRzID4gMCkgbnMuZXhlYygnd2Vha2VuLmpzJywgcywgc2xhdmVXZWFrZW5Hcm93VGhyZWFkcywgdGFyZ2V0LCBncm93V2Vha01TQnVmKTtcbiAgfVxuXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9Hcm93V2Vha2VuKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcbiAgY29uc3QgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xuXG4gIGNvbnN0IHdlYWtUaW1lID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XG4gIGNvbnN0IGdyb3dUaW1lID0gTWF0aC5jZWlsKG5zLmdldEdyb3dUaW1lKHRhcmdldCkpO1xuICBjb25zdCBncm93TVNCdWYgPSB3ZWFrVGltZSAtIGdyb3dUaW1lO1xuXG4gIC8vIHJ1biAxIHdlYWtlbiB0aHJlYWQgZm9yIGV2ZXJ5IDEyLjUgZ3JvdyB0aHJlYWRzO1xuICBsZXQgd2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCh0b3RhbFRocmVhZHMgLyAoV0VBS19TRUMgLyBHUk9XX1NFQykpO1xuICBsZXQgZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSB3ZWFrZW5UaHJlYWRzO1xuXG4gIGNvbnN0IGF2YWlsYWJsZU1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcbiAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xuICBjb25zdCBncm93UmVzdWx0ID0gaW52R3Jvd3RoQW5hbHl6ZShucywgdGFyZ2V0LCBncm93VGhyZWFkcykgKiBhdmFpbGFibGVNb25leTtcblxuICBucy50cHJpbnRmKGBHcm93aW5nICR7dGFyZ2V0fSBzZWM6JHtucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCl9fHd0OiR7d2Vha2VuVGhyZWFkc318Z3Q6JHtncm93VGhyZWFkc30gJHtucy5mb3JtYXROdW1iZXIoYXZhaWxhYmxlTW9uZXksIDMsIDEwMDAsIHRydWUpfSA9PiAke25zLmZvcm1hdE51bWJlcihncm93UmVzdWx0LCAzLCAxMDAwLCB0cnVlKX0gLyAke25zLmZvcm1hdE51bWJlcihtYXhNb25leSwgMywgMTAwMCwgdHJ1ZSl9ICR7Zm9ybWF0VGltZSh3ZWFrVGltZSsyMDApfWApO1xuXG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcblxuICAgIGNvbnN0IHNsYXZlV2Vha2VuVGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgd2Vha2VuVGhyZWFkcyk7XG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlV2Vha2VuVGhyZWFkcztcbiAgICB3ZWFrZW5UaHJlYWRzIC09IHNsYXZlV2Vha2VuVGhyZWFkcztcbiAgICBjb25zdCBzbGF2ZUdyb3dUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBncm93VGhyZWFkcyk7XG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlR3Jvd1RocmVhZHM7XG4gICAgZ3Jvd1RocmVhZHMgLT0gc2xhdmVHcm93VGhyZWFkcztcblxuICAgIGlmIChzbGF2ZVdlYWtlblRocmVhZHMgPiAwKSBucy5leGVjKCd3ZWFrZW4uanMnLCBzLCBzbGF2ZVdlYWtlblRocmVhZHMsIHRhcmdldCwgMjAwKTtcbiAgICBpZiAoc2xhdmVHcm93VGhyZWFkcyA+IDApIG5zLmV4ZWMoJ2dyb3cuanMnLCBzLCBzbGF2ZUdyb3dUaHJlYWRzLCB0YXJnZXQsIGdyb3dNU0J1Zik7XG4gIH1cblxuICBpZiAod2Vha2VuVGhyZWFkcyA+IDApIG5zLnRwcmludChgV0FSTklORyBbZG9Hcm93V2Vha2VuXTogJHt3ZWFrZW5UaHJlYWRzfSBXZWFrZW4gVGhyZWFkcyB1bmFjY291bnRlZGApO1xuICBpZiAoZ3Jvd1RocmVhZHMgPiAwKSBucy50cHJpbnQoYFdBUk5JTkcgW2RvR3Jvd1dlYWtlbl06ICR7Z3Jvd1RocmVhZHN9IEdyb3cgVGhyZWFkcyB1bmFjY291bnRlZGApO1xuXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9XZWFrZW4obnM6IE5TLCB0YXJnZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xuICBjb25zdCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XG4gIGNvbnN0IHdlYWtlblBlclJvdW5kID0gdG90YWxUaHJlYWRzICogMC4wNTtcblxuICBjb25zdCB3ZWFrVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xuXG4gIGNvbnN0IGN1cnJlbnRTZWMgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCk7XG4gIGNvbnN0IHRhcmdldFNlYyA9IE1hdGgubWF4KGN1cnJlbnRTZWMgLSB3ZWFrZW5QZXJSb3VuZCwgbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpKTtcbiAgbnMudHByaW50ZihgV2Vha2VuaW5nICR7dGFyZ2V0fSAke2N1cnJlbnRTZWMudG9GaXhlZCgyKX0gPT4gJHt0YXJnZXRTZWN9IC8gJHtucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCl9ICR7Zm9ybWF0VGltZSh3ZWFrVGltZSsyMDApfWApO1xuXG4gIGxldCB3ZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oTWF0aC5jZWlsKChjdXJyZW50U2VjIC0gdGFyZ2V0U2VjKSAvIFdFQUtfU0VDKSwgdG90YWxUaHJlYWRzKTtcblxuICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XG5cbiAgICBjb25zdCBzbGF2ZVdlYWtlblRocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIHdlYWtlblRocmVhZHMpO1xuICAgIHNsYXZlVGhyZWFkcyAtPSBzbGF2ZVdlYWtlblRocmVhZHM7XG4gICAgd2Vha2VuVGhyZWFkcyAtPSBzbGF2ZVdlYWtlblRocmVhZHM7XG5cbiAgICBpZiAoc2xhdmVXZWFrZW5UaHJlYWRzID4gMCkgbnMuZXhlYygnd2Vha2VuLmpzJywgcywgc2xhdmVXZWFrZW5UaHJlYWRzLCB0YXJnZXQsIDIwMCk7XG4gIH1cblxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JIR1dTY3JpcHRzKG5zOiBOUywgc2xhdmVzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICB3aGlsZSAoc2xhdmVzLnNvbWUocyA9PiBucy5wcyhzKS5zb21lKHNjcmlwdCA9PiBzY3JpcHQuZmlsZW5hbWUgPT09ICdoYWNrLmpzJyB8fCBzY3JpcHQuZmlsZW5hbWUgPT09ICdncm93LmpzJyB8fCBzY3JpcHQuZmlsZW5hbWUgPT09ICd3ZWFrZW4uanMnKSkpXG4gICAgYXdhaXQgbnMuc2xlZXAoMjApO1xufVxuXG5leHBvcnQgY29uc3QgQUxMX0ZBQ1RJT05TID0gW1xuICBcIklsbHVtaW5hdGlcIixcbiAgXCJEYWVkYWx1c1wiLFxuICBcIlRoZSBDb3ZlbmFudFwiLFxuICBcIkVDb3JwXCIsXG4gIFwiTWVnYUNvcnBcIixcbiAgXCJCYWNobWFuICYgQXNzb2NpYXRlc1wiLFxuICBcIkJsYWRlIEluZHVzdHJpZXNcIixcbiAgXCJOV09cIixcbiAgXCJDbGFya2UgSW5jb3Jwb3JhdGVkXCIsXG4gIFwiT21uaVRlayBJbmNvcnBvcmF0ZWRcIixcbiAgXCJGb3VyIFNpZ21hXCIsXG4gIFwiS3VhaUdvbmcgSW50ZXJuYXRpb25hbFwiLFxuICBcIkZ1bGNydW0gU2VjcmV0IFRlY2hub2xvZ2llc1wiLFxuICBcIkJpdFJ1bm5lcnNcIixcbiAgXCJUaGUgQmxhY2sgSGFuZFwiLFxuICBcIk5pdGVTZWNcIixcbiAgXCJBZXZ1bVwiLFxuICBcIkNob25ncWluZ1wiLFxuICBcIklzaGltYVwiLFxuICBcIk5ldyBUb2t5b1wiLFxuICBcIlNlY3Rvci0xMlwiLFxuICBcIlZvbGhhdmVuXCIsXG4gIFwiU3BlYWtlcnMgZm9yIHRoZSBEZWFkXCIsXG4gIFwiVGhlIERhcmsgQXJteVwiLFxuICBcIlRoZSBTeW5kaWNhdGVcIixcbiAgXCJTaWxob3VldHRlXCIsXG4gIFwiVGV0cmFkc1wiLFxuICBcIlNsdW0gU25ha2VzXCIsXG4gIFwiTmV0YnVybmVyc1wiLFxuICBcIlRpYW4gRGkgSHVpXCIsXG4gIFwiQ3liZXJTZWNcIixcbiAgXCJCbGFkZWJ1cm5lcnNcIixcbiAgXCJDaHVyY2ggb2YgdGhlIE1hY2hpbmUgR29kXCIsXG4gIFwiU2hhZG93cyBvZiBBbmFyY2h5XCIsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNSb290YWJsZShuczogTlMsIHM6IHN0cmluZywgcENvdW50OiBudW1iZXIpOiBib29sZWFuIHtcbiAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3MocykpIHJldHVybiBmYWxzZTtcblxuICBpZiAobnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzKSA8PSBwQ291bnQpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSGFja2FibGUobnM6IE5TLCBzOiBzdHJpbmcsIHBDb3VudDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgaGFja1JlcSA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpO1xuICBjb25zdCBoYWNrTHYgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcbiAgY29uc3QgcG9ydHNSZXF1aXJlZCA9IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQocyk7XG5cbiAgaWYgKGhhY2tMdiA+PSBoYWNrUmVxICYmIHBvcnRzUmVxdWlyZWQgPD0gcENvdW50KSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gZmFsc2U7XG59Il19\",\"filename\":\"util.js\",\"server\":\"home\"}}],[\"augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint, DefaultStyle, PrintTable } from \\\"./tables\\\";\\nimport { ALL_FACTIONS } from \\\"./util\\\";\\nfunction setCharAt(str, index, chr) {\\n    if (index > str.length - 1)\\n        return str;\\n    return str.substring(0, index) + chr + str.substring(index + 1);\\n}\\nclass Aug {\\n    name;\\n    faction;\\n    installed;\\n    purchased;\\n    price;\\n    requiredRep;\\n    purchasable;\\n    affordable;\\n    preqreqs;\\n    multipliers;\\n    affected;\\n    categories;\\n    isHack;\\n    isUseful;\\n    constructor(ns, name, faction) {\\n        this.name = name;\\n        this.faction = faction;\\n        this.installed = ns.singularity.getOwnedAugmentations(false).indexOf(name) !== -1;\\n        this.purchased = ns.singularity.getOwnedAugmentations(true).indexOf(name) !== -1;\\n        this.price = ns.singularity.getAugmentationBasePrice(name);\\n        this.requiredRep = ns.singularity.getAugmentationRepReq(name);\\n        try {\\n            this.purchasable = this.requiredRep <= ns.singularity.getFactionRep(ns.getPlayer().factions.filter(f => f === faction)[0]);\\n        }\\n        catch (e) {\\n            this.purchasable = false;\\n        }\\n        this.affordable = this.price <= ns.getServerMoneyAvailable('home');\\n        this.preqreqs = ns.singularity.getAugmentationPrereq(name);\\n        this.multipliers = ns.singularity.getAugmentationStats(name);\\n        this.affected = [];\\n        this.updateAffected();\\n        this.categories = [];\\n        this.updateCategories();\\n        // remove already purchased prereqs and sort them in descending price order\\n        this.preqreqs.filter(a => !ns.singularity.getOwnedAugmentations(true).includes(a)).sort((a, b) => ns.singularity.getAugmentationBasePrice(b) - ns.singularity.getAugmentationBasePrice(a));\\n        this.isHack = this.categories.includes('hack');\\n        this.isUseful = this.categories.includes('hack') || this.categories.includes('charisma') || this.categories.includes('company') || this.categories.includes('faction') || this.categories.includes('program') || this.categories.includes('special');\\n    }\\n    updateCategories() {\\n        this.categories = [];\\n        if (this.faction === `Church of the Machine God` && this.name !== 'NeuroFlux Governor') {\\n            this.categories.push('stanek');\\n            return;\\n        }\\n        if (this.affected.some((a) => [`hacking`, `hacking_exp`, `hacking_chance`, `hacking_speed`, `hacking_money`, `hacking_grow`].includes(a)))\\n            this.categories.push('hack');\\n        if (this.affected.some((a) => [`strength`, `strength_exp`, `defense`, `defense_exp`, `dexterity`, `dexterity_exp`, `agility`, `agility_exp`].includes(a)))\\n            this.categories.push('combat');\\n        if (this.affected.some((a) => [`charisma`, `charisma_exp`].includes(a)))\\n            this.categories.push('charisma');\\n        if (this.affected.some((a) => [`company_rep`].includes(a)))\\n            this.categories.push('company');\\n        if (this.affected.some((a) => [`faction_rep`].includes(a)))\\n            this.categories.push('faction');\\n        if (this.affected.some((a) => [`crime_money`, `crime_success`].includes(a)))\\n            this.categories.push('crime');\\n        if (this.affected.some((a) => [`hacknet_node_money`, `hacknet_node_purchase_cost`, `hacknet_node_ram_cost`, `hacknet_node_core_cost`, `hacknet_node_level_cost`].includes(a)))\\n            this.categories.push('hacknet');\\n        if (this.affected.some((a) => [`bladeburner_max_stamina`, `bladeburner_stamina_gain`, `bladeburner_analysis`, `bladeburner_success_chance`].includes(a))\\n            || this.name === `The Blade's Simulacrum`)\\n            this.categories.push('bladeburner');\\n        if ([`CashRoot Starter Kit`, `BitRunners Neurolink`, `PCMatrix`].includes(this.name))\\n            this.categories.push('program');\\n        if (this.faction === `Shadows of Anarchy` && this.name !== 'NeuroFlux Governor')\\n            this.categories.push('infiltration');\\n        if (this.categories.length === 0)\\n            this.categories.push('special');\\n    }\\n    shortCategories() {\\n        let ret = '            ';\\n        if (this.categories.includes('hack'))\\n            ret = setCharAt(ret, 0, 'H');\\n        if (this.categories.includes('combat'))\\n            ret = setCharAt(ret, 1, 'C');\\n        if (this.categories.includes('charisma'))\\n            ret = setCharAt(ret, 2, 'c');\\n        if (this.categories.includes('company'))\\n            ret = setCharAt(ret, 3, 'W');\\n        if (this.categories.includes('faction'))\\n            ret = setCharAt(ret, 4, 'F');\\n        if (this.categories.includes('crime'))\\n            ret = setCharAt(ret, 5, 'X');\\n        if (this.categories.includes('hacknet'))\\n            ret = setCharAt(ret, 6, 'N');\\n        if (this.categories.includes('bladeburner'))\\n            ret = setCharAt(ret, 7, 'B');\\n        if (this.categories.includes('program'))\\n            ret = setCharAt(ret, 8, 'P');\\n        if (this.categories.includes('infiltration'))\\n            ret = setCharAt(ret, 9, 'I');\\n        if (this.categories.includes('stanek'))\\n            ret = setCharAt(ret, 10, 's');\\n        if (this.categories.includes('special'))\\n            ret = setCharAt(ret, 11, 'S');\\n        return ret;\\n    }\\n    updateAffected() {\\n        this.affected = [];\\n        if (this.multipliers.strength !== 1)\\n            this.affected.push(`strength`);\\n        if (this.multipliers.strength_exp !== 1)\\n            this.affected.push(`strength_exp`);\\n        if (this.multipliers.defense !== 1)\\n            this.affected.push(`defense`);\\n        if (this.multipliers.defense_exp !== 1)\\n            this.affected.push(`defense_exp`);\\n        if (this.multipliers.dexterity !== 1)\\n            this.affected.push(`dexterity`);\\n        if (this.multipliers.dexterity_exp !== 1)\\n            this.affected.push(`dexterity_exp`);\\n        if (this.multipliers.agility !== 1)\\n            this.affected.push(`agility`);\\n        if (this.multipliers.agility_exp !== 1)\\n            this.affected.push(`agility_exp`);\\n        if (this.multipliers.charisma !== 1)\\n            this.affected.push(`charisma`);\\n        if (this.multipliers.charisma_exp !== 1)\\n            this.affected.push(`charisma_exp`);\\n        if (this.multipliers.hacking !== 1)\\n            this.affected.push(`hacking`);\\n        if (this.multipliers.hacking_exp !== 1)\\n            this.affected.push(`hacking_exp`);\\n        if (this.multipliers.hacking_chance !== 1)\\n            this.affected.push(`hacking_chance`);\\n        if (this.multipliers.hacking_speed !== 1)\\n            this.affected.push(`hacking_speed`);\\n        if (this.multipliers.hacking_money !== 1)\\n            this.affected.push(`hacking_money`);\\n        if (this.multipliers.hacking_grow !== 1)\\n            this.affected.push(`hacking_grow`);\\n        if (this.multipliers.company_rep !== 1)\\n            this.affected.push(`company_rep`);\\n        if (this.multipliers.work_money !== 1)\\n            this.affected.push(`work_money`);\\n        if (this.multipliers.faction_rep !== 1)\\n            this.affected.push(`faction_rep`);\\n        if (this.multipliers.crime_money !== 1)\\n            this.affected.push(`crime_money`);\\n        if (this.multipliers.crime_success !== 1)\\n            this.affected.push(`crime_success`);\\n        if (this.multipliers.hacknet_node_money !== 1)\\n            this.affected.push(`hacknet_node_money`);\\n        if (this.multipliers.hacknet_node_purchase_cost !== 1)\\n            this.affected.push(`hacknet_node_purchase_cost`);\\n        if (this.multipliers.hacknet_node_ram_cost !== 1)\\n            this.affected.push(`hacknet_node_ram_cost`);\\n        if (this.multipliers.hacknet_node_core_cost !== 1)\\n            this.affected.push(`hacknet_node_core_cost`);\\n        if (this.multipliers.hacknet_node_level_cost !== 1)\\n            this.affected.push(`hacknet_node_level_cost`);\\n        if (this.multipliers.bladeburner_max_stamina !== 1)\\n            this.affected.push(`bladeburner_max_stamina`);\\n        if (this.multipliers.bladeburner_stamina_gain !== 1)\\n            this.affected.push(`bladeburner_stamina_gain`);\\n        if (this.multipliers.bladeburner_analysis !== 1)\\n            this.affected.push(`bladeburner_analysis`);\\n        if (this.multipliers.bladeburner_success_chance !== 1)\\n            this.affected.push(`bladeburner_success_chance`);\\n    }\\n    printMultipliers(ns) {\\n        ns.tprintf(`${this.name}: ${this.categories.join(', ')}`);\\n    }\\n    printMultipliers2(ns) {\\n        const mults = [];\\n        if (this.multipliers.hacking !== 1)\\n            mults.push(`hacking: ${this.multipliers.hacking}`);\\n        if (this.multipliers.strength !== 1)\\n            mults.push(`strength: ${this.multipliers.strength}`);\\n        if (this.multipliers.defense !== 1)\\n            mults.push(`defense: ${this.multipliers.defense}`);\\n        if (this.multipliers.dexterity !== 1)\\n            mults.push(`dexterity: ${this.multipliers.dexterity}`);\\n        if (this.multipliers.agility !== 1)\\n            mults.push(`agility: ${this.multipliers.agility}`);\\n        if (this.multipliers.charisma !== 1)\\n            mults.push(`charisma: ${this.multipliers.charisma}`);\\n        if (this.multipliers.hacking_exp !== 1)\\n            mults.push(`hacking_exp: ${this.multipliers.hacking_exp}`);\\n        if (this.multipliers.strength_exp !== 1)\\n            mults.push(`strength_exp: ${this.multipliers.strength_exp}`);\\n        if (this.multipliers.defense_exp !== 1)\\n            mults.push(`defense_exp: ${this.multipliers.defense_exp}`);\\n        if (this.multipliers.dexterity_exp !== 1)\\n            mults.push(`dexterity_exp: ${this.multipliers.dexterity_exp}`);\\n        if (this.multipliers.agility_exp !== 1)\\n            mults.push(`agility_exp: ${this.multipliers.agility_exp}`);\\n        if (this.multipliers.charisma_exp !== 1)\\n            mults.push(`charisma_exp: ${this.multipliers.charisma_exp}`);\\n        if (this.multipliers.hacking_chance !== 1)\\n            mults.push(`hacking_chance: ${this.multipliers.hacking_chance}`);\\n        if (this.multipliers.hacking_speed !== 1)\\n            mults.push(`hacking_speed: ${this.multipliers.hacking_speed}`);\\n        if (this.multipliers.hacking_money !== 1)\\n            mults.push(`hacking_money: ${this.multipliers.hacking_money}`);\\n        if (this.multipliers.hacking_grow !== 1)\\n            mults.push(`hacking_grow: ${this.multipliers.hacking_grow}`);\\n        if (this.multipliers.company_rep !== 1)\\n            mults.push(`company_rep: ${this.multipliers.company_rep}`);\\n        if (this.multipliers.faction_rep !== 1)\\n            mults.push(`faction_rep: ${this.multipliers.faction_rep}`);\\n        if (this.multipliers.crime_money !== 1)\\n            mults.push(`crime_money: ${this.multipliers.crime_money}`);\\n        if (this.multipliers.crime_success !== 1)\\n            mults.push(`crime_success: ${this.multipliers.crime_success}`);\\n        if (this.multipliers.work_money !== 1)\\n            mults.push(`work_money: ${this.multipliers.work_money}`);\\n        if (this.multipliers.hacknet_node_money !== 1)\\n            mults.push(`hacknet_node_money: ${this.multipliers.hacknet_node_money}`);\\n        if (this.multipliers.hacknet_node_purchase_cost !== 1)\\n            mults.push(`hacknet_node_purchase_cost: ${this.multipliers.hacknet_node_purchase_cost}`);\\n        if (this.multipliers.hacknet_node_ram_cost !== 1)\\n            mults.push(`hacknet_node_ram_cost: ${this.multipliers.hacknet_node_ram_cost}`);\\n        if (this.multipliers.hacknet_node_core_cost !== 1)\\n            mults.push(`hacknet_node_core_cost: ${this.multipliers.hacknet_node_core_cost}`);\\n        if (this.multipliers.hacknet_node_level_cost !== 1)\\n            mults.push(`hacknet_node_level_cost: ${this.multipliers.hacknet_node_level_cost}`);\\n        if (this.multipliers.bladeburner_max_stamina !== 1)\\n            mults.push(`bladeburner_max_stamina: ${this.multipliers.bladeburner_max_stamina}`);\\n        if (this.multipliers.bladeburner_stamina_gain !== 1)\\n            mults.push(`bladeburner_stamina_gain: ${this.multipliers.bladeburner_stamina_gain}`);\\n        if (this.multipliers.bladeburner_analysis !== 1)\\n            mults.push(`bladeburner_analysis: ${this.multipliers.bladeburner_analysis}`);\\n        if (this.multipliers.bladeburner_success_chance !== 1)\\n            mults.push(`bladeburner_success_chance: ${this.multipliers.bladeburner_success_chance}`);\\n        ns.tprintf(`${this.name}: ${mults.join(', ')}`);\\n    }\\n    canBuy() {\\n        if (this.purchased)\\n            return false;\\n        return (this.purchasable && this.affordable);\\n    }\\n    augColor() {\\n        if (this.purchased)\\n            return 'green';\\n        if (this.purchasable && this.affordable)\\n            return 'Gold1';\\n        return 'white';\\n    }\\n    tableData(ns) {\\n        return [\\n            { color: this.augColor(), text: ` ${this.name}` },\\n            { color: this.augColor(), text: ` ${this.faction}` },\\n            { color: this.augColor(), text: `${this.installed ? 'YES' : 'NO'}`.padStart(4) },\\n            { color: this.augColor(), text: `${this.purchased ? 'YES' : 'NO'}`.padStart(4) },\\n            { color: this.augColor(), text: ns.formatNumber(this.price, 1, 1000, true).padStart(8) },\\n            { color: this.augColor(), text: ns.formatNumber(this.requiredRep, 3, 1000, true).padStart(10) },\\n            { color: this.augColor(), text: `${this.purchasable ? 'YES' : 'NO'}`.padStart(4) },\\n            { color: this.augColor(), text: `${this.affordable ? 'YES' : 'NO'}`.padStart(4) },\\n            { color: this.augColor(), text: `${this.canBuy() ? 'YES' : 'NO'}`.padStart(4) },\\n            { color: this.augColor(), text: `${this.preqreqs.length}`.padStart(4) },\\n            { color: this.augColor(), text: ` ${this.shortCategories()}` }\\n        ];\\n    }\\n    static tableCols() {\\n        return [\\n            { header: ' Augmentations', width: 56 },\\n            { header: ' Faction', width: 29 },\\n            { header: ' INS', width: 5 },\\n            { header: ' HAS', width: 5 },\\n            { header: '   Price', width: 9 },\\n            { header: '       Rep', width: 11 },\\n            { header: ' PUR', width: 5 },\\n            { header: ' AFF', width: 5 },\\n            { header: ' BUY', width: 5 },\\n            { header: ' PRE', width: 5 },\\n            { header: ' CATEGORIES', width: 14 },\\n        ];\\n    }\\n    shortTableData(ns) {\\n        return [\\n            { color: this.augColor(), text: ` ${this.name}` },\\n            { color: this.augColor(), text: ` ${this.faction}` },\\n            { color: this.augColor(), text: ns.formatNumber(this.price, 1, 1000, true).padStart(8) },\\n            { color: this.augColor(), text: ns.formatNumber(this.requiredRep, 3, 1000, true).padStart(10) },\\n            { color: this.augColor(), text: `${this.preqreqs.length}`.padStart(4) }\\n        ];\\n    }\\n    static shortTableCols() {\\n        return [\\n            { header: ' Augmentations', width: 56 },\\n            { header: ' Faction', width: 29 },\\n            { header: '   Price', width: 9 },\\n            { header: '       Rep', width: 11 },\\n            { header: ' PRE', width: 5 },\\n        ];\\n    }\\n}\\nexport async function main(ns) {\\n    const player = ns.getPlayer();\\n    // const lvl11SrcFileCheck = ns.singularity.getOwnedSourceFiles().filter(s => s.n === 11);\\n    // const lvl11SrcFileLevel = lvl11SrcFileCheck.length > 0 ? lvl11SrcFileCheck[0].lvl : 0;\\n    // const augPriceMultiplier = 1.9 * [1, 0.96, 0.94, 0.93][lvl11SrcFileLevel];\\n    const augPriceMultiplier = 1.9;\\n    const nfgPriceMultiplier = 1.14;\\n    let augs = [];\\n    for (const faction of ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))) {\\n        if (ns.singularity.getFactionRep(faction) === 0 && ns.singularity.getFactionFavor(faction) === 0)\\n            continue;\\n        const factionAugs = ns.singularity.getAugmentationsFromFaction(faction);\\n        for (const aug of factionAugs) {\\n            if (!augs.some(a => a.name === aug))\\n                augs.push(new Aug(ns, aug, faction));\\n        }\\n    }\\n    //augs = augs.filter(a => a.canBuy() || a.purchased).sort((a, b) => b.price - a.price);\\n    augs = augs.filter(a => a.isUseful);\\n    augs = augs.sort((a, b) => b.price - a.price);\\n    //augs = augs.filter(a => a.isHack);\\n    augs = augs.filter(a => a.name !== \\\"NeuroFlux Governor\\\");\\n    // shift prereqs higher in the list if they're in the list. If they're not in the list, remove the aug with prereqs\\n    for (let i = 0; i < augs.length; ++i) {\\n        const aug = augs[i];\\n        if (aug.preqreqs.length > 0) {\\n            let foundPrereq = false;\\n            let movedPrereq = false;\\n            for (let j = 0; j < aug.preqreqs.length; ++j) {\\n                const prereq = aug.preqreqs[j];\\n                const prereqIndex = augs.findIndex(a => a.name === prereq);\\n                if (prereqIndex === -1)\\n                    break;\\n                foundPrereq = true;\\n                if (prereqIndex < i)\\n                    continue;\\n                augs.splice(i, 0, augs.splice(prereqIndex, 1)[0]);\\n                movedPrereq = true;\\n                break;\\n            }\\n            if (!foundPrereq) {\\n                augs.splice(i, 1);\\n                --i;\\n                continue;\\n            }\\n            if (movedPrereq) {\\n                --i;\\n                continue;\\n            }\\n        }\\n    }\\n    augs = augs.filter(a => a.canBuy());\\n    //augs.forEach(a => a.printMultipliers(ns));\\n    let price = 0;\\n    let mult = 0;\\n    augs.forEach(a => {\\n        const thisPrice = a.price * Math.pow(augPriceMultiplier, mult++);\\n        price += thisPrice;\\n        //ns.tprintf(`${a.name}: ${ns.formatNumber(thisPrice, 1, 1000)} / ${ns.formatNumber(price, 1, 1000)}`);\\n    });\\n    //PrintTable(ns, augs.map(a => a.shortTableData(ns)), Aug.shortTableCols(), DefaultStyle(), ColorPrint);\\n    if (augs.length > 0) {\\n        PrintTable(ns, augs.map(a => a.tableData(ns)), Aug.tableCols(), DefaultStyle(), ColorPrint);\\n        if (ns.getServerMoneyAvailable('home') >= price)\\n            ColorPrint(ns, ['green', `${augs.length} augs final cost: ${ns.formatNumber(price, 1, 1000)}`]);\\n        else\\n            ColorPrint(ns, ['Red1', `${augs.length} augs final cost: ${ns.formatNumber(price, 1, 1000)}`]);\\n    }\\n    else {\\n        ns.tprintf('  >> Purchasable aug list empty');\\n    }\\n    // buy in order from most to least expensive, buying prereqs first\\n    if (ns.args.length > 0) {\\n        //let cash = ns.getServerMoneyAvailable('home');\\n        while (augs.length > 0) {\\n            const aug = augs.shift();\\n            if (aug)\\n                ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\n        }\\n        while (ns.singularity.purchaseAugmentation(ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))[0], \\\"NeuroFlux Governor\\\"))\\n            ;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hdWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXRDLFNBQVMsU0FBUyxDQUFDLEdBQVcsRUFBRSxLQUFhLEVBQUUsR0FBVztJQUN4RCxJQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFDLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUNwQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBd0JELE1BQU0sR0FBRztJQUNQLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixTQUFTLENBQVU7SUFDbkIsU0FBUyxDQUFVO0lBQ25CLEtBQUssQ0FBUztJQUNkLFdBQVcsQ0FBUztJQUNwQixXQUFXLENBQVU7SUFDckIsVUFBVSxDQUFVO0lBQ3BCLFFBQVEsQ0FBVztJQUNuQixXQUFXLENBQWM7SUFDekIsUUFBUSxDQUFXO0lBQ25CLFVBQVUsQ0FBVztJQUNyQixNQUFNLENBQVU7SUFDaEIsUUFBUSxDQUFVO0lBRWxCLFlBQVksRUFBTSxFQUFFLElBQVksRUFBRSxPQUFlO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEYsSUFB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QUFDLENBQUMsU0FBUyxFQUFDLGFBQWEsRUFBQyxnQkFBZ0IsRUFBQyxlQUFlLEVBQUMsZUFBZSxFQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBQyxjQUFjLEVBQUMsU0FBUyxFQUFDLGFBQWEsRUFBQyxXQUFXLEVBQUMsZUFBZSxFQUFDLFNBQVMsRUFBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEosSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRW5DLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxFQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixFQUFDLDRCQUE0QixFQUFDLHVCQUF1QixFQUFDLHdCQUF3QixFQUFDLHlCQUF5QixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZLLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMseUJBQXlCLEVBQUMsMEJBQTBCLEVBQUMsc0JBQXNCLEVBQUMsNEJBQTRCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7ZUFDOUksSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0I7WUFDM0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFdEMsSUFBSSxDQUFDLHNCQUFzQixFQUFDLHNCQUFzQixFQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBb0IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLG9CQUFvQjtZQUM3RSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV2QyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLEdBQUcsR0FBRyxjQUFjLENBQUM7UUFDekIsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFBVSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFBUSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFBUyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7WUFBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFBRSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFBUSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBTyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFM0UsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRW5CLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTlFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEtBQUssQ0FBQztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEYsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFNUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDMUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFeEUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFMUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDMUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFOUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixLQUFLLENBQUM7WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFD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QUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBLENBQUMsQ0FBQSxLQUFLLENBQUEsQ0FBQyxDQUFBLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM1RSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4RixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMvRixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQSxDQUFDLENBQUEsS0FBSyxDQUFBLENBQUMsQ0FBQSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUEsQ0FBQyxDQUFBLEtBQUssQ0FBQSxDQUFDLENBQUEsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUEsQ0FBQyxDQUFBLEtBQUssQ0FBQSxDQUFDLENBQUEsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzNFLEVBQUUsS0FBSyxF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eyBDb2xvclByaW50LCBEZWZhdWx0U3R5bGUsIFByaW50VGFibGUgfSBmcm9tIFwiLi90YWJsZXNcIjtcbmltcG9ydCB7IEFMTF9GQUNUSU9OUyB9IGZyb20gXCIuL3V0aWxcIjtcblxuZnVuY3Rpb24gc2V0Q2hhckF0KHN0cjogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBjaHI6IHN0cmluZykge1xuICBpZihpbmRleCA+IHN0ci5sZW5ndGgtMSkgcmV0dXJuIHN0cjtcbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCxpbmRleCkgKyBjaHIgKyBzdHIuc3Vic3RyaW5nKGluZGV4KzEpO1xufVxuXG5pbnRlcmZhY2UgSUF1ZyB7XG4gIG5hbWU6IHN0cmluZztcbiAgZmFjdGlvbjogc3RyaW5nO1xuICBpbnN0YWxsZWQ6IGJvb2xlYW47XG4gIHB1cmNoYXNlZDogYm9vbGVhbjtcbiAgcHJpY2U6IG51bWJlcjtcbiAgcmVxdWlyZWRSZXA6IG51bWJlcjtcbiAgcHVyY2hhc2FibGU6IGJvb2xlYW47XG4gIGFmZm9yZGFibGU6IGJvb2xlYW47XG4gIHByZXFyZXFzOiBzdHJpbmdbXTtcbiAgbXVsdGlwbGllcnM6IE11bHRpcGxpZXJzO1xuICBhZmZlY3RlZDogc3RyaW5nW107XG4gIGNhdGVnb3JpZXM6IHN0cmluZ1tdO1xuICBpc0hhY2s6IGJvb2xlYW47XG4gIGlzVXNlZnVsOiBib29sZWFuO1xuXG4gIHRhYmxlRGF0YShuczogTlMpOiB7IGNvbG9yOiBzdHJpbmc7IHRleHQ6IHN0cmluZzsgfVtdO1xuICBzaG9ydFRhYmxlRGF0YShuczogTlMpOiB7IGNvbG9yOiBzdHJpbmc7IHRleHQ6IHN0cmluZzsgfVtdO1xuICBjYW5CdXkoKTogYm9vbGVhbjtcbiAgcHJpbnRNdWx0aXBsaWVycyhuczogTlMpOiB2b2lkO1xufVxuXG5jbGFzcyBBdWcgaW1wbGVtZW50cyBJQXVne1xuICBuYW1lOiBzdHJpbmc7XG4gIGZhY3Rpb246IHN0cmluZztcbiAgaW5zdGFsbGVkOiBib29sZWFuO1xuICBwdXJjaGFzZWQ6IGJvb2xlYW47XG4gIHByaWNlOiBudW1iZXI7XG4gIHJlcXVpcmVkUmVwOiBudW1iZXI7XG4gIHB1cmNoYXNhYmxlOiBib29sZWFuO1xuICBhZmZvcmRhYmxlOiBib29sZWFuO1xuICBwcmVxcmVxczogc3RyaW5nW107XG4gIG11bHRpcGxpZXJzOiBNdWx0aXBsaWVycztcbiAgYWZmZWN0ZWQ6IHN0cmluZ1tdO1xuICBjYXRlZ29yaWVzOiBzdHJpbmdbXTtcbiAgaXNIYWNrOiBib29sZWFuO1xuICBpc1VzZWZ1bDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihuczogTlMsIG5hbWU6IHN0cmluZywgZmFjdGlvbjogc3RyaW5nKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmZhY3Rpb24gPSBmYWN0aW9uO1xuICAgIHRoaXMuaW5zdGFsbGVkID0gbnMuc2luZ3VsYXJpdHkuZ2V0T3duZWRBdWdtZW50YXRpb25zKGZhbHNlKS5pbmRleE9mKG5hbWUpICE9PSAtMTtcbiAgICB0aGlzLnB1cmNoYXNlZCA9IG5zLnNpbmd1bGFyaXR5LmdldE93bmVkQXVnbWVudGF0aW9ucyh0cnVlKS5pbmRleE9mKG5hbWUpICE9PSAtMTtcbiAgICB0aGlzLnByaWNlID0gbnMuc2luZ3VsYXJpdHkuZ2V0QXVnbWVudGF0aW9uQmFzZVByaWNlKG5hbWUpO1xuICAgIHRoaXMucmVxdWlyZWRSZXAgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25SZXBSZXEobmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucHVyY2hhc2FibGUgPSB0aGlzLnJlcXVpcmVkUmVwIDw9IG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAobnMuZ2V0UGxheWVyKCkuZmFjdGlvbnMuZmlsdGVyKGYgPT4gZiA9PT0gZmFjdGlvbilbMF0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMucHVyY2hhc2FibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5hZmZvcmRhYmxlID0gdGhpcy5wcmljZSA8PSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpO1xuICAgIHRoaXMucHJlcXJlcXMgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25QcmVyZXEobmFtZSk7XG4gICAgdGhpcy5tdWx0aXBsaWVycyA9IG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvblN0YXRzKG5hbWUpO1xuICAgIHRoaXMuYWZmZWN0ZWQgPSBbXTtcbiAgICB0aGlzLnVwZGF0ZUFmZmVjdGVkKCk7XG4gICAgdGhpcy5jYXRlZ29yaWVzID0gW107XG4gICAgdGhpcy51cGRhdGVDYXRlZ29yaWVzKCk7XG5cbiAgICAvLyByZW1vdmUgYWxyZWFkeSBwdXJjaGFzZWQgcHJlcmVxcyBhbmQgc29ydCB0aGVtIGluIGRlc2NlbmRpbmcgcHJpY2Ugb3JkZXJcbiAgICB0aGlzLnByZXFyZXFzLmZpbHRlcihhID0+ICFucy5zaW5ndWxhcml0eS5nZXRPd25lZEF1Z21lbnRhdGlvbnModHJ1ZSkuaW5jbHVkZXMoYSkpLnNvcnQoKGEsIGIpID0+IG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShiKSAtIG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShhKSk7XG5cbiAgICB0aGlzLmlzSGFjayA9IHRoaXMuY2F0ZWdvcmllcy5pbmNsdWRlcygnaGFjaycpO1xuICAgIHRoaXMuaXNVc2VmdWwgPSB0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2snKSB8fCB0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NoYXJpc21hJykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdjb21wYW55JykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdmYWN0aW9uJykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdwcm9ncmFtJykgfHwgdGhpcy5jYXRlZ29yaWVzLmluY2x1ZGVzKCdzcGVjaWFsJyk7XG4gIH1cblxuICB1cGRhdGVDYXRlZ29yaWVzKCk6IHZvaWQge1xuICAgIHRoaXMuY2F0ZWdvcmllcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuZmFjdGlvbiA9PT0gYENodXJjaCBvZiB0aGUgTWFjaGluZSBHb2RgICYmIHRoaXMubmFtZSAhPT0gJ05ldXJvRmx1eCBHb3Zlcm5vcicpIHtcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdzdGFuZWsnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hZmZlY3RlZC5zb21lKChhKSA9PiBbYGhhY2tpbmdgLGBoYWNraW5nX2V4cGAsYGhhY2tpbmdfY2hhbmNlYCxgaGFja2luZ19zcGVlZGAsYGhhY2tpbmdfbW9uZXlgLGBoYWNraW5nX2dyb3dgXS5pbmNsdWRlcyhhKSkpXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnaGFjaycpO1xuXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BzdHJlbmd0aGAsYHN0cmVuZ3RoX2V4cGAsYGRlZmVuc2VgLGBkZWZlbnNlX2V4cGAsYGRleHRlcml0eWAsYGRleHRlcml0eV9leHBgLGBhZ2lsaXR5YCxgYWdpbGl0eV9leHBgXS5pbmNsdWRlcyhhKSkpXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnY29tYmF0Jyk7XG5cbiAgICBpZiAodGhpcy5hZmZlY3RlZC5zb21lKChhKSA9PiBbYGNoYXJpc21hYCxgY2hhcmlzbWFfZXhwYF0uaW5jbHVkZXMoYSkpKVxuICAgICAgdGhpcy5jYXRlZ29yaWVzLnB1c2goJ2NoYXJpc21hJyk7XG4gIFxuICAgIGlmICh0aGlzLmFmZmVjdGVkLnNvbWUoKGEpID0+IFtgY29tcGFueV9yZXBgXS5pbmNsdWRlcyhhKSkpXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgnY29tcGFueScpO1xuXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BmYWN0aW9uX3JlcGBdLmluY2x1ZGVzKGEpKSlcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdmYWN0aW9uJyk7XG5cbiAgICBpZiAodGhpcy5hZmZlY3RlZC5zb21lKChhKSA9PiBbYGNyaW1lX21vbmV5YCxgY3JpbWVfc3VjY2Vzc2BdLmluY2x1ZGVzKGEpKSlcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdjcmltZScpO1xuXG4gICAgaWYgKHRoaXMuYWZmZWN0ZWQuc29tZSgoYSkgPT4gW2BoYWNrbmV0X25vZGVfbW9uZXlgLGBoYWNrbmV0X25vZGVfcHVyY2hhc2VfY29zdGAsYGhhY2tuZXRfbm9kZV9yYW1fY29zdGAsYGhhY2tuZXRfbm9kZV9jb3JlX2Nvc3RgLGBoYWNrbmV0X25vZGVfbGV2ZWxfY29zdGBdLmluY2x1ZGVzKGEpKSlcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdoYWNrbmV0Jyk7XG5cbiAgICBpZiAodGhpcy5hZmZlY3RlZC5zb21lKChhKSA9PiBbYGJsYWRlYnVybmVyX21heF9zdGFtaW5hYCxgYmxhZGVidXJuZXJfc3RhbWluYV9nYWluYCxgYmxhZGVidXJuZXJfYW5hbHlzaXNgLGBibGFkZWJ1cm5lcl9zdWNjZXNzX2NoYW5jZWBdLmluY2x1ZGVzKGEpKVxuICAgICAgICB8fCB0aGlzLm5hbWUgPT09IGBUaGUgQmxhZGUncyBTaW11bGFjcnVtYClcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdibGFkZWJ1cm5lcicpO1xuICAgIFxuICAgIGlmIChbYENhc2hSb290IFN0YXJ0ZXIgS2l0YCxgQml0UnVubmVycyBOZXVyb2xpbmtgLGBQQ01hdHJpeGBdLmluY2x1ZGVzKHRoaXMubmFtZSkpXG4gICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCgncHJvZ3JhbScpO1xuXG4gICAgaWYgKHRoaXMuZmFjdGlvbiA9PT0gYFNoYWRvd3Mgb2YgQW5hcmNoeWAgJiYgdGhpcy5uYW1lICE9PSAnTmV1cm9GbHV4IEdvdmVybm9yJylcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKCdpbmZpbHRyYXRpb24nKTtcblxuICAgIGlmICh0aGlzLmNhdGVnb3JpZXMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5jYXRlZ29yaWVzLnB1c2goJ3NwZWNpYWwnKTtcbiAgfVxuXG4gIHNob3J0Q2F0ZWdvcmllcygpOiBzdHJpbmcge1xuICAgIGxldCByZXQgPSAnICAgICAgICAgICAgJztcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2snKSkgICAgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAwLCAgJ0gnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NvbWJhdCcpKSAgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAxLCAgJ0MnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NoYXJpc21hJykpICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAyLCAgJ2MnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NvbXBhbnknKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAzLCAgJ1cnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2ZhY3Rpb24nKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCA0LCAgJ0YnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2NyaW1lJykpICAgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCA1LCAgJ1gnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2hhY2tuZXQnKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCA2LCAgJ04nKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2JsYWRlYnVybmVyJykpICByZXQgPSBzZXRDaGFyQXQocmV0LCA3LCAgJ0InKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ3Byb2dyYW0nKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCA4LCAgJ1AnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ2luZmlsdHJhdGlvbicpKSByZXQgPSBzZXRDaGFyQXQocmV0LCA5LCAgJ0knKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ3N0YW5laycpKSAgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAxMCwgJ3MnKTtcbiAgICBpZih0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMoJ3NwZWNpYWwnKSkgICAgICByZXQgPSBzZXRDaGFyQXQocmV0LCAxMSwgJ1MnKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICB1cGRhdGVBZmZlY3RlZCgpOiB2b2lkIHtcbiAgICB0aGlzLmFmZmVjdGVkID0gW107XG4gICAgXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuc3RyZW5ndGggIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgc3RyZW5ndGhgKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5zdHJlbmd0aF9leHAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgc3RyZW5ndGhfZXhwYCk7XG4gICAgXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuZGVmZW5zZSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBkZWZlbnNlYCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuZGVmZW5zZV9leHAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgZGVmZW5zZV9leHBgKTtcbiAgICBcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5kZXh0ZXJpdHkgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgZGV4dGVyaXR5YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuZGV4dGVyaXR5X2V4cCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBkZXh0ZXJpdHlfZXhwYCk7XG4gICAgXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYWdpbGl0eSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBhZ2lsaXR5YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYWdpbGl0eV9leHAgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgYWdpbGl0eV9leHBgKTtcbiAgICBcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5jaGFyaXNtYSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBjaGFyaXNtYWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNoYXJpc21hX2V4cCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBjaGFyaXNtYV9leHBgKTtcbiAgICBcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tpbmdgKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2V4cCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBoYWNraW5nX2V4cGApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfY2hhbmNlICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tpbmdfY2hhbmNlYCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19zcGVlZCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBoYWNraW5nX3NwZWVkYCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19tb25leSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBoYWNraW5nX21vbmV5YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19ncm93ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tpbmdfZ3Jvd2ApO1xuICAgIFxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNvbXBhbnlfcmVwICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGNvbXBhbnlfcmVwYCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMud29ya19tb25leSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGB3b3JrX21vbmV5YCk7XG5cbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5mYWN0aW9uX3JlcCAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBmYWN0aW9uX3JlcGApO1xuICAgIFxuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNyaW1lX21vbmV5ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGNyaW1lX21vbmV5YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuY3JpbWVfc3VjY2VzcyAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBjcmltZV9zdWNjZXNzYCk7XG4gICAgXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX21vbmV5ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tuZXRfbm9kZV9tb25leWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9wdXJjaGFzZV9jb3N0ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tuZXRfbm9kZV9wdXJjaGFzZV9jb3N0YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX3JhbV9jb3N0ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tuZXRfbm9kZV9yYW1fY29zdGApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9jb3JlX2Nvc3QgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgaGFja25ldF9ub2RlX2NvcmVfY29zdGApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9sZXZlbF9jb3N0ICE9PSAxKSB0aGlzLmFmZmVjdGVkLnB1c2goYGhhY2tuZXRfbm9kZV9sZXZlbF9jb3N0YCk7XG4gICAgXG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfbWF4X3N0YW1pbmEgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgYmxhZGVidXJuZXJfbWF4X3N0YW1pbmFgKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdGFtaW5hX2dhaW4gIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgYmxhZGVidXJuZXJfc3RhbWluYV9nYWluYCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfYW5hbHlzaXMgIT09IDEpIHRoaXMuYWZmZWN0ZWQucHVzaChgYmxhZGVidXJuZXJfYW5hbHlzaXNgKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdWNjZXNzX2NoYW5jZSAhPT0gMSkgdGhpcy5hZmZlY3RlZC5wdXNoKGBibGFkZWJ1cm5lcl9zdWNjZXNzX2NoYW5jZWApO1xuICB9XG5cbiAgcHJpbnRNdWx0aXBsaWVycyhuczogTlMpOiB2b2lkIHtcbiAgICBucy50cHJpbnRmKGAke3RoaXMubmFtZX06ICR7dGhpcy5jYXRlZ29yaWVzLmpvaW4oJywgJyl9YCk7XG4gIH1cblxuICBwcmludE11bHRpcGxpZXJzMihuczogTlMpOiB2b2lkIHtcbiAgICBjb25zdCBtdWx0czogc3RyaW5nW10gPSBbXTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgaGFja2luZzogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmd9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuc3RyZW5ndGggIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBzdHJlbmd0aDogJHt0aGlzLm11bHRpcGxpZXJzLnN0cmVuZ3RofWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRlZmVuc2UgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBkZWZlbnNlOiAke3RoaXMubXVsdGlwbGllcnMuZGVmZW5zZX1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5kZXh0ZXJpdHkgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBkZXh0ZXJpdHk6ICR7dGhpcy5tdWx0aXBsaWVycy5kZXh0ZXJpdHl9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYWdpbGl0eSAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGFnaWxpdHk6ICR7dGhpcy5tdWx0aXBsaWVycy5hZ2lsaXR5fWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNoYXJpc21hICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgY2hhcmlzbWE6ICR7dGhpcy5tdWx0aXBsaWVycy5jaGFyaXNtYX1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2V4cCAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGhhY2tpbmdfZXhwOiAke3RoaXMubXVsdGlwbGllcnMuaGFja2luZ19leHB9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuc3RyZW5ndGhfZXhwICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgc3RyZW5ndGhfZXhwOiAke3RoaXMubXVsdGlwbGllcnMuc3RyZW5ndGhfZXhwfWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmRlZmVuc2VfZXhwICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgZGVmZW5zZV9leHA6ICR7dGhpcy5tdWx0aXBsaWVycy5kZWZlbnNlX2V4cH1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5kZXh0ZXJpdHlfZXhwICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgZGV4dGVyaXR5X2V4cDogJHt0aGlzLm11bHRpcGxpZXJzLmRleHRlcml0eV9leHB9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYWdpbGl0eV9leHAgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBhZ2lsaXR5X2V4cDogJHt0aGlzLm11bHRpcGxpZXJzLmFnaWxpdHlfZXhwfWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmNoYXJpc21hX2V4cCAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGNoYXJpc21hX2V4cDogJHt0aGlzLm11bHRpcGxpZXJzLmNoYXJpc21hX2V4cH1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2NoYW5jZSAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGhhY2tpbmdfY2hhbmNlOiAke3RoaXMubXVsdGlwbGllcnMuaGFja2luZ19jaGFuY2V9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19zcGVlZCAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGhhY2tpbmdfc3BlZWQ6ICR7dGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX3NwZWVkfWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfbW9uZXkgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBoYWNraW5nX21vbmV5OiAke3RoaXMubXVsdGlwbGllcnMuaGFja2luZ19tb25leX1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2dyb3cgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBoYWNraW5nX2dyb3c6ICR7dGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2dyb3d9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuY29tcGFueV9yZXAgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBjb21wYW55X3JlcDogJHt0aGlzLm11bHRpcGxpZXJzLmNvbXBhbnlfcmVwfWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmZhY3Rpb25fcmVwICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgZmFjdGlvbl9yZXA6ICR7dGhpcy5tdWx0aXBsaWVycy5mYWN0aW9uX3JlcH1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5jcmltZV9tb25leSAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGNyaW1lX21vbmV5OiAke3RoaXMubXVsdGlwbGllcnMuY3JpbWVfbW9uZXl9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuY3JpbWVfc3VjY2VzcyAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGNyaW1lX3N1Y2Nlc3M6ICR7dGhpcy5tdWx0aXBsaWVycy5jcmltZV9zdWNjZXNzfWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLndvcmtfbW9uZXkgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGB3b3JrX21vbmV5OiAke3RoaXMubXVsdGlwbGllcnMud29ya19tb25leX1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfbW9uZXkgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBoYWNrbmV0X25vZGVfbW9uZXk6ICR7dGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfbW9uZXl9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX3B1cmNoYXNlX2Nvc3QgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBoYWNrbmV0X25vZGVfcHVyY2hhc2VfY29zdDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9wdXJjaGFzZV9jb3N0fWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9yYW1fY29zdCAhPT0gMSlcbiAgICAgIG11bHRzLnB1c2goYGhhY2tuZXRfbm9kZV9yYW1fY29zdDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9yYW1fY29zdH1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5oYWNrbmV0X25vZGVfY29yZV9jb3N0ICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgaGFja25ldF9ub2RlX2NvcmVfY29zdDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9jb3JlX2Nvc3R9YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuaGFja25ldF9ub2RlX2xldmVsX2Nvc3QgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBoYWNrbmV0X25vZGVfbGV2ZWxfY29zdDogJHt0aGlzLm11bHRpcGxpZXJzLmhhY2tuZXRfbm9kZV9sZXZlbF9jb3N0fWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmJsYWRlYnVybmVyX21heF9zdGFtaW5hICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgYmxhZGVidXJuZXJfbWF4X3N0YW1pbmE6ICR7dGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9tYXhfc3RhbWluYX1gKTtcbiAgICBpZiAodGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdGFtaW5hX2dhaW4gIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBibGFkZWJ1cm5lcl9zdGFtaW5hX2dhaW46ICR7dGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdGFtaW5hX2dhaW59YCk7XG4gICAgaWYgKHRoaXMubXVsdGlwbGllcnMuYmxhZGVidXJuZXJfYW5hbHlzaXMgIT09IDEpXG4gICAgICBtdWx0cy5wdXNoKGBibGFkZWJ1cm5lcl9hbmFseXNpczogJHt0aGlzLm11bHRpcGxpZXJzLmJsYWRlYnVybmVyX2FuYWx5c2lzfWApO1xuICAgIGlmICh0aGlzLm11bHRpcGxpZXJzLmJsYWRlYnVybmVyX3N1Y2Nlc3NfY2hhbmNlICE9PSAxKVxuICAgICAgbXVsdHMucHVzaChgYmxhZGVidXJuZXJfc3VjY2Vzc19jaGFuY2U6ICR7dGhpcy5tdWx0aXBsaWVycy5ibGFkZWJ1cm5lcl9zdWNjZXNzX2NoYW5jZX1gKTtcblxuICAgIG5zLnRwcmludGYoYCR7dGhpcy5uYW1lfTogJHttdWx0cy5qb2luKCcsICcpfWApO1xuICB9XG5cbiAgY2FuQnV5KCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLnB1cmNoYXNlZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAodGhpcy5wdXJjaGFzYWJsZSAmJiB0aGlzLmFmZm9yZGFibGUpO1xuICB9XG5cbiAgYXVnQ29sb3IoKSB7XG4gICAgaWYgKHRoaXMucHVyY2hhc2VkKSByZXR1cm4gJ2dyZWVuJztcbiAgICBpZiAodGhpcy5wdXJjaGFzYWJsZSAmJiB0aGlzLmFmZm9yZGFibGUpIHJldHVybiAnR29sZDEnO1xuICAgIHJldHVybiAnd2hpdGUnO1xuICB9XG5cbiAgdGFibGVEYXRhKG5zOiBOUyk6IHsgY29sb3I6IHN0cmluZzsgdGV4dDogc3RyaW5nOyB9W10ge1xuICAgIHJldHVybiBbXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLm5hbWV9YCB9LFxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgICR7dGhpcy5mYWN0aW9ufWAgfSxcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogYCR7dGhpcy5pbnN0YWxsZWQ/J1lFUyc6J05PJ31gLnBhZFN0YXJ0KDQpIH0sXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHVyY2hhc2VkPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBucy5mb3JtYXROdW1iZXIodGhpcy5wcmljZSwgMSwgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoOCkgfSxcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogbnMuZm9ybWF0TnVtYmVyKHRoaXMucmVxdWlyZWRSZXAsIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKSB9LFxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLnB1cmNoYXNhYmxlPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLmFmZm9yZGFibGU/J1lFUyc6J05PJ31gLnBhZFN0YXJ0KDQpIH0sXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMuY2FuQnV5KCk/J1lFUyc6J05PJ31gLnBhZFN0YXJ0KDQpIH0sXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHJlcXJlcXMubGVuZ3RofWAucGFkU3RhcnQoNCkgfSxcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogYCAke3RoaXMuc2hvcnRDYXRlZ29yaWVzKCl9YCB9XG4gICAgXTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdGFibGVDb2xzKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7IGhlYWRlcjogJyBBdWdtZW50YXRpb25zJywgd2lkdGg6IDU2IH0sXG4gICAgICB7IGhlYWRlcjogJyBGYWN0aW9uJywgd2lkdGg6IDI5IH0sXG4gICAgICB7IGhlYWRlcjogJyBJTlMnLCB3aWR0aDogNSB9LFxuICAgICAgeyBoZWFkZXI6ICcgSEFTJywgd2lkdGg6IDUgfSxcbiAgICAgIHsgaGVhZGVyOiAnICAgUHJpY2UnLCB3aWR0aDogOSB9LFxuICAgICAgeyBoZWFkZXI6ICcgICAgICAgUmVwJywgd2lkdGg6IDExIH0sXG4gICAgICB7IGhlYWRlcjogJyBQVVInLCB3aWR0aDogNSB9LFxuICAgICAgeyBoZWFkZXI6ICcgQUZGJywgd2lkdGg6IDUgfSxcbiAgICAgIHsgaGVhZGVyOiAnIEJVWScsIHdpZHRoOiA1IH0sXG4gICAgICB7IGhlYWRlcjogJyBQUkUnLCB3aWR0aDogNSB9LFxuICAgICAgeyBoZWFkZXI6ICcgQ0FURUdPUklFUycsIHdpZHRoOiAxNCB9LFxuICAgIF07XG4gIH1cblxuICBzaG9ydFRhYmxlRGF0YShuczogTlMpOiB7IGNvbG9yOiBzdHJpbmc7IHRleHQ6IHN0cmluZzsgfVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgICR7dGhpcy5uYW1lfWAgfSxcbiAgICAgIHsgY29sb3I6IHRoaXMuYXVnQ29sb3IoKSwgdGV4dDogYCAke3RoaXMuZmFjdGlvbn1gIH0sXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnByaWNlLCAxLCAxMDAwLCB0cnVlKS5wYWRTdGFydCg4KSB9LFxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBucy5mb3JtYXROdW1iZXIodGhpcy5yZXF1aXJlZFJlcCwgMywgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoMTApIH0sXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHJlcXJlcXMubGVuZ3RofWAucGFkU3RhcnQoNCkgfVxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNob3J0VGFibGVDb2xzKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7IGhlYWRlcjogJyBBdWdtZW50YXRpb25zJywgd2lkdGg6IDU2IH0sXG4gICAgICB7IGhlYWRlcjogJyBGYWN0aW9uJywgd2lkdGg6IDI5IH0sXG4gICAgICB7IGhlYWRlcjogJyAgIFByaWNlJywgd2lkdGg6IDkgfSxcbiAgICAgIHsgaGVhZGVyOiAnICAgICAgIFJlcCcsIHdpZHRoOiAxMSB9LFxuICAgICAgeyBoZWFkZXI6ICcgUFJFJywgd2lkdGg6IDUgfSxcbiAgICBdO1xuICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHBsYXllciA9IG5zLmdldFBsYXllcigpO1xuICAvLyBjb25zdCBsdmwxMVNyY0ZpbGVDaGVjayA9IG5zLnNpbmd1bGFyaXR5LmdldE93bmVkU291cmNlRmlsZXMoKS5maWx0ZXIocyA9PiBzLm4gPT09IDExKTtcbiAgLy8gY29uc3QgbHZsMTFTcmNGaWxlTGV2ZWwgPSBsdmwxMVNyY0ZpbGVDaGVjay5sZW5ndGggPiAwID8gbHZsMTFTcmNGaWxlQ2hlY2tbMF0ubHZsIDogMDtcbiAgLy8gY29uc3QgYXVnUHJpY2VNdWx0aXBsaWVyID0gMS45ICogWzEsIDAuOTYsIDAuOTQsIDAuOTNdW2x2bDExU3JjRmlsZUxldmVsXTtcblxuICBjb25zdCBhdWdQcmljZU11bHRpcGxpZXIgPSAxLjk7XG4gIGNvbnN0IG5mZ1ByaWNlTXVsdGlwbGllciA9IDEuMTQ7XG4gIGxldCBhdWdzOiBJQXVnW10gPSBbXTtcbiAgZm9yIChjb25zdCBmYWN0aW9uIG9mIEFMTF9GQUNUSU9OUy5zb3J0KChhLCBiKSA9PiBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKGIpIC0gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChhKSkpIHtcbiAgICBpZiAobnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChmYWN0aW9uKSA9PT0gMCAmJiBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uRmF2b3IoZmFjdGlvbikgPT09IDApIGNvbnRpbnVlO1xuICAgIGNvbnN0IGZhY3Rpb25BdWdzID0gbnMuc2luZ3VsYXJpdHkuZ2V0QXVnbWVudGF0aW9uc0Zyb21GYWN0aW9uKGZhY3Rpb24pO1xuICAgIGZvciAoY29uc3QgYXVnIG9mIGZhY3Rpb25BdWdzKSB7XG4gICAgICBpZiAoIWF1Z3Muc29tZShhID0+IGEubmFtZSA9PT0gYXVnKSlcbiAgICAgICAgYXVncy5wdXNoKG5ldyBBdWcobnMsIGF1ZywgZmFjdGlvbikpO1xuICAgIH1cbiAgfVxuXG4gIC8vYXVncyA9IGF1Z3MuZmlsdGVyKGEgPT4gYS5jYW5CdXkoKSB8fCBhLnB1cmNoYXNlZCkuc29ydCgoYSwgYikgPT4gYi5wcmljZSAtIGEucHJpY2UpO1xuICBhdWdzID0gYXVncy5maWx0ZXIoYSA9PiBhLmlzVXNlZnVsKTtcbiAgYXVncyA9IGF1Z3Muc29ydCgoYSwgYikgPT4gYi5wcmljZSAtIGEucHJpY2UpO1xuXG4gIC8vYXVncyA9IGF1Z3MuZmlsdGVyKGEgPT4gYS5pc0hhY2spO1xuICBhdWdzID0gYXVncy5maWx0ZXIoYSA9PiBhLm5hbWUgIT09IFwiTmV1cm9GbHV4IEdvdmVybm9yXCIpO1xuXG4gIC8vIHNoaWZ0IHByZXJlcXMgaGlnaGVyIGluIHRoZSBsaXN0IGlmIHRoZXkncmUgaW4gdGhlIGxpc3QuIElmIHRoZXkncmUgbm90IGluIHRoZSBsaXN0LCByZW1vdmUgdGhlIGF1ZyB3aXRoIHByZXJlcXNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdWdzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgYXVnID0gYXVnc1tpXTtcbiAgICBpZiAoYXVnLnByZXFyZXFzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBmb3VuZFByZXJlcSA9IGZhbHNlO1xuICAgICAgbGV0IG1vdmVkUHJlcmVxID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF1Zy5wcmVxcmVxcy5sZW5ndGg7ICsraikge1xuICAgICAgICBjb25zdCBwcmVyZXEgPSBhdWcucHJlcXJlcXNbal07XG4gICAgICAgIGNvbnN0IHByZXJlcUluZGV4ID0gYXVncy5maW5kSW5kZXgoYSA9PiBhLm5hbWUgPT09IHByZXJlcSk7XG5cbiAgICAgICAgaWYgKHByZXJlcUluZGV4ID09PSAtMSkgYnJlYWs7XG4gICAgICAgIGZvdW5kUHJlcmVxID0gdHJ1ZTtcblxuICAgICAgICBpZiAocHJlcmVxSW5kZXggPCBpKSBjb250aW51ZTtcblxuICAgICAgICBhdWdzLnNwbGljZShpLCAwLCBhdWdzLnNwbGljZShwcmVyZXFJbmRleCwgMSlbMF0pO1xuICAgICAgICBtb3ZlZFByZXJlcSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZighZm91bmRQcmVyZXEpIHtcbiAgICAgICAgYXVncy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIC0taTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmKG1vdmVkUHJlcmVxKSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXVncyA9IGF1Z3MuZmlsdGVyKGEgPT4gYS5jYW5CdXkoKSk7XG4gIC8vYXVncy5mb3JFYWNoKGEgPT4gYS5wcmludE11bHRpcGxpZXJzKG5zKSk7XG5cbiAgbGV0IHByaWNlID0gMDtcbiAgbGV0IG11bHQgPSAwO1xuICBhdWdzLmZvckVhY2goYSA9PiB7XG4gICAgY29uc3QgdGhpc1ByaWNlID0gYS5wcmljZSAqIE1hdGgucG93KGF1Z1ByaWNlTXVsdGlwbGllciwgbXVsdCsrKTtcbiAgICBwcmljZSArPSB0aGlzUHJpY2U7XG4gICAgLy9ucy50cHJpbnRmKGAke2EubmFtZX06ICR7bnMuZm9ybWF0TnVtYmVyKHRoaXNQcmljZSwgMSwgMTAwMCl9IC8gJHtucy5mb3JtYXROdW1iZXIocHJpY2UsIDEsIDEwMDApfWApO1xuICB9KTtcblxuICAvL1ByaW50VGFibGUobnMsIGF1Z3MubWFwKGEgPT4gYS5zaG9ydFRhYmxlRGF0YShucykpLCBBdWcuc2hvcnRUYWJsZUNvbHMoKSwgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xuICBpZiAoYXVncy5sZW5ndGggPiAwKSB7XG4gICAgUHJpbnRUYWJsZShucywgYXVncy5tYXAoYSA9PiBhLnRhYmxlRGF0YShucykpLCBBdWcudGFibGVDb2xzKCksIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcbiAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA+PSBwcmljZSlcbiAgICAgIENvbG9yUHJpbnQobnMsIFsnZ3JlZW4nLCBgJHthdWdzLmxlbmd0aH0gYXVncyBmaW5hbCBjb3N0OiAke25zLmZvcm1hdE51bWJlcihwcmljZSwgMSwgMTAwMCl9YF0pO1xuICAgIGVsc2VcbiAgICAgIENvbG9yUHJpbnQobnMsIFsnUmVkMScsIGAke2F1Z3MubGVuZ3RofSBhdWdzIGZpbmFsIGNvc3Q6ICR7bnMuZm9ybWF0TnVtYmVyKHByaWNlLCAxLCAxMDAwKX1gXSk7XG4gIH0gZWxzZSB7XG4gICAgbnMudHByaW50ZignICA+PiBQdXJjaGFzYWJsZSBhdWcgbGlzdCBlbXB0eScpO1xuICB9XG4gIFxuICAvLyBidXkgaW4gb3JkZXIgZnJvbSBtb3N0IHRvIGxlYXN0IGV4cGVuc2l2ZSwgYnV5aW5nIHByZXJlcXMgZmlyc3RcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCkge1xuICAgIC8vbGV0IGNhc2ggPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpO1xuICAgIHdoaWxlIChhdWdzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGF1ZyA9IGF1Z3Muc2hpZnQoKTtcbiAgICAgIFxuICAgICAgaWYgKGF1ZylcbiAgICAgICAgbnMuc2luZ3VsYXJpdHkucHVyY2hhc2VBdWdtZW50YXRpb24oYXVnLmZhY3Rpb24sIGF1Zy5uYW1lKTtcbiAgICB9XG5cbiAgICB3aGlsZSAobnMuc2luZ3VsYXJpdHkucHVyY2hhc2VBdWdtZW50YXRpb24oQUxMX0ZBQ1RJT05TLnNvcnQoKGEsIGIpID0+IG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAoYikgLSBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKGEpKVswXSwgXCJOZXVyb0ZsdXggR292ZXJub3JcIikpO1xuICB9XG59XG4iXX0=\",\"filename\":\"augs.js\",\"server\":\"home\"}}],[\"break.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers, isRootable } from \\\"util\\\";\\nfunction crackAndNuke(ns, s) {\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        ns.brutessh(s);\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        ns.ftpcrack(s);\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        ns.relaysmtp(s);\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        ns.httpworm(s);\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        ns.sqlinject(s);\\n    ns.nuke(s);\\n}\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\n        if (ns.fileExists(crack, \\\"home\\\"))\\n            count++;\\n        return count;\\n    }, 0);\\n    for (const s of servers) {\\n        if (isRootable(ns, s, portCrackCount)) {\\n            ns.tprintf(`Cracking ${s}`);\\n            crackAndNuke(ns, s);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYnJlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFakQsU0FBUyxZQUFZLENBQUMsRUFBTSxFQUFFLENBQVM7SUFDckMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1RCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxDLE1BQU0sVUFBVSxHQUFHLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RHLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDeEQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7WUFBRSxLQUFLLEVBQUUsQ0FBQztRQUMxQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVOLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO1FBQ3ZCLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUU7WUFDckMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUIsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgZ2V0QWxsU2VydmVycywgaXNSb290YWJsZSB9IGZyb20gXCJ1dGlsXCI7XG5cbmZ1bmN0aW9uIGNyYWNrQW5kTnVrZShuczogTlMsIHM6IHN0cmluZyk6IHZvaWQge1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiLCBcImhvbWVcIikpIG5zLmJydXRlc3NoKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkZUUENyYWNrLmV4ZVwiLCBcImhvbWVcIikpIG5zLmZ0cGNyYWNrKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcInJlbGF5U01UUC5leGVcIiwgXCJob21lXCIpKSBucy5yZWxheXNtdHAocyk7XG4gIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIsIFwiaG9tZVwiKSkgbnMuaHR0cHdvcm0ocyk7XG4gIGlmIChucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiLCBcImhvbWVcIikpIG5zLnNxbGluamVjdChzKTtcblxuICBucy5udWtlKHMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xuXG4gIGNvbnN0IHBvcnRDcmFja3MgPSBbXCJCcnV0ZVNTSC5leGVcIiwgXCJGVFBDcmFjay5leGVcIiwgXCJyZWxheVNNVFAuZXhlXCIsIFwiSFRUUFdvcm0uZXhlXCIsIFwiU1FMSW5qZWN0LmV4ZVwiXTtcbiAgY29uc3QgcG9ydENyYWNrQ291bnQgPSBwb3J0Q3JhY2tzLnJlZHVjZSgoY291bnQsIGNyYWNrKSA9PiB7XG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoY3JhY2ssIFwiaG9tZVwiKSkgY291bnQrKztcbiAgICByZXR1cm4gY291bnQ7XG4gIH0sIDApO1xuXG4gIGZvciAoY29uc3QgcyBvZiBzZXJ2ZXJzKSB7XG4gICAgaWYgKGlzUm9vdGFibGUobnMsIHMsIHBvcnRDcmFja0NvdW50KSkge1xuICAgICAgbnMudHByaW50ZihgQ3JhY2tpbmcgJHtzfWApO1xuICAgICAgY3JhY2tBbmROdWtlKG5zLCBzKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==\",\"filename\":\"break.js\",\"server\":\"home\"}}],[\"connected.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\nimport { getAllServers, isRootable } from \\\"util\\\";\\nfunction showConnected(ns, parent, host, pre) {\\n    const connectedServers = ns.scan(host);\\n    ns.tprintf(`${pre}${host}`);\\n    for (const serverName of connectedServers) {\\n        if (serverName === parent)\\n            continue;\\n        showConnected(ns, host, serverName, `-${pre}`);\\n    }\\n}\\nfunction serverHackedStatusColor(ns, s) {\\n    if (ns.hasRootAccess(s))\\n        return 'green';\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\n    const hackLv = ns.getHackingLevel();\\n    if (hackLv >= hackReq)\\n        return 'Gold1';\\n    return 'IndianRed';\\n}\\nexport async function main(ns) {\\n    //ns.ui.clearTerminal();\\n    showConnected(ns, '', 'home', '');\\n    // for (const server of getAllServers(ns)) {\\n    //   ns.tprintf(`${server}`);\\n    // }\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\n        if (ns.fileExists(crack, \\\"home\\\"))\\n            count++;\\n        return count;\\n    }, 0);\\n    // ns.tprintf(`${ns.ui.windowSize()}`)\\n    const sortedServers = getAllServers(ns).sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b));\\n    const filteredServers = sortedServers; //.filter(s => ns.getServerMaxMoney(s) > 0);\\n    const hackableServerCount = filteredServers.filter(s => isRootable(ns, s, portCrackCount)).length;\\n    const truncatedServers = filteredServers.slice(0, hackableServerCount + 5);\\n    const data = sortedServers.map(s => {\\n        return [\\n            { color: serverHackedStatusColor(ns, s), text: ` ${s}` },\\n            ns.getServerRequiredHackingLevel(s).toString().padStart(6),\\n            ns.getServerNumPortsRequired(s).toString().padStart(6),\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\n            ns.formatRam(ns.getServerMaxRam(s), 0).padStart(7),\\n            ns.formatNumber(ns.getServerMoneyAvailable(s), 3, 1000, true).padStart(10),\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(10)\\n        ];\\n    });\\n    const columns = [\\n        { header: ' Servers', width: 20 },\\n        { header: ' Level', width: 7 },\\n        { header: ' Ports', width: 7 },\\n        { header: ' Base Sec', width: 10 },\\n        { header: '    Ram', width: 8 },\\n        { header: '     Money', width: 11 },\\n        { header: ' Max Money', width: 11 }\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nvbm5lY3RlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFakQsU0FBUyxhQUFhLENBQUMsRUFBTSxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsR0FBVztJQUN0RSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTVCLEtBQUssTUFBTSxVQUFVLElBQUksZ0JBQWdCLEVBQUU7UUFDekMsSUFBSSxVQUFVLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFFcEMsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztLQUNoRDtBQUNILENBQUM7QUFFRCxTQUFTLHVCQUF1QixDQUFDLEVBQU0sRUFBRSxDQUFTO0lBQ2hELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFBRSxPQUFPLE9BQU8sQ0FBQztJQUV4QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBRXBDLElBQUksTUFBTSxJQUFJLE9BQU87UUFBRSxPQUFPLE9BQU8sQ0FBQztJQUV0QyxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQix3QkFBd0I7SUFDeEIsYUFBYSxD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RSxDQUFDLEVBQUU7UUFDL0IsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDakMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7S0FDckMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBQcmludFRhYmxlLCBDb2xvclByaW50LCBEZWZhdWx0U3R5bGUgfSBmcm9tIFwidGFibGVzXCI7XG5pbXBvcnQgeyBnZXRBbGxTZXJ2ZXJzLCBpc1Jvb3RhYmxlIH0gZnJvbSBcInV0aWxcIjtcblxuZnVuY3Rpb24gc2hvd0Nvbm5lY3RlZChuczogTlMsIHBhcmVudDogc3RyaW5nLCBob3N0OiBzdHJpbmcsIHByZTogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGhvc3QpO1xuXG4gIG5zLnRwcmludGYoYCR7cHJlfSR7aG9zdH1gKTtcblxuICBmb3IgKGNvbnN0IHNlcnZlck5hbWUgb2YgY29ubmVjdGVkU2VydmVycykge1xuICAgIGlmIChzZXJ2ZXJOYW1lID09PSBwYXJlbnQpIGNvbnRpbnVlO1xuXG4gICAgc2hvd0Nvbm5lY3RlZChucywgaG9zdCwgc2VydmVyTmFtZSwgYC0ke3ByZX1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXJ2ZXJIYWNrZWRTdGF0dXNDb2xvcihuczogTlMsIHM6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gJ2dyZWVuJztcblxuICBjb25zdCBoYWNrUmVxID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocyk7XG4gIGNvbnN0IGhhY2tMdiA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xuXG4gIGlmIChoYWNrTHYgPj0gaGFja1JlcSkgcmV0dXJuICdHb2xkMSc7XG5cbiAgcmV0dXJuICdJbmRpYW5SZWQnO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy9ucy51aS5jbGVhclRlcm1pbmFsKCk7XG4gIHNob3dDb25uZWN0ZWQobnMsICcnLCAnaG9tZScsICcnKTtcblxuICAvLyBmb3IgKGNvbnN0IHNlcnZlciBvZiBnZXRBbGxTZXJ2ZXJzKG5zKSkge1xuICAvLyAgIG5zLnRwcmludGYoYCR7c2VydmVyfWApO1xuICAvLyB9XG5cbiAgY29uc3QgcG9ydENyYWNrcyA9IFtcIkJydXRlU1NILmV4ZVwiLCBcIkZUUENyYWNrLmV4ZVwiLCBcInJlbGF5U01UUC5leGVcIiwgXCJIVFRQV29ybS5leGVcIiwgXCJTUUxJbmplY3QuZXhlXCJdO1xuICBjb25zdCBwb3J0Q3JhY2tDb3VudCA9IHBvcnRDcmFja3MucmVkdWNlKChjb3VudCwgY3JhY2spID0+IHtcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhjcmFjaywgXCJob21lXCIpKSBjb3VudCsrO1xuICAgIHJldHVybiBjb3VudDtcbiAgfSwgMCk7XG5cbiAgLy8gbnMudHByaW50ZihgJHtucy51aS53aW5kb3dTaXplKCl9YClcbiAgY29uc3Qgc29ydGVkU2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpLnNvcnQoKGEsIGIpID0+IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKGEpIC0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoYikpO1xuICBjb25zdCBmaWx0ZXJlZFNlcnZlcnMgPSBzb3J0ZWRTZXJ2ZXJzLy8uZmlsdGVyKHMgPT4gbnMuZ2V0U2VydmVyTWF4TW9uZXkocykgPiAwKTtcbiAgY29uc3QgaGFja2FibGVTZXJ2ZXJDb3VudCA9IGZpbHRlcmVkU2VydmVycy5maWx0ZXIocyA9PiBpc1Jvb3RhYmxlKG5zLCBzLCBwb3J0Q3JhY2tDb3VudCkpLmxlbmd0aDtcbiAgY29uc3QgdHJ1bmNhdGVkU2VydmVycyA9IGZpbHRlcmVkU2VydmVycy5zbGljZSgwLCBoYWNrYWJsZVNlcnZlckNvdW50ICsgNSk7XG4gIFxuICBjb25zdCBkYXRhID0gc29ydGVkU2VydmVycy5tYXAocyA9PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgY29sb3I6IHNlcnZlckhhY2tlZFN0YXR1c0NvbG9yKG5zLCBzKSwgdGV4dDogYCAke3N9YCB9LFxuICAgICAgbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocykudG9TdHJpbmcoKS5wYWRTdGFydCg2KSxcbiAgICAgIG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQocykudG9TdHJpbmcoKS5wYWRTdGFydCg2KSxcbiAgICAgIG5zLmdldFNlcnZlckJhc2VTZWN1cml0eUxldmVsKHMpLnRvU3RyaW5nKCkucGFkU3RhcnQoOSksXG4gICAgICBucy5mb3JtYXRSYW0obnMuZ2V0U2VydmVyTWF4UmFtKHMpLCAwKS5wYWRTdGFydCg3KSxcbiAgICAgIG5zLmZvcm1hdE51bWJlcihucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzKSwzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCksXG4gICAgICBucy5mb3JtYXROdW1iZXIobnMuZ2V0U2VydmVyTWF4TW9uZXkocyksMywgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoMTApXG4gICAgXVxuICB9KTtcblxuXHRjb25zdCBjb2x1bW5zID0gW1xuXHRcdHsgaGVhZGVyOiAnIFNlcnZlcnMnLCB3aWR0aDogMjAgfSxcblx0XHR7IGhlYWRlcjogJyBMZXZlbCcsIHdpZHRoOiA3IH0sXG4gICAgeyBoZWFkZXI6ICcgUG9ydHMnLCB3aWR0aDogNyB9LFxuXHRcdHsgaGVhZGVyOiAnIEJhc2UgU2VjJywgd2lkdGg6IDEwIH0sXG5cdFx0eyBoZWFkZXI6ICcgICAgUmFtJywgd2lkdGg6IDggfSxcblx0XHR7IGhlYWRlcjogJyAgICAgTW9uZXknLCB3aWR0aDogMTEgfSxcbiAgICB7IGhlYWRlcjogJyBNYXggTW9uZXknLCB3aWR0aDogMTEgfVxuXHRdO1xuXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcbn1cbiJdfQ==\",\"filename\":\"connected.js\",\"server\":\"home\"}}],[\"eval.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getAllServers, getSlaves, getTotalThreads, GROW_THREAD_MULT, HACK_PERCENT, HACK_PERCENT_MAX, MAX_BATCHES_PER_CYCLE, MS_BETWEEN_OPERATIONS } from \\\"./util\\\";\\nimport { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\nexport function autocomplete(data, args) {\\n    return data.servers; // This script autocompletes the list of servers.\\n}\\nclass HackBatch {\\n    growThreads = 0;\\n    growWeakenThreads = 0;\\n    hackThreads = 0;\\n    hackWeakenThreads = 0;\\n    hackTime = 0;\\n    growTime = 0;\\n    weakenTime = 0;\\n    growMSBuf = 0;\\n    growWeakenMSBuf = 0;\\n    hackMSBuf = 0;\\n    hackWeakenMsBuf = 0;\\n    gain = 0;\\n    totalThreads() {\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\n    }\\n}\\nfunction cyclesToReady(ns, server) {\\n    const result = {\\n        target: server.hostname,\\n        time: 0,\\n        cycles: 0\\n    };\\n    try {\\n        server.baseDifficulty = server.baseDifficulty || ns.getServerBaseSecurityLevel(server.hostname);\\n        server.minDifficulty = server.minDifficulty || ns.getServerMinSecurityLevel(server.hostname);\\n        server.hackDifficulty = server.hackDifficulty || ns.getServerSecurityLevel(server.hostname);\\n        server.moneyAvailable = server.moneyAvailable || ns.getServerMoneyAvailable(server.hostname);\\n        server.moneyMax = server.moneyMax || ns.getServerMaxMoney(server.hostname);\\n        const slaves = getSlaves(ns);\\n        const totalThreads = getTotalThreads(ns, slaves);\\n        while (server.moneyAvailable < server.moneyMax || server.hackDifficulty > server.minDifficulty) {\\n            const baseMSOffset = Math.ceil(ns.formulas.hacking.weakenTime(server, ns.getPlayer()));\\n            const batch = new HackBatch();\\n            const baseWeaken = server.hackDifficulty - server.minDifficulty;\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax));\\n            let growSecIncrease = GROW_SEC * batch.growThreads;\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n            if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\n                growSecIncrease = GROW_SEC * totalThreads;\\n                batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n                batch.growThreads = totalThreads - batch.growWeakenThreads;\\n            }\\n            server.hackDifficulty += batch.growThreads * GROW_SEC;\\n            server.hackDifficulty = Math.max(server.minDifficulty, server.hackDifficulty - (batch.growWeakenThreads * WEAK_SEC));\\n            server.moneyAvailable = Math.min(server.moneyMax, ns.formulas.hacking.growPercent(server, batch.growThreads, ns.getPlayer()) * server.moneyAvailable);\\n            result.cycles++;\\n            result.time += baseMSOffset + (MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\n            if (result.time > 1000 * 60 * 60 * 24) {\\n                result.cycles = -1;\\n                result.time = 1000 * 60 * 60 * 24;\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n    catch (e) {\\n        return result;\\n    }\\n}\\nfunction cycle(ns, server) {\\n    const slaves = getSlaves(ns);\\n    server.baseDifficulty = server.baseDifficulty || ns.getServerBaseSecurityLevel(server.hostname);\\n    server.minDifficulty = server.minDifficulty || ns.getServerMinSecurityLevel(server.hostname);\\n    server.hackDifficulty = server.hackDifficulty || ns.getServerSecurityLevel(server.hostname);\\n    server.moneyAvailable = server.moneyAvailable || ns.getServerMoneyAvailable(server.hostname);\\n    server.moneyMax = server.moneyMax || ns.getServerMaxMoney(server.hostname);\\n    const baseMSOffset = Math.ceil(ns.formulas.hacking.weakenTime(server, ns.getPlayer()));\\n    let totalThreads;\\n    let batches;\\n    let targetHackPercent = HACK_PERCENT;\\n    let actualHackPercent = 0;\\n    let additionalBatches;\\n    while (true) {\\n        const workingServer = Object.assign({}, server);\\n        workingServer.baseDifficulty = server.baseDifficulty || ns.getServerBaseSecurityLevel(server.hostname);\\n        workingServer.minDifficulty = server.minDifficulty || ns.getServerMinSecurityLevel(server.hostname);\\n        workingServer.hackDifficulty = server.hackDifficulty || ns.getServerSecurityLevel(server.hostname);\\n        workingServer.moneyAvailable = server.moneyAvailable || ns.getServerMoneyAvailable(server.hostname);\\n        workingServer.moneyMax = server.moneyMax || ns.getServerMaxMoney(server.hostname);\\n        totalThreads = getTotalThreads(ns, slaves);\\n        batches = [];\\n        // first batch is always GW if the server is not already at min security / max money\\n        // find out how many threads are required to grow to max\\n        if (workingServer.hackDifficulty > workingServer.baseDifficulty || workingServer.moneyAvailable < workingServer.moneyMax) {\\n            const batch = new HackBatch();\\n            const baseWeaken = workingServer.hackDifficulty - workingServer.minDifficulty;\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(workingServer, ns.getPlayer(), workingServer.moneyMax));\\n            const moneyAvailable = workingServer.moneyAvailable;\\n            const hackDifficulty = workingServer.hackDifficulty;\\n            workingServer.moneyAvailable = Math.min(workingServer.moneyMax, workingServer.moneyAvailable + batch.growThreads);\\n            workingServer.moneyAvailable = Math.min(workingServer.moneyMax, workingServer.moneyAvailable * ns.formulas.hacking.growPercent(workingServer, batch.growThreads, ns.getPlayer()));\\n            let growSecIncrease = GROW_SEC * batch.growThreads;\\n            workingServer.hackDifficulty += growSecIncrease;\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n            workingServer.hackDifficulty = Math.max(workingServer.minDifficulty, workingServer.hackDifficulty - (batch.growWeakenThreads * WEAK_SEC));\\n            if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\n                growSecIncrease = GROW_SEC * totalThreads;\\n                batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n                batch.growThreads = Math.max(totalThreads - batch.growWeakenThreads, 0);\\n                workingServer.hackDifficulty = hackDifficulty;\\n                workingServer.hackDifficulty += GROW_SEC * batch.growThreads;\\n                workingServer.hackDifficulty -= WEAK_SEC * batch.growWeakenThreads;\\n                workingServer.hackDifficulty = Math.max(workingServer.hackDifficulty, workingServer.minDifficulty);\\n                workingServer.moneyAvailable = moneyAvailable;\\n                if (batch.growThreads > 0) {\\n                    workingServer.moneyAvailable = Math.min(workingServer.moneyMax, workingServer.moneyAvailable + batch.growThreads);\\n                    workingServer.moneyAvailable = Math.min(workingServer.moneyMax, workingServer.moneyAvailable * ns.formulas.hacking.growPercent(workingServer, batch.growThreads, ns.getPlayer()));\\n                }\\n            }\\n            batches.push(batch);\\n            totalThreads -= batch.totalThreads();\\n        }\\n        let missedOnce = false;\\n        additionalBatches = 0;\\n        if (totalThreads > 0) {\\n            const batch = new HackBatch();\\n            const hackPercentPerThread = Math.min(ns.formulas.hacking.hackPercent(workingServer, ns.getPlayer()), 1);\\n            if (hackPercentPerThread <= 0)\\n                batch.hackThreads = 0;\\n            else\\n                batch.hackThreads = Math.ceil(targetHackPercent / hackPercentPerThread);\\n            while (true) {\\n                if (batch.hackThreads <= 0) {\\n                    totalThreads = 0;\\n                    break;\\n                }\\n                actualHackPercent = hackPercentPerThread * batch.hackThreads;\\n                const current = workingServer.moneyAvailable;\\n                const future = current - (current * actualHackPercent);\\n                workingServer.moneyAvailable = future;\\n                batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(workingServer, ns.getPlayer(), workingServer.moneyMax) * GROW_THREAD_MULT);\\n                workingServer.moneyAvailable = workingServer.moneyMax;\\n                batch.gain = current - future;\\n                batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, workingServer.hostname) / WEAK_SEC);\\n                batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\n                if (batch.totalThreads() <= totalThreads) {\\n                    totalThreads -= batch.totalThreads();\\n                    batches.push(batch);\\n                    if (missedOnce)\\n                        totalThreads = 0;\\n                    break;\\n                }\\n                batch.hackThreads = Math.floor(batch.hackThreads * 0.75);\\n                missedOnce = true;\\n            }\\n            // duplicate batch until there is no space left\\n            const batchThreads = batch.totalThreads();\\n            if (batchThreads > 0)\\n                additionalBatches = Math.floor(totalThreads / batchThreads);\\n        }\\n        if (batches.length === 0)\\n            return { target: server.hostname, start: 0, time: 0, gain: 0, rate: 0 };\\n        if (batches.length + additionalBatches > MAX_BATCHES_PER_CYCLE)\\n            additionalBatches = MAX_BATCHES_PER_CYCLE - batches.length;\\n        if ((batches.length + additionalBatches) < MAX_BATCHES_PER_CYCLE || actualHackPercent >= HACK_PERCENT_MAX || actualHackPercent === 0) {\\n            server.moneyAvailable = workingServer.moneyAvailable;\\n            server.hackDifficulty = workingServer.hackDifficulty;\\n            break;\\n        }\\n        targetHackPercent += 0.1;\\n    }\\n    const cycleTime = baseMSOffset + ((batches.length + additionalBatches) * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0) + (additionalBatches * batches[batches.length - 1].gain);\\n    // if (batches.length > 1)\\n    //   ns.tprintf(`${server.hostname}: ${server.hackDifficulty} ${ns.formatNumber(server.moneyAvailable, 0, 1000)}/${ns.formatNumber(server.moneyMax, 0, 1000)} ${batches.length + additionalBatches} Batches | H${batches[1].hackThreads}:HW${batches[1].hackWeakenThreads}:G${batches[1].growThreads}:GW${batches[1].growWeakenThreads} | ${ns.formatNumber(cycleGain, 3, 1000, true)} Total ${(actualHackPercent*100).toFixed(2)}%% | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\n    // else\\n    //   ns.tprintf(`${server.hostname}: ${server.hackDifficulty} ${ns.formatNumber(server.moneyAvailable, 0, 1000)}/${ns.formatNumber(server.moneyMax, 0, 1000)} ${batches.length + additionalBatches} Batches | H${batches[0].hackThreads}:HW${batches[0].hackWeakenThreads}:G${batches[0].growThreads}:GW${batches[0].growWeakenThreads} | ${ns.formatNumber(cycleGain, 3, 1000, true)} Total ${(actualHackPercent*100).toFixed(2)}%% | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\n    return {\\n        target: server.hostname,\\n        start: baseMSOffset,\\n        time: cycleTime,\\n        gain: cycleGain,\\n        rate: cycleGain / (cycleTime / 1000)\\n    };\\n}\\nfunction dirtyCheck(ns, targets) {\\n    const slaves = getSlaves(ns);\\n    const totalThreads = getTotalThreads(ns, slaves);\\n    const hackThreads = totalThreads * .5;\\n    const player = ns.getPlayer();\\n    const data = [];\\n    for (const s of targets.map(t => ns.getServer(t))) {\\n        s.hackDifficulty = s.minDifficulty;\\n        s.moneyAvailable = s.moneyMax;\\n        const baseTime = Math.ceil(ns.formulas.hacking.weakenTime(s, player));\\n        const hackPercentPerThread = Math.min(ns.formulas.hacking.hackPercent(s, player), 1);\\n        let targetHackPercent = HACK_PERCENT;\\n        let batchHackThreads;\\n        let batchCount;\\n        while (true) {\\n            batchHackThreads = hackPercentPerThread > 0 ? Math.ceil(targetHackPercent / hackPercentPerThread) : 0;\\n            batchCount = Math.min(batchHackThreads > 0 ? Math.floor(hackThreads / batchHackThreads) : 0, MAX_BATCHES_PER_CYCLE);\\n            if (batchCount < MAX_BATCHES_PER_CYCLE || targetHackPercent >= HACK_PERCENT_MAX)\\n                break;\\n            targetHackPercent += 0.1;\\n        }\\n        const moneyPerBatch = s.moneyAvailable ? (batchHackThreads * hackPercentPerThread) * s.moneyAvailable : 0;\\n        const moneyPerCycle = batchCount * moneyPerBatch;\\n        const cycleTime = baseTime + (batchCount * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\n        const gainPerSecond = moneyPerCycle / (cycleTime / 1000);\\n        if (gainPerSecond > 0)\\n            data.push([s.hostname, gainPerSecond]);\\n        //ns.tprintf(`${s.hostname}: ${formatTime(cycleTime)}|${formatTime(baseTime)}|${ns.formatNumber(moneyPerCycle, 3, 1000, true)}|${ns.formatNumber(gainPerSecond, 3, 1000, true)}/s`)\\n    }\\n    return data.sort((a, b) => Number(b[1]) - Number(a[1])).map(a => a[0].toString());\\n}\\nexport async function main(ns) {\\n    let servers = [];\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\n        servers = [ns.getServer(ns.args[0])];\\n    //else servers = dirtyCheck(ns, getAllServers(ns)).map(s => ns.getServer(s));\\n    else\\n        servers = getAllServers(ns).map(s => ns.getServer(s)).filter(s => s.moneyMax && s.moneyMax > 0 && s.hasAdminRights);\\n    let currentTargetHost = '';\\n    let currentTargetRate = 0;\\n    const hackStatPort = ns.getPortHandle(1);\\n    if (hackStatPort.peek() !== \\\"NULL PORT DATA\\\") {\\n        const hackStats = JSON.parse(hackStatPort.peek().toString());\\n        currentTargetHost = hackStats.target;\\n    }\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n    let data = [];\\n    for (const s of servers) {\\n        const finalInfo = { target: s.hostname, start: 0, time: 0, gain: 0, rate: 0 };\\n        let firstInfo = { target: s.hostname, start: 0, time: 0, gain: 0, rate: 0 };\\n        let lastInfo = { target: s.hostname, start: 0, time: 0, gain: 0, rate: 0 };\\n        const growInfo = cyclesToReady(ns, ns.getServer(s.hostname));\\n        const totalCycleCount = 20;\\n        for (let i = 0; i < totalCycleCount; i++) {\\n            const cycleInfo = cycle(ns, s);\\n            if (i === 0)\\n                firstInfo = Object.assign({}, cycleInfo);\\n            if (i === totalCycleCount - 1)\\n                lastInfo = Object.assign({}, cycleInfo);\\n            finalInfo.gain += cycleInfo.gain;\\n            finalInfo.time += cycleInfo.time;\\n        }\\n        finalInfo.rate = finalInfo.gain / (finalInfo.time / 1000);\\n        if (s.hostname === currentTargetHost)\\n            currentTargetRate = finalInfo.rate;\\n        data.push([\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: ` ${s.hostname}` },\\n            finalInfo.rate,\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: `${ns.formatNumber(finalInfo.rate, 3, 1000, true)}/s`.padStart(12) },\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: formatTime(firstInfo.start).padStart(10) },\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: formatTime(firstInfo.time).padStart(10) },\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: formatTime(lastInfo.time).padStart(10) },\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: formatTime(finalInfo.time).padStart(10) },\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: `${ns.getServerSecurityLevel(s.hostname).toFixed(0).padStart(2)}/${ns.getServerMinSecurityLevel(s.hostname).toFixed(0).padStart(2)}`.padStart(9) },\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: ns.formatPercent(ns.getServerMoneyAvailable(s.hostname) / ns.getServerMaxMoney(s.hostname)).padStart(8) },\\n            growInfo.time,\\n            { color: s.hostname === currentTargetHost ? 'green' : 'white', text: `${formatTime(growInfo.time).padStart(10)}/${growInfo.cycles.toString().padStart(2)}` }\\n        ]);\\n    }\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n    data = data.filter((a) => Number(a[1]) >= currentTargetRate);\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n    data = data.sort((a, b) => Number(b[1]) - Number(a[1]));\\n    //data = data.sort((a: any[], b: any[]) => Number(a[9]) - Number(b[9]));\\n    const columns = [\\n        { header: ' Servers', width: 20 },\\n        { header: '    Rate', width: 9, hide: true },\\n        { header: '        Rate', width: 13 },\\n        { header: '  Start Tm', width: 11 },\\n        { header: ' First Cyc', width: 11 },\\n        { header: '  Next Cyc', width: 11 },\\n        { header: '  Tot Time', width: 11 },\\n        { header: ' Security', width: 10 },\\n        { header: '   Money', width: 9 },\\n        { header: '   Grow Time', width: 13, hide: true },\\n        { header: ' Grow Time', width: 14 },\\n        // { header: 'LOG Money', width: 10 },\\n        // { header: '    Value', width: 10 },\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ldmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQy9LLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUc5RCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyw0Q0FBNEM7QUFDcEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0FBRTlDLG9KQUFvSjtBQUNwSixNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFTO0lBQy9DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlEQUFpRDtBQUN4RSxDQUFDO0FBc0JELE1BQU0sU0FBUztJQUNiLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBRXRCLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVmLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLElBQUksR0FBRyxDQUFDLENBQUM7SUFFVCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUMvRixDQUFDO0NBQ0Y7QUFnQkQsU0FBUyxhQUFhLENBQUMsRUFBTSxFQUFFLE1BQWM7SUFDM0MsTUFBTSxNQUFNLEdBQW1CO1FBQzdCLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUTtRQUN2QixJQUFJLEVBQUUsQ0FBQztRQUNQLE1BQU0sRUFBRSxDQUFDO0tBQ1YsQ0FBQTtJQUNELElBQUk7UUFDRixNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRyxNQUFNLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU1RixNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVqRCxPQUFPLE1BQU0sQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDOUYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFdkYsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUM5QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDaEUsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hHLElBQUksZUFBZSxHQUFHLFFBQVEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ25ELEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1lBRS9FLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxXQUFXLEdBQUcsWUFBWSxFQUFFO2dCQUM5RCxlQUFlLEdBQUcsUUFBUSxHQUFHLFlBQVksQ0FBQztnQkFDMUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7Z0JBQy9FLEtBQUssQ0FBQyxXQUFXLEdBQUcsWUFBWSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQzthQUM1RDtZQUVELE1BQU0sQ0FBQyxjQUFjLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7WUFDdEQsTUFBTSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLGNBQWMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRXJILE1BQU0sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEosTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxJQUFJLElBQUksWUFBWSxHQUFHLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV4RixJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNyQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNuQixNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsT0FBTyxNQUFNLENBQUM7YUFDZjtTQUNGO1FBRUQsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUFDLE9BQU0sQ0FBQyxFQUFFO1FBQ1QsT0FBTyxNQUFNLENBQUM7S0FDZjtBQUNILENBQUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUNuQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFN0IsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEcsTUFBTSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0YsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFNUYsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0YsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFM0UsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFdkYsSUFBSSxZQUFvQixDQUFDO0lBQ3pCLElBQUksT0FBcUIsQ0FBQztJQUMxQixJQUFJLGlCQUFpQixHQUFHLFlBQVksQ0FBQztJQUNyQyxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUMxQixJQUFJLGlCQUF5QixDQUFDO0lBRTlCLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEQsYUFBYSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkcsYUFBYSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEcsYUFBYSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbkcsYUFBYSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEcsYUFBYSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEYsWUFBWSxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUViLG9GQUFvRjtRQUNwRix3REFBd0Q7UUFDeEQsSUFBSSxhQUFhLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLElBQUksYUFBYSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFO1lBQ3hILE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7WUFDOUIsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDO1lBQzlFLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUV0SCxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO1lBQ3BELE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7WUFFcEQsYUFBYSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEgsYUFBYSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNsTCxJQUFJLGVBQWUsR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUNuRCxhQUFhLENBQUMsY0FBYyxJQUFJLGVBQWUsQ0FBQztZQUNoRCxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztZQUMvRSxhQUFhLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsY0FBYyxHQUFHLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFMUksSUFBSSxLQUFLLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLFdBQVcsR0FBRyxZQUFZLEVBQUU7Z0JBQzlELGVBQWUsR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDO2dCQUMxQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztnQkFDL0UsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRXhFLGFBQWEsQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO2dCQUM5QyxhQUFhLENBQUMsY0FBYyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO2dCQUM3RCxhQUFhLENBQUMsY0FBYyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7Z0JBQ25FLGFBQWEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFFbkcsYUFBYSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7Z0JBRTlDLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUU7b0JBQ3pCLGFBQWEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUNsSCxhQUFhLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNuTDthQUNGO1lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQixZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLGlCQUFpQixHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLFlBQVksR0FBRyxDQUFDLEVBQUc7WUFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUM5QixNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV6RyxJQUFJLG9CQUFvQixJQUFJLENBQUM7Z0JBQUUsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7O2dCQUNoRCxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztZQUU3RSxPQUFPLElBQUksRUFBRTtnQkFDWCxJQUFJLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxFQUFFO29CQUMxQixZQUFZLEdBQUcsQ0FBQyxDQUFDO29CQUNqQixNQUFNO2lCQUNQO2dCQUVELGlCQUFpQixHQUFHLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7Z0JBQzdELE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7Z0JBQzdDLE1BQU0sTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUN2RCxhQUFhLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztnQkFDdEMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN6SSxhQUFhLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7Z0JBQ3RELEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFFOUIsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO2dCQUNsSCxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBRS9FLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxJQUFJLFlBQVksRUFBRTtvQkFDeEMsWUFBWSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztvQkFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFFcEIsSUFBSSxVQUFVO3dCQUFFLFlBQVksR0FBRyxDQUFDLENBQUM7b0JBQ2pDLE1BQU07aUJBQ1A7Z0JBRUQsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQ3pELFVBQVUsR0FBRyxJQUFJLENBQUM7YUFDbkI7WUFFRCwrQ0FBK0M7WUFDL0MsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQzFDLElBQUksWUFBWSxHQUFHLENBQUM7Z0JBQ2xCLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDO1NBQy9EO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDdEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUUxRSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLEdBQUcscUJBQXFCO1lBQzVELGlCQUFpQixHQUFHLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFN0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxxQkFBcUIsSUFBSSxpQkFBaUIsSUFBSSxnQkFBZ0IsSUFBSSxpQkFBaUIsS0FBSyxDQUFDLEVBQUU7WUFDcEksTUFBTSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQztZQUNyRCxNQUFNO1NBQ1A7UUFFRCxpQkFBaUIsSUFBSSxHQUFHLENBQUM7S0FDMUI7SUFFRCxNQUFNLFNBQVMsR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xJLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5JLDBCQUEwQjtJQUMxQix5aUJBQXlpQjtJQUN6aUIsT0FBTztJQUNQLHlpQkFBeWlCO0lBRXppQixPQUFPO1FBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1FBQ3ZCLEtBQUssRUFBRSxZQUFZO1FBQ25CLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsU0FBUyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztLQUNyQyxDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEVBQU0sRUFBRSxPQUFpQjtJQUMzQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRCxNQUFNLFdBQVcsR0FBRyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUU5QixNQUFNLElBQUksR0FBMEIsRUFBRSxDQUFBO0lBQ3RDLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNqRCxDQUFDLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDbkMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBRTlCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXJGLElBQUksaUJBQWlCLEdBQUcsWUFBWSxDQUFDO1FBQ3JDLElBQUksZ0JBQXdCLENBQUM7UUFDN0IsSUFBSSxVQUFrQixDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxFQUFFO1lBQ1gsZ0JBQWdCLEdBQUcsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBRXBILElBQUksVUFBVSxHQUFHLHFCQUFxQixJQUFJLGlCQUFpQixJQUFJLGdCQUFnQjtnQkFBRSxNQUFNO1lBQ3ZGLGlCQUFpQixJQUFJLEdBQUcsQ0FBQztTQUMxQjtRQUNELE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUcsTUFBTSxhQUFhLEdBQUcsVUFBVSxHQUFHLGFBQWEsQ0FBQztRQUNqRCxNQUFNLFNBQVMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxVQUFVLEdBQUcscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRyxNQUFNLGFBQWEsR0FBRyxhQUFhLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFekQsSUFBSSxhQUFhLEdBQUcsQ0FBQztZQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFFOUQsbUxBQW1MO0tBQ3BMO0lBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ3BGLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksT0FBTyxHQUFhLEVBQUUsQ0FBQTtJQUUxQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0YsNkVBQTZFOztRQUN4RSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV6SCxJQUFJLGlCQUFpQixHQUFHLEVBQUUsQ0FBQTtJQUMxQixJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUMxQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLGdCQUFnQixFQUFFO1FBQzVDLE1BQU0sU0FBUyxHQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEUsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztLQUN0QztJQUVELDhEQUE4RDtJQUM5RCxJQUFJLElBQUksR0FBUSxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7UUFDdkIsTUFBTSxTQUFTLEdBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzNGLElBQUksU0FBUyxHQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6RixJQUFJLFFBQVEsR0FBZ0IsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDeEYsTUFBTSxRQUFRLEdBQW1CLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU3RSxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQUUsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxLQUFLLGVBQWUsR0FBRyxDQUFDO2dCQUFFLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUV2RSxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDakMsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDO1NBQ2xDO1FBRUQsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUUxRCxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssaUJBQWlCO1lBQUUsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUV6RSxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ1IsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDO1lBQ3JGLFNBQVMsQ0FBQyxJQUFJO1lBQ2QsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEksRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzlHLEVBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM3RyxFQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDNUcsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzdHLEVBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdE4sRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdLLFFBQVEsQ0FBQyxJQUFJO1lBQ2IsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtTQUM1SixDQUFDLENBQUM7S0FDSjtJQUVELDhEQUE4RDtJQUM5RCxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLENBQUM7SUFFcEUsOERBQThEO0lBQzlELElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLHdFQUF3RTtJQUV6RSxNQUFNLE9BQU8sR0FBRztRQUNmLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7UUFDNUMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDbEMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDaEMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtRQUNqRCxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNuQyxzQ0FBc0M7UUFDdEMsc0NBQXNDO0tBQ3hDLENBQUM7SUFFRixVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TLCBTZXJ2ZXIgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBmb3JtYXRUaW1lLCBnZXRBbGxTZXJ2ZXJzLCBnZXRTbGF2ZXMsIGdldFRvdGFsVGhyZWFkcywgR1JPV19USFJFQURfTVVMVCwgSEFDS19QRVJDRU5ULCBIQUNLX1BFUkNFTlRfTUFYLCBNQVhfQkFUQ0hFU19QRVJfQ1lDTEUsIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCB7IFByaW50VGFibGUsIENvbG9yUHJpbnQsIERlZmF1bHRTdHlsZSB9IGZyb20gXCJ0YWJsZXNcIjtcbmltcG9ydCB7IEhhY2tTdGF0cyB9IGZyb20gXCIuL2h1ZFwiO1xuXG5jb25zdCBHUk9XX1NFQyA9IDAuMDA0OyAvLyBucy5ncm93dGhBbmFseXplU2VjdXJpdHkoMSwgJ29tZWdhLW5ldCcpO1xuY29uc3QgV0VBS19TRUMgPSAwLjA1OyAvLyBucy53ZWFrZW5BbmFseXplKDEpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5leHBvcnQgZnVuY3Rpb24gYXV0b2NvbXBsZXRlKGRhdGE6IGFueSwgYXJnczogYW55KTogc3RyaW5nW10ge1xuICByZXR1cm4gZGF0YS5zZXJ2ZXJzOyAvLyBUaGlzIHNjcmlwdCBhdXRvY29tcGxldGVzIHRoZSBsaXN0IG9mIHNlcnZlcnMuXG59XG5cbmludGVyZmFjZSBJSGFja0JhdGNoIHtcbiAgZ3Jvd1RocmVhZHM6IG51bWJlcjtcbiAgZ3Jvd1dlYWtlblRocmVhZHM6IG51bWJlcjtcbiAgaGFja1RocmVhZHM6IG51bWJlcjtcbiAgaGFja1dlYWtlblRocmVhZHM6IG51bWJlcjtcblxuICBoYWNrVGltZTogbnVtYmVyO1xuICBncm93VGltZTogbnVtYmVyO1xuICB3ZWFrZW5UaW1lOiBudW1iZXI7XG5cbiAgZ3Jvd01TQnVmOiBudW1iZXI7XG4gIGdyb3dXZWFrZW5NU0J1ZjogbnVtYmVyO1xuICBoYWNrTVNCdWY6IG51bWJlcjtcbiAgaGFja1dlYWtlbk1zQnVmOiBudW1iZXI7XG5cbiAgZ2FpbjogbnVtYmVyO1xuXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXI7XG59XG5cbmNsYXNzIEhhY2tCYXRjaCBpbXBsZW1lbnRzIElIYWNrQmF0Y2gge1xuICBncm93VGhyZWFkcyA9IDA7XG4gIGdyb3dXZWFrZW5UaHJlYWRzID0gMDtcbiAgaGFja1RocmVhZHMgPSAwO1xuICBoYWNrV2Vha2VuVGhyZWFkcyA9IDA7XG5cbiAgaGFja1RpbWUgPSAwO1xuICBncm93VGltZSA9IDA7XG4gIHdlYWtlblRpbWUgPSAwO1xuXG4gIGdyb3dNU0J1ZiA9IDA7XG4gIGdyb3dXZWFrZW5NU0J1ZiA9IDA7XG4gIGhhY2tNU0J1ZiA9IDA7XG4gIGhhY2tXZWFrZW5Nc0J1ZiA9IDA7XG5cbiAgZ2FpbiA9IDA7XG5cbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ3Jvd1RocmVhZHMgKyB0aGlzLmdyb3dXZWFrZW5UaHJlYWRzICsgdGhpcy5oYWNrVGhyZWFkcyArIHRoaXMuaGFja1dlYWtlblRocmVhZHM7XG4gIH1cbn1cblxuaW50ZXJmYWNlIElDeWNsZVN0YXRzIHtcbiAgdGFyZ2V0OiBzdHJpbmc7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGdhaW46IG51bWJlcjtcbiAgdGltZTogbnVtYmVyO1xuICByYXRlOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJQ3ljbGVzVG9SZWFkeSB7XG4gIHRhcmdldDogc3RyaW5nO1xuICBjeWNsZXM6IG51bWJlcjtcbiAgdGltZTogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBjeWNsZXNUb1JlYWR5KG5zOiBOUywgc2VydmVyOiBTZXJ2ZXIpOiBJQ3ljbGVzVG9SZWFkeSB7XG4gIGNvbnN0IHJlc3VsdDogSUN5Y2xlc1RvUmVhZHkgPSB7XG4gICAgdGFyZ2V0OiBzZXJ2ZXIuaG9zdG5hbWUsXG4gICAgdGltZTogMCxcbiAgICBjeWNsZXM6IDBcbiAgfVxuICB0cnkge1xuICAgIHNlcnZlci5iYXNlRGlmZmljdWx0eSA9IHNlcnZlci5iYXNlRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xuICAgIHNlcnZlci5taW5EaWZmaWN1bHR5ID0gc2VydmVyLm1pbkRpZmZpY3VsdHkgfHwgbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xuICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSA9IHNlcnZlci5oYWNrRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHNlcnZlci5ob3N0bmFtZSk7XG5cbiAgICBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgfHwgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyLmhvc3RuYW1lKTtcbiAgICBzZXJ2ZXIubW9uZXlNYXggPSBzZXJ2ZXIubW9uZXlNYXggfHwgbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyLmhvc3RuYW1lKTtcblxuICAgIGNvbnN0IHNsYXZlcyA9IGdldFNsYXZlcyhucyk7XG4gICAgY29uc3QgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xuXG4gICAgd2hpbGUgKHNlcnZlci5tb25leUF2YWlsYWJsZSA8IHNlcnZlci5tb25leU1heCB8fCBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgPiBzZXJ2ZXIubWluRGlmZmljdWx0eSkge1xuICAgICAgY29uc3QgYmFzZU1TT2Zmc2V0ID0gTWF0aC5jZWlsKG5zLmZvcm11bGFzLmhhY2tpbmcud2Vha2VuVGltZShzZXJ2ZXIsIG5zLmdldFBsYXllcigpKSk7XG5cbiAgICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xuICAgICAgY29uc3QgYmFzZVdlYWtlbiA9IHNlcnZlci5oYWNrRGlmZmljdWx0eSAtIHNlcnZlci5taW5EaWZmaWN1bHR5O1xuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhzZXJ2ZXIsIG5zLmdldFBsYXllcigpLCBzZXJ2ZXIubW9uZXlNYXgpKTtcbiAgICAgIGxldCBncm93U2VjSW5jcmVhc2UgPSBHUk9XX1NFQyAqIGJhdGNoLmdyb3dUaHJlYWRzO1xuICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpO1xuXG4gICAgICBpZiAoYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgKyBiYXRjaC5ncm93VGhyZWFkcyA+IHRvdGFsVGhyZWFkcykge1xuICAgICAgICBncm93U2VjSW5jcmVhc2UgPSBHUk9XX1NFQyAqIHRvdGFsVGhyZWFkcztcbiAgICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpO1xuICAgICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IHRvdGFsVGhyZWFkcyAtIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzO1xuICAgICAgfVxuXG4gICAgICBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgKz0gYmF0Y2guZ3Jvd1RocmVhZHMgKiBHUk9XX1NFQztcbiAgICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSA9IE1hdGgubWF4KHNlcnZlci5taW5EaWZmaWN1bHR5LCBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgLSAoYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgKiBXRUFLX1NFQykpO1xuXG4gICAgICBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBNYXRoLm1pbihzZXJ2ZXIubW9uZXlNYXgsIG5zLmZvcm11bGFzLmhhY2tpbmcuZ3Jvd1BlcmNlbnQoc2VydmVyLCBiYXRjaC5ncm93VGhyZWFkcywgbnMuZ2V0UGxheWVyKCkpICogc2VydmVyLm1vbmV5QXZhaWxhYmxlKTtcblxuICAgICAgcmVzdWx0LmN5Y2xlcysrO1xuICAgICAgcmVzdWx0LnRpbWUgKz0gYmFzZU1TT2Zmc2V0ICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xuXG4gICAgICBpZiAocmVzdWx0LnRpbWUgPiAxMDAwICogNjAgKiA2MCAqIDI0KSB7XG4gICAgICAgIHJlc3VsdC5jeWNsZXMgPSAtMTtcbiAgICAgICAgcmVzdWx0LnRpbWUgPSAxMDAwICogNjAgKiA2MCAqIDI0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3ljbGUobnM6IE5TLCBzZXJ2ZXI6IFNlcnZlcik6IElDeWNsZVN0YXRzIHtcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcbiAgXG4gIHNlcnZlci5iYXNlRGlmZmljdWx0eSA9IHNlcnZlci5iYXNlRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xuICBzZXJ2ZXIubWluRGlmZmljdWx0eSA9IHNlcnZlci5taW5EaWZmaWN1bHR5IHx8IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcbiAgc2VydmVyLmhhY2tEaWZmaWN1bHR5ID0gc2VydmVyLmhhY2tEaWZmaWN1bHR5IHx8IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcblxuICBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgfHwgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyLmhvc3RuYW1lKTtcbiAgc2VydmVyLm1vbmV5TWF4ID0gc2VydmVyLm1vbmV5TWF4IHx8IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlci5ob3N0bmFtZSk7XG5cbiAgY29uc3QgYmFzZU1TT2Zmc2V0ID0gTWF0aC5jZWlsKG5zLmZvcm11bGFzLmhhY2tpbmcud2Vha2VuVGltZShzZXJ2ZXIsIG5zLmdldFBsYXllcigpKSk7XG5cbiAgbGV0IHRvdGFsVGhyZWFkczogbnVtYmVyO1xuICBsZXQgYmF0Y2hlczogSUhhY2tCYXRjaFtdO1xuICBsZXQgdGFyZ2V0SGFja1BlcmNlbnQgPSBIQUNLX1BFUkNFTlQ7XG4gIGxldCBhY3R1YWxIYWNrUGVyY2VudCA9IDA7XG4gIGxldCBhZGRpdGlvbmFsQmF0Y2hlczogbnVtYmVyO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3Qgd29ya2luZ1NlcnZlciA9IE9iamVjdC5hc3NpZ24oe30sIHNlcnZlcik7XG4gICAgd29ya2luZ1NlcnZlci5iYXNlRGlmZmljdWx0eSA9IHNlcnZlci5iYXNlRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xuICAgIHdvcmtpbmdTZXJ2ZXIubWluRGlmZmljdWx0eSA9IHNlcnZlci5taW5EaWZmaWN1bHR5IHx8IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcbiAgICB3b3JraW5nU2VydmVyLmhhY2tEaWZmaWN1bHR5ID0gc2VydmVyLmhhY2tEaWZmaWN1bHR5IHx8IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcbiAgXG4gICAgd29ya2luZ1NlcnZlci5tb25leUF2YWlsYWJsZSA9IHNlcnZlci5tb25leUF2YWlsYWJsZSB8fCBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzZXJ2ZXIuaG9zdG5hbWUpO1xuICAgIHdvcmtpbmdTZXJ2ZXIubW9uZXlNYXggPSBzZXJ2ZXIubW9uZXlNYXggfHwgbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyLmhvc3RuYW1lKTtcblxuICAgIHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcbiAgICBiYXRjaGVzID0gW107XG5cbiAgICAvLyBmaXJzdCBiYXRjaCBpcyBhbHdheXMgR1cgaWYgdGhlIHNlcnZlciBpcyBub3QgYWxyZWFkeSBhdCBtaW4gc2VjdXJpdHkgLyBtYXggbW9uZXlcbiAgICAvLyBmaW5kIG91dCBob3cgbWFueSB0aHJlYWRzIGFyZSByZXF1aXJlZCB0byBncm93IHRvIG1heFxuICAgIGlmICh3b3JraW5nU2VydmVyLmhhY2tEaWZmaWN1bHR5ID4gd29ya2luZ1NlcnZlci5iYXNlRGlmZmljdWx0eSB8fCB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlIDwgd29ya2luZ1NlcnZlci5tb25leU1heCkge1xuICAgICAgY29uc3QgYmF0Y2ggPSBuZXcgSGFja0JhdGNoKCk7XG4gICAgICBjb25zdCBiYXNlV2Vha2VuID0gd29ya2luZ1NlcnZlci5oYWNrRGlmZmljdWx0eSAtIHdvcmtpbmdTZXJ2ZXIubWluRGlmZmljdWx0eTtcbiAgICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmZvcm11bGFzLmhhY2tpbmcuZ3Jvd1RocmVhZHMod29ya2luZ1NlcnZlciwgbnMuZ2V0UGxheWVyKCksIHdvcmtpbmdTZXJ2ZXIubW9uZXlNYXgpKTtcblxuICAgICAgY29uc3QgbW9uZXlBdmFpbGFibGUgPSB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlO1xuICAgICAgY29uc3QgaGFja0RpZmZpY3VsdHkgPSB3b3JraW5nU2VydmVyLmhhY2tEaWZmaWN1bHR5O1xuXG4gICAgICB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlID0gTWF0aC5taW4od29ya2luZ1NlcnZlci5tb25leU1heCwgd29ya2luZ1NlcnZlci5tb25leUF2YWlsYWJsZSArIGJhdGNoLmdyb3dUaHJlYWRzKTtcbiAgICAgIHdvcmtpbmdTZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBNYXRoLm1pbih3b3JraW5nU2VydmVyLm1vbmV5TWF4LCB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlICogbnMuZm9ybXVsYXMuaGFja2luZy5ncm93UGVyY2VudCh3b3JraW5nU2VydmVyLCBiYXRjaC5ncm93VGhyZWFkcywgbnMuZ2V0UGxheWVyKCkpKTtcbiAgICAgIGxldCBncm93U2VjSW5jcmVhc2UgPSBHUk9XX1NFQyAqIGJhdGNoLmdyb3dUaHJlYWRzO1xuICAgICAgd29ya2luZ1NlcnZlci5oYWNrRGlmZmljdWx0eSArPSBncm93U2VjSW5jcmVhc2U7XG4gICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XG4gICAgICB3b3JraW5nU2VydmVyLmhhY2tEaWZmaWN1bHR5ID0gTWF0aC5tYXgod29ya2luZ1NlcnZlci5taW5EaWZmaWN1bHR5LCB3b3JraW5nU2VydmVyLmhhY2tEaWZmaWN1bHR5IC0gKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICogV0VBS19TRUMpKTtcblxuICAgICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcbiAgICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XG4gICAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcbiAgICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLm1heCh0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcywgMCk7XG5cbiAgICAgICAgd29ya2luZ1NlcnZlci5oYWNrRGlmZmljdWx0eSA9IGhhY2tEaWZmaWN1bHR5O1xuICAgICAgICB3b3JraW5nU2VydmVyLmhhY2tEaWZmaWN1bHR5ICs9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XG4gICAgICAgIHdvcmtpbmdTZXJ2ZXIuaGFja0RpZmZpY3VsdHkgLT0gV0VBS19TRUMgKiBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcbiAgICAgICAgd29ya2luZ1NlcnZlci5oYWNrRGlmZmljdWx0eSA9IE1hdGgubWF4KHdvcmtpbmdTZXJ2ZXIuaGFja0RpZmZpY3VsdHksIHdvcmtpbmdTZXJ2ZXIubWluRGlmZmljdWx0eSk7XG5cbiAgICAgICAgd29ya2luZ1NlcnZlci5tb25leUF2YWlsYWJsZSA9IG1vbmV5QXZhaWxhYmxlO1xuXG4gICAgICAgIGlmIChiYXRjaC5ncm93VGhyZWFkcyA+IDApIHtcbiAgICAgICAgICB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlID0gTWF0aC5taW4od29ya2luZ1NlcnZlci5tb25leU1heCwgd29ya2luZ1NlcnZlci5tb25leUF2YWlsYWJsZSArIGJhdGNoLmdyb3dUaHJlYWRzKTtcbiAgICAgICAgICB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlID0gTWF0aC5taW4od29ya2luZ1NlcnZlci5tb25leU1heCwgd29ya2luZ1NlcnZlci5tb25leUF2YWlsYWJsZSAqIG5zLmZvcm11bGFzLmhhY2tpbmcuZ3Jvd1BlcmNlbnQod29ya2luZ1NlcnZlciwgYmF0Y2guZ3Jvd1RocmVhZHMsIG5zLmdldFBsYXllcigpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYmF0Y2hlcy5wdXNoKGJhdGNoKTtcbiAgICAgIHRvdGFsVGhyZWFkcyAtPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcbiAgICB9XG5cbiAgICBsZXQgbWlzc2VkT25jZSA9IGZhbHNlO1xuICAgIGFkZGl0aW9uYWxCYXRjaGVzID0gMDtcbiAgICBpZiAodG90YWxUaHJlYWRzID4gMCApIHtcbiAgICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xuICAgICAgY29uc3QgaGFja1BlcmNlbnRQZXJUaHJlYWQgPSBNYXRoLm1pbihucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tQZXJjZW50KHdvcmtpbmdTZXJ2ZXIsIG5zLmdldFBsYXllcigpKSwgMSk7XG5cbiAgICAgIGlmIChoYWNrUGVyY2VudFBlclRocmVhZCA8PSAwKSBiYXRjaC5oYWNrVGhyZWFkcyA9IDA7XG4gICAgICBlbHNlIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKHRhcmdldEhhY2tQZXJjZW50IC8gaGFja1BlcmNlbnRQZXJUaHJlYWQpO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMgPD0gMCkge1xuICAgICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBhY3R1YWxIYWNrUGVyY2VudCA9IGhhY2tQZXJjZW50UGVyVGhyZWFkICogYmF0Y2guaGFja1RocmVhZHM7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB3b3JraW5nU2VydmVyLm1vbmV5QXZhaWxhYmxlO1xuICAgICAgICBjb25zdCBmdXR1cmUgPSBjdXJyZW50IC0gKGN1cnJlbnQgKiBhY3R1YWxIYWNrUGVyY2VudCk7XG4gICAgICAgIHdvcmtpbmdTZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBmdXR1cmU7XG4gICAgICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmZvcm11bGFzLmhhY2tpbmcuZ3Jvd1RocmVhZHMod29ya2luZ1NlcnZlciwgbnMuZ2V0UGxheWVyKCksIHdvcmtpbmdTZXJ2ZXIubW9uZXlNYXgpICogR1JPV19USFJFQURfTVVMVCk7XG4gICAgICAgIHdvcmtpbmdTZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSB3b3JraW5nU2VydmVyLm1vbmV5TWF4O1xuICAgICAgICBiYXRjaC5nYWluID0gY3VycmVudCAtIGZ1dHVyZTtcbiAgICAgICAgXG4gICAgICAgIGJhdGNoLmhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoYmF0Y2guaGFja1RocmVhZHMsIHdvcmtpbmdTZXJ2ZXIuaG9zdG5hbWUpIC8gV0VBS19TRUMpO1xuICAgICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChiYXRjaC5ncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XG5cbiAgICAgICAgaWYgKGJhdGNoLnRvdGFsVGhyZWFkcygpIDw9IHRvdGFsVGhyZWFkcykge1xuICAgICAgICAgIHRvdGFsVGhyZWFkcyAtPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcbiAgICAgICAgICBiYXRjaGVzLnB1c2goYmF0Y2gpO1xuXG4gICAgICAgICAgaWYgKG1pc3NlZE9uY2UpIHRvdGFsVGhyZWFkcyA9IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBiYXRjaC5oYWNrVGhyZWFkcyA9IE1hdGguZmxvb3IoYmF0Y2guaGFja1RocmVhZHMgKiAwLjc1KTtcbiAgICAgICAgbWlzc2VkT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGR1cGxpY2F0ZSBiYXRjaCB1bnRpbCB0aGVyZSBpcyBubyBzcGFjZSBsZWZ0XG4gICAgICBjb25zdCBiYXRjaFRocmVhZHMgPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcbiAgICAgIGlmIChiYXRjaFRocmVhZHMgPiAwKVxuICAgICAgICBhZGRpdGlvbmFsQmF0Y2hlcyA9IE1hdGguZmxvb3IodG90YWxUaHJlYWRzIC8gYmF0Y2hUaHJlYWRzKTtcbiAgICB9XG5cbiAgICBpZiAoYmF0Y2hlcy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4geyB0YXJnZXQ6IHNlcnZlci5ob3N0bmFtZSwgc3RhcnQ6IDAsIHRpbWU6IDAsIGdhaW46IDAsIHJhdGU6IDAgfTtcblxuICAgIGlmIChiYXRjaGVzLmxlbmd0aCArIGFkZGl0aW9uYWxCYXRjaGVzID4gTUFYX0JBVENIRVNfUEVSX0NZQ0xFKVxuICAgICAgYWRkaXRpb25hbEJhdGNoZXMgPSBNQVhfQkFUQ0hFU19QRVJfQ1lDTEUgLSBiYXRjaGVzLmxlbmd0aDtcblxuICAgIGlmICgoYmF0Y2hlcy5sZW5ndGggKyBhZGRpdGlvbmFsQmF0Y2hlcykgPCBNQVhfQkFUQ0hFU19QRVJfQ1lDTEUgfHwgYWN0dWFsSGFja1BlcmNlbnQgPj0gSEFDS19QRVJDRU5UX01BWCB8fCBhY3R1YWxIYWNrUGVyY2VudCA9PT0gMCkge1xuICAgICAgc2VydmVyLm1vbmV5QXZhaWxhYmxlID0gd29ya2luZ1NlcnZlci5tb25leUF2YWlsYWJsZTtcbiAgICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSA9IHdvcmtpbmdTZXJ2ZXIuaGFja0RpZmZpY3VsdHk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0YXJnZXRIYWNrUGVyY2VudCArPSAwLjE7XG4gIH1cblxuICBjb25zdCBjeWNsZVRpbWUgPSBiYXNlTVNPZmZzZXQgKyAoKGJhdGNoZXMubGVuZ3RoICsgYWRkaXRpb25hbEJhdGNoZXMpICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCkgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XG4gIGNvbnN0IGN5Y2xlR2FpbiA9IGJhdGNoZXMucmVkdWNlKChjb3VudCwgYmF0Y2gpID0+IGNvdW50ICsgYmF0Y2guZ2FpbiwgMCkgKyAoYWRkaXRpb25hbEJhdGNoZXMgKiBiYXRjaGVzW2JhdGNoZXMubGVuZ3RoIC0gMV0uZ2Fpbik7XG5cbiAgLy8gaWYgKGJhdGNoZXMubGVuZ3RoID4gMSlcbiAgLy8gICBucy50cHJpbnRmKGAke3NlcnZlci5ob3N0bmFtZX06ICR7c2VydmVyLmhhY2tEaWZmaWN1bHR5fSAke25zLmZvcm1hdE51bWJlcihzZXJ2ZXIubW9uZXlBdmFpbGFibGUsIDAsIDEwMDApfS8ke25zLmZvcm1hdE51bWJlcihzZXJ2ZXIubW9uZXlNYXgsIDAsIDEwMDApfSAke2JhdGNoZXMubGVuZ3RoICsgYWRkaXRpb25hbEJhdGNoZXN9IEJhdGNoZXMgfCBIJHtiYXRjaGVzWzFdLmhhY2tUaHJlYWRzfTpIVyR7YmF0Y2hlc1sxXS5oYWNrV2Vha2VuVGhyZWFkc306RyR7YmF0Y2hlc1sxXS5ncm93VGhyZWFkc306R1cke2JhdGNoZXNbMV0uZ3Jvd1dlYWtlblRocmVhZHN9IHwgJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluLCAzLCAxMDAwLCB0cnVlKX0gVG90YWwgJHsoYWN0dWFsSGFja1BlcmNlbnQqMTAwKS50b0ZpeGVkKDIpfSUlIHwgJHtmb3JtYXRUaW1lKGJhc2VNU09mZnNldCl9LyR7Zm9ybWF0VGltZShjeWNsZVRpbWUpfSB8IEdhaW4gJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluIC8gKGN5Y2xlVGltZSAvIDEwMDApLCAzLCAxMDAwLCB0cnVlKX0vc2ApO1xuICAvLyBlbHNlXG4gIC8vICAgbnMudHByaW50ZihgJHtzZXJ2ZXIuaG9zdG5hbWV9OiAke3NlcnZlci5oYWNrRGlmZmljdWx0eX0gJHtucy5mb3JtYXROdW1iZXIoc2VydmVyLm1vbmV5QXZhaWxhYmxlLCAwLCAxMDAwKX0vJHtucy5mb3JtYXROdW1iZXIoc2VydmVyLm1vbmV5TWF4LCAwLCAxMDAwKX0gJHtiYXRjaGVzLmxlbmd0aCArIGFkZGl0aW9uYWxCYXRjaGVzfSBCYXRjaGVzIHwgSCR7YmF0Y2hlc1swXS5oYWNrVGhyZWFkc306SFcke2JhdGNoZXNbMF0uaGFja1dlYWtlblRocmVhZHN9Okcke2JhdGNoZXNbMF0uZ3Jvd1RocmVhZHN9OkdXJHtiYXRjaGVzWzBdLmdyb3dXZWFrZW5UaHJlYWRzfSB8ICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiwgMywgMTAwMCwgdHJ1ZSl9IFRvdGFsICR7KGFjdHVhbEhhY2tQZXJjZW50KjEwMCkudG9GaXhlZCgyKX0lJSB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcblxuICByZXR1cm4ge1xuICAgIHRhcmdldDogc2VydmVyLmhvc3RuYW1lLFxuICAgIHN0YXJ0OiBiYXNlTVNPZmZzZXQsXG4gICAgdGltZTogY3ljbGVUaW1lLFxuICAgIGdhaW46IGN5Y2xlR2FpbixcbiAgICByYXRlOiBjeWNsZUdhaW4gLyAoY3ljbGVUaW1lIC8gMTAwMClcbiAgfVxufVxuXG5mdW5jdGlvbiBkaXJ0eUNoZWNrKG5zOiBOUywgdGFyZ2V0czogc3RyaW5nW10pIHtcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcbiAgY29uc3QgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xuICBjb25zdCBoYWNrVGhyZWFkcyA9IHRvdGFsVGhyZWFkcyAqIC41O1xuICBjb25zdCBwbGF5ZXIgPSBucy5nZXRQbGF5ZXIoKTtcblxuICBjb25zdCBkYXRhOiAoc3RyaW5nIHwgbnVtYmVyKVtdW10gPSBbXVxuICBmb3IgKGNvbnN0IHMgb2YgdGFyZ2V0cy5tYXAodCA9PiBucy5nZXRTZXJ2ZXIodCkpKSB7XG4gICAgcy5oYWNrRGlmZmljdWx0eSA9IHMubWluRGlmZmljdWx0eTtcbiAgICBzLm1vbmV5QXZhaWxhYmxlID0gcy5tb25leU1heDtcblxuICAgIGNvbnN0IGJhc2VUaW1lID0gTWF0aC5jZWlsKG5zLmZvcm11bGFzLmhhY2tpbmcud2Vha2VuVGltZShzLCBwbGF5ZXIpKTtcbiAgICBjb25zdCBoYWNrUGVyY2VudFBlclRocmVhZCA9IE1hdGgubWluKG5zLmZvcm11bGFzLmhhY2tpbmcuaGFja1BlcmNlbnQocywgcGxheWVyKSwgMSk7XG4gICAgXG4gICAgbGV0IHRhcmdldEhhY2tQZXJjZW50ID0gSEFDS19QRVJDRU5UO1xuICAgIGxldCBiYXRjaEhhY2tUaHJlYWRzOiBudW1iZXI7XG4gICAgbGV0IGJhdGNoQ291bnQ6IG51bWJlcjtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgYmF0Y2hIYWNrVGhyZWFkcyA9IGhhY2tQZXJjZW50UGVyVGhyZWFkID4gMCA/IE1hdGguY2VpbCh0YXJnZXRIYWNrUGVyY2VudCAvIGhhY2tQZXJjZW50UGVyVGhyZWFkKSA6IDA7XG4gICAgICBiYXRjaENvdW50ID0gTWF0aC5taW4oYmF0Y2hIYWNrVGhyZWFkcyA+IDAgPyBNYXRoLmZsb29yKGhhY2tUaHJlYWRzIC8gYmF0Y2hIYWNrVGhyZWFkcykgOiAwLCBNQVhfQkFUQ0hFU19QRVJfQ1lDTEUpO1xuXG4gICAgICBpZiAoYmF0Y2hDb3VudCA8IE1BWF9CQVRDSEVTX1BFUl9DWUNMRSB8fCB0YXJnZXRIYWNrUGVyY2VudCA+PSBIQUNLX1BFUkNFTlRfTUFYKSBicmVhaztcbiAgICAgIHRhcmdldEhhY2tQZXJjZW50ICs9IDAuMTtcbiAgICB9ICAgIFxuICAgIGNvbnN0IG1vbmV5UGVyQmF0Y2ggPSBzLm1vbmV5QXZhaWxhYmxlID8gKGJhdGNoSGFja1RocmVhZHMgKiBoYWNrUGVyY2VudFBlclRocmVhZCkgKiBzLm1vbmV5QXZhaWxhYmxlIDogMDsgICAgXG4gICAgY29uc3QgbW9uZXlQZXJDeWNsZSA9IGJhdGNoQ291bnQgKiBtb25leVBlckJhdGNoO1xuICAgIGNvbnN0IGN5Y2xlVGltZSA9IGJhc2VUaW1lICsgKGJhdGNoQ291bnQgKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcbiAgICBjb25zdCBnYWluUGVyU2Vjb25kID0gbW9uZXlQZXJDeWNsZSAvIChjeWNsZVRpbWUgLyAxMDAwKTtcblxuICAgIGlmIChnYWluUGVyU2Vjb25kID4gMCkgZGF0YS5wdXNoKFtzLmhvc3RuYW1lLCBnYWluUGVyU2Vjb25kXSk7XG5cbiAgICAvL25zLnRwcmludGYoYCR7cy5ob3N0bmFtZX06ICR7Zm9ybWF0VGltZShjeWNsZVRpbWUpfXwke2Zvcm1hdFRpbWUoYmFzZVRpbWUpfXwke25zLmZvcm1hdE51bWJlcihtb25leVBlckN5Y2xlLCAzLCAxMDAwLCB0cnVlKX18JHtucy5mb3JtYXROdW1iZXIoZ2FpblBlclNlY29uZCwgMywgMTAwMCwgdHJ1ZSl9L3NgKVxuICB9XG5cbiAgcmV0dXJuIGRhdGEuc29ydCgoYSwgYikgPT4gTnVtYmVyKGJbMV0pIC0gTnVtYmVyKGFbMV0pKS5tYXAoYSA9PiBhWzBdLnRvU3RyaW5nKCkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbGV0IHNlcnZlcnM6IFNlcnZlcltdID0gW11cblxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgc2VydmVycyA9IFtucy5nZXRTZXJ2ZXIobnMuYXJnc1swXSldO1xuICAvL2Vsc2Ugc2VydmVycyA9IGRpcnR5Q2hlY2sobnMsIGdldEFsbFNlcnZlcnMobnMpKS5tYXAocyA9PiBucy5nZXRTZXJ2ZXIocykpO1xuICBlbHNlIHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKS5tYXAocyA9PiBucy5nZXRTZXJ2ZXIocykpLmZpbHRlcihzID0+IHMubW9uZXlNYXggJiYgcy5tb25leU1heCA+IDAgJiYgcy5oYXNBZG1pblJpZ2h0cyk7XG5cbiAgbGV0IGN1cnJlbnRUYXJnZXRIb3N0ID0gJydcbiAgbGV0IGN1cnJlbnRUYXJnZXRSYXRlID0gMDtcbiAgY29uc3QgaGFja1N0YXRQb3J0ID0gbnMuZ2V0UG9ydEhhbmRsZSgxKTtcbiAgaWYgKGhhY2tTdGF0UG9ydC5wZWVrKCkgIT09IFwiTlVMTCBQT1JUIERBVEFcIikge1xuICAgIGNvbnN0IGhhY2tTdGF0czogSGFja1N0YXRzID0gSlNPTi5wYXJzZShoYWNrU3RhdFBvcnQucGVlaygpLnRvU3RyaW5nKCkpO1xuICAgIGN1cnJlbnRUYXJnZXRIb3N0ID0gaGFja1N0YXRzLnRhcmdldDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGxldCBkYXRhOiBhbnkgPSBbXTtcbiAgZm9yIChjb25zdCBzIG9mIHNlcnZlcnMpIHtcbiAgICBjb25zdCBmaW5hbEluZm86IElDeWNsZVN0YXRzID0geyB0YXJnZXQ6IHMuaG9zdG5hbWUsIHN0YXJ0OiAwLCB0aW1lOiAwLCBnYWluOiAwLCByYXRlOiAwIH07XG4gICAgbGV0IGZpcnN0SW5mbzogSUN5Y2xlU3RhdHMgPSB7IHRhcmdldDogcy5ob3N0bmFtZSwgc3RhcnQ6IDAsIHRpbWU6IDAsIGdhaW46IDAsIHJhdGU6IDAgfTtcbiAgICBsZXQgbGFzdEluZm86IElDeWNsZVN0YXRzID0geyB0YXJnZXQ6IHMuaG9zdG5hbWUsIHN0YXJ0OiAwLCB0aW1lOiAwLCBnYWluOiAwLCByYXRlOiAwIH07XG4gICAgY29uc3QgZ3Jvd0luZm86IElDeWNsZXNUb1JlYWR5ID0gY3ljbGVzVG9SZWFkeShucywgbnMuZ2V0U2VydmVyKHMuaG9zdG5hbWUpKTtcblxuICAgIGNvbnN0IHRvdGFsQ3ljbGVDb3VudCA9IDIwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxDeWNsZUNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGN5Y2xlSW5mbyA9IGN5Y2xlKG5zLCBzKTtcbiAgICAgIGlmIChpID09PSAwKSBmaXJzdEluZm8gPSBPYmplY3QuYXNzaWduKHt9LCBjeWNsZUluZm8pO1xuICAgICAgaWYgKGkgPT09IHRvdGFsQ3ljbGVDb3VudCAtIDEpIGxhc3RJbmZvID0gT2JqZWN0LmFzc2lnbih7fSwgY3ljbGVJbmZvKTtcblxuICAgICAgZmluYWxJbmZvLmdhaW4gKz0gY3ljbGVJbmZvLmdhaW47XG4gICAgICBmaW5hbEluZm8udGltZSArPSBjeWNsZUluZm8udGltZTtcbiAgICB9XG5cbiAgICBmaW5hbEluZm8ucmF0ZSA9IGZpbmFsSW5mby5nYWluIC8gKGZpbmFsSW5mby50aW1lIC8gMTAwMCk7XG5cbiAgICBpZiAocy5ob3N0bmFtZSA9PT0gY3VycmVudFRhcmdldEhvc3QpIGN1cnJlbnRUYXJnZXRSYXRlID0gZmluYWxJbmZvLnJhdGU7XG4gICAgXG4gICAgZGF0YS5wdXNoKFtcbiAgICAgIHtjb2xvcjogcy5ob3N0bmFtZSA9PT0gY3VycmVudFRhcmdldEhvc3QgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogYCAke3MuaG9zdG5hbWV9YH0sXG4gICAgICBmaW5hbEluZm8ucmF0ZSxcbiAgICAgIHtjb2xvcjogcy5ob3N0bmFtZSA9PT0gY3VycmVudFRhcmdldEhvc3QgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogYCR7bnMuZm9ybWF0TnVtYmVyKGZpbmFsSW5mby5yYXRlLCAzLCAxMDAwLCB0cnVlKX0vc2AucGFkU3RhcnQoMTIpIH0sXG4gICAgICB7Y29sb3I6IHMuaG9zdG5hbWUgPT09IGN1cnJlbnRUYXJnZXRIb3N0ID8gJ2dyZWVuJyA6ICd3aGl0ZScsIHRleHQ6IGZvcm1hdFRpbWUoZmlyc3RJbmZvLnN0YXJ0KS5wYWRTdGFydCgxMCkgfSxcbiAgICAgIHtjb2xvcjogcy5ob3N0bmFtZSA9PT0gY3VycmVudFRhcmdldEhvc3QgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogZm9ybWF0VGltZShmaXJzdEluZm8udGltZSkucGFkU3RhcnQoMTApIH0sXG4gICAgICB7Y29sb3I6IHMuaG9zdG5hbWUgPT09IGN1cnJlbnRUYXJnZXRIb3N0ID8gJ2dyZWVuJyA6ICd3aGl0ZScsIHRleHQ6IGZvcm1hdFRpbWUobGFzdEluZm8udGltZSkucGFkU3RhcnQoMTApIH0sXG4gICAgICB7Y29sb3I6IHMuaG9zdG5hbWUgPT09IGN1cnJlbnRUYXJnZXRIb3N0ID8gJ2dyZWVuJyA6ICd3aGl0ZScsIHRleHQ6IGZvcm1hdFRpbWUoZmluYWxJbmZvLnRpbWUpLnBhZFN0YXJ0KDEwKSB9LFxuICAgICAge2NvbG9yOiBzLmhvc3RuYW1lID09PSBjdXJyZW50VGFyZ2V0SG9zdCA/ICdncmVlbicgOiAnd2hpdGUnLCB0ZXh0OiBgJHtucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHMuaG9zdG5hbWUpLnRvRml4ZWQoMCkucGFkU3RhcnQoMil9LyR7bnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzLmhvc3RuYW1lKS50b0ZpeGVkKDApLnBhZFN0YXJ0KDIpfWAucGFkU3RhcnQoOSkgfSxcbiAgICAgIHtjb2xvcjogcy5ob3N0bmFtZSA9PT0gY3VycmVudFRhcmdldEhvc3QgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogbnMuZm9ybWF0UGVyY2VudChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzLmhvc3RuYW1lKSAvIG5zLmdldFNlcnZlck1heE1vbmV5KHMuaG9zdG5hbWUpKS5wYWRTdGFydCg4KSB9LFxuICAgICAgZ3Jvd0luZm8udGltZSxcbiAgICAgIHtjb2xvcjogcy5ob3N0bmFtZSA9PT0gY3VycmVudFRhcmdldEhvc3QgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogYCR7Zm9ybWF0VGltZShncm93SW5mby50aW1lKS5wYWRTdGFydCgxMCl9LyR7Z3Jvd0luZm8uY3ljbGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMil9YCB9XG4gICAgXSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBkYXRhID0gZGF0YS5maWx0ZXIoKGE6IGFueVtdKSA9PiBOdW1iZXIoYVsxXSkgPj0gY3VycmVudFRhcmdldFJhdGUpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGRhdGEgPSBkYXRhLnNvcnQoKGE6IGFueVtdLCBiOiBhbnlbXSkgPT4gTnVtYmVyKGJbMV0pIC0gTnVtYmVyKGFbMV0pKTtcbiAgLy9kYXRhID0gZGF0YS5zb3J0KChhOiBhbnlbXSwgYjogYW55W10pID0+IE51bWJlcihhWzldKSAtIE51bWJlcihiWzldKSk7XG5cblx0Y29uc3QgY29sdW1ucyA9IFtcblx0XHR7IGhlYWRlcjogJyBTZXJ2ZXJzJywgd2lkdGg6IDIwIH0sXG5cdFx0eyBoZWFkZXI6ICcgICAgUmF0ZScsIHdpZHRoOiA5LCBoaWRlOiB0cnVlIH0sXG5cdFx0eyBoZWFkZXI6ICcgICAgICAgIFJhdGUnLCB3aWR0aDogMTMgfSxcbiAgICB7IGhlYWRlcjogJyAgU3RhcnQgVG0nLCB3aWR0aDogMTEgfSxcbiAgICB7IGhlYWRlcjogJyBGaXJzdCBDeWMnLCB3aWR0aDogMTEgfSxcbiAgICB7IGhlYWRlcjogJyAgTmV4dCBDeWMnLCB3aWR0aDogMTEgfSxcbiAgICB7IGhlYWRlcjogJyAgVG90IFRpbWUnLCB3aWR0aDogMTEgfSxcbiAgICB7IGhlYWRlcjogJyBTZWN1cml0eScsIHdpZHRoOiAxMCB9LFxuICAgIHsgaGVhZGVyOiAnICAgTW9uZXknLCB3aWR0aDogOSB9LFxuICAgIHsgaGVhZGVyOiAnICAgR3JvdyBUaW1lJywgd2lkdGg6IDEzLCBoaWRlOiB0cnVlIH0sXG4gICAgeyBoZWFkZXI6ICcgR3JvdyBUaW1lJywgd2lkdGg6IDE0IH0sXG4gICAgLy8geyBoZWFkZXI6ICdMT0cgTW9uZXknLCB3aWR0aDogMTAgfSxcbiAgICAvLyB7IGhlYWRlcjogJyAgICBWYWx1ZScsIHdpZHRoOiAxMCB9LFxuXHRdO1xuXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcbn1cbiJdfQ==\",\"filename\":\"eval.js\",\"server\":\"home\"}}],[\"exp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, MS_BETWEEN_OPERATIONS, waitForHGWScripts } from \\\"util\\\";\\nimport { ColorPrint } from \\\"./tables\\\";\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\nlet goingFast = false;\\nclass HackBatch {\\n    growThreads = 0;\\n    growWeakenThreads = 0;\\n    hackThreads = 0;\\n    hackWeakenThreads = 0;\\n    hackTime = 0;\\n    growTime = 0;\\n    weakenTime = 0;\\n    growMSBuf = 0;\\n    growWeakenMSBuf = 0;\\n    hackMSBuf = 0;\\n    hackWeakenMsBuf = 0;\\n    gain = 0;\\n    totalThreads() {\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\n    }\\n}\\nfunction getScriptCalls(batches) {\\n    const scripts = [];\\n    for (const batch of batches) {\\n        if (batch.growThreads > 0) {\\n            scripts.push({\\n                script: \\\"grow.js\\\",\\n                threads: batch.growThreads,\\n                offset: batch.growMSBuf\\n            });\\n        }\\n        if (batch.growWeakenThreads) {\\n            scripts.push({\\n                script: \\\"weaken.js\\\",\\n                threads: batch.growWeakenThreads,\\n                offset: batch.growWeakenMSBuf\\n            });\\n        }\\n        if (batch.hackThreads) {\\n            scripts.push({\\n                script: \\\"hack.js\\\",\\n                threads: batch.hackThreads,\\n                offset: batch.hackMSBuf\\n            });\\n        }\\n        if (batch.hackWeakenThreads) {\\n            scripts.push({\\n                script: \\\"weaken.js\\\",\\n                threads: batch.hackWeakenThreads,\\n                offset: batch.hackWeakenMsBuf\\n            });\\n        }\\n    }\\n    return scripts.sort((a, b) => b.threads - a.threads);\\n}\\nasync function cycle(ns, target) {\\n    const slaves = getSlaves(ns);\\n    let totalThreads = getTotalThreads(ns, slaves);\\n    const batches = [];\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\n    const weakenTime = Math.ceil(ns.getWeakenTime(target));\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\n    // first batch is always GW if the server is not already at min security / max money\\n    // find out how many threads are required to grow to max\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        const batch = new HackBatch();\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n        const growMult = Math.max(ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1), 1);\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\n            growSecIncrease = GROW_SEC * totalThreads;\\n            batch.growWeakenThreads = Math.min(Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC), totalThreads);\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\n        }\\n        const batchMSOffset = baseMSOffset;\\n        batch.weakenTime = weakenTime;\\n        batch.growTime = growTime;\\n        batch.hackTime = hackTime;\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\n        batches.push(batch);\\n        totalThreads -= batch.totalThreads();\\n    }\\n    const maxBatch = new HackBatch();\\n    const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\n    maxBatch.growTime = growTime;\\n    maxBatch.growMSBuf = batchMSOffset - maxBatch.growTime;\\n    maxBatch.growThreads = totalThreads;\\n    batches.push(maxBatch);\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\n    if (!goingFast) {\\n        ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\n        if (baseMSOffset < 3000)\\n            goingFast = true;\\n    }\\n    const scripts = getScriptCalls(batches);\\n    let script = scripts.shift();\\n    for (const s of slaves) {\\n        if (script === undefined)\\n            break;\\n        let slaveThreads = getSlaveThreads(ns, s);\\n        while (slaveThreads > 0) {\\n            if (script === undefined)\\n                break;\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\n            slaveThreads -= scriptThreads;\\n            script.threads -= scriptThreads;\\n            if (script.threads === 0)\\n                script = scripts.shift();\\n        }\\n    }\\n    await waitForHGWScripts(ns, slaves);\\n}\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    goingFast = false;\\n    let target = 'foodnstuff';\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\n        target = ns.args[0];\\n    if (!ns.hasRootAccess(target)) {\\n        ColorPrint(ns, ['Red1', `SUPER HACK ERROR: Unable to hack ${target} without root access`]);\\n        return;\\n    }\\n    while (true) {\\n        const slaves = getSlaves(ns);\\n        // copy hgw scripts to slave machines\\n        for (const s of slaves) {\\n            if (s === 'home')\\n                continue;\\n            ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\n        }\\n        await cycle(ns, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsNENBQTRDO0FBQ3BFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLHVCQUF1QjtBQUU5QyxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFzQnRCLE1BQU0sU0FBUztJQUNiLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBRXRCLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVmLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLElBQUksR0FBRyxDQUFDLENBQUM7SUFFVCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUMvRixDQUFDO0NBQ0Y7QUFRRCxTQUFTLGNBQWMsQ0FBQyxPQUFxQjtJQUMzQyxNQUFNLE9BQU8sR0FBa0IsRUFBRSxDQUFDO0lBQ2xDLEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFO1FBQzNCLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUU7WUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxNQUFNLEVBQUUsU0FBUztnQkFDakIsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUMxQixNQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVM7YUFDeEIsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixPQUFPLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtnQkFDaEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxlQUFlO2FBQzlCLENBQUMsQ0FBQTtTQUNIO1FBRUQsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDMUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxTQUFTO2FBQ3hCLENBQUMsQ0FBQTtTQUNIO1FBRUQsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxNQUFNLEVBQUUsV0FBVztnQkFDbkIsT0FBTyxFQUFFLEtBQUssQ0FBQyxpQkFBaUI7Z0JBQ2hDLE1BQU0sRUFBRSxLQUFLLENBQUMsZUFBZTthQUM5QixDQUFDLENBQUE7U0FDSDtLQUNGO0lBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsRUFBTSxFQUFFLE1BQWM7SUFDekMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksWUFBWSxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFL0MsTUFBTSxPQUFPLEdBQWlCLEVBQUUsQ0FBQztJQUVqQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVuRCxvRkFBb0Y7SUFDcEYsd0RBQXdEO0lBQ3hELElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUM7UUFDeEUsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFDckU7UUFDRSxNQUFNLEtBQUssR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDM0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEcsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxlQUFlLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDbkQsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFFL0UsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLFdBQVcsR0FBRyxZQUFZLEVBQUU7WUFDOUQsZUFBZSxHQUFHLFFBQVEsR0FBRyxZQUFZLENBQUM7WUFDMUMsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN2RyxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7U0FDNUQ7UUFFRCxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbkMsS0FBSyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDOUIsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDMUIsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDMUIsS0FBSyxDQUFDLFNBQVMsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUN6RSxLQUFLLENBQUMsZUFBZSxHQUFHLGFBQWEsR0FBRyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFdkYsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0tBQ3RDO0lBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUNqQyxNQUFNLGFBQWEsR0FBRyxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsYUFBYSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDdkQsUUFBUSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUM7SUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV2QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxTQUFTLEdBQUcsWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzVHLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxLQUFLLE9BQU8sQ0FBQyxNQUFNLGNBQWMsWUFBWSxjQUFjLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuUSxJQUFJLFlBQVksR0FBRyxJQUFJO1lBQUUsU0FBUyxHQUFHLElBQUksQ0FBQztLQUMzQztJQUVELE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLEVBQUU7UUFDdEIsSUFBSSxNQUFNLEtBQUssU0FBUztZQUFFLE1BQU07UUFFaEMsSUFBSSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQyxPQUFPLFlBQVksR0FBRyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxNQUFNLEtBQUssU0FBUztnQkFBRSxNQUFNO1lBRWhDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3RCxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1RixZQUFZLElBQUksYUFBYSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDO1lBRWhDLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxDQUFDO2dCQUN0QixNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzVCO0tBQ0Y7SUFFRCxNQUFNLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFFbEIsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDO0lBQzFCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDN0IsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxvQ0FBb0MsTUFBTSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7UUFDM0YsT0FBTztLQUNSO0lBRUQsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFN0IscUNBQXFDO1FBQ3JDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLE1BQU07Z0JBQUUsU0FBUztZQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGZvcm1hdFRpbWUsIGdldFNsYXZlcywgZ2V0U2xhdmVUaHJlYWRzLCBnZXRUb3RhbFRocmVhZHMsIE1TX0JFVFdFRU5fT1BFUkFUSU9OUywgd2FpdEZvckhHV1NjcmlwdHMgfSBmcm9tIFwidXRpbFwiO1xuaW1wb3J0IHsgQ29sb3JQcmludCB9IGZyb20gXCIuL3RhYmxlc1wiO1xuXG5jb25zdCBHUk9XX1NFQyA9IDAuMDA0OyAvLyBucy5ncm93dGhBbmFseXplU2VjdXJpdHkoMSwgJ29tZWdhLW5ldCcpO1xuY29uc3QgV0VBS19TRUMgPSAwLjA1OyAvLyBucy53ZWFrZW5BbmFseXplKDEpO1xuXG5sZXQgZ29pbmdGYXN0ID0gZmFsc2U7XG5cbmludGVyZmFjZSBJSGFja0JhdGNoIHtcbiAgZ3Jvd1RocmVhZHM6IG51bWJlcjtcbiAgZ3Jvd1dlYWtlblRocmVhZHM6IG51bWJlcjtcbiAgaGFja1RocmVhZHM6IG51bWJlcjtcbiAgaGFja1dlYWtlblRocmVhZHM6IG51bWJlcjtcblxuICBoYWNrVGltZTogbnVtYmVyO1xuICBncm93VGltZTogbnVtYmVyO1xuICB3ZWFrZW5UaW1lOiBudW1iZXI7XG5cbiAgZ3Jvd01TQnVmOiBudW1iZXI7XG4gIGdyb3dXZWFrZW5NU0J1ZjogbnVtYmVyO1xuICBoYWNrTVNCdWY6IG51bWJlcjtcbiAgaGFja1dlYWtlbk1zQnVmOiBudW1iZXI7XG5cbiAgZ2FpbjogbnVtYmVyO1xuXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXI7XG59XG5cbmNsYXNzIEhhY2tCYXRjaCBpbXBsZW1lbnRzIElIYWNrQmF0Y2gge1xuICBncm93VGhyZWFkcyA9IDA7XG4gIGdyb3dXZWFrZW5UaHJlYWRzID0gMDtcbiAgaGFja1RocmVhZHMgPSAwO1xuICBoYWNrV2Vha2VuVGhyZWFkcyA9IDA7XG5cbiAgaGFja1RpbWUgPSAwO1xuICBncm93VGltZSA9IDA7XG4gIHdlYWtlblRpbWUgPSAwO1xuXG4gIGdyb3dNU0J1ZiA9IDA7XG4gIGdyb3dXZWFrZW5NU0J1ZiA9IDA7XG4gIGhhY2tNU0J1ZiA9IDA7XG4gIGhhY2tXZWFrZW5Nc0J1ZiA9IDA7XG5cbiAgZ2FpbiA9IDA7XG5cbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ3Jvd1RocmVhZHMgKyB0aGlzLmdyb3dXZWFrZW5UaHJlYWRzICsgdGhpcy5oYWNrVGhyZWFkcyArIHRoaXMuaGFja1dlYWtlblRocmVhZHM7XG4gIH1cbn1cblxuaW50ZXJmYWNlIElTY3JpcHRDYWxsIHtcbiAgc2NyaXB0OiBzdHJpbmc7XG4gIHRocmVhZHM6IG51bWJlcjtcbiAgb2Zmc2V0OiBudW1iZXI7XG59XG5cbmZ1bmN0aW9uIGdldFNjcmlwdENhbGxzKGJhdGNoZXM6IElIYWNrQmF0Y2hbXSk6IElTY3JpcHRDYWxsW10ge1xuICBjb25zdCBzY3JpcHRzOiBJU2NyaXB0Q2FsbFtdID0gW107XG4gIGZvciAoY29uc3QgYmF0Y2ggb2YgYmF0Y2hlcykge1xuICAgIGlmIChiYXRjaC5ncm93VGhyZWFkcyA+IDApIHtcbiAgICAgIHNjcmlwdHMucHVzaCh7XG4gICAgICAgIHNjcmlwdDogXCJncm93LmpzXCIsXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dUaHJlYWRzLFxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dNU0J1ZlxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMpIHtcbiAgICAgIHNjcmlwdHMucHVzaCh7XG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcbiAgICAgICAgdGhyZWFkczogYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMsXG4gICAgICAgIG9mZnNldDogYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChiYXRjaC5oYWNrVGhyZWFkcykge1xuICAgICAgc2NyaXB0cy5wdXNoKHtcbiAgICAgICAgc2NyaXB0OiBcImhhY2suanNcIixcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1RocmVhZHMsXG4gICAgICAgIG9mZnNldDogYmF0Y2guaGFja01TQnVmXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcykge1xuICAgICAgc2NyaXB0cy5wdXNoKHtcbiAgICAgICAgc2NyaXB0OiBcIndlYWtlbi5qc1wiLFxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyxcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5oYWNrV2Vha2VuTXNCdWZcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjcmlwdHMuc29ydCgoYSwgYikgPT4gYi50aHJlYWRzIC0gYS50aHJlYWRzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3ljbGUobnM6IE5TLCB0YXJnZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xuICBsZXQgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xuXG4gIGNvbnN0IGJhdGNoZXM6IElIYWNrQmF0Y2hbXSA9IFtdO1xuXG4gIGNvbnN0IGJhc2VNU09mZnNldCA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xuICBjb25zdCB3ZWFrZW5UaW1lID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XG4gIGNvbnN0IGdyb3dUaW1lID0gTWF0aC5jZWlsKG5zLmdldEdyb3dUaW1lKHRhcmdldCkpO1xuICBjb25zdCBoYWNrVGltZSA9IE1hdGguY2VpbChucy5nZXRIYWNrVGltZSh0YXJnZXQpKTtcblxuICAvLyBmaXJzdCBiYXRjaCBpcyBhbHdheXMgR1cgaWYgdGhlIHNlcnZlciBpcyBub3QgYWxyZWFkeSBhdCBtaW4gc2VjdXJpdHkgLyBtYXggbW9uZXlcbiAgLy8gZmluZCBvdXQgaG93IG1hbnkgdGhyZWFkcyBhcmUgcmVxdWlyZWQgdG8gZ3JvdyB0byBtYXhcbiAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KSB8fFxuICAgICAgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSA8IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkpXG4gIHtcbiAgICBjb25zdCBiYXRjaCA9IG5ldyBIYWNrQmF0Y2goKTtcbiAgICBjb25zdCBiYXNlV2Vha2VuID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpIC0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpXG4gICAgY29uc3QgZ3Jvd011bHQgPSBNYXRoLm1heChucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgKyAxKSwgMSk7XG4gICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIGdyb3dNdWx0KSk7XG4gICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XG4gICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpO1xuXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcbiAgICAgIGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogdG90YWxUaHJlYWRzO1xuICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLm1pbihNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpLCB0b3RhbFRocmVhZHMpO1xuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcbiAgICB9XG5cbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0O1xuICAgIGJhdGNoLndlYWtlblRpbWUgPSB3ZWFrZW5UaW1lO1xuICAgIGJhdGNoLmdyb3dUaW1lID0gZ3Jvd1RpbWU7XG4gICAgYmF0Y2guaGFja1RpbWUgPSBoYWNrVGltZTtcbiAgICBiYXRjaC5ncm93TVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2guZ3Jvd1RpbWUgKyBNU19CRVRXRUVOX09QRVJBVElPTlM7XG4gICAgYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLndlYWtlblRpbWUgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XG5cbiAgICBiYXRjaGVzLnB1c2goYmF0Y2gpO1xuICAgIHRvdGFsVGhyZWFkcyAtPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcbiAgfVxuXG4gIGNvbnN0IG1heEJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xuICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0ICsgKGJhdGNoZXMubGVuZ3RoICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCk7XG4gIG1heEJhdGNoLmdyb3dUaW1lID0gZ3Jvd1RpbWU7XG4gIG1heEJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBtYXhCYXRjaC5ncm93VGltZTtcbiAgbWF4QmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHM7XG4gIGJhdGNoZXMucHVzaChtYXhCYXRjaCk7XG5cbiAgY29uc3QgY3ljbGVUaHJlYWRzID0gYmF0Y2hlcy5yZWR1Y2UoKGNvdW50LCBiYXRjaCkgPT4gY291bnQgKyBiYXRjaC50b3RhbFRocmVhZHMoKSwgMCk7XG4gIGNvbnN0IGN5Y2xlR2FpbiA9IGJhdGNoZXMucmVkdWNlKChjb3VudCwgYmF0Y2gpID0+IGNvdW50ICsgYmF0Y2guZ2FpbiwgMCk7XG4gIGNvbnN0IGN5Y2xlVGltZSA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xuICBpZiAoIWdvaW5nRmFzdCkge1xuICAgIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogJHtiYXRjaGVzLmxlbmd0aH0gQmF0Y2hlcyB8ICR7Y3ljbGVUaHJlYWRzfSBUaHJlYWRzIHwgJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluLCAzLCAxMDAwLCB0cnVlKX0gR2FpbiB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcbiAgICBpZiAoYmFzZU1TT2Zmc2V0IDwgMzAwMCkgZ29pbmdGYXN0ID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHNjcmlwdHMgPSBnZXRTY3JpcHRDYWxscyhiYXRjaGVzKTtcbiAgbGV0IHNjcmlwdCA9IHNjcmlwdHMuc2hpZnQoKTtcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xuICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG5cbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcbiAgICB3aGlsZSAoc2xhdmVUaHJlYWRzID4gMCkge1xuICAgICAgaWYgKHNjcmlwdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcblxuICAgICAgY29uc3Qgc2NyaXB0VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgc2NyaXB0LnRocmVhZHMpO1xuICAgICAgbnMuZXhlYyhzY3JpcHQuc2NyaXB0LCBzLCB7dGVtcG9yYXJ5OiB0cnVlLCB0aHJlYWRzOiBzY3JpcHRUaHJlYWRzfSwgdGFyZ2V0LCBzY3JpcHQub2Zmc2V0KTtcbiAgICAgIHNsYXZlVGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xuICAgICAgc2NyaXB0LnRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcblxuICAgICAgaWYgKHNjcmlwdC50aHJlYWRzID09PSAwKVxuICAgICAgICBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgYXdhaXQgd2FpdEZvckhHV1NjcmlwdHMobnMsIHNsYXZlcyk7ICBcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuXG4gIGdvaW5nRmFzdCA9IGZhbHNlO1xuXG4gIGxldCB0YXJnZXQgPSAnZm9vZG5zdHVmZic7XG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09ICdzdHJpbmcnKSB0YXJnZXQgPSBucy5hcmdzWzBdO1xuXG4gIGlmICghbnMuaGFzUm9vdEFjY2Vzcyh0YXJnZXQpKSB7XG4gICAgQ29sb3JQcmludChucywgWydSZWQxJywgYFNVUEVSIEhBQ0sgRVJST1I6IFVuYWJsZSB0byBoYWNrICR7dGFyZ2V0fSB3aXRob3V0IHJvb3QgYWNjZXNzYF0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcblxuICAgIC8vIGNvcHkgaGd3IHNjcmlwdHMgdG8gc2xhdmUgbWFjaGluZXNcbiAgICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XG4gICAgICBpZiAocyA9PT0gJ2hvbWUnKSBjb250aW51ZTtcbiAgICAgIG5zLnNjcChbJ2hhY2suanMnLCAnZ3Jvdy5qcycsICd3ZWFrZW4uanMnXSwgcyk7XG4gICAgfVxuXG4gICAgYXdhaXQgY3ljbGUobnMsIHRhcmdldCk7XG4gIH1cbn1cbiJdfQ==\",\"filename\":\"exp.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog('ALL');\\n    let target = \\\"n00dles\\\";\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\n        target = ns.args[0];\\n    let ms = 0;\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\n        ms = ns.args[1];\\n    await ns.grow(target, { additionalMsec: ms });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xuXG4gIGxldCBtcyA9IDA7XG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcblxuICBhd2FpdCBucy5ncm93KHRhcmdldCwgeyBhZGRpdGlvbmFsTXNlYzogbXMgfSk7XG59XG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog('ALL');\\n    let target = \\\"n00dles\\\";\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\n        target = ns.args[0];\\n    let ms = 0;\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\n        ms = ns.args[1];\\n    await ns.hack(target, { additionalMsec: ms });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcbiAgICB0YXJnZXQgPSBucy5hcmdzWzBdO1xuXG4gIGxldCBtcyA9IDA7XG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwibnVtYmVyXCIpIG1zID0gbnMuYXJnc1sxXTtcblxuICBhd2FpdCBucy5oYWNrKHRhcmdldCwgeyBhZGRpdGlvbmFsTXNlYzogbXMgfSk7XG59XG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"int.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog('ALL');\\n    const startingInt = ns.getPlayer().exp.intelligence;\\n    for (;;) {\\n        for (let i = 0; i < 10000; i++) {\\n            ns.singularity.travelToCity('Chongqing');\\n            ns.singularity.travelToCity('New Tokyo');\\n            ns.singularity.travelToCity('Ishima');\\n        }\\n        await ns.sleep(0);\\n        if (ns.getServerMoneyAvailable('home') < 1000000)\\n            break;\\n    }\\n    const endingInt = ns.getPlayer().exp.intelligence;\\n    ns.tprintf(`Completed Travel - Gained ${endingInt - startingInt} Intelligence EXP`);\\n}\\n// import { NS } from \\\"@ns\\\";\\n// /** @param {NS} ns */\\n// export async function main(ns: NS): Promise<void> {\\n//     for (const faction of ns.singularity.checkFactionInvitations()) {\\n//         ns.singularity.joinFaction(faction);\\n//     }\\n//     ns.singularity.softReset(ns.getScriptName());\\n// }\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFcEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFFckQsU0FBVTtRQUNULEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEM7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEIsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTztZQUFFLE1BQU07S0FDMUQ7SUFFQSxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUVsRCxFQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixTQUFTLEdBQUcsV0FBVyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3RGLENBQUM7QUFFRCw0QkFBNEI7QUFFNUIsd0JBQXdCO0FBQ3hCLHNEQUFzRDtBQUN0RCx3RUFBd0U7QUFDeEUsK0NBQStDO0FBQy9DLFFBQVE7QUFHUixvREFBb0Q7QUFDcEQsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcblx0bnMuZGlzYWJsZUxvZygnQUxMJyk7XG5cbiAgY29uc3Qgc3RhcnRpbmdJbnQgPSBucy5nZXRQbGF5ZXIoKS5leHAuaW50ZWxsaWdlbmNlO1xuXG5cdGZvciAoOyA7KSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgaSsrKSB7XG5cdFx0XHRucy5zaW5ndWxhcml0eS50cmF2ZWxUb0NpdHkoJ0Nob25ncWluZycpO1xuXHRcdFx0bnMuc2luZ3VsYXJpdHkudHJhdmVsVG9DaXR5KCdOZXcgVG9reW8nKTtcblx0XHRcdG5zLnNpbmd1bGFyaXR5LnRyYXZlbFRvQ2l0eSgnSXNoaW1hJyk7XG5cdFx0fVxuXHRcdGF3YWl0IG5zLnNsZWVwKDApO1xuXG4gICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgPCAxMDAwMDAwKSBicmVhaztcblx0fVxuXG4gIGNvbnN0IGVuZGluZ0ludCA9IG5zLmdldFBsYXllcigpLmV4cC5pbnRlbGxpZ2VuY2U7XG5cbiAgbnMudHByaW50ZihgQ29tcGxldGVkIFRyYXZlbCAtIEdhaW5lZCAke2VuZGluZ0ludCAtIHN0YXJ0aW5nSW50fSBJbnRlbGxpZ2VuY2UgRVhQYCk7XG59XG5cbi8vIGltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG4vLyAvKiogQHBhcmFtIHtOU30gbnMgKi9cbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xuLy8gICAgIGZvciAoY29uc3QgZmFjdGlvbiBvZiBucy5zaW5ndWxhcml0eS5jaGVja0ZhY3Rpb25JbnZpdGF0aW9ucygpKSB7XG4vLyAgICAgICAgIG5zLnNpbmd1bGFyaXR5LmpvaW5GYWN0aW9uKGZhY3Rpb24pO1xuLy8gICAgIH1cblxuXG4vLyAgICAgbnMuc2luZ3VsYXJpdHkuc29mdFJlc2V0KG5zLmdldFNjcmlwdE5hbWUoKSk7XG4vLyB9Il19\",\"filename\":\"int.js\",\"server\":\"home\"}}],[\"ka.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    for (const s of servers) {\\n        const scripts = ns.ps(s);\\n        for (const script of scripts) {\\n            // ns.tprintf(`killing ${s}:${script.filename}`)\\n            if (script.filename !== 'ka.js' && script.filename !== 'hud.js')\\n                ns.kill(script.pid);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxLQUFJLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUN0QixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzVCLGdEQUFnRDtZQUNoRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssT0FBTyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUTtnQkFDN0QsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMgfSBmcm9tIFwidXRpbFwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xuXG4gIGZvcihjb25zdCBzIG9mIHNlcnZlcnMpIHtcbiAgICBjb25zdCBzY3JpcHRzID0gbnMucHMocyk7XG5cbiAgICBmb3IgKGNvbnN0IHNjcmlwdCBvZiBzY3JpcHRzKSB7XG4gICAgICAvLyBucy50cHJpbnRmKGBraWxsaW5nICR7c306JHtzY3JpcHQuZmlsZW5hbWV9YClcbiAgICAgIGlmIChzY3JpcHQuZmlsZW5hbWUgIT09ICdrYS5qcycgJiYgc2NyaXB0LmZpbGVuYW1lICE9PSAnaHVkLmpzJylcbiAgICAgICAgbnMua2lsbChzY3JpcHQucGlkKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==\",\"filename\":\"ka.js\",\"server\":\"home\"}}],[\"kh.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const servers = getAllServers(ns);\\n    const hackPIDs = [];\\n    const growPIDs = [];\\n    const weakenPIDs = [];\\n    for (const s of servers) {\\n        const scripts = ns.ps(s);\\n        for (const script of scripts) {\\n            if (script.filename === 'simple-hack.js' || script.filename === 'super-hack.js') {\\n                ns.kill(script.pid);\\n                ns.tprintf(`Killed Hack Controller`);\\n            }\\n            if (script.filename === 'hack.js')\\n                hackPIDs.push(script.pid);\\n            if (script.filename === 'grow.js')\\n                growPIDs.push(script.pid);\\n            if (script.filename === 'weaken.js')\\n                weakenPIDs.push(script.pid);\\n        }\\n    }\\n    hackPIDs.map(pid => ns.kill(pid));\\n    ns.tprintf(`Killed ${hackPIDs.length} Hack Scripts`);\\n    await ns.sleep(100);\\n    growPIDs.map(pid => ns.kill(pid));\\n    ns.tprintf(`Killed ${growPIDs.length} Grow Scripts`);\\n    await ns.sleep(100);\\n    weakenPIDs.map(pid => ns.kill(pid));\\n    ns.tprintf(`Killed ${weakenPIDs.length} Weaken Scripts`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxDLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztJQUM5QixNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDOUIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO0lBRWhDLEtBQUksTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssZUFBZSxFQUFFO2dCQUMvRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQ3RDO1lBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVM7Z0JBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTO2dCQUMvQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU1QixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssV0FBVztnQkFDakMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7S0FDRjtJQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFFBQVEsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVwQixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFRLENBQUMsTUFBTSxlQUFlLENBQUMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFcEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBVSxDQUFDLE1BQU0saUJBQWlCLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBnZXRBbGxTZXJ2ZXJzIH0gZnJvbSBcInV0aWxcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XG5cbiAgY29uc3QgaGFja1BJRHM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGdyb3dQSURzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCB3ZWFrZW5QSURzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGZvcihjb25zdCBzIG9mIHNlcnZlcnMpIHtcbiAgICBjb25zdCBzY3JpcHRzID0gbnMucHMocyk7XG5cbiAgICBmb3IgKGNvbnN0IHNjcmlwdCBvZiBzY3JpcHRzKSB7XG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lID09PSAnc2ltcGxlLWhhY2suanMnIHx8IHNjcmlwdC5maWxlbmFtZSA9PT0gJ3N1cGVyLWhhY2suanMnKSB7XG4gICAgICAgIG5zLmtpbGwoc2NyaXB0LnBpZCk7XG4gICAgICAgIG5zLnRwcmludGYoYEtpbGxlZCBIYWNrIENvbnRyb2xsZXJgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcmlwdC5maWxlbmFtZSA9PT0gJ2hhY2suanMnKVxuICAgICAgICBoYWNrUElEcy5wdXNoKHNjcmlwdC5waWQpO1xuXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lID09PSAnZ3Jvdy5qcycpXG4gICAgICAgIGdyb3dQSURzLnB1c2goc2NyaXB0LnBpZCk7XG4gICAgICBcbiAgICAgIGlmIChzY3JpcHQuZmlsZW5hbWUgPT09ICd3ZWFrZW4uanMnKVxuICAgICAgICB3ZWFrZW5QSURzLnB1c2goc2NyaXB0LnBpZCk7XG4gICAgfVxuICB9XG4gIFxuICBoYWNrUElEcy5tYXAocGlkID0+IG5zLmtpbGwocGlkKSk7XG4gIG5zLnRwcmludGYoYEtpbGxlZCAke2hhY2tQSURzLmxlbmd0aH0gSGFjayBTY3JpcHRzYCk7XG4gIGF3YWl0IG5zLnNsZWVwKDEwMCk7XG5cbiAgZ3Jvd1BJRHMubWFwKHBpZCA9PiBucy5raWxsKHBpZCkpO1xuICBucy50cHJpbnRmKGBLaWxsZWQgJHtncm93UElEcy5sZW5ndGh9IEdyb3cgU2NyaXB0c2ApO1xuICBhd2FpdCBucy5zbGVlcCgxMDApO1xuXG4gIHdlYWtlblBJRHMubWFwKHBpZCA9PiBucy5raWxsKHBpZCkpO1xuICBucy50cHJpbnRmKGBLaWxsZWQgJHt3ZWFrZW5QSURzLmxlbmd0aH0gV2Vha2VuIFNjcmlwdHNgKTtcbn1cbiJdfQ==\",\"filename\":\"kh.js\",\"server\":\"home\"}}],[\"ll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle, ColorPrint } from \\\"tables\\\";\\nexport async function main(ns) {\\n    const files = ns.ls(ns.getHostname());\\n    // const exes = files.filter(f => f.includes('.exe'));\\n    // ns.tprintf(\\\"============ EXECUTABLES =============\\\");\\n    // for (const f of exes)\\n    //   ns.tprintf(`${f}`);\\n    // const scripts = files.filter(f => f.includes('.js'));\\n    // ns.tprintf('');\\n    // ns.tprintf(\\\"============== SCRIPTS ===============\\\");\\n    // for (const f of scripts)\\n    //   ns.tprintf(`${f}`);\\n    // const misc = files.filter(f => !(f.includes('.exe') || f.includes('.js')));\\n    // ns.tprintf('');\\n    // ns.tprintf(\\\"=============== MISC =================\\\");\\n    // for (const f of misc)\\n    //   ns.tprintf(`${f}`);\\n    const scripts = files.filter(f => f.includes('.js'));\\n    const data = scripts.map(f => {\\n        return [\\n            ` ${f}`,\\n            ns.formatRam(ns.getScriptRam(f)).padStart(9),\\n        ];\\n    });\\n    const columns = [\\n        { header: ' Script', width: 28 },\\n        { header: '      RAM', width: 10 },\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV0QyxzREFBc0Q7SUFDdEQsd0RBQXdEO0lBQ3hELHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFFeEIsd0RBQXdEO0lBQ3hELGtCQUFrQjtJQUNsQix3REFBd0Q7SUFDeEQsMkJBQTJCO0lBQzNCLHdCQUF3QjtJQUV4Qiw4RUFBOEU7SUFDOUUsa0JBQWtCO0lBQ2xCLHdEQUF3RDtJQUN4RCx3QkFBd0I7SUFDeEIsd0JBQXdCO0lBRXhCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFckQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMzQixPQUFPO1lBQ0wsSUFBSSxDQUFDLEVBQUU7WUFDUCxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzdDLENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sT0FBTyxHQUFHO1FBQ2QsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDaEMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7S0FDbkMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBQcmludFRhYmxlLCBEZWZhdWx0U3R5bGUsIENvbG9yUHJpbnQgfSBmcm9tIFwidGFibGVzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBmaWxlcyA9IG5zLmxzKG5zLmdldEhvc3RuYW1lKCkpO1xuXG4gIC8vIGNvbnN0IGV4ZXMgPSBmaWxlcy5maWx0ZXIoZiA9PiBmLmluY2x1ZGVzKCcuZXhlJykpO1xuICAvLyBucy50cHJpbnRmKFwiPT09PT09PT09PT09IEVYRUNVVEFCTEVTID09PT09PT09PT09PT1cIik7XG4gIC8vIGZvciAoY29uc3QgZiBvZiBleGVzKVxuICAvLyAgIG5zLnRwcmludGYoYCR7Zn1gKTtcblxuICAvLyBjb25zdCBzY3JpcHRzID0gZmlsZXMuZmlsdGVyKGYgPT4gZi5pbmNsdWRlcygnLmpzJykpO1xuICAvLyBucy50cHJpbnRmKCcnKTtcbiAgLy8gbnMudHByaW50ZihcIj09PT09PT09PT09PT09IFNDUklQVFMgPT09PT09PT09PT09PT09XCIpO1xuICAvLyBmb3IgKGNvbnN0IGYgb2Ygc2NyaXB0cylcbiAgLy8gICBucy50cHJpbnRmKGAke2Z9YCk7XG5cbiAgLy8gY29uc3QgbWlzYyA9IGZpbGVzLmZpbHRlcihmID0+ICEoZi5pbmNsdWRlcygnLmV4ZScpIHx8IGYuaW5jbHVkZXMoJy5qcycpKSk7XG4gIC8vIG5zLnRwcmludGYoJycpO1xuICAvLyBucy50cHJpbnRmKFwiPT09PT09PT09PT09PT09IE1JU0MgPT09PT09PT09PT09PT09PT1cIik7XG4gIC8vIGZvciAoY29uc3QgZiBvZiBtaXNjKVxuICAvLyAgIG5zLnRwcmludGYoYCR7Zn1gKTtcblxuICBjb25zdCBzY3JpcHRzID0gZmlsZXMuZmlsdGVyKGYgPT4gZi5pbmNsdWRlcygnLmpzJykpO1xuXG4gIGNvbnN0IGRhdGEgPSBzY3JpcHRzLm1hcChmID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAgYCAke2Z9YCxcbiAgICAgIG5zLmZvcm1hdFJhbShucy5nZXRTY3JpcHRSYW0oZikpLnBhZFN0YXJ0KDkpLFxuICAgIF1cbiAgfSk7XG5cbiAgY29uc3QgY29sdW1ucyA9IFtcbiAgICB7IGhlYWRlcjogJyBTY3JpcHQnLCB3aWR0aDogMjggfSxcbiAgICB7IGhlYWRlcjogJyAgICAgIFJBTScsIHdpZHRoOiAxMCB9LFxuICBdO1xuXG4gIFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcbn1cbiJdfQ==\",\"filename\":\"ll.js\",\"server\":\"home\"}}],[\"pserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\nexport async function main(ns) {\\n    console.log(ns.getBitNodeMultipliers());\\n    const ramsizes = [];\\n    for (let i = 0; i < 21; i++) {\\n        ramsizes.push(Math.pow(2, i));\\n    }\\n    let maxSize = 0;\\n    const data = ramsizes.map(sz => {\\n        if (ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') && sz > maxSize)\\n            maxSize = sz;\\n        return [\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: ns.formatRam(sz).padStart(9) },\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: ns.formatNumber(ns.getPurchasedServerCost(sz), 3, 1000, true).padStart(11) },\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: Math.log2(sz).toString() },\\n        ];\\n    });\\n    const columns = [\\n        { header: '      RAM', width: 10 },\\n        { header: '       Cost', width: 12 },\\n        { header: '       pow', width: 12 }\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n    if (ns.args.length > 1) {\\n        const purchasedServers = ns.getPurchasedServers().sort((a, b) => {\\n            const aval = Number(a.split('-')[1]);\\n            const bval = Number(b.split('-')[1]);\\n            return aval - bval;\\n        });\\n        let newServerNumber = 1;\\n        if (purchasedServers.length > 0)\\n            newServerNumber = Number(purchasedServers[purchasedServers.length - 1].split('-')[1]) + 1;\\n        ns.tprintf(`Purchasing Server PS-${newServerNumber} with ${ns.formatRam(maxSize)} RAM`);\\n        ns.purchaseServer(`PS-${newServerNumber.toString().padStart(2, '0')}`, maxSize);\\n    }\\n    else if (ns.args.length > 0) {\\n        while (ns.getPurchasedServerCost(maxSize) <= ns.getServerMoneyAvailable('home') && ns.getPurchasedServers().length < 25 && maxSize === Math.pow(2, 20)) {\\n            const purchasedServers = ns.getPurchasedServers().sort((a, b) => {\\n                const aval = Number(a.split('-')[1]);\\n                const bval = Number(b.split('-')[1]);\\n                return aval - bval;\\n            });\\n            let newServerNumber = 1;\\n            if (purchasedServers.length > 0)\\n                newServerNumber = Number(purchasedServers[purchasedServers.length - 1].split('-')[1]) + 1;\\n            ns.tprintf(`Purchasing Server PS-${newServerNumber} with ${ns.formatRam(maxSize)} RAM`);\\n            ns.purchaseServer(`PS-${newServerNumber.toString().padStart(2, '0')}`, maxSize);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUV4QyxNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDOUI7SUFFRCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEIsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUM3QixJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLE9BQU87WUFDckYsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVmLE9BQU87WUFDTCxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEksRUFBRSxLQUFLLEVBQUUsRUFBRSxD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QUFDLEVBQUUsRUFBRTtnQkFDOUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQzdCLGVBQWUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztZQUV4RixFQUFFLENBQUMsT0FBTyxDQUFDLHdCQUF3QixlQUFlLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEYsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDakY7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IFByaW50VGFibGUsIENvbG9yUHJpbnQsIERlZmF1bHRTdHlsZSB9IGZyb20gXCJ0YWJsZXNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnNvbGUubG9nKG5zLmdldEJpdE5vZGVNdWx0aXBsaWVycygpKTtcblxuICBjb25zdCByYW1zaXplczogbnVtYmVyW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMTsgaSsrKSB7XG4gICAgcmFtc2l6ZXMucHVzaChNYXRoLnBvdygyLCBpKSlcbiAgfVxuXG4gIGxldCBtYXhTaXplID0gMDtcbiAgY29uc3QgZGF0YSA9IHJhbXNpemVzLm1hcChzeiA9PiB7XG4gICAgaWYgKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3Qoc3opIDw9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgJiYgc3ogPiBtYXhTaXplKVxuICAgICAgbWF4U2l6ZSA9IHN6O1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIHsgY29sb3I6IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3Qoc3opIDw9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogbnMuZm9ybWF0UmFtKHN6KS5wYWRTdGFydCg5KSB9LFxuICAgICAgeyBjb2xvcjogbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeikgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA/ICdncmVlbicgOiAnd2hpdGUnLCB0ZXh0OiBucy5mb3JtYXROdW1iZXIobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeiksIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDExKSB9LFxuICAgICAgeyBjb2xvcjogbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeikgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA/ICdncmVlbicgOiAnd2hpdGUnLCB0ZXh0OiBNYXRoLmxvZzIoc3opLnRvU3RyaW5nKCkgfSxcbiAgICBdXG4gIH0pO1xuXG5cdGNvbnN0IGNvbHVtbnMgPSBbXG5cdFx0eyBoZWFkZXI6ICcgICAgICBSQU0nLCB3aWR0aDogMTAgfSxcblx0XHR7IGhlYWRlcjogJyAgICAgICBDb3N0Jywgd2lkdGg6IDEyIH0sXG4gICAgeyBoZWFkZXI6ICcgICAgICAgcG93Jywgd2lkdGg6IDEyIH1cblx0XTtcblxuXHRQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBEZWZhdWx0U3R5bGUoKSwgQ29sb3JQcmludCk7XG5cbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSkge1xuICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgYXZhbCA9IE51bWJlcihhLnNwbGl0KCctJylbMV0pO1xuICAgICAgY29uc3QgYnZhbCA9IE51bWJlcihiLnNwbGl0KCctJylbMV0pO1xuICAgICAgcmV0dXJuIGF2YWwgLSBidmFsO1xuICAgIH0pO1xuXG4gICAgbGV0IG5ld1NlcnZlck51bWJlciA9IDE7XG4gICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID4gMClcbiAgICAgIG5ld1NlcnZlck51bWJlciA9IE51bWJlcihwdXJjaGFzZWRTZXJ2ZXJzW3B1cmNoYXNlZFNlcnZlcnMubGVuZ3RoLTFdLnNwbGl0KCctJylbMV0pKzE7XG5cbiAgICBucy50cHJpbnRmKGBQdXJjaGFzaW5nIFNlcnZlciBQUy0ke25ld1NlcnZlck51bWJlcn0gd2l0aCAke25zLmZvcm1hdFJhbShtYXhTaXplKX0gUkFNYCk7XG4gICAgbnMucHVyY2hhc2VTZXJ2ZXIoYFBTLSR7bmV3U2VydmVyTnVtYmVyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gLCBtYXhTaXplKTtcbiAgfSBlbHNlIGlmIChucy5hcmdzLmxlbmd0aCA+IDApIHtcbiAgICB3aGlsZSAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChtYXhTaXplKSA8PSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpICYmIG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGggPCAyNSAmJiBtYXhTaXplID09PSBNYXRoLnBvdygyLCAyMCkpIHtcbiAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBhdmFsID0gTnVtYmVyKGEuc3BsaXQoJy0nKVsxXSk7XG4gICAgICAgIGNvbnN0IGJ2YWwgPSBOdW1iZXIoYi5zcGxpdCgnLScpWzFdKTtcbiAgICAgICAgcmV0dXJuIGF2YWwgLSBidmFsO1xuICAgICAgfSk7XG5cbiAgICAgIGxldCBuZXdTZXJ2ZXJOdW1iZXIgPSAxO1xuICAgICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID4gMClcbiAgICAgICAgbmV3U2VydmVyTnVtYmVyID0gTnVtYmVyKHB1cmNoYXNlZFNlcnZlcnNbcHVyY2hhc2VkU2VydmVycy5sZW5ndGgtMV0uc3BsaXQoJy0nKVsxXSkrMTtcblxuICAgICAgbnMudHByaW50ZihgUHVyY2hhc2luZyBTZXJ2ZXIgUFMtJHtuZXdTZXJ2ZXJOdW1iZXJ9IHdpdGggJHtucy5mb3JtYXRSYW0obWF4U2l6ZSl9IFJBTWApO1xuICAgICAgbnMucHVyY2hhc2VTZXJ2ZXIoYFBTLSR7bmV3U2VydmVyTnVtYmVyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gLCBtYXhTaXplKTtcbiAgICB9XG4gIH1cbn0iXX0=\",\"filename\":\"pserver.js\",\"server\":\"home\"}}],[\"rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint, DefaultStyle, PrintTable } from \\\"./tables\\\";\\nimport { ALL_FACTIONS } from \\\"./util\\\";\\nfunction getTotalFactionRep(ns, faction) {\\n    return ns.singularity.getFactionRep(faction) + ns.formulas.reputation.calculateFavorToRep(ns.singularity.getFactionFavor(faction));\\n}\\nfunction getColor(rep, target) {\\n    if (rep >= target)\\n        return 'green';\\n    if (rep > 0)\\n        return 'Gold1';\\n    return 'white';\\n}\\nexport async function main(ns) {\\n    // const target = 'ECorp';\\n    const targetRep = ns.formulas.reputation.calculateFavorToRep(150);\\n    // const currentRep = ns.singularity.getFactionRep(target) + ns.formulas.reputation.calculateFavorToRep(ns.singularity.getFactionFavor(target));\\n    // const repNeeded = targetRep - currentRep;\\n    // ns.tprintf(`Total rep needed for 150 fav: ${ns.formatNumber(targetRep, 0, 1000)}`);\\n    // ns.tprintf(`Total rep accumulated: ${ns.formatNumber(currentRep, 3, 1000)}`);\\n    // ns.tprintf(`Rep needed this round to get to 150 rep: ${ns.formatNumber(repNeeded, 3, 1000)}`);\\n    const data = ALL_FACTIONS.sort((a, b) => getTotalFactionRep(ns, b) - getTotalFactionRep(ns, a)).map((f) => {\\n        const totalRep = getTotalFactionRep(ns, f);\\n        const repNeeded = Math.max(targetRep - totalRep, 0);\\n        return [\\n            { color: getColor(totalRep, targetRep), text: ` ${f}` },\\n            { color: getColor(totalRep, targetRep), text: ns.formatNumber(totalRep, 1, 1000, true).padStart(8) },\\n            { color: getColor(totalRep, targetRep), text: ns.formatNumber(repNeeded, 1, 1000, true).padStart(8) }\\n        ];\\n    });\\n    const columns = [\\n        { header: ' Faction', width: 30 },\\n        { header: '     Rep', width: 9 },\\n        { header: '  Needed', width: 9 },\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUV0QyxTQUFTLGtCQUFrQixDQUFDLEVBQU0sRUFBRSxPQUFlO0lBQ2pELE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNySSxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBVyxFQUFFLE1BQWM7SUFDM0MsSUFBSSxHQUFHLElBQUksTUFBTTtRQUFFLE9BQU8sT0FBTyxDQUFDO0lBQ2xDLElBQUksR0FBRyxHQUFHLENBQUM7UUFBRSxPQUFPLE9BQU8sQ0FBQztJQUM1QixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwQkFBMEI7SUFDMUIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEUsZ0pBQWdKO0lBQ2hKLDRDQUE0QztJQUM1QyxzRkFBc0Y7SUFDdEYsZ0ZBQWdGO0lBQ2hGLGlHQUFpRztJQUlqRyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3hHLE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEQsT0FBTztZQUNMLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDdkQsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEcsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7U0FDdEcsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxPQUFPLEdBQUc7UUFDaEIsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDakMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7UUFDOUIsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7S0FDbEMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBDb2xvclByaW50LCBEZWZhdWx0U3R5bGUsIFByaW50VGFibGUgfSBmcm9tIFwiLi90YWJsZXNcIjtcbmltcG9ydCB7IEFMTF9GQUNUSU9OUyB9IGZyb20gXCIuL3V0aWxcIjtcblxuZnVuY3Rpb24gZ2V0VG90YWxGYWN0aW9uUmVwKG5zOiBOUywgZmFjdGlvbjogc3RyaW5nKTogbnVtYmVyIHtcbiAgcmV0dXJuIG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25SZXAoZmFjdGlvbikgKyBucy5mb3JtdWxhcy5yZXB1dGF0aW9uLmNhbGN1bGF0ZUZhdm9yVG9SZXAobnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvbkZhdm9yKGZhY3Rpb24pKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29sb3IocmVwOiBudW1iZXIsIHRhcmdldDogbnVtYmVyKSB7XG4gIGlmIChyZXAgPj0gdGFyZ2V0KSByZXR1cm4gJ2dyZWVuJztcbiAgaWYgKHJlcCA+IDApIHJldHVybiAnR29sZDEnO1xuICByZXR1cm4gJ3doaXRlJztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIC8vIGNvbnN0IHRhcmdldCA9ICdFQ29ycCc7XG4gIGNvbnN0IHRhcmdldFJlcCA9IG5zLmZvcm11bGFzLnJlcHV0YXRpb24uY2FsY3VsYXRlRmF2b3JUb1JlcCgxNTApO1xuICAvLyBjb25zdCBjdXJyZW50UmVwID0gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcCh0YXJnZXQpICsgbnMuZm9ybXVsYXMucmVwdXRhdGlvbi5jYWxjdWxhdGVGYXZvclRvUmVwKG5zLnNpbmd1bGFyaXR5LmdldEZhY3Rpb25GYXZvcih0YXJnZXQpKTtcbiAgLy8gY29uc3QgcmVwTmVlZGVkID0gdGFyZ2V0UmVwIC0gY3VycmVudFJlcDtcbiAgLy8gbnMudHByaW50ZihgVG90YWwgcmVwIG5lZWRlZCBmb3IgMTUwIGZhdjogJHtucy5mb3JtYXROdW1iZXIodGFyZ2V0UmVwLCAwLCAxMDAwKX1gKTtcbiAgLy8gbnMudHByaW50ZihgVG90YWwgcmVwIGFjY3VtdWxhdGVkOiAke25zLmZvcm1hdE51bWJlcihjdXJyZW50UmVwLCAzLCAxMDAwKX1gKTtcbiAgLy8gbnMudHByaW50ZihgUmVwIG5lZWRlZCB0aGlzIHJvdW5kIHRvIGdldCB0byAxNTAgcmVwOiAke25zLmZvcm1hdE51bWJlcihyZXBOZWVkZWQsIDMsIDEwMDApfWApO1xuXG5cblxuICBjb25zdCBkYXRhID0gQUxMX0ZBQ1RJT05TLnNvcnQoKGEsIGIpID0+IGdldFRvdGFsRmFjdGlvblJlcChucywgYikgLSBnZXRUb3RhbEZhY3Rpb25SZXAobnMsIGEpKS5tYXAoKGYpID0+IHtcbiAgICBjb25zdCB0b3RhbFJlcCA9IGdldFRvdGFsRmFjdGlvblJlcChucywgZik7XG4gICAgY29uc3QgcmVwTmVlZGVkID0gTWF0aC5tYXgodGFyZ2V0UmVwIC0gdG90YWxSZXAsIDApO1xuICAgIHJldHVybiBbXG4gICAgICB7IGNvbG9yOiBnZXRDb2xvcih0b3RhbFJlcCwgdGFyZ2V0UmVwKSwgdGV4dDogYCAke2Z9YCB9LFxuICAgICAgeyBjb2xvcjogZ2V0Q29sb3IodG90YWxSZXAsIHRhcmdldFJlcCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0b3RhbFJlcCwgMSwgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoOCkgfSxcbiAgICAgIHsgY29sb3I6IGdldENvbG9yKHRvdGFsUmVwLCB0YXJnZXRSZXApLCB0ZXh0OiBucy5mb3JtYXROdW1iZXIocmVwTmVlZGVkLCAxLCAxMDAwLCB0cnVlKS5wYWRTdGFydCg4KSB9XG4gICAgXTtcbiAgfSk7XG5cbiAgY29uc3QgY29sdW1ucyA9IFtcblx0XHR7IGhlYWRlcjogJyBGYWN0aW9uJywgd2lkdGg6IDMwIH0sXG5cdFx0eyBoZWFkZXI6ICcgICAgIFJlcCcsIHdpZHRoOiA5IH0sXG4gICAgeyBoZWFkZXI6ICcgIE5lZWRlZCcsIHdpZHRoOiA5IH0sXG5cdF07XG5cblx0UHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xufVxuIl19\",\"filename\":\"rep.js\",\"server\":\"home\"}}],[\"super-break.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers, isRootable } from \\\"./util\\\";\\nfunction crackAndNuke(ns, s) {\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        ns.brutessh(s);\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        ns.ftpcrack(s);\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        ns.relaysmtp(s);\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        ns.httpworm(s);\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        ns.sqlinject(s);\\n    ns.nuke(s);\\n}\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    ns.singularity.purchaseTor();\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\n        ns.singularity.purchaseProgram(crack);\\n        if (ns.fileExists(crack, \\\"home\\\"))\\n            count++;\\n        return count;\\n    }, 0);\\n    for (const s of servers) {\\n        if (isRootable(ns, s, portCrackCount)) {\\n            ns.tprintf(`Cracking ${s}`);\\n            crackAndNuke(ns, s);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwZXItYnJlYWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3VwZXItYnJlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbkQsU0FBUyxZQUFZLENBQUMsRUFBTSxFQUFFLENBQVM7SUFDckMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1RCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFN0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEcsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN4RCxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztZQUFFLEtBQUssRUFBRSxDQUFDO1FBQzFDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRU4sS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7UUFDdkIsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRTtZQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3JCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBnZXRBbGxTZXJ2ZXJzLCBpc1Jvb3RhYmxlIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5mdW5jdGlvbiBjcmFja0FuZE51a2UobnM6IE5TLCBzOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJCcnV0ZVNTSC5leGVcIiwgXCJob21lXCIpKSBucy5icnV0ZXNzaChzKTtcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGVFBDcmFjay5leGVcIiwgXCJob21lXCIpKSBucy5mdHBjcmFjayhzKTtcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJyZWxheVNNVFAuZXhlXCIsIFwiaG9tZVwiKSkgbnMucmVsYXlzbXRwKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkhUVFBXb3JtLmV4ZVwiLCBcImhvbWVcIikpIG5zLmh0dHB3b3JtKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIlNRTEluamVjdC5leGVcIiwgXCJob21lXCIpKSBucy5zcWxpbmplY3Qocyk7XG5cbiAgbnMubnVrZShzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKTtcblxuICBucy5zaW5ndWxhcml0eS5wdXJjaGFzZVRvcigpO1xuXG4gIGNvbnN0IHBvcnRDcmFja3MgPSBbXCJCcnV0ZVNTSC5leGVcIiwgXCJGVFBDcmFjay5leGVcIiwgXCJyZWxheVNNVFAuZXhlXCIsIFwiSFRUUFdvcm0uZXhlXCIsIFwiU1FMSW5qZWN0LmV4ZVwiXTtcbiAgY29uc3QgcG9ydENyYWNrQ291bnQgPSBwb3J0Q3JhY2tzLnJlZHVjZSgoY291bnQsIGNyYWNrKSA9PiB7XG4gICAgbnMuc2luZ3VsYXJpdHkucHVyY2hhc2VQcm9ncmFtKGNyYWNrKTtcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhjcmFjaywgXCJob21lXCIpKSBjb3VudCsrO1xuICAgIHJldHVybiBjb3VudDtcbiAgfSwgMCk7XG5cbiAgZm9yIChjb25zdCBzIG9mIHNlcnZlcnMpIHtcbiAgICBpZiAoaXNSb290YWJsZShucywgcywgcG9ydENyYWNrQ291bnQpKSB7XG4gICAgICBucy50cHJpbnRmKGBDcmFja2luZyAke3N9YCk7XG4gICAgICBjcmFja0FuZE51a2UobnMsIHMpO1xuICAgIH1cbiAgfVxufVxuIl19\",\"filename\":\"super-break.js\",\"server\":\"home\"}}],[\"super-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, GROW_THREAD_MULT, HACK_PERCENT, HACK_PERCENT_MAX, MAX_BATCHES_PER_CYCLE, MS_BETWEEN_OPERATIONS, waitForHGWScripts } from \\\"util\\\";\\nimport { ColorPrint } from \\\"./tables\\\";\\n// TODO:\\n// [x] Use Home RAM, leaving 32GB free for other execution\\n// [x] Instead of W / GW / HWGW progression, start directly on HWGW and account for increased Grow and Weaken need\\n// [x] Implement multiple batches in a single cycle when there are surplus threads\\n// [ ] Re-check hackable servers every round\\n// [x] Incorporate formulas if available\\n// [ ] Purchase new servers?\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\nexport function autocomplete(data, args) {\\n    return data.servers; // This script autocompletes the list of servers.\\n}\\nclass HackBatch {\\n    growThreads = 0;\\n    growWeakenThreads = 0;\\n    hackThreads = 0;\\n    hackWeakenThreads = 0;\\n    hackTime = 0;\\n    growTime = 0;\\n    weakenTime = 0;\\n    growMSBuf = 0;\\n    growWeakenMSBuf = 0;\\n    hackMSBuf = 0;\\n    hackWeakenMsBuf = 0;\\n    gain = 0;\\n    hackPercent = 0;\\n    totalThreads() {\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\n    }\\n}\\nfunction getScriptCalls(batches) {\\n    const scripts = [];\\n    for (const batch of batches) {\\n        if (batch.growThreads > 0) {\\n            scripts.push({\\n                script: \\\"grow.js\\\",\\n                threads: batch.growThreads,\\n                offset: batch.growMSBuf\\n            });\\n        }\\n        if (batch.growWeakenThreads) {\\n            scripts.push({\\n                script: \\\"weaken.js\\\",\\n                threads: batch.growWeakenThreads,\\n                offset: batch.growWeakenMSBuf\\n            });\\n        }\\n        if (batch.hackThreads) {\\n            scripts.push({\\n                script: \\\"hack.js\\\",\\n                threads: batch.hackThreads,\\n                offset: batch.hackMSBuf\\n            });\\n        }\\n        if (batch.hackWeakenThreads) {\\n            scripts.push({\\n                script: \\\"weaken.js\\\",\\n                threads: batch.hackWeakenThreads,\\n                offset: batch.hackWeakenMsBuf\\n            });\\n        }\\n    }\\n    return scripts.sort((a, b) => b.threads - a.threads);\\n}\\nasync function cycle(ns, target) {\\n    const slaves = getSlaves(ns);\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\n    const weakenTime = Math.ceil(ns.getWeakenTime(target));\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\n    let totalThreads;\\n    let batches;\\n    let targetHackPercent = HACK_PERCENT;\\n    while (true) {\\n        totalThreads = getTotalThreads(ns, slaves);\\n        batches = [];\\n        // first batch is always GW if the server is not already at min security / max money\\n        // find out how many threads are required to grow to max\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\n            ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            const batch = new HackBatch();\\n            const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n            const growMult = Math.max(ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1), 1);\\n            batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\n            let growSecIncrease = GROW_SEC * batch.growThreads;\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n            if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\n                growSecIncrease = GROW_SEC * totalThreads;\\n                batch.growWeakenThreads = Math.min(Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC), totalThreads);\\n                batch.growThreads = totalThreads - batch.growWeakenThreads;\\n            }\\n            const batchMSOffset = baseMSOffset;\\n            batch.weakenTime = weakenTime;\\n            batch.growTime = growTime;\\n            batch.hackTime = hackTime;\\n            batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\n            batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\n            batches.push(batch);\\n            totalThreads -= batch.totalThreads();\\n        }\\n        while (totalThreads > 0) {\\n            // from now on assume we are at minimum security, maximum money available\\n            const mockTarget = ns.getServer(target);\\n            mockTarget.hackDifficulty = ns.getServerMinSecurityLevel(target);\\n            mockTarget.moneyAvailable = ns.getServerMaxMoney(target);\\n            mockTarget.moneyMax = ns.getServerMaxMoney(target);\\n            const batch = new HackBatch();\\n            const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\n            batch.weakenTime = weakenTime;\\n            batch.growTime = growTime;\\n            batch.hackTime = hackTime;\\n            batch.hackMSBuf = batchMSOffset - batch.hackTime - MS_BETWEEN_OPERATIONS;\\n            batch.hackWeakenMsBuf = batchMSOffset - batch.weakenTime;\\n            batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\n            batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\n            batch.hackThreads = Math.ceil(targetHackPercent / ns.formulas.hacking.hackPercent(mockTarget, ns.getPlayer()));\\n            let missedOnce = false;\\n            while (true) {\\n                if (batch.hackThreads <= 0) {\\n                    totalThreads = 0;\\n                    break;\\n                }\\n                batch.hackPercent = ns.formulas.hacking.hackPercent(mockTarget, ns.getPlayer()) * batch.hackThreads;\\n                const current = mockTarget.moneyAvailable;\\n                const future = current - (current * batch.hackPercent);\\n                mockTarget.moneyAvailable = future;\\n                batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(mockTarget, ns.getPlayer(), ns.getServerMaxMoney(target)) * GROW_THREAD_MULT);\\n                mockTarget.moneyAvailable = mockTarget.moneyMax;\\n                batch.gain = current - future;\\n                batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, target) / WEAK_SEC);\\n                batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\n                if (batch.totalThreads() <= totalThreads) {\\n                    totalThreads -= batch.totalThreads();\\n                    batches.push(batch);\\n                    if (missedOnce)\\n                        totalThreads = 0;\\n                    break;\\n                }\\n                batch.hackThreads = Math.floor(batch.hackThreads * 0.75);\\n                missedOnce = true;\\n            }\\n            // duplicate batch until there is no space left\\n            const batchThreads = batch.totalThreads();\\n            const additionalBatches = Math.floor(totalThreads / batchThreads);\\n            for (let i = 0; i < additionalBatches; ++i) {\\n                const newBatch = new HackBatch;\\n                Object.assign(newBatch, batch);\\n                const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\n                newBatch.hackMSBuf = batchMSOffset - newBatch.hackTime - MS_BETWEEN_OPERATIONS;\\n                newBatch.hackWeakenMsBuf = batchMSOffset - newBatch.weakenTime;\\n                newBatch.growMSBuf = batchMSOffset - newBatch.growTime + MS_BETWEEN_OPERATIONS;\\n                newBatch.growWeakenMSBuf = batchMSOffset - newBatch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\n                batches.push(newBatch);\\n                totalThreads -= newBatch.totalThreads();\\n                if (batches.length >= MAX_BATCHES_PER_CYCLE) {\\n                    totalThreads = 0;\\n                    break;\\n                }\\n            }\\n        }\\n        if (batches.length < MAX_BATCHES_PER_CYCLE || batches[batches.length - 1].hackPercent >= HACK_PERCENT_MAX || batches[batches.length - 1].hackPercent === 0)\\n            break;\\n        targetHackPercent += 0.1;\\n    }\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\n    if (batches.length > 1)\\n        ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads [H${batches[1].hackThreads}:HW${batches[1].hackWeakenThreads}:G${batches[1].growThreads}:GW${batches[1].growWeakenThreads}] | ${ns.formatNumber(cycleGain, 3, 1000, true)} Total ${(batches[1].hackPercent * 100).toFixed(2)}%% | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\n    else\\n        ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads [H${batches[0].hackThreads}:HW${batches[0].hackWeakenThreads}:G${batches[0].growThreads}:GW${batches[0].growWeakenThreads}] | ${ns.formatNumber(cycleGain, 3, 1000, true)} Total ${(batches[0].hackPercent * 100).toFixed(2)}%% | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\n    // ns.tprintf(`${target}: First Batch | ht:${batches[0].hackThreads} | hwt:${batches[0].hackWeakenThreads} | gt:${batches[0].growThreads} | gwt:${batches[0].growWeakenThreads}`)\\n    // ns.tprintf(`${target}: Second Batch | ht:${batches[1].hackThreads} | hwt:${batches[1].hackWeakenThreads} | gt:${batches[1].growThreads} | gwt:${batches[1].growWeakenThreads}`)\\n    // ns.tprintf(`${target}: Last Batch | ht:${batches[batches.length-1].hackThreads} | hwt:${batches[batches.length-1].hackWeakenThreads} | gt:${batches[batches.length-1].growThreads} | gwt:${batches[batches.length-1].growWeakenThreads}`)\\n    const scripts = getScriptCalls(batches);\\n    let script = scripts.shift();\\n    for (const s of slaves) {\\n        if (script === undefined)\\n            break;\\n        let slaveThreads = getSlaveThreads(ns, s);\\n        while (slaveThreads > 0) {\\n            if (script === undefined)\\n                break;\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\n            slaveThreads -= scriptThreads;\\n            script.threads -= scriptThreads;\\n            if (script.threads === 0)\\n                script = scripts.shift();\\n        }\\n    }\\n    const time = (new Date()).getTime();\\n    const hackStats = {\\n        target: target,\\n        start: time,\\n        begin: time + baseMSOffset,\\n        end: time + cycleTime,\\n        gainRate: cycleGain,\\n    };\\n    ns.clearPort(1);\\n    ns.writePort(1, JSON.stringify(hackStats));\\n    await waitForHGWScripts(ns, slaves);\\n}\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.atExit(() => { ns.clearPort(1); });\\n    let target = 'nectar-net';\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\n        target = ns.args[0];\\n    if (!ns.hasRootAccess(target)) {\\n        ColorPrint(ns, ['Red1', `SUPER HACK ERROR: Unable to hack ${target} without root access`]);\\n        return;\\n    }\\n    while (true) {\\n        const slaves = getSlaves(ns);\\n        // copy hgw scripts to slave machines\\n        for (const s of slaves) {\\n            if (s === 'home')\\n                continue;\\n            ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\n        }\\n        await cycle(ns, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXBlci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxNLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsUUFBUTtBQUNSLDBEQUEwRDtBQUMxRCxrSEFBa0g7QUFDbEgsa0ZBQWtGO0FBQ2xGLDRDQUE0QztBQUM1Qyx3Q0FBd0M7QUFDeEMsNEJBQTRCO0FBRTVCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUNwRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyx1QkFBdUI7QUFFOUMsb0pBQW9KO0FBQ3BKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsaURBQWlEO0FBQ3hFLENBQUM7QUF1QkQsTUFBTSxTQUFTO0lBQ2IsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFFdEIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxHQUFHLENBQUMsQ0FBQztJ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LEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzdCLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsb0NBQW9DLE1BQU0sc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE9BQU87S0FDUjtJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLHFDQUFxQztRQUNyQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUN0QixJQUFJLENBQUMsS0FBSyxNQUFNO2dCQUFFLFNBQVM7WUFDM0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDekI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBmb3JtYXRUaW1lLCBnZXRTbGF2ZXMsIGdldFNsYXZlVGhyZWFkcywgZ2V0VG90YWxUaHJlYWRzLCBHUk9XX1RIUkVBRF9NVUxULCBIQUNLX1BFUkNFTlQsIEhBQ0tfUEVSQ0VOVF9NQVgsIE1BWF9CQVRDSEVTX1BFUl9DWUNMRSwgTVNfQkVUV0VFTl9PUEVSQVRJT05TLCB3YWl0Rm9ySEdXU2NyaXB0cyB9IGZyb20gXCJ1dGlsXCI7XG5pbXBvcnQgeyBIYWNrU3RhdHMgfSBmcm9tIFwiLi9odWRcIjtcbmltcG9ydCB7IENvbG9yUHJpbnQgfSBmcm9tIFwiLi90YWJsZXNcIjtcblxuLy8gVE9ETzpcbi8vIFt4XSBVc2UgSG9tZSBSQU0sIGxlYXZpbmcgMzJHQiBmcmVlIGZvciBvdGhlciBleGVjdXRpb25cbi8vIFt4XSBJbnN0ZWFkIG9mIFcgLyBHVyAvIEhXR1cgcHJvZ3Jlc3Npb24sIHN0YXJ0IGRpcmVjdGx5IG9uIEhXR1cgYW5kIGFjY291bnQgZm9yIGluY3JlYXNlZCBHcm93IGFuZCBXZWFrZW4gbmVlZFxuLy8gW3hdIEltcGxlbWVudCBtdWx0aXBsZSBiYXRjaGVzIGluIGEgc2luZ2xlIGN5Y2xlIHdoZW4gdGhlcmUgYXJlIHN1cnBsdXMgdGhyZWFkc1xuLy8gWyBdIFJlLWNoZWNrIGhhY2thYmxlIHNlcnZlcnMgZXZlcnkgcm91bmRcbi8vIFt4XSBJbmNvcnBvcmF0ZSBmb3JtdWxhcyBpZiBhdmFpbGFibGVcbi8vIFsgXSBQdXJjaGFzZSBuZXcgc2VydmVycz9cblxuY29uc3QgR1JPV19TRUMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDEsICdvbWVnYS1uZXQnKTtcbmNvbnN0IFdFQUtfU0VDID0gMC4wNTsgLy8gbnMud2Vha2VuQW5hbHl6ZSgxKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZXhwb3J0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZShkYXRhOiBhbnksIGFyZ3M6IGFueSk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIGRhdGEuc2VydmVyczsgLy8gVGhpcyBzY3JpcHQgYXV0b2NvbXBsZXRlcyB0aGUgbGlzdCBvZiBzZXJ2ZXJzLlxufVxuXG5pbnRlcmZhY2UgSUhhY2tCYXRjaCB7XG4gIGdyb3dUaHJlYWRzOiBudW1iZXI7XG4gIGdyb3dXZWFrZW5UaHJlYWRzOiBudW1iZXI7XG4gIGhhY2tUaHJlYWRzOiBudW1iZXI7XG4gIGhhY2tXZWFrZW5UaHJlYWRzOiBudW1iZXI7XG5cbiAgaGFja1RpbWU6IG51bWJlcjtcbiAgZ3Jvd1RpbWU6IG51bWJlcjtcbiAgd2Vha2VuVGltZTogbnVtYmVyO1xuXG4gIGdyb3dNU0J1ZjogbnVtYmVyO1xuICBncm93V2Vha2VuTVNCdWY6IG51bWJlcjtcbiAgaGFja01TQnVmOiBudW1iZXI7XG4gIGhhY2tXZWFrZW5Nc0J1ZjogbnVtYmVyO1xuXG4gIGdhaW46IG51bWJlcjtcbiAgaGFja1BlcmNlbnQ6IG51bWJlcjtcblxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyO1xufVxuXG5jbGFzcyBIYWNrQmF0Y2ggaW1wbGVtZW50cyBJSGFja0JhdGNoIHtcbiAgZ3Jvd1RocmVhZHMgPSAwO1xuICBncm93V2Vha2VuVGhyZWFkcyA9IDA7XG4gIGhhY2tUaHJlYWRzID0gMDtcbiAgaGFja1dlYWtlblRocmVhZHMgPSAwO1xuXG4gIGhhY2tUaW1lID0gMDtcbiAgZ3Jvd1RpbWUgPSAwO1xuICB3ZWFrZW5UaW1lID0gMDtcblxuICBncm93TVNCdWYgPSAwO1xuICBncm93V2Vha2VuTVNCdWYgPSAwO1xuICBoYWNrTVNCdWYgPSAwO1xuICBoYWNrV2Vha2VuTXNCdWYgPSAwO1xuXG4gIGdhaW4gPSAwO1xuICBoYWNrUGVyY2VudCA9IDA7XG5cbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ3Jvd1RocmVhZHMgKyB0aGlzLmdyb3dXZWFrZW5UaHJlYWRzICsgdGhpcy5oYWNrVGhyZWFkcyArIHRoaXMuaGFja1dlYWtlblRocmVhZHM7XG4gIH1cbn1cblxuaW50ZXJmYWNlIElTY3JpcHRDYWxsIHtcbiAgc2NyaXB0OiBzdHJpbmc7XG4gIHRocmVhZHM6IG51bWJlcjtcbiAgb2Zmc2V0OiBudW1iZXI7XG59XG5cbmZ1bmN0aW9uIGdldFNjcmlwdENhbGxzKGJhdGNoZXM6IElIYWNrQmF0Y2hbXSk6IElTY3JpcHRDYWxsW10ge1xuICBjb25zdCBzY3JpcHRzOiBJU2NyaXB0Q2FsbFtdID0gW107XG4gIGZvciAoY29uc3QgYmF0Y2ggb2YgYmF0Y2hlcykge1xuICAgIGlmIChiYXRjaC5ncm93VGhyZWFkcyA+IDApIHtcbiAgICAgIHNjcmlwdHMucHVzaCh7XG4gICAgICAgIHNjcmlwdDogXCJncm93LmpzXCIsXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dUaHJlYWRzLFxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dNU0J1ZlxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMpIHtcbiAgICAgIHNjcmlwdHMucHVzaCh7XG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcbiAgICAgICAgdGhyZWFkczogYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMsXG4gICAgICAgIG9mZnNldDogYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChiYXRjaC5oYWNrVGhyZWFkcykge1xuICAgICAgc2NyaXB0cy5wdXNoKHtcbiAgICAgICAgc2NyaXB0OiBcImhhY2suanNcIixcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1RocmVhZHMsXG4gICAgICAgIG9mZnNldDogYmF0Y2guaGFja01TQnVmXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcykge1xuICAgICAgc2NyaXB0cy5wdXNoKHtcbiAgICAgICAgc2NyaXB0OiBcIndlYWtlbi5qc1wiLFxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyxcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5oYWNrV2Vha2VuTXNCdWZcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjcmlwdHMuc29ydCgoYSwgYikgPT4gYi50aHJlYWRzIC0gYS50aHJlYWRzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3ljbGUobnM6IE5TLCB0YXJnZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xuICBcbiAgY29uc3QgYmFzZU1TT2Zmc2V0ID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XG4gIGNvbnN0IHdlYWtlblRpbWUgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcbiAgY29uc3QgZ3Jvd1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KSk7XG4gIGNvbnN0IGhhY2tUaW1lID0gTWF0aC5jZWlsKG5zLmdldEhhY2tUaW1lKHRhcmdldCkpO1xuXG4gIGxldCB0b3RhbFRocmVhZHM6IG51bWJlcjtcbiAgbGV0IGJhdGNoZXM6IElIYWNrQmF0Y2hbXTtcbiAgbGV0IHRhcmdldEhhY2tQZXJjZW50ID0gSEFDS19QRVJDRU5UO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xuICAgIGJhdGNoZXMgPSBbXTtcblxuICAgIC8vIGZpcnN0IGJhdGNoIGlzIGFsd2F5cyBHVyBpZiB0aGUgc2VydmVyIGlzIG5vdCBhbHJlYWR5IGF0IG1pbiBzZWN1cml0eSAvIG1heCBtb25leVxuICAgIC8vIGZpbmQgb3V0IGhvdyBtYW55IHRocmVhZHMgYXJlIHJlcXVpcmVkIHRvIGdyb3cgdG8gbWF4XG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KSB8fFxuICAgICAgICBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSlcbiAgICB7XG4gICAgICBjb25zdCBiYXRjaCA9IG5ldyBIYWNrQmF0Y2goKTtcbiAgICAgIGNvbnN0IGJhc2VXZWFrZW4gPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgLSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldClcbiAgICAgIGNvbnN0IGdyb3dNdWx0ID0gTWF0aC5tYXgobnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSAvIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpICsgMSksIDEpO1xuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIGdyb3dNdWx0KSk7XG4gICAgICBsZXQgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiBiYXRjaC5ncm93VGhyZWFkcztcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcblxuICAgICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcbiAgICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XG4gICAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKSwgdG90YWxUaHJlYWRzKTtcbiAgICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcbiAgICAgIH1cblxuICAgICAgY29uc3QgYmF0Y2hNU09mZnNldCA9IGJhc2VNU09mZnNldDtcbiAgICAgIGJhdGNoLndlYWtlblRpbWUgPSB3ZWFrZW5UaW1lO1xuICAgICAgYmF0Y2guZ3Jvd1RpbWUgPSBncm93VGltZTtcbiAgICAgIGJhdGNoLmhhY2tUaW1lID0gaGFja1RpbWU7XG4gICAgICBiYXRjaC5ncm93TVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2guZ3Jvd1RpbWUgKyBNU19CRVRXRUVOX09QRVJBVElPTlM7XG4gICAgICBiYXRjaC5ncm93V2Vha2VuTVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2gud2Vha2VuVGltZSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcblxuICAgICAgYmF0Y2hlcy5wdXNoKGJhdGNoKTtcbiAgICAgIHRvdGFsVGhyZWFkcyAtPSBiYXRjaC50b3RhbFRocmVhZHMoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAodG90YWxUaHJlYWRzID4gMCkge1xuICAgICAgLy8gZnJvbSBub3cgb24gYXNzdW1lIHdlIGFyZSBhdCBtaW5pbXVtIHNlY3VyaXR5LCBtYXhpbXVtIG1vbmV5IGF2YWlsYWJsZVxuICAgICAgY29uc3QgbW9ja1RhcmdldCA9IG5zLmdldFNlcnZlcih0YXJnZXQpO1xuICAgICAgbW9ja1RhcmdldC5oYWNrRGlmZmljdWx0eSA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcbiAgICAgIG1vY2tUYXJnZXQubW9uZXlBdmFpbGFibGUgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xuICAgICAgbW9ja1RhcmdldC5tb25leU1heCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XG5cbiAgICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xuICAgICAgY29uc3QgYmF0Y2hNU09mZnNldCA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpO1xuICAgICAgXG4gICAgICBiYXRjaC53ZWFrZW5UaW1lID0gd2Vha2VuVGltZTtcbiAgICAgIGJhdGNoLmdyb3dUaW1lID0gZ3Jvd1RpbWU7XG4gICAgICBiYXRjaC5oYWNrVGltZSA9IGhhY2tUaW1lO1xuXG4gICAgICBiYXRjaC5oYWNrTVNCdWYgPSAgYmF0Y2hNU09mZnNldCAtIGJhdGNoLmhhY2tUaW1lIC0gTVNfQkVUV0VFTl9PUEVSQVRJT05TO1xuICAgICAgYmF0Y2guaGFja1dlYWtlbk1zQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLndlYWtlblRpbWU7XG4gICAgICBiYXRjaC5ncm93TVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2guZ3Jvd1RpbWUgKyBNU19CRVRXRUVOX09QRVJBVElPTlM7XG4gICAgICBiYXRjaC5ncm93V2Vha2VuTVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2gud2Vha2VuVGltZSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcblxuICAgICAgYmF0Y2guaGFja1RocmVhZHMgPSBNYXRoLmNlaWwodGFyZ2V0SGFja1BlcmNlbnQgLyBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tQZXJjZW50KG1vY2tUYXJnZXQsIG5zLmdldFBsYXllcigpKSk7XG5cbiAgICAgIGxldCBtaXNzZWRPbmNlID0gZmFsc2U7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMgPD0gMCkge1xuICAgICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBiYXRjaC5oYWNrUGVyY2VudCA9IG5zLmZvcm11bGFzLmhhY2tpbmcuaGFja1BlcmNlbnQobW9ja1RhcmdldCwgbnMuZ2V0UGxheWVyKCkpICogYmF0Y2guaGFja1RocmVhZHM7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQ6IG51bWJlciA9IG1vY2tUYXJnZXQubW9uZXlBdmFpbGFibGU7XG4gICAgICAgIGNvbnN0IGZ1dHVyZSA9IGN1cnJlbnQgLSAoY3VycmVudCAqIGJhdGNoLmhhY2tQZXJjZW50KTtcbiAgICAgICAgbW9ja1RhcmdldC5tb25leUF2YWlsYWJsZSA9IGZ1dHVyZTtcbiAgICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhtb2NrVGFyZ2V0LCBucy5nZXRQbGF5ZXIoKSwgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSkgKiBHUk9XX1RIUkVBRF9NVUxUKTtcbiAgICAgICAgbW9ja1RhcmdldC5tb25leUF2YWlsYWJsZSA9IG1vY2tUYXJnZXQubW9uZXlNYXg7XG4gICAgICAgIGJhdGNoLmdhaW4gPSBjdXJyZW50IC0gZnV0dXJlO1xuICAgICAgXG4gICAgICAgIGJhdGNoLmhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoYmF0Y2guaGFja1RocmVhZHMsIHRhcmdldCkgLyBXRUFLX1NFQyk7XG4gICAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKGJhdGNoLmdyb3dUaHJlYWRzIC8gKFdFQUtfU0VDIC8gR1JPV19TRUMpKTtcblxuICAgICAgICBpZiAoYmF0Y2gudG90YWxUaHJlYWRzKCkgPD0gdG90YWxUaHJlYWRzKSB7XG4gICAgICAgICAgdG90YWxUaHJlYWRzIC09IGJhdGNoLnRvdGFsVGhyZWFkcygpO1xuICAgICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKG1pc3NlZE9uY2UpIFxuICAgICAgICAgICAgdG90YWxUaHJlYWRzID0gMDtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgYmF0Y2guaGFja1RocmVhZHMgPSBNYXRoLmZsb29yKGJhdGNoLmhhY2tUaHJlYWRzICogMC43NSk7XG4gICAgICAgIG1pc3NlZE9uY2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBkdXBsaWNhdGUgYmF0Y2ggdW50aWwgdGhlcmUgaXMgbm8gc3BhY2UgbGVmdFxuICAgICAgY29uc3QgYmF0Y2hUaHJlYWRzID0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XG4gICAgICBjb25zdCBhZGRpdGlvbmFsQmF0Y2hlcyA9IE1hdGguZmxvb3IodG90YWxUaHJlYWRzIC8gYmF0Y2hUaHJlYWRzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkaXRpb25hbEJhdGNoZXM7ICsraSkge1xuICAgICAgICBjb25zdCBuZXdCYXRjaCA9IG5ldyBIYWNrQmF0Y2g7XG4gICAgICAgIE9iamVjdC5hc3NpZ24obmV3QmF0Y2gsIGJhdGNoKTtcblxuICAgICAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0ICsgKGJhdGNoZXMubGVuZ3RoICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCk7XG4gICAgICAgIG5ld0JhdGNoLmhhY2tNU0J1ZiA9ICBiYXRjaE1TT2Zmc2V0IC0gbmV3QmF0Y2guaGFja1RpbWUgLSBNU19CRVRXRUVOX09QRVJBVElPTlM7XG4gICAgICAgIG5ld0JhdGNoLmhhY2tXZWFrZW5Nc0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBuZXdCYXRjaC53ZWFrZW5UaW1lO1xuICAgICAgICBuZXdCYXRjaC5ncm93TVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gbmV3QmF0Y2guZ3Jvd1RpbWUgKyBNU19CRVRXRUVOX09QRVJBVElPTlM7XG4gICAgICAgIG5ld0JhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBuZXdCYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xuICAgICAgICBcbiAgICAgICAgYmF0Y2hlcy5wdXNoKG5ld0JhdGNoKTtcbiAgICAgICAgdG90YWxUaHJlYWRzIC09IG5ld0JhdGNoLnRvdGFsVGhyZWFkcygpO1xuXG4gICAgICAgIGlmKGJhdGNoZXMubGVuZ3RoID49IE1BWF9CQVRDSEVTX1BFUl9DWUNMRSkge1xuICAgICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYmF0Y2hlcy5sZW5ndGggPCBNQVhfQkFUQ0hFU19QRVJfQ1lDTEUgfHwgYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmhhY2tQZXJjZW50ID49IEhBQ0tfUEVSQ0VOVF9NQVggfHwgYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmhhY2tQZXJjZW50ID09PSAwKSBicmVhaztcblxuICAgIHRhcmdldEhhY2tQZXJjZW50ICs9IDAuMTtcbiAgfVxuXG4gIGNvbnN0IGN5Y2xlVGhyZWFkcyA9IGJhdGNoZXMucmVkdWNlKChjb3VudCwgYmF0Y2gpID0+IGNvdW50ICsgYmF0Y2gudG90YWxUaHJlYWRzKCksIDApO1xuICBjb25zdCBjeWNsZUdhaW4gPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLmdhaW4sIDApO1xuICBjb25zdCBjeWNsZVRpbWUgPSBiYXNlTVNPZmZzZXQgKyAoYmF0Y2hlcy5sZW5ndGggKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcbiAgaWYgKGJhdGNoZXMubGVuZ3RoID4gMSlcbiAgICBucy50cHJpbnRmKGAke3RhcmdldH06ICR7YmF0Y2hlcy5sZW5ndGh9IEJhdGNoZXMgfCAke2N5Y2xlVGhyZWFkc30gVGhyZWFkcyBbSCR7YmF0Y2hlc1sxXS5oYWNrVGhyZWFkc306SFcke2JhdGNoZXNbMV0uaGFja1dlYWtlblRocmVhZHN9Okcke2JhdGNoZXNbMV0uZ3Jvd1RocmVhZHN9OkdXJHtiYXRjaGVzWzFdLmdyb3dXZWFrZW5UaHJlYWRzfV0gfCAke25zLmZvcm1hdE51bWJlcihjeWNsZUdhaW4sIDMsIDEwMDAsIHRydWUpfSBUb3RhbCAkeyhiYXRjaGVzWzFdLmhhY2tQZXJjZW50KjEwMCkudG9GaXhlZCgyKX0lJSB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcbiAgZWxzZVxuICAgIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogJHtiYXRjaGVzLmxlbmd0aH0gQmF0Y2hlcyB8ICR7Y3ljbGVUaHJlYWRzfSBUaHJlYWRzIFtIJHtiYXRjaGVzWzBdLmhhY2tUaHJlYWRzfTpIVyR7YmF0Y2hlc1swXS5oYWNrV2Vha2VuVGhyZWFkc306RyR7YmF0Y2hlc1swXS5ncm93VGhyZWFkc306R1cke2JhdGNoZXNbMF0uZ3Jvd1dlYWtlblRocmVhZHN9XSB8ICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiwgMywgMTAwMCwgdHJ1ZSl9IFRvdGFsICR7KGJhdGNoZXNbMF0uaGFja1BlcmNlbnQqMTAwKS50b0ZpeGVkKDIpfSUlIHwgJHtmb3JtYXRUaW1lKGJhc2VNU09mZnNldCl9LyR7Zm9ybWF0VGltZShjeWNsZVRpbWUpfSB8IEdhaW4gJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluIC8gKGN5Y2xlVGltZSAvIDEwMDApLCAzLCAxMDAwLCB0cnVlKX0vc2ApO1xuICAvLyBucy50cHJpbnRmKGAke3RhcmdldH06IEZpcnN0IEJhdGNoIHwgaHQ6JHtiYXRjaGVzWzBdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbMF0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzWzBdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbMF0uZ3Jvd1dlYWtlblRocmVhZHN9YClcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBTZWNvbmQgQmF0Y2ggfCBodDoke2JhdGNoZXNbMV0uaGFja1RocmVhZHN9IHwgaHd0OiR7YmF0Y2hlc1sxXS5oYWNrV2Vha2VuVGhyZWFkc30gfCBndDoke2JhdGNoZXNbMV0uZ3Jvd1RocmVhZHN9IHwgZ3d0OiR7YmF0Y2hlc1sxXS5ncm93V2Vha2VuVGhyZWFkc31gKVxuICAvLyBucy50cHJpbnRmKGAke3RhcmdldH06IExhc3QgQmF0Y2ggfCBodDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uaGFja1RocmVhZHN9IHwgaHd0OiR7YmF0Y2hlc1tiYXRjaGVzLmxlbmd0aC0xXS5oYWNrV2Vha2VuVGhyZWFkc30gfCBndDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uZ3Jvd1RocmVhZHN9IHwgZ3d0OiR7YmF0Y2hlc1tiYXRjaGVzLmxlbmd0aC0xXS5ncm93V2Vha2VuVGhyZWFkc31gKVxuXG4gIGNvbnN0IHNjcmlwdHMgPSBnZXRTY3JpcHRDYWxscyhiYXRjaGVzKTtcbiAgbGV0IHNjcmlwdCA9IHNjcmlwdHMuc2hpZnQoKTtcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xuICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG5cbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcbiAgICB3aGlsZSAoc2xhdmVUaHJlYWRzID4gMCkge1xuICAgICAgaWYgKHNjcmlwdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcblxuICAgICAgY29uc3Qgc2NyaXB0VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgc2NyaXB0LnRocmVhZHMpO1xuICAgICAgbnMuZXhlYyhzY3JpcHQuc2NyaXB0LCBzLCB7dGVtcG9yYXJ5OiB0cnVlLCB0aHJlYWRzOiBzY3JpcHRUaHJlYWRzfSwgdGFyZ2V0LCBzY3JpcHQub2Zmc2V0KTtcbiAgICAgIHNsYXZlVGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xuICAgICAgc2NyaXB0LnRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcblxuICAgICAgaWYgKHNjcmlwdC50aHJlYWRzID09PSAwKVxuICAgICAgICBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gIGNvbnN0IGhhY2tTdGF0czogSGFja1N0YXRzID0ge1xuICAgIHRhcmdldDogdGFyZ2V0LFxuICAgIHN0YXJ0OiB0aW1lLFxuICAgIGJlZ2luOiB0aW1lICsgYmFzZU1TT2Zmc2V0LFxuICAgIGVuZDogdGltZSArIGN5Y2xlVGltZSxcbiAgICBnYWluUmF0ZTogY3ljbGVHYWluLFxuICB9O1xuICBucy5jbGVhclBvcnQoMSk7XG4gIG5zLndyaXRlUG9ydCgxLCBKU09OLnN0cmluZ2lmeShoYWNrU3RhdHMpKTtcblxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTsgIFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XG5cbiAgbnMuYXRFeGl0KCgpID0+IHsgbnMuY2xlYXJQb3J0KDEpIH0pO1xuXG4gIGxldCB0YXJnZXQgPSAnbmVjdGFyLW5ldCc7XG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09ICdzdHJpbmcnKSB0YXJnZXQgPSBucy5hcmdzWzBdO1xuXG4gIGlmICghbnMuaGFzUm9vdEFjY2Vzcyh0YXJnZXQpKSB7XG4gICAgQ29sb3JQcmludChucywgWydSZWQxJywgYFNVUEVSIEhBQ0sgRVJST1I6IFVuYWJsZSB0byBoYWNrICR7dGFyZ2V0fSB3aXRob3V0IHJvb3QgYWNjZXNzYF0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcblxuICAgIC8vIGNvcHkgaGd3IHNjcmlwdHMgdG8gc2xhdmUgbWFjaGluZXNcbiAgICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XG4gICAgICBpZiAocyA9PT0gJ2hvbWUnKSBjb250aW51ZTtcbiAgICAgIG5zLnNjcChbJ2hhY2suanMnLCAnZ3Jvdy5qcycsICd3ZWFrZW4uanMnXSwgcyk7XG4gICAgfVxuXG4gICAgYXdhaXQgY3ljbGUobnMsIHRhcmdldCk7XG4gIH1cbn1cbiJdfQ==\",\"filename\":\"super-hack.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tprintf(\\\"Hello World\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLnRwcmludGYoXCJIZWxsbyBXb3JsZFwiKTtcbn1cbiJdfQ==\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog('ALL');\\n    let target = \\\"n00dles\\\";\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\n        target = ns.args[0];\\n    let ms = 0;\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\n        ms = ns.args[1];\\n    await ns.weaken(target, { additionalMsec: ms });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09IFwic3RyaW5nXCIpXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcblxuICBsZXQgbXMgPSAwO1xuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XG5cbiAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCwgeyBhZGRpdGlvbmFsTXNlYzogbXMgfSk7XG59XG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"archive/execute.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers, formatTime, doWeaken, doGrowWeaken, doHackWeakenGrowWeaken, getSlaves, getTotalThreads } from \\\"util\\\";\\nimport { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\n// function calcGainPerMS(ns: NS, target: string): number {\\n//   const servers = getAllServers(ns);\\n//   const slaves = servers.filter(s => s !== 'home').filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s));\\n//   const totalThreads = slaves.reduce((count, slave) => count + Math.floor(ns.getServerMaxRam(slave) / HGW_RAM), 0);\\n//   const weakTime = Math.ceil(ns.getWeakenTime(target));\\n//   const growSec = 0.004; // ns.growthAnalyzeSecurity(5, 'omega-net');\\n//   const weakSec = 0.05; // ns.weakenAnalyze(1);\\n//   const current = ns.getServerMoneyAvailable(target);\\n//   let hackThreads = 1;\\n//   let maxGain = 0;\\n//   while (true) {\\n//     const hackPercent = ns.hackAnalyze(target) * hackThreads;\\n//     if (hackPercent > .9) break;\\n//     const future = current - (current * hackPercent);\\n//     const growMult = current / future;\\n//     // ns.tprintf(`${hackPercent} ${growMult}`);\\n//     const growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\n//     const gain = current - future;\\n//     const hwT = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / weakSec);\\n//     const gwT = Math.ceil(growThreads / (weakSec / growSec));\\n//     const totalHWGWThreads = hackThreads+hwT+growThreads+gwT;\\n//     if (totalHWGWThreads > totalThreads) break;\\n//     if (gain > maxGain) {\\n//       maxGain = gain;\\n//     }\\n//     hackThreads++;\\n//   }\\n//   return maxGain / weakTime;\\n// }\\nexport async function main(ns) {\\n    const servers = getAllServers(ns);\\n    const slaves = getSlaves(ns);\\n    const totalThreads = getTotalThreads(ns, slaves);\\n    ns.tprintf(`  Total Threads: ${totalThreads}`);\\n    const weakenPerRound = totalThreads * 0.05;\\n    const targets = servers.filter(s => ns.getServerMaxMoney(s) > 0).filter(s => {\\n        const weakenTime = ns.getWeakenTime(s);\\n        const securityLevel = ns.getServerSecurityLevel(s);\\n        const minSecurityLevel = ns.getServerMinSecurityLevel(s);\\n        const weakenRounds = Math.ceil((securityLevel - minSecurityLevel) / weakenPerRound);\\n        const fullWeakenTime = weakenTime * weakenRounds;\\n        return fullWeakenTime < 1000 * 60 * 60 * 2;\\n    }).sort((a, b) => ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b));\\n    const data = targets.map(s => {\\n        const weakenTime = ns.getWeakenTime(s);\\n        const securityLevel = ns.getServerSecurityLevel(s);\\n        const minSecurityLevel = ns.getServerMinSecurityLevel(s);\\n        const weakenRounds = Math.ceil((securityLevel - minSecurityLevel) / weakenPerRound);\\n        const fullWeakenTime = weakenTime * weakenRounds;\\n        return [\\n            ` ${s}`,\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\n            minSecurityLevel.toString().padStart(9),\\n            securityLevel.toString().padStart(9),\\n            formatTime(weakenTime).padStart(12),\\n            // weakenRounds.toString().padStart(7),\\n            formatTime(fullWeakenTime).padStart(12),\\n            //weakenTime.toString(),\\n            ns.formatNumber(ns.getServerMoneyAvailable(s), 3, 1000, true).padStart(10),\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(10),\\n            // ns.formatNumber(calcGainPerMS(ns, s), 3, 1000, true).padStart(10),\\n        ];\\n    });\\n    const columns = [\\n        { header: ' Servers', width: 20 },\\n        { header: ' Base Sec', width: 10 },\\n        { header: '  Min Sec', width: 10 },\\n        { header: '      Sec', width: 10 },\\n        { header: ' Weaken Time', width: 13 },\\n        // { header: ' Rounds', width: 8 },\\n        { header: ' Full Weaken', width: 13 },\\n        { header: '     Money', width: 11 },\\n        { header: ' Max Money', width: 11 },\\n        // { header: '   Gain/ms', width: 11 },\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n    if (ns.args.length > 0 && ns.args[0] === 'PEEK') {\\n        return;\\n    }\\n    // Weaken always reduces security by 0.05 per thread\\n    // copy hgw scripts to slave machines\\n    for (const s of slaves) {\\n        if (s === 'home')\\n            continue;\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\n    }\\n    let target = 'phantasy';\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\n        target = ns.args[0];\\n    // fully weaken the target\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        await doWeaken(ns, target);\\n    }\\n    ns.tprintf(`${target} fully weakened`);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\n        await doGrowWeaken(ns, target);\\n    ns.tprintf(`${target} fully grown`);\\n    while (true) {\\n        await doHackWeakenGrowWeaken(ns, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcmNoaXZlL2V4ZWN1dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdILE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5RCwyREFBMkQ7QUFDM0QsdUNBQXVDO0FBQ3ZDLG9IQUFvSDtBQUNwSCxzSEFBc0g7QUFFdEgsMERBQTBEO0FBRTFELHdFQUF3RTtBQUN4RSxrREFBa0Q7QUFFbEQsd0RBQXdEO0FBQ3hELHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLGdFQUFnRTtBQUNoRSxtQ0FBbUM7QUFDbkMsd0RBQXdEO0FBQ3hELHlDQUF5QztBQUN6QyxtREFBbUQ7QUFDbkQseUVBQXlFO0FBQ3pFLHFDQUFxQztBQUVyQyxvRkFBb0Y7QUFDcEYsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSxrREFBa0Q7QUFFbEQsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUN4QixRQUFRO0FBRVIscUJBQXFCO0FBQ3JCLE1BQU07QUFFTiwrQkFBK0I7QUFDL0IsSUFBSTtBQUVKLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWpELEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLFlBQVksRUFBRSxDQUFDLENBQUM7SUFFL0MsTUFBTSxj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c0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQy9FLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1QjtJQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLGlCQUFpQixDQUFDLENBQUM7SUFFdkMsT0FBTSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUNyRSxNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFakMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE1BQU0sY0FBYyxDQUFDLENBQUM7SUFFcEMsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMxQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMsIGZvcm1hdFRpbWUsIGRvV2Vha2VuLCBkb0dyb3dXZWFrZW4sIGRvSGFja1dlYWtlbkdyb3dXZWFrZW4sIGdldFNsYXZlcywgZ2V0VG90YWxUaHJlYWRzIH0gZnJvbSBcInV0aWxcIjtcbmltcG9ydCB7IFByaW50VGFibGUsIENvbG9yUHJpbnQsIERlZmF1bHRTdHlsZSB9IGZyb20gXCJ0YWJsZXNcIjtcblxuLy8gZnVuY3Rpb24gY2FsY0dhaW5QZXJNUyhuczogTlMsIHRhcmdldDogc3RyaW5nKTogbnVtYmVyIHtcbi8vICAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xuLy8gICBjb25zdCBzbGF2ZXMgPSBzZXJ2ZXJzLmZpbHRlcihzID0+IHMgIT09ICdob21lJykuZmlsdGVyKHMgPT4gbnMuZ2V0U2VydmVyTWF4UmFtKHMpID4gMCAmJiBucy5oYXNSb290QWNjZXNzKHMpKTtcbi8vICAgY29uc3QgdG90YWxUaHJlYWRzID0gc2xhdmVzLnJlZHVjZSgoY291bnQsIHNsYXZlKSA9PiBjb3VudCArIE1hdGguZmxvb3IobnMuZ2V0U2VydmVyTWF4UmFtKHNsYXZlKSAvIEhHV19SQU0pLCAwKTtcblxuLy8gICBjb25zdCB3ZWFrVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xuXG4vLyAgIGNvbnN0IGdyb3dTZWMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDUsICdvbWVnYS1uZXQnKTtcbi8vICAgY29uc3Qgd2Vha1NlYyA9IDAuMDU7IC8vIG5zLndlYWtlbkFuYWx5emUoMSk7XG5cbi8vICAgY29uc3QgY3VycmVudCA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XG4vLyAgIGxldCBoYWNrVGhyZWFkcyA9IDE7XG4vLyAgIGxldCBtYXhHYWluID0gMDtcbi8vICAgd2hpbGUgKHRydWUpIHtcbi8vICAgICBjb25zdCBoYWNrUGVyY2VudCA9IG5zLmhhY2tBbmFseXplKHRhcmdldCkgKiBoYWNrVGhyZWFkcztcbi8vICAgICBpZiAoaGFja1BlcmNlbnQgPiAuOSkgYnJlYWs7XG4vLyAgICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xuLy8gICAgIGNvbnN0IGdyb3dNdWx0ID0gY3VycmVudCAvIGZ1dHVyZTtcbi8vICAgICAvLyBucy50cHJpbnRmKGAke2hhY2tQZXJjZW50fSAke2dyb3dNdWx0fWApO1xuLy8gICAgIGNvbnN0IGdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkpO1xuLy8gICAgIGNvbnN0IGdhaW4gPSBjdXJyZW50IC0gZnV0dXJlO1xuXG4vLyAgICAgY29uc3QgaHdUID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoaGFja1RocmVhZHMsIHRhcmdldCkgLyB3ZWFrU2VjKTtcbi8vICAgICBjb25zdCBnd1QgPSBNYXRoLmNlaWwoZ3Jvd1RocmVhZHMgLyAod2Vha1NlYyAvIGdyb3dTZWMpKTtcbi8vICAgICBjb25zdCB0b3RhbEhXR1dUaHJlYWRzID0gaGFja1RocmVhZHMraHdUK2dyb3dUaHJlYWRzK2d3VDtcbi8vICAgICBpZiAodG90YWxIV0dXVGhyZWFkcyA+IHRvdGFsVGhyZWFkcykgYnJlYWs7XG5cbi8vICAgICBpZiAoZ2FpbiA+IG1heEdhaW4pIHtcbi8vICAgICAgIG1heEdhaW4gPSBnYWluO1xuLy8gICAgIH1cbiAgICBcbi8vICAgICBoYWNrVGhyZWFkcysrO1xuLy8gICB9XG5cbi8vICAgcmV0dXJuIG1heEdhaW4gLyB3ZWFrVGltZTtcbi8vIH1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKTtcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcbiAgY29uc3QgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xuXG4gIG5zLnRwcmludGYoYCAgVG90YWwgVGhyZWFkczogJHt0b3RhbFRocmVhZHN9YCk7XG5cbiAgY29uc3Qgd2Vha2VuUGVyUm91bmQgPSB0b3RhbFRocmVhZHMgKiAwLjA1O1xuXG4gIGNvbnN0IHRhcmdldHMgPSBzZXJ2ZXJzLmZpbHRlcihzID0+IG5zLmdldFNlcnZlck1heE1vbmV5KHMpID4gMCkuZmlsdGVyKHMgPT4ge1xuICAgIGNvbnN0IHdlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHMpO1xuICAgIGNvbnN0IHNlY3VyaXR5TGV2ZWwgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHMpO1xuICAgIGNvbnN0IG1pblNlY3VyaXR5TGV2ZWwgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHMpO1xuICAgIGNvbnN0IHdlYWtlblJvdW5kcyA9IE1hdGguY2VpbCgoc2VjdXJpdHlMZXZlbCAtIG1pblNlY3VyaXR5TGV2ZWwpIC8gd2Vha2VuUGVyUm91bmQpO1xuICAgIGNvbnN0IGZ1bGxXZWFrZW5UaW1lID0gd2Vha2VuVGltZSAqIHdlYWtlblJvdW5kcztcblxuICAgIHJldHVybiBmdWxsV2Vha2VuVGltZSA8IDEwMDAgKiA2MCAqIDYwICogMjtcbiAgfSkuc29ydCgoYSwgYikgPT4gbnMuZ2V0U2VydmVyTWF4TW9uZXkoYSkgLSBucy5nZXRTZXJ2ZXJNYXhNb25leShiKSk7XG5cbiAgY29uc3QgZGF0YSA9IHRhcmdldHMubWFwKHMgPT4ge1xuICAgIGNvbnN0IHdlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHMpO1xuICAgIGNvbnN0IHNlY3VyaXR5TGV2ZWwgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHMpO1xuICAgIGNvbnN0IG1pblNlY3VyaXR5TGV2ZWwgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHMpO1xuICAgIGNvbnN0IHdlYWtlblJvdW5kcyA9IE1hdGguY2VpbCgoc2VjdXJpdHlMZXZlbCAtIG1pblNlY3VyaXR5TGV2ZWwpIC8gd2Vha2VuUGVyUm91bmQpO1xuICAgIGNvbnN0IGZ1bGxXZWFrZW5UaW1lID0gd2Vha2VuVGltZSAqIHdlYWtlblJvdW5kcztcblxuICAgIHJldHVybiBbXG4gICAgICBgICR7c31gLFxuICAgICAgbnMuZ2V0U2VydmVyQmFzZVNlY3VyaXR5TGV2ZWwocykudG9TdHJpbmcoKS5wYWRTdGFydCg5KSxcbiAgICAgIG1pblNlY3VyaXR5TGV2ZWwudG9TdHJpbmcoKS5wYWRTdGFydCg5KSxcbiAgICAgIHNlY3VyaXR5TGV2ZWwudG9TdHJpbmcoKS5wYWRTdGFydCg5KSxcbiAgICAgIGZvcm1hdFRpbWUod2Vha2VuVGltZSkucGFkU3RhcnQoMTIpLFxuICAgICAgLy8gd2Vha2VuUm91bmRzLnRvU3RyaW5nKCkucGFkU3RhcnQoNyksXG4gICAgICBmb3JtYXRUaW1lKGZ1bGxXZWFrZW5UaW1lKS5wYWRTdGFydCgxMiksXG4gICAgICAvL3dlYWtlblRpbWUudG9TdHJpbmcoKSxcbiAgICAgIG5zLmZvcm1hdE51bWJlcihucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzKSwgMywgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoMTApLFxuICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFNlcnZlck1heE1vbmV5KHMpLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCksXG4gICAgICAvLyBucy5mb3JtYXROdW1iZXIoY2FsY0dhaW5QZXJNUyhucywgcyksIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKSxcbiAgICBdXG4gIH0pO1xuXG5cdGNvbnN0IGNvbHVtbnMgPSBbXG5cdFx0eyBoZWFkZXI6ICcgU2VydmVycycsIHdpZHRoOiAyMCB9LFxuXHRcdHsgaGVhZGVyOiAnIEJhc2UgU2VjJywgd2lkdGg6IDEwIH0sXG4gICAgeyBoZWFkZXI6ICcgIE1pbiBTZWMnLCB3aWR0aDogMTAgfSxcbiAgICB7IGhlYWRlcjogJyAgICAgIFNlYycsIHdpZHRoOiAxMCB9LFxuICAgIHsgaGVhZGVyOiAnIFdlYWtlbiBUaW1lJywgd2lkdGg6IDEzIH0sXG4gICAgLy8geyBoZWFkZXI6ICcgUm91bmRzJywgd2lkdGg6IDggfSxcbiAgICB7IGhlYWRlcjogJyBGdWxsIFdlYWtlbicsIHdpZHRoOiAxMyB9LFxuICAgIHsgaGVhZGVyOiAnICAgICBNb25leScsIHdpZHRoOiAxMSB9LFxuXHRcdHsgaGVhZGVyOiAnIE1heCBNb25leScsIHdpZHRoOiAxMSB9LFxuICAgIC8vIHsgaGVhZGVyOiAnICAgR2Fpbi9tcycsIHdpZHRoOiAxMSB9LFxuXHRdO1xuXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcblxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIG5zLmFyZ3NbMF0gPT09ICdQRUVLJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlYWtlbiBhbHdheXMgcmVkdWNlcyBzZWN1cml0eSBieSAwLjA1IHBlciB0aHJlYWRcblxuICAvLyBjb3B5IGhndyBzY3JpcHRzIHRvIHNsYXZlIG1hY2hpbmVzXG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcbiAgICBpZiAocyA9PT0gJ2hvbWUnKSBjb250aW51ZTtcbiAgICBucy5zY3AoWydoYWNrLmpzJywgJ2dyb3cuanMnLCAnd2Vha2VuLmpzJ10sIHMpO1xuICB9XG5cbiAgbGV0IHRhcmdldCA9ICdwaGFudGFzeSc7XG4gIGlmIChucy5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG5zLmFyZ3NbMF0gPT09ICdzdHJpbmcnKSB0YXJnZXQgPSBucy5hcmdzWzBdO1xuXG4gIC8vIGZ1bGx5IHdlYWtlbiB0aGUgdGFyZ2V0XG4gIHdoaWxlIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCkpIHtcbiAgICBhd2FpdCBkb1dlYWtlbihucywgdGFyZ2V0KTtcbiAgfVxuXG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fSBmdWxseSB3ZWFrZW5lZGApO1xuXG4gIHdoaWxlKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKVxuICAgIGF3YWl0IGRvR3Jvd1dlYWtlbihucywgdGFyZ2V0KTtcblxuICBucy50cHJpbnRmKGAke3RhcmdldH0gZnVsbHkgZ3Jvd25gKTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGF3YWl0IGRvSGFja1dlYWtlbkdyb3dXZWFrZW4obnMsIHRhcmdldCk7XG4gIH1cbn1cbiJdfQ==\",\"filename\":\"archive/execute.js\",\"server\":\"home\"}}],[\"archive/simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, HACK_PERCENT, MS_BETWEEN_OPERATIONS, waitForHGWScripts } from \\\"util\\\";\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\nexport function autocomplete(data, args) {\\n    return data.servers; // This script autocompletes the list of servers.\\n}\\nclass HackBatch {\\n    growThreads = 0;\\n    growWeakenThreads = 0;\\n    hackThreads = 0;\\n    hackWeakenThreads = 0;\\n    hackTime = 0;\\n    growTime = 0;\\n    weakenTime = 0;\\n    growMSBuf = 0;\\n    growWeakenMSBuf = 0;\\n    hackMSBuf = 0;\\n    hackWeakenMsBuf = 0;\\n    gain = 0;\\n    totalThreads() {\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\n    }\\n}\\nfunction getScriptCalls(batches) {\\n    const scripts = [];\\n    for (const batch of batches) {\\n        if (batch.growThreads > 0) {\\n            scripts.push({\\n                script: \\\"grow.js\\\",\\n                threads: batch.growThreads,\\n                offset: batch.growMSBuf\\n            });\\n        }\\n        if (batch.growWeakenThreads) {\\n            scripts.push({\\n                script: \\\"weaken.js\\\",\\n                threads: batch.growWeakenThreads,\\n                offset: batch.growWeakenMSBuf\\n            });\\n        }\\n        if (batch.hackThreads) {\\n            scripts.push({\\n                script: \\\"hack.js\\\",\\n                threads: batch.hackThreads,\\n                offset: batch.hackMSBuf\\n            });\\n        }\\n        if (batch.hackWeakenThreads) {\\n            scripts.push({\\n                script: \\\"weaken.js\\\",\\n                threads: batch.hackWeakenThreads,\\n                offset: batch.hackWeakenMsBuf\\n            });\\n        }\\n    }\\n    return scripts.sort((a, b) => b.threads - a.threads);\\n}\\nasync function cycle(ns, target) {\\n    const slaves = getSlaves(ns);\\n    let totalThreads = getTotalThreads(ns, slaves);\\n    const batches = [];\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\n    // first batch is always GW if the server is not already at min security / max money\\n    // find out how many threads are required to grow to max\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        const batch = new HackBatch();\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\n        const growMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\n            growSecIncrease = GROW_SEC * totalThreads;\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\n        }\\n        const batchMSOffset = baseMSOffset;\\n        batch.weakenTime = Math.ceil(ns.getWeakenTime(target));\\n        batch.growTime = Math.ceil(ns.getGrowTime(target));\\n        batch.hackTime = Math.ceil(ns.getHackTime(target));\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\n        batches.push(batch);\\n        totalThreads = 0;\\n    }\\n    while (totalThreads > 0) {\\n        // if (batches.length > 5) break;\\n        // from now on assume we are at minimum security, maximum money available\\n        const batch = new HackBatch();\\n        const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\n        batch.hackTime = ns.getHackTime(target);\\n        batch.growTime = ns.getGrowTime(target);\\n        batch.weakenTime = ns.getWeakenTime(target);\\n        batch.hackMSBuf = batchMSOffset - batch.hackTime - MS_BETWEEN_OPERATIONS;\\n        batch.hackWeakenMsBuf = batchMSOffset - batch.weakenTime;\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\n        // start with hack 50%\\n        batch.hackThreads = Math.ceil(HACK_PERCENT / ns.hackAnalyze(target));\\n        while (true) {\\n            if (batch.hackThreads <= 0) {\\n                totalThreads = 0;\\n                break;\\n            }\\n            const hackPercent = ns.hackAnalyze(target) * batch.hackThreads;\\n            const current = ns.getServerMaxMoney(target);\\n            const future = current - (current * hackPercent);\\n            const growMult = current / future;\\n            batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult) * 1.5);\\n            batch.gain = current - future;\\n            batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, target) / WEAK_SEC);\\n            batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\n            if (batch.totalThreads() <= totalThreads) {\\n                totalThreads -= batch.totalThreads();\\n                batches.push(batch);\\n                break;\\n            }\\n            batch.hackThreads--;\\n        }\\n        if (batches.length > 1000)\\n            break;\\n    }\\n    // if we're doing a lot of batches, cancel the last 2 and re-assing the threads to grow/weaken to prep for the next cycle\\n    if (batches.length > 20) {\\n        let trashThreads = 0;\\n        const lastBatch = batches.pop();\\n        trashThreads += lastBatch ? lastBatch.totalThreads() : 0;\\n        trashThreads += batches[batches.length - 1].totalThreads();\\n        const growSecIncrease = GROW_SEC * trashThreads;\\n        batches[batches.length - 1].growWeakenThreads = Math.ceil(growSecIncrease / WEAK_SEC) * 2;\\n        batches[batches.length - 1].growThreads = trashThreads - batches[batches.length - 1].growWeakenThreads;\\n        batches[batches.length - 1].hackThreads = 0;\\n        batches[batches.length - 1].hackWeakenThreads = 0;\\n    }\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\n    ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\n    // ns.tprintf(`${target}: Batch 1 | ht:${batches[0].hackThreads} | hwt:${batches[0].hackWeakenThreads} | gt:${batches[0].growThreads} | gwt:${batches[0].growWeakenThreads}`)\\n    // ns.tprintf(`${target}: Batch 2 | ht:${batches[1].hackThreads} | hwt:${batches[1].hackWeakenThreads} | gt:${batches[1].growThreads} | gwt:${batches[1].growWeakenThreads}`)\\n    // ns.tprintf(`${target}: Batch N | ht:${batches[batches.length-1].hackThreads} | hwt:${batches[batches.length-1].hackWeakenThreads} | gt:${batches[batches.length-1].growThreads} | gwt:${batches[batches.length-1].growWeakenThreads}`)\\n    const scripts = getScriptCalls(batches);\\n    let script = scripts.shift();\\n    for (const s of slaves) {\\n        if (script === undefined)\\n            break;\\n        let slaveThreads = getSlaveThreads(ns, s);\\n        while (slaveThreads > 0) {\\n            if (script === undefined)\\n                break;\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\n            slaveThreads -= scriptThreads;\\n            script.threads -= scriptThreads;\\n            if (script.threads === 0)\\n                script = scripts.shift();\\n        }\\n    }\\n    await waitForHGWScripts(ns, slaves);\\n}\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const slaves = getSlaves(ns);\\n    // copy hgw scripts to slave machines\\n    for (const s of slaves) {\\n        if (s === 'home')\\n            continue;\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\n    }\\n    let target = 'nectar-net';\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\n        target = ns.args[0];\\n    while (true) {\\n        await cycle(ns, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXJjaGl2ZS9zaW1wbGUtaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2SSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyw0Q0FBNEM7QUFDcEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0FBRTlDLG9KQUFvSjtBQUNwSixNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFTO0lBQy9DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlEQUFpRDtBQUN4RSxDQUFDO0FBc0JELE1BQU0sU0FBUztJQUNiLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBRXRCLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVmLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLElBQUksR0FBRyxDQUFDLENBQUM7SUFFVCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUMvRixDQUFDO0NBQ0Y7QUFRRCxTQUFTLGNBQWMsQ0FBQyxPQUFxQjtJQUMzQyxN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U0FDNUI7S0FDRjtJQUVELE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLHFDQUFxQztJQUNyQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtRQUN0QixJQUFJLENBQUMsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNoRDtJQUVELElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQztJQUMxQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlFLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3pCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgZm9ybWF0VGltZSwgZ2V0U2xhdmVzLCBnZXRTbGF2ZVRocmVhZHMsIGdldFRvdGFsVGhyZWFkcywgSEFDS19QRVJDRU5ULCBNU19CRVRXRUVOX09QRVJBVElPTlMsIHdhaXRGb3JIR1dTY3JpcHRzIH0gZnJvbSBcInV0aWxcIjtcblxuY29uc3QgR1JPV19TRUMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDEsICdvbWVnYS1uZXQnKTtcbmNvbnN0IFdFQUtfU0VDID0gMC4wNTsgLy8gbnMud2Vha2VuQW5hbHl6ZSgxKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZXhwb3J0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZShkYXRhOiBhbnksIGFyZ3M6IGFueSk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIGRhdGEuc2VydmVyczsgLy8gVGhpcyBzY3JpcHQgYXV0b2NvbXBsZXRlcyB0aGUgbGlzdCBvZiBzZXJ2ZXJzLlxufVxuXG5pbnRlcmZhY2UgSUhhY2tCYXRjaCB7XG4gIGdyb3dUaHJlYWRzOiBudW1iZXI7XG4gIGdyb3dXZWFrZW5UaHJlYWRzOiBudW1iZXI7XG4gIGhhY2tUaHJlYWRzOiBudW1iZXI7XG4gIGhhY2tXZWFrZW5UaHJlYWRzOiBudW1iZXI7XG5cbiAgaGFja1RpbWU6IG51bWJlcjtcbiAgZ3Jvd1RpbWU6IG51bWJlcjtcbiAgd2Vha2VuVGltZTogbnVtYmVyO1xuXG4gIGdyb3dNU0J1ZjogbnVtYmVyO1xuICBncm93V2Vha2VuTVNCdWY6IG51bWJlcjtcbiAgaGFja01TQnVmOiBudW1iZXI7XG4gIGhhY2tXZWFrZW5Nc0J1ZjogbnVtYmVyO1xuXG4gIGdhaW46IG51bWJlcjtcblxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyO1xufVxuXG5jbGFzcyBIYWNrQmF0Y2ggaW1wbGVtZW50cyBJSGFja0JhdGNoIHtcbiAgZ3Jvd1RocmVhZHMgPSAwO1xuICBncm93V2Vha2VuVGhyZWFkcyA9IDA7XG4gIGhhY2tUaHJlYWRzID0gMDtcbiAgaGFja1dlYWtlblRocmVhZHMgPSAwO1xuXG4gIGhhY2tUaW1lID0gMDtcbiAgZ3Jvd1RpbWUgPSAwO1xuICB3ZWFrZW5UaW1lID0gMDtcblxuICBncm93TVNCdWYgPSAwO1xuICBncm93V2Vha2VuTVNCdWYgPSAwO1xuICBoYWNrTVNCdWYgPSAwO1xuICBoYWNrV2Vha2VuTXNCdWYgPSAwO1xuXG4gIGdhaW4gPSAwO1xuXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdyb3dUaHJlYWRzICsgdGhpcy5ncm93V2Vha2VuVGhyZWFkcyArIHRoaXMuaGFja1RocmVhZHMgKyB0aGlzLmhhY2tXZWFrZW5UaHJlYWRzO1xuICB9XG59XG5cbmludGVyZmFjZSBJU2NyaXB0Q2FsbCB7XG4gIHNjcmlwdDogc3RyaW5nO1xuICB0aHJlYWRzOiBudW1iZXI7XG4gIG9mZnNldDogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JpcHRDYWxscyhiYXRjaGVzOiBJSGFja0JhdGNoW10pOiBJU2NyaXB0Q2FsbFtdIHtcbiAgY29uc3Qgc2NyaXB0czogSVNjcmlwdENhbGxbXSA9IFtdO1xuICBmb3IgKGNvbnN0IGJhdGNoIG9mIGJhdGNoZXMpIHtcbiAgICBpZiAoYmF0Y2guZ3Jvd1RocmVhZHMgPiAwKSB7XG4gICAgICBzY3JpcHRzLnB1c2goe1xuICAgICAgICBzY3JpcHQ6IFwiZ3Jvdy5qc1wiLFxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5ncm93VGhyZWFkcyxcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5ncm93TVNCdWZcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzKSB7XG4gICAgICBzY3JpcHRzLnB1c2goe1xuICAgICAgICBzY3JpcHQ6IFwid2Vha2VuLmpzXCIsXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzLFxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dXZWFrZW5NU0J1ZlxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMpIHtcbiAgICAgIHNjcmlwdHMucHVzaCh7XG4gICAgICAgIHNjcmlwdDogXCJoYWNrLmpzXCIsXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmhhY2tUaHJlYWRzLFxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmhhY2tNU0J1ZlxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoYmF0Y2guaGFja1dlYWtlblRocmVhZHMpIHtcbiAgICAgIHNjcmlwdHMucHVzaCh7XG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1dlYWtlblRocmVhZHMsXG4gICAgICAgIG9mZnNldDogYmF0Y2guaGFja1dlYWtlbk1zQnVmXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY3JpcHRzLnNvcnQoKGEsIGIpID0+IGIudGhyZWFkcyAtIGEudGhyZWFkcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcbiAgbGV0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcblxuICBjb25zdCBiYXRjaGVzOiBJSGFja0JhdGNoW10gPSBbXTtcblxuICBjb25zdCBiYXNlTVNPZmZzZXQgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcblxuICAvLyBmaXJzdCBiYXRjaCBpcyBhbHdheXMgR1cgaWYgdGhlIHNlcnZlciBpcyBub3QgYWxyZWFkeSBhdCBtaW4gc2VjdXJpdHkgLyBtYXggbW9uZXlcbiAgLy8gZmluZCBvdXQgaG93IG1hbnkgdGhyZWFkcyBhcmUgcmVxdWlyZWQgdG8gZ3JvdyB0byBtYXhcbiAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KSB8fFxuICAgICAgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSA8IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkpXG4gIHtcbiAgICBjb25zdCBiYXRjaCA9IG5ldyBIYWNrQmF0Y2goKTtcbiAgICBjb25zdCBiYXNlV2Vha2VuID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpIC0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpXG4gICAgY29uc3QgZ3Jvd011bHQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcbiAgICBiYXRjaC5ncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgZ3Jvd011bHQpKTtcbiAgICBsZXQgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiBiYXRjaC5ncm93VGhyZWFkcztcbiAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XG5cbiAgICBpZiAoYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgKyBiYXRjaC5ncm93VGhyZWFkcyA+IHRvdGFsVGhyZWFkcykge1xuICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XG4gICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XG4gICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IHRvdGFsVGhyZWFkcyAtIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzO1xuICAgIH1cblxuICAgIGNvbnN0IGJhdGNoTVNPZmZzZXQgPSBiYXNlTVNPZmZzZXQ7XG4gICAgYmF0Y2gud2Vha2VuVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xuICAgIGJhdGNoLmdyb3dUaW1lID0gTWF0aC5jZWlsKG5zLmdldEdyb3dUaW1lKHRhcmdldCkpO1xuICAgIGJhdGNoLmhhY2tUaW1lID0gTWF0aC5jZWlsKG5zLmdldEhhY2tUaW1lKHRhcmdldCkpO1xuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcbiAgICBiYXRjaC5ncm93V2Vha2VuTVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2gud2Vha2VuVGltZSArIChNU19CRVRXRUVOX09QRVJBVElPTlMgKiAyKTtcblxuICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XG4gICAgdG90YWxUaHJlYWRzID0gMDtcbiAgfVxuXG4gIHdoaWxlICh0b3RhbFRocmVhZHMgPiAwICkge1xuICAgIC8vIGlmIChiYXRjaGVzLmxlbmd0aCA+IDUpIGJyZWFrO1xuICAgIC8vIGZyb20gbm93IG9uIGFzc3VtZSB3ZSBhcmUgYXQgbWluaW11bSBzZWN1cml0eSwgbWF4aW11bSBtb25leSBhdmFpbGFibGVcbiAgICBjb25zdCBiYXRjaCA9IG5ldyBIYWNrQmF0Y2goKTtcbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0ICsgKGJhdGNoZXMubGVuZ3RoICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNClcbiAgICBiYXRjaC5oYWNrVGltZSA9IG5zLmdldEhhY2tUaW1lKHRhcmdldCk7XG4gICAgYmF0Y2guZ3Jvd1RpbWUgPSBucy5nZXRHcm93VGltZSh0YXJnZXQpO1xuICAgIGJhdGNoLndlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHRhcmdldCk7XG4gICAgYmF0Y2guaGFja01TQnVmID0gIGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5oYWNrVGltZSAtIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcbiAgICBiYXRjaC5oYWNrV2Vha2VuTXNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2gud2Vha2VuVGltZTtcbiAgICBiYXRjaC5ncm93TVNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2guZ3Jvd1RpbWUgKyBNU19CRVRXRUVOX09QRVJBVElPTlM7XG4gICAgYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLndlYWtlblRpbWUgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XG5cbiAgICAvLyBzdGFydCB3aXRoIGhhY2sgNTAlXG4gICAgYmF0Y2guaGFja1RocmVhZHMgPSBNYXRoLmNlaWwoSEFDS19QRVJDRU5UIC8gbnMuaGFja0FuYWx5emUodGFyZ2V0KSk7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGJhdGNoLmhhY2tUaHJlYWRzIDw9IDApIHtcbiAgICAgICAgdG90YWxUaHJlYWRzID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuaGFja0FuYWx5emUodGFyZ2V0KSAqIGJhdGNoLmhhY2tUaHJlYWRzO1xuICAgICAgY29uc3QgY3VycmVudCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XG4gICAgICBjb25zdCBmdXR1cmUgPSBjdXJyZW50IC0gKGN1cnJlbnQgKiBoYWNrUGVyY2VudCk7XG4gICAgICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XG4gICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgZ3Jvd011bHQpICogMS41KTtcbiAgICAgIGJhdGNoLmdhaW4gPSBjdXJyZW50IC0gZnV0dXJlO1xuICAgIFxuICAgICAgYmF0Y2guaGFja1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVTZWN1cml0eShiYXRjaC5oYWNrVGhyZWFkcywgdGFyZ2V0KSAvIFdFQUtfU0VDKTtcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKGJhdGNoLmdyb3dUaHJlYWRzIC8gKFdFQUtfU0VDIC8gR1JPV19TRUMpKTtcblxuICAgICAgaWYgKGJhdGNoLnRvdGFsVGhyZWFkcygpIDw9IHRvdGFsVGhyZWFkcykge1xuICAgICAgICB0b3RhbFRocmVhZHMgLT0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XG4gICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBiYXRjaC5oYWNrVGhyZWFkcy0tO1xuICAgIH1cblxuICAgIGlmIChiYXRjaGVzLmxlbmd0aCA+IDEwMDApIGJyZWFrO1xuICB9XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgYSBsb3Qgb2YgYmF0Y2hlcywgY2FuY2VsIHRoZSBsYXN0IDIgYW5kIHJlLWFzc2luZyB0aGUgdGhyZWFkcyB0byBncm93L3dlYWtlbiB0byBwcmVwIGZvciB0aGUgbmV4dCBjeWNsZVxuICBpZiAoYmF0Y2hlcy5sZW5ndGggPiAyMCkge1xuICAgIGxldCB0cmFzaFRocmVhZHMgPSAwO1xuICAgIGNvbnN0IGxhc3RCYXRjaCA9IGJhdGNoZXMucG9wKCk7XG4gICAgdHJhc2hUaHJlYWRzICs9IGxhc3RCYXRjaCA/IGxhc3RCYXRjaC50b3RhbFRocmVhZHMoKSA6IDA7XG4gICAgdHJhc2hUaHJlYWRzICs9IGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS50b3RhbFRocmVhZHMoKTtcblxuICAgIGNvbnN0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogdHJhc2hUaHJlYWRzO1xuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChncm93U2VjSW5jcmVhc2UgLyBXRUFLX1NFQykgKiAyO1xuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5ncm93VGhyZWFkcyA9IHRyYXNoVGhyZWFkcyAtIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5ncm93V2Vha2VuVGhyZWFkcztcbiAgICBiYXRjaGVzW2JhdGNoZXMubGVuZ3RoIC0gMV0uaGFja1RocmVhZHMgPSAwO1xuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5oYWNrV2Vha2VuVGhyZWFkcyA9IDA7XG4gIH1cblxuICBjb25zdCBjeWNsZVRocmVhZHMgPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLnRvdGFsVGhyZWFkcygpLCAwKTtcbiAgY29uc3QgY3ljbGVHYWluID0gYmF0Y2hlcy5yZWR1Y2UoKGNvdW50LCBiYXRjaCkgPT4gY291bnQgKyBiYXRjaC5nYWluLCAwKTtcbiAgY29uc3QgY3ljbGVUaW1lID0gYmFzZU1TT2Zmc2V0ICsgKGJhdGNoZXMubGVuZ3RoICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCkgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogJHtiYXRjaGVzLmxlbmd0aH0gQmF0Y2hlcyB8ICR7Y3ljbGVUaHJlYWRzfSBUaHJlYWRzIHwgJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluLCAzLCAxMDAwLCB0cnVlKX0gR2FpbiB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBCYXRjaCAxIHwgaHQ6JHtiYXRjaGVzWzBdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbMF0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzWzBdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbMF0uZ3Jvd1dlYWtlblRocmVhZHN9YClcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBCYXRjaCAyIHwgaHQ6JHtiYXRjaGVzWzFdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbMV0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzWzFdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbMV0uZ3Jvd1dlYWtlblRocmVhZHN9YClcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBCYXRjaCBOIHwgaHQ6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uZ3Jvd1dlYWtlblRocmVhZHN9YClcblxuICBjb25zdCBzY3JpcHRzID0gZ2V0U2NyaXB0Q2FsbHMoYmF0Y2hlcyk7XG4gIGxldCBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcbiAgICBpZiAoc2NyaXB0ID09PSB1bmRlZmluZWQpIGJyZWFrO1xuXG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XG4gICAgd2hpbGUgKHNsYXZlVGhyZWFkcyA+IDApIHtcbiAgICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG5cbiAgICAgIGNvbnN0IHNjcmlwdFRocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIHNjcmlwdC50aHJlYWRzKTtcbiAgICAgIG5zLmV4ZWMoc2NyaXB0LnNjcmlwdCwgcywge3RlbXBvcmFyeTogdHJ1ZSwgdGhyZWFkczogc2NyaXB0VGhyZWFkc30sIHRhcmdldCwgc2NyaXB0Lm9mZnNldCk7XG4gICAgICBzbGF2ZVRocmVhZHMgLT0gc2NyaXB0VGhyZWFkcztcbiAgICAgIHNjcmlwdC50aHJlYWRzIC09IHNjcmlwdFRocmVhZHM7XG5cbiAgICAgIGlmIChzY3JpcHQudGhyZWFkcyA9PT0gMClcbiAgICAgICAgc2NyaXB0ID0gc2NyaXB0cy5zaGlmdCgpOyAgICAgIFxuICAgIH1cbiAgfVxuXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpOyAgXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xuICBucy5kaXNhYmxlTG9nKCdBTEwnKTtcblxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xuXG4gIC8vIGNvcHkgaGd3IHNjcmlwdHMgdG8gc2xhdmUgbWFjaGluZXNcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xuICAgIGlmIChzID09PSAnaG9tZScpIGNvbnRpbnVlO1xuICAgIG5zLnNjcChbJ2hhY2suanMnLCAnZ3Jvdy5qcycsICd3ZWFrZW4uanMnXSwgcyk7XG4gIH1cblxuICBsZXQgdGFyZ2V0ID0gJ25lY3Rhci1uZXQnO1xuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGF3YWl0IGN5Y2xlKG5zLCB0YXJnZXQpO1xuICB9XG59XG4iXX0=\",\"filename\":\"archive/simple-hack.js\",\"server\":\"home\"}}],[\"tables.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const HEADER = 0; // Index of the header styles\\nconst DIVIDER = 1; // Index of the horizontal divider style\\nconst FOOTER = 2; // Index of the footer style\\nconst OPENER = 0; // Index of the opener line character\\nconst SEPARATOR = 1; // Index of the separator line character (where columns meet)\\nconst CLOSER = 2; // Index of the closer line character\\nconst FILLER = 3; // Index of the filler line character\\nconst BAR = 4; // Index of the straight vertical bar line character\\nexport let win = globalThis, doc = win[\\\"document\\\"];\\nlet fmt = Intl.NumberFormat('en', { notation: 'compact' });\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // Some sample data, basic information on root servers\\n    // Note that if you want color, you need to use ColorPrint as the printing function\\n    // Colored cells need to be an object with color and text, instead of \\\"any\\\".. Red cell example here\\n    let data = ns.scan('home').map(s => [{ color: 'red', text: s }, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]);\\n    // For bold we need to correct the spacing... Sketch AF, not sure how else.\\n    // let boldText = 'bold text example blah';\\n    // let spacing = -0.00666666666666666666666666666667 * boldText.length;\\n    data.push([\\n        { style: { color: 'red' }, text: 'nope' },\\n        //{ style: { color: 'red', fontWeight: 'bold', letterSpacing: spacing }, text: boldText },\\n        { style: { color: 'white', fontStyle: 'italic' }, text: 'italic text' },\\n        { style: { color: 'white', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }, text: 'strikethrough text' }\\n    ]);\\n    // Free style, no columns, the table adjusts to contents\\n    PrintTable(ns, data, undefined, DefaultStyle(), ColorPrint);\\n    // Example of adding a break line in the middle of the table:\\n    // data.push(null);\\n    // data.push(...ns.scan('sigma-cosmetics').slice(1).map(s => [s, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]));\\n    // We use pre-defined columns\\n    // header: The text to display\\n    // width : Width of the column content\\n    // pad   : 0 for center, < 0 for left, > 0 for right\\n    const columns = [\\n        { header: 'Servers', width: 40 },\\n        { header: 'Ram', width: 13 },\\n        { header: 'Money', width: 20 }\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\nexport function PrintTable(ns, data, columns, style = DefaultStyle(), printfunc = ns.print) {\\n    // if (printfunc != ns.print)\\n    // \\tprintfunc = ns.tprint; // Temp fix until I get ansi colors working\\n    // Create default columns if no definition were provided\\n    let columnsProvided = true;\\n    if (columns == undefined) {\\n        columnsProvided = false;\\n        columns = [];\\n        for (let i = 0; i < data[0].length; i++) {\\n            let longest = 0;\\n            for (let ii = 0; ii < data.length; ii++) {\\n                if (data[ii] == null)\\n                    continue;\\n                let len = data[ii][i].text != undefined ? data[ii][i].text.length : data[ii][i].toString().length;\\n                if (len > longest)\\n                    longest = len;\\n            }\\n            columns.push({ header: '', width: longest, padHeader: 0, padContent: 0 });\\n        }\\n    }\\n    PrintBorder(ns, columns, style[HEADER], printfunc);\\n    if (columnsProvided) {\\n        PrintHeader(ns, columns, style[HEADER], printfunc);\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\n    }\\n    let i = 0;\\n    for (const line of data) {\\n        PrintLine(ns, columns, line, style, printfunc, i++ % 2 == 0);\\n    }\\n    PrintBorder(ns, columns, style[FOOTER], printfunc);\\n}\\nexport function DefaultStyle() {\\n    return [\\n        ['╭', '┬', '╮', '─', '│'],\\n        ['├', '┼', '┤', '─', '│'],\\n        ['╰', '┴', '╯', '─', '│']\\n    ];\\n}\\nfunction PrintBorder(ns, columns, style, printfunc = ns.print) {\\n    let printStack = [];\\n    printStack.push('white', style[OPENER]);\\n    for (let c = 0; c < columns.length; c++) {\\n        if (columns[c].hide)\\n            continue;\\n        printStack.push('white', ''.padEnd(columns[c].width, style[FILLER]));\\n        if (c == columns.length - 1)\\n            printStack.push('white', style[CLOSER]);\\n        else\\n            printStack.push('white', style[SEPARATOR]);\\n    }\\n    PrintStack(ns, printStack, printfunc);\\n}\\nfunction PrintHeader(ns, columns, style, printfunc = ns.print) {\\n    let printStack = [];\\n    printStack.push('white', style[BAR]);\\n    for (let c = 0; c < columns.length; c++) {\\n        if (columns[c].hide)\\n            continue;\\n        printStack.push('white', columns[c].header.padEnd(columns[c].width));\\n        printStack.push('white', style[BAR]);\\n    }\\n    PrintStack(ns, printStack, printfunc);\\n}\\nfunction PrintLine(ns, columns, data, style, printfunc = ns.print, highlight) {\\n    if (data == null) {\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\n        return;\\n    }\\n    let printStack = [];\\n    printStack.push('white', style[0][BAR]);\\n    for (let c = 0; c < columns.length; c++) {\\n        if (columns[c].hide)\\n            continue;\\n        if (data[c].style != undefined)\\n            printStack.push({ style: data[c].style }, data[c].text.padEnd(columns[c].width));\\n        else if (data[c].color != undefined)\\n            printStack.push(CreateStyle(data[c].color, highlight), data[c].text.padEnd(columns[c].width));\\n        else\\n            printStack.push(CreateStyle('white', highlight), data[c].toString().padEnd(columns[c].width));\\n        printStack.push('white', style[0][BAR]);\\n    }\\n    PrintStack(ns, printStack, printfunc);\\n}\\nexport function CreateStyle(color, highlight) {\\n    //return color;\\n    let backColor = highlight ? '#000000' : '#1A1A1A';\\n    return { style: { color: color, backgroundColor: backColor } };\\n}\\nfunction PrintStack(ns, printStack, printfunc) {\\n    if (printfunc == ns.tprint || printfunc == ns.print || printfunc == ns.tprintf) {\\n        ColorPrint(ns, printStack, false);\\n    }\\n    else {\\n        printfunc(ns, printStack, true);\\n    }\\n}\\n// Selects a color based on a 1-based percentage\\nexport function pctColor(pct) {\\n    if (pct >= 1)\\n        return 'Lime';\\n    else if (pct >= 0.9)\\n        return 'Green';\\n    else if (pct >= 0.75)\\n        return 'DarkGreen';\\n    else if (pct >= 0.6)\\n        return 'GreenYellow';\\n    else if (pct >= 0.3)\\n        return 'Yellow';\\n    else if (pct != 0)\\n        return 'DarkOrange';\\n    return 'Red';\\n}\\n// Usage: ColorPrint(ns, ['red', 'This is some red text', '#FFFFFF', ' This is some white text], true);\\nexport function ColorPrint(ns, stack, toTerminal = true) {\\n    let out = '';\\n    for (let i = 0; i < stack.length; i += 2) {\\n        let style = stack[i];\\n        if (style.style == undefined) {\\n            style = { style: { color: stack[i], backgroundColor: '#000000' } };\\n        }\\n        let color = style;\\n        if (style.style)\\n            color = style.style.color;\\n        let match = COLORS.find(s => s.html == color || s.desc.toLowerCase() == color.toLowerCase());\\n        if (!match && color.startsWith('#'))\\n            match = FindHtmlColorEquivalent(ns, color);\\n        if (!match)\\n            match = COLORS.find(s => s.desc.toLowerCase().startsWith(color.toLowerCase()));\\n        if (match)\\n            color = '\\\\x1b[38;5;' + match.ansi + 'm';\\n        else\\n            ns.tprint('FAIL: unsupported color: ' + color);\\n        let text = stack[i + 1].replace('%', '%%');\\n        out = out + color + text;\\n    }\\n    if (toTerminal)\\n        ns.tprintf(out);\\n    else\\n        ns.printf(out);\\n}\\n// ANSI colors supported by the game are 256 colors, HTML color is RGB\\n// This functions finds the closest match to a full range HTML color code in the 256 color ANSI colors we have to work with\\nfunction FindHtmlColorEquivalent(ns, htmlCode) {\\n    let copy = COLORS.map(s => s);\\n    copy.sort(function (a, b) {\\n        let ca = rgbFromHtml(a.html);\\n        let cb = rgbFromHtml(b.html);\\n        let col = rgbFromHtml(htmlCode);\\n        let oa = Math.abs(ca.r - col.r) + Math.abs(ca.g - col.g) + Math.abs(ca.b - col.b);\\n        let ob = Math.abs(cb.r - col.r) + Math.abs(cb.g - col.g) + Math.abs(cb.b - col.b);\\n        return oa - ob;\\n    });\\n    return copy[0];\\n}\\n// Converts a hexadecimal HTML color back to RGB int values\\nfunction rgbFromHtml(htmlCode) {\\n    let r = Number.parseInt('0x' + htmlCode.substr(1, 2));\\n    let g = Number.parseInt('0x' + htmlCode.substr(3, 2));\\n    let b = Number.parseInt('0x' + htmlCode.substr(5, 2));\\n    return { r: r, g: g, b: b };\\n}\\n/**\\n * @param {ns}\\n * @param {Array} JSON DATA in form of [{id:1,name:\\\"Lexicon\\\"},{id:2,name:\\\"Paradox\\\"}]\\n * @param {Array} pass an array of columns\\n * @returns {HTMLTableElement} Returns a HTMLTableElement that you can use DOM.appendChild(table);\\n */\\nexport function createHTMLTableFromJSON(ns, data, columns) {\\n    var formattedData = JSON.parse(JSON.stringify(data, columns));\\n    var col = [];\\n    var i;\\n    for (i = 0; i < formattedData.length; i++) {\\n        for (var key in formattedData[i]) {\\n            if (col.indexOf(key) === -1) {\\n                col.push(key);\\n            }\\n        }\\n    }\\n    var table = doc.createElement(\\\"table\\\");\\n    table.style.width = '100%';\\n    var tr = table.insertRow(-1); // TABLE ROW.\\n    for (i = 0; i < col.length; i++) {\\n        var th = doc.createElement(\\\"th\\\"); // TABLE HEADER.\\n        th.innerHTML = col[i];\\n        tr.appendChild(th);\\n    }\\n    for (i = 0; i < formattedData.length; i++) {\\n        tr = table.insertRow(-1);\\n        for (var j = 0; j < col.length; j++) {\\n            var tabCell = tr.insertCell(-1);\\n            if (typeof (formattedData[i][col[j]]) == 'number') {\\n                var number = formattedData[i][col[j]];\\n                if (number > 0)\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"green\\\");\\n                else if (number == 0)\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"white\\\");\\n                else if (number < 0)\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"red\\\");\\n            }\\n            else {\\n                tabCell.innerHTML = formattedData[i][col[j]];\\n            }\\n        }\\n    }\\n    return table;\\n}\\nlet addHtmlWithColor = (tag, data, color) => {\\n    return \\\"<\\\" + tag + \\\" style='color:\\\" + color + \\\"'>\\\" + data + \\\"</\\\" + tag + \\\">\\\";\\n};\\nexport let COLORS = [\\n    {\\n        \\\"ansi\\\": 0,\\n        \\\"desc\\\": \\\"Grey\\\",\\n        \\\"html\\\": \\\"#808080\\\",\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 1,\\n        \\\"desc\\\": \\\"Red\\\",\\n        \\\"html\\\": \\\"#ff0000\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 2,\\n        \\\"desc\\\": \\\"Lime\\\",\\n        \\\"html\\\": \\\"#00ff00\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 3,\\n        \\\"desc\\\": \\\"Yellow\\\",\\n        \\\"html\\\": \\\"#ffff00\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 4,\\n        \\\"desc\\\": \\\"Blue\\\",\\n        \\\"html\\\": \\\"#0000ff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 5,\\n        \\\"desc\\\": \\\"Fuchsia\\\",\\n        \\\"html\\\": \\\"#ff00ff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 6,\\n        \\\"desc\\\": \\\"Aqua\\\",\\n        \\\"html\\\": \\\"#00ffff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 7,\\n        \\\"desc\\\": \\\"White\\\",\\n        \\\"html\\\": \\\"#ffffff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 8,\\n        \\\"desc\\\": \\\"Black\\\",\\n        \\\"html\\\": \\\"#000000\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 9,\\n        \\\"desc\\\": \\\"Maroon\\\",\\n        \\\"html\\\": \\\"#800000\\\",\\n        \\\"rgb\\\": \\\"rgb(128,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,25%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 10,\\n        \\\"desc\\\": \\\"Green\\\",\\n        \\\"html\\\": \\\"#008000\\\",\\n        \\\"rgb\\\": \\\"rgb(0,128,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,25%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 11,\\n        \\\"desc\\\": \\\"Olive\\\",\\n        \\\"html\\\": \\\"#808000\\\",\\n        \\\"rgb\\\": \\\"rgb(128,128,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,25%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 12,\\n        \\\"desc\\\": \\\"Navy\\\",\\n        \\\"html\\\": \\\"#000080\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,128)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,25%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 13,\\n        \\\"desc\\\": \\\"Purple\\\",\\n        \\\"html\\\": \\\"#800080\\\",\\n        \\\"rgb\\\": \\\"rgb(128,0,128)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,25%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 14,\\n        \\\"desc\\\": \\\"Teal\\\",\\n        \\\"html\\\": \\\"#008080\\\",\\n        \\\"rgb\\\": \\\"rgb(0,128,128)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,25%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 15,\\n        \\\"desc\\\": \\\"Silver\\\",\\n        \\\"html\\\": \\\"#c0c0c0\\\",\\n        \\\"rgb\\\": \\\"rgb(192,192,192)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,75%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 16,\\n        \\\"desc\\\": \\\"Grey0\\\",\\n        \\\"html\\\": \\\"#000000\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 17,\\n        \\\"desc\\\": \\\"NavyBlue\\\",\\n        \\\"html\\\": \\\"#00005f\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 18,\\n        \\\"desc\\\": \\\"DarkBlue\\\",\\n        \\\"html\\\": \\\"#000087\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 19,\\n        \\\"desc\\\": \\\"Blue3\\\",\\n        \\\"html\\\": \\\"#0000af\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 20,\\n        \\\"desc\\\": \\\"Blue3\\\",\\n        \\\"html\\\": \\\"#0000d7\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 21,\\n        \\\"desc\\\": \\\"Blue1\\\",\\n        \\\"html\\\": \\\"#0000ff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 22,\\n        \\\"desc\\\": \\\"DarkGreen\\\",\\n        \\\"html\\\": \\\"#005f00\\\",\\n        \\\"rgb\\\": \\\"rgb(0,95,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 23,\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\n        \\\"html\\\": \\\"#005f5f\\\",\\n        \\\"rgb\\\": \\\"rgb(0,95,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 24,\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\n        \\\"html\\\": \\\"#005f87\\\",\\n        \\\"rgb\\\": \\\"rgb(0,95,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(97,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 25,\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\n        \\\"html\\\": \\\"#005faf\\\",\\n        \\\"rgb\\\": \\\"rgb(0,95,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(07,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 26,\\n        \\\"desc\\\": \\\"DodgerBlue3\\\",\\n        \\\"html\\\": \\\"#005fd7\\\",\\n        \\\"rgb\\\": \\\"rgb(0,95,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(13,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 27,\\n        \\\"desc\\\": \\\"DodgerBlue2\\\",\\n        \\\"html\\\": \\\"#005fff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,95,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(17,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 28,\\n        \\\"desc\\\": \\\"Green4\\\",\\n        \\\"html\\\": \\\"#008700\\\",\\n        \\\"rgb\\\": \\\"rgb(0,135,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 29,\\n        \\\"desc\\\": \\\"SpringGreen4\\\",\\n        \\\"html\\\": \\\"#00875f\\\",\\n        \\\"rgb\\\": \\\"rgb(0,135,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(62,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 30,\\n        \\\"desc\\\": \\\"Turquoise4\\\",\\n        \\\"html\\\": \\\"#008787\\\",\\n        \\\"rgb\\\": \\\"rgb(0,135,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 31,\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\n        \\\"html\\\": \\\"#0087af\\\",\\n        \\\"rgb\\\": \\\"rgb(0,135,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(93,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 32,\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\n        \\\"html\\\": \\\"#0087d7\\\",\\n        \\\"rgb\\\": \\\"rgb(0,135,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(02,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 33,\\n        \\\"desc\\\": \\\"DodgerBlue1\\\",\\n        \\\"html\\\": \\\"#0087ff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,135,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(08,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 34,\\n        \\\"desc\\\": \\\"Green3\\\",\\n        \\\"html\\\": \\\"#00af00\\\",\\n        \\\"rgb\\\": \\\"rgb(0,175,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 35,\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\n        \\\"html\\\": \\\"#00af5f\\\",\\n        \\\"rgb\\\": \\\"rgb(0,175,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(52,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 36,\\n        \\\"desc\\\": \\\"DarkCyan\\\",\\n        \\\"html\\\": \\\"#00af87\\\",\\n        \\\"rgb\\\": \\\"rgb(0,175,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(66,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 37,\\n        \\\"desc\\\": \\\"LightSeaGreen\\\",\\n        \\\"html\\\": \\\"#00afaf\\\",\\n        \\\"rgb\\\": \\\"rgb(0,175,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 38,\\n        \\\"desc\\\": \\\"DeepSkyBlue2\\\",\\n        \\\"html\\\": \\\"#00afd7\\\",\\n        \\\"rgb\\\": \\\"rgb(0,175,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(91,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 39,\\n        \\\"desc\\\": \\\"DeepSkyBlue1\\\",\\n        \\\"html\\\": \\\"#00afff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,175,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(98,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 40,\\n        \\\"desc\\\": \\\"Green3\\\",\\n        \\\"html\\\": \\\"#00d700\\\",\\n        \\\"rgb\\\": \\\"rgb(0,215,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 41,\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\n        \\\"html\\\": \\\"#00d75f\\\",\\n        \\\"rgb\\\": \\\"rgb(0,215,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(46,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 42,\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\n        \\\"html\\\": \\\"#00d787\\\",\\n        \\\"rgb\\\": \\\"rgb(0,215,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(57,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 43,\\n        \\\"desc\\\": \\\"Cyan3\\\",\\n        \\\"html\\\": \\\"#00d7af\\\",\\n        \\\"rgb\\\": \\\"rgb(0,215,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(68,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 44,\\n        \\\"desc\\\": \\\"DarkTurquoise\\\",\\n        \\\"html\\\": \\\"#00d7d7\\\",\\n        \\\"rgb\\\": \\\"rgb(0,215,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 45,\\n        \\\"desc\\\": \\\"Turquoise2\\\",\\n        \\\"html\\\": \\\"#00d7ff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,215,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(89,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 46,\\n        \\\"desc\\\": \\\"Green1\\\",\\n        \\\"html\\\": \\\"#00ff00\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 47,\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\n        \\\"html\\\": \\\"#00ff5f\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(42,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 48,\\n        \\\"desc\\\": \\\"SpringGreen1\\\",\\n        \\\"html\\\": \\\"#00ff87\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(51,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 49,\\n        \\\"desc\\\": \\\"MediumSpringGreen\\\",\\n        \\\"html\\\": \\\"#00ffaf\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(61,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 50,\\n        \\\"desc\\\": \\\"Cyan2\\\",\\n        \\\"html\\\": \\\"#00ffd7\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(70,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 51,\\n        \\\"desc\\\": \\\"Cyan1\\\",\\n        \\\"html\\\": \\\"#00ffff\\\",\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 52,\\n        \\\"desc\\\": \\\"DarkRed\\\",\\n        \\\"html\\\": \\\"#5f0000\\\",\\n        \\\"rgb\\\": \\\"rgb(95,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 53,\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\n        \\\"html\\\": \\\"#5f005f\\\",\\n        \\\"rgb\\\": \\\"rgb(95,0,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 54,\\n        \\\"desc\\\": \\\"Purple4\\\",\\n        \\\"html\\\": \\\"#5f0087\\\",\\n        \\\"rgb\\\": \\\"rgb(95,0,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(82,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 55,\\n        \\\"desc\\\": \\\"Purple4\\\",\\n        \\\"html\\\": \\\"#5f00af\\\",\\n        \\\"rgb\\\": \\\"rgb(95,0,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(72,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 56,\\n        \\\"desc\\\": \\\"Purple3\\\",\\n        \\\"html\\\": \\\"#5f00d7\\\",\\n        \\\"rgb\\\": \\\"rgb(95,0,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(66,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 57,\\n        \\\"desc\\\": \\\"BlueViolet\\\",\\n        \\\"html\\\": \\\"#5f00ff\\\",\\n        \\\"rgb\\\": \\\"rgb(95,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(62,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 58,\\n        \\\"desc\\\": \\\"Orange4\\\",\\n        \\\"html\\\": \\\"#5f5f00\\\",\\n        \\\"rgb\\\": \\\"rgb(95,95,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 59,\\n        \\\"desc\\\": \\\"Grey37\\\",\\n        \\\"html\\\": \\\"#5f5f5f\\\",\\n        \\\"rgb\\\": \\\"rgb(95,95,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 60,\\n        \\\"desc\\\": \\\"MediumPurple4\\\",\\n        \\\"html\\\": \\\"#5f5f87\\\",\\n        \\\"rgb\\\": \\\"rgb(95,95,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,17%,45%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 61,\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\n        \\\"html\\\": \\\"#5f5faf\\\",\\n        \\\"rgb\\\": \\\"rgb(95,95,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 62,\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\n        \\\"html\\\": \\\"#5f5fd7\\\",\\n        \\\"rgb\\\": \\\"rgb(95,95,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 63,\\n        \\\"desc\\\": \\\"RoyalBlue1\\\",\\n        \\\"html\\\": \\\"#5f5fff\\\",\\n        \\\"rgb\\\": \\\"rgb(95,95,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 64,\\n        \\\"desc\\\": \\\"Chartreuse4\\\",\\n        \\\"html\\\": \\\"#5f8700\\\",\\n        \\\"rgb\\\": \\\"rgb(95,135,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(7,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 65,\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\n        \\\"html\\\": \\\"#5f875f\\\",\\n        \\\"rgb\\\": \\\"rgb(95,135,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,17%,45%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 66,\\n        \\\"desc\\\": \\\"PaleTurquoise4\\\",\\n        \\\"html\\\": \\\"#5f8787\\\",\\n        \\\"rgb\\\": \\\"rgb(95,135,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,17%,45%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 67,\\n        \\\"desc\\\": \\\"SteelBlue\\\",\\n        \\\"html\\\": \\\"#5f87af\\\",\\n        \\\"rgb\\\": \\\"rgb(95,135,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(210,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 68,\\n        \\\"desc\\\": \\\"SteelBlue3\\\",\\n        \\\"html\\\": \\\"#5f87d7\\\",\\n        \\\"rgb\\\": \\\"rgb(95,135,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(220,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 69,\\n        \\\"desc\\\": \\\"CornflowerBlue\\\",\\n        \\\"html\\\": \\\"#5f87ff\\\",\\n        \\\"rgb\\\": \\\"rgb(95,135,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(225,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 70,\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\n        \\\"html\\\": \\\"#5faf00\\\",\\n        \\\"rgb\\\": \\\"rgb(95,175,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(7,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 71,\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\n        \\\"html\\\": \\\"#5faf5f\\\",\\n        \\\"rgb\\\": \\\"rgb(95,175,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 72,\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\n        \\\"html\\\": \\\"#5faf87\\\",\\n        \\\"rgb\\\": \\\"rgb(95,175,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(150,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 73,\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\n        \\\"html\\\": \\\"#5fafaf\\\",\\n        \\\"rgb\\\": \\\"rgb(95,175,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 74,\\n        \\\"desc\\\": \\\"SkyBlue3\\\",\\n        \\\"html\\\": \\\"#5fafd7\\\",\\n        \\\"rgb\\\": \\\"rgb(95,175,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(200,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 75,\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\n        \\\"html\\\": \\\"#5fafff\\\",\\n        \\\"rgb\\\": \\\"rgb(95,175,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(210,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 76,\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\n        \\\"html\\\": \\\"#5fd700\\\",\\n        \\\"rgb\\\": \\\"rgb(95,215,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(3,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 77,\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\n        \\\"html\\\": \\\"#5fd75f\\\",\\n        \\\"rgb\\\": \\\"rgb(95,215,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 78,\\n        \\\"desc\\\": \\\"SeaGreen3\\\",\\n        \\\"html\\\": \\\"#5fd787\\\",\\n        \\\"rgb\\\": \\\"rgb(95,215,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(140,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 79,\\n        \\\"desc\\\": \\\"Aquamarine3\\\",\\n        \\\"html\\\": \\\"#5fd7af\\\",\\n        \\\"rgb\\\": \\\"rgb(95,215,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(160,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 80,\\n        \\\"desc\\\": \\\"MediumTurquoise\\\",\\n        \\\"html\\\": \\\"#5fd7d7\\\",\\n        \\\"rgb\\\": \\\"rgb(95,215,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 81,\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\n        \\\"html\\\": \\\"#5fd7ff\\\",\\n        \\\"rgb\\\": \\\"rgb(95,215,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(195,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 82,\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\n        \\\"html\\\": \\\"#5fff00\\\",\\n        \\\"rgb\\\": \\\"rgb(95,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(7,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 83,\\n        \\\"desc\\\": \\\"SeaGreen2\\\",\\n        \\\"html\\\": \\\"#5fff5f\\\",\\n        \\\"rgb\\\": \\\"rgb(95,255,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 84,\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\n        \\\"html\\\": \\\"#5fff87\\\",\\n        \\\"rgb\\\": \\\"rgb(95,255,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(135,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 85,\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\n        \\\"html\\\": \\\"#5fffaf\\\",\\n        \\\"rgb\\\": \\\"rgb(95,255,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(150,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 86,\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\n        \\\"html\\\": \\\"#5fffd7\\\",\\n        \\\"rgb\\\": \\\"rgb(95,255,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(165,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 87,\\n        \\\"desc\\\": \\\"DarkSlateGray2\\\",\\n        \\\"html\\\": \\\"#5fffff\\\",\\n        \\\"rgb\\\": \\\"rgb(95,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 88,\\n        \\\"desc\\\": \\\"DarkRed\\\",\\n        \\\"html\\\": \\\"#870000\\\",\\n        \\\"rgb\\\": \\\"rgb(135,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 89,\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\n        \\\"html\\\": \\\"#87005f\\\",\\n        \\\"rgb\\\": \\\"rgb(135,0,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(17,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 90,\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\n        \\\"html\\\": \\\"#870087\\\",\\n        \\\"rgb\\\": \\\"rgb(135,0,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 91,\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\n        \\\"html\\\": \\\"#8700af\\\",\\n        \\\"rgb\\\": \\\"rgb(135,0,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(86,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 92,\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\n        \\\"html\\\": \\\"#8700d7\\\",\\n        \\\"rgb\\\": \\\"rgb(135,0,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(77,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 93,\\n        \\\"desc\\\": \\\"Purple\\\",\\n        \\\"html\\\": \\\"#8700ff\\\",\\n        \\\"rgb\\\": \\\"rgb(135,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(71,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 94,\\n        \\\"desc\\\": \\\"Orange4\\\",\\n        \\\"html\\\": \\\"#875f00\\\",\\n        \\\"rgb\\\": \\\"rgb(135,95,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(2,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 95,\\n        \\\"desc\\\": \\\"LightPink4\\\",\\n        \\\"html\\\": \\\"#875f5f\\\",\\n        \\\"rgb\\\": \\\"rgb(135,95,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,17%,45%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 96,\\n        \\\"desc\\\": \\\"Plum4\\\",\\n        \\\"html\\\": \\\"#875f87\\\",\\n        \\\"rgb\\\": \\\"rgb(135,95,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,17%,45%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 97,\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\n        \\\"html\\\": \\\"#875faf\\\",\\n        \\\"rgb\\\": \\\"rgb(135,95,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(270,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 98,\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\n        \\\"html\\\": \\\"#875fd7\\\",\\n        \\\"rgb\\\": \\\"rgb(135,95,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(260,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 99,\\n        \\\"desc\\\": \\\"SlateBlue1\\\",\\n        \\\"html\\\": \\\"#875fff\\\",\\n        \\\"rgb\\\": \\\"rgb(135,95,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(255,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 100,\\n        \\\"desc\\\": \\\"Yellow4\\\",\\n        \\\"html\\\": \\\"#878700\\\",\\n        \\\"rgb\\\": \\\"rgb(135,135,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 101,\\n        \\\"desc\\\": \\\"Wheat4\\\",\\n        \\\"html\\\": \\\"#87875f\\\",\\n        \\\"rgb\\\": \\\"rgb(135,135,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,17%,45%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 102,\\n        \\\"desc\\\": \\\"Grey53\\\",\\n        \\\"html\\\": \\\"#878787\\\",\\n        \\\"rgb\\\": \\\"rgb(135,135,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 103,\\n        \\\"desc\\\": \\\"LightSlateGrey\\\",\\n        \\\"html\\\": \\\"#8787af\\\",\\n        \\\"rgb\\\": \\\"rgb(135,135,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,20%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 104,\\n        \\\"desc\\\": \\\"MediumPurple\\\",\\n        \\\"html\\\": \\\"#8787d7\\\",\\n        \\\"rgb\\\": \\\"rgb(135,135,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 105,\\n        \\\"desc\\\": \\\"LightSlateBlue\\\",\\n        \\\"html\\\": \\\"#8787ff\\\",\\n        \\\"rgb\\\": \\\"rgb(135,135,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 106,\\n        \\\"desc\\\": \\\"Yellow4\\\",\\n        \\\"html\\\": \\\"#87af00\\\",\\n        \\\"rgb\\\": \\\"rgb(135,175,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(3,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 107,\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\n        \\\"html\\\": \\\"#87af5f\\\",\\n        \\\"rgb\\\": \\\"rgb(135,175,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(90,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 108,\\n        \\\"desc\\\": \\\"DarkSeaGreen\\\",\\n        \\\"html\\\": \\\"#87af87\\\",\\n        \\\"rgb\\\": \\\"rgb(135,175,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,20%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 109,\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\n        \\\"html\\\": \\\"#87afaf\\\",\\n        \\\"rgb\\\": \\\"rgb(135,175,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,20%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 110,\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\n        \\\"html\\\": \\\"#87afd7\\\",\\n        \\\"rgb\\\": \\\"rgb(135,175,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(210,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 111,\\n        \\\"desc\\\": \\\"SkyBlue2\\\",\\n        \\\"html\\\": \\\"#87afff\\\",\\n        \\\"rgb\\\": \\\"rgb(135,175,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(220,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 112,\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\n        \\\"html\\\": \\\"#87d700\\\",\\n        \\\"rgb\\\": \\\"rgb(135,215,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(2,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 113,\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\n        \\\"html\\\": \\\"#87d75f\\\",\\n        \\\"rgb\\\": \\\"rgb(135,215,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(100,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 114,\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\n        \\\"html\\\": \\\"#87d787\\\",\\n        \\\"rgb\\\": \\\"rgb(135,215,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 115,\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\n        \\\"html\\\": \\\"#87d7af\\\",\\n        \\\"rgb\\\": \\\"rgb(135,215,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(150,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 116,\\n        \\\"desc\\\": \\\"DarkSlateGray3\\\",\\n        \\\"html\\\": \\\"#87d7d7\\\",\\n        \\\"rgb\\\": \\\"rgb(135,215,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 117,\\n        \\\"desc\\\": \\\"SkyBlue1\\\",\\n        \\\"html\\\": \\\"#87d7ff\\\",\\n        \\\"rgb\\\": \\\"rgb(135,215,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(200,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 118,\\n        \\\"desc\\\": \\\"Chartreuse1\\\",\\n        \\\"html\\\": \\\"#87ff00\\\",\\n        \\\"rgb\\\": \\\"rgb(135,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 119,\\n        \\\"desc\\\": \\\"LightGreen\\\",\\n        \\\"html\\\": \\\"#87ff5f\\\",\\n        \\\"rgb\\\": \\\"rgb(135,255,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(105,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 120,\\n        \\\"desc\\\": \\\"LightGreen\\\",\\n        \\\"html\\\": \\\"#87ff87\\\",\\n        \\\"rgb\\\": \\\"rgb(135,255,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 121,\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\n        \\\"html\\\": \\\"#87ffaf\\\",\\n        \\\"rgb\\\": \\\"rgb(135,255,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(140,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 122,\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\n        \\\"html\\\": \\\"#87ffd7\\\",\\n        \\\"rgb\\\": \\\"rgb(135,255,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(160,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 123,\\n        \\\"desc\\\": \\\"DarkSlateGray1\\\",\\n        \\\"html\\\": \\\"#87ffff\\\",\\n        \\\"rgb\\\": \\\"rgb(135,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 124,\\n        \\\"desc\\\": \\\"Red3\\\",\\n        \\\"html\\\": \\\"#af0000\\\",\\n        \\\"rgb\\\": \\\"rgb(175,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 125,\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\n        \\\"html\\\": \\\"#af005f\\\",\\n        \\\"rgb\\\": \\\"rgb(175,0,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(27,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 126,\\n        \\\"desc\\\": \\\"MediumVioletRed\\\",\\n        \\\"html\\\": \\\"#af0087\\\",\\n        \\\"rgb\\\": \\\"rgb(175,0,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(13,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 127,\\n        \\\"desc\\\": \\\"Magenta3\\\",\\n        \\\"html\\\": \\\"#af00af\\\",\\n        \\\"rgb\\\": \\\"rgb(175,0,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 128,\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\n        \\\"html\\\": \\\"#af00d7\\\",\\n        \\\"rgb\\\": \\\"rgb(175,0,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(88,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 129,\\n        \\\"desc\\\": \\\"Purple\\\",\\n        \\\"html\\\": \\\"#af00ff\\\",\\n        \\\"rgb\\\": \\\"rgb(175,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(81,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 130,\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\n        \\\"html\\\": \\\"#af5f00\\\",\\n        \\\"rgb\\\": \\\"rgb(175,95,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(2,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 131,\\n        \\\"desc\\\": \\\"IndianRed\\\",\\n        \\\"html\\\": \\\"#af5f5f\\\",\\n        \\\"rgb\\\": \\\"rgb(175,95,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 132,\\n        \\\"desc\\\": \\\"HotPink3\\\",\\n        \\\"html\\\": \\\"#af5f87\\\",\\n        \\\"rgb\\\": \\\"rgb(175,95,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(330,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 133,\\n        \\\"desc\\\": \\\"MediumOrchid3\\\",\\n        \\\"html\\\": \\\"#af5faf\\\",\\n        \\\"rgb\\\": \\\"rgb(175,95,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 134,\\n        \\\"desc\\\": \\\"MediumOrchid\\\",\\n        \\\"html\\\": \\\"#af5fd7\\\",\\n        \\\"rgb\\\": \\\"rgb(175,95,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(280,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 135,\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\n        \\\"html\\\": \\\"#af5fff\\\",\\n        \\\"rgb\\\": \\\"rgb(175,95,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(270,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 136,\\n        \\\"desc\\\": \\\"DarkGoldenrod\\\",\\n        \\\"html\\\": \\\"#af8700\\\",\\n        \\\"rgb\\\": \\\"rgb(175,135,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(6,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 137,\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\n        \\\"html\\\": \\\"#af875f\\\",\\n        \\\"rgb\\\": \\\"rgb(175,135,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(30,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 138,\\n        \\\"desc\\\": \\\"RosyBrown\\\",\\n        \\\"html\\\": \\\"#af8787\\\",\\n        \\\"rgb\\\": \\\"rgb(175,135,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,20%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 139,\\n        \\\"desc\\\": \\\"Grey63\\\",\\n        \\\"html\\\": \\\"#af87af\\\",\\n        \\\"rgb\\\": \\\"rgb(175,135,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,20%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 140,\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\n        \\\"html\\\": \\\"#af87d7\\\",\\n        \\\"rgb\\\": \\\"rgb(175,135,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(270,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 141,\\n        \\\"desc\\\": \\\"MediumPurple1\\\",\\n        \\\"html\\\": \\\"#af87ff\\\",\\n        \\\"rgb\\\": \\\"rgb(175,135,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(260,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 142,\\n        \\\"desc\\\": \\\"Gold3\\\",\\n        \\\"html\\\": \\\"#afaf00\\\",\\n        \\\"rgb\\\": \\\"rgb(175,175,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 143,\\n        \\\"desc\\\": \\\"DarkKhaki\\\",\\n        \\\"html\\\": \\\"#afaf5f\\\",\\n        \\\"rgb\\\": \\\"rgb(175,175,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,33%,52%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 144,\\n        \\\"desc\\\": \\\"NavajoWhite3\\\",\\n        \\\"html\\\": \\\"#afaf87\\\",\\n        \\\"rgb\\\": \\\"rgb(175,175,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,20%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 145,\\n        \\\"desc\\\": \\\"Grey69\\\",\\n        \\\"html\\\": \\\"#afafaf\\\",\\n        \\\"rgb\\\": \\\"rgb(175,175,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 146,\\n        \\\"desc\\\": \\\"LightSteelBlue3\\\",\\n        \\\"html\\\": \\\"#afafd7\\\",\\n        \\\"rgb\\\": \\\"rgb(175,175,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,33%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 147,\\n        \\\"desc\\\": \\\"LightSteelBlue\\\",\\n        \\\"html\\\": \\\"#afafff\\\",\\n        \\\"rgb\\\": \\\"rgb(175,175,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 148,\\n        \\\"desc\\\": \\\"Yellow3\\\",\\n        \\\"html\\\": \\\"#afd700\\\",\\n        \\\"rgb\\\": \\\"rgb(175,215,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(1,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 149,\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\n        \\\"html\\\": \\\"#afd75f\\\",\\n        \\\"rgb\\\": \\\"rgb(175,215,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(80,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 150,\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\n        \\\"html\\\": \\\"#afd787\\\",\\n        \\\"rgb\\\": \\\"rgb(175,215,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(90,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 151,\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\n        \\\"html\\\": \\\"#afd7af\\\",\\n        \\\"rgb\\\": \\\"rgb(175,215,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,33%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 152,\\n        \\\"desc\\\": \\\"LightCyan3\\\",\\n        \\\"html\\\": \\\"#afd7d7\\\",\\n        \\\"rgb\\\": \\\"rgb(175,215,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,33%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 153,\\n        \\\"desc\\\": \\\"LightSkyBlue1\\\",\\n        \\\"html\\\": \\\"#afd7ff\\\",\\n        \\\"rgb\\\": \\\"rgb(175,215,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(210,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 154,\\n        \\\"desc\\\": \\\"GreenYellow\\\",\\n        \\\"html\\\": \\\"#afff00\\\",\\n        \\\"rgb\\\": \\\"rgb(175,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 155,\\n        \\\"desc\\\": \\\"DarkOliveGreen2\\\",\\n        \\\"html\\\": \\\"#afff5f\\\",\\n        \\\"rgb\\\": \\\"rgb(175,255,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(90,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 156,\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\n        \\\"html\\\": \\\"#afff87\\\",\\n        \\\"rgb\\\": \\\"rgb(175,255,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(100,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 157,\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\n        \\\"html\\\": \\\"#afffaf\\\",\\n        \\\"rgb\\\": \\\"rgb(175,255,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 158,\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\n        \\\"html\\\": \\\"#afffd7\\\",\\n        \\\"rgb\\\": \\\"rgb(175,255,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(150,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 159,\\n        \\\"desc\\\": \\\"PaleTurquoise1\\\",\\n        \\\"html\\\": \\\"#afffff\\\",\\n        \\\"rgb\\\": \\\"rgb(175,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 160,\\n        \\\"desc\\\": \\\"Red3\\\",\\n        \\\"html\\\": \\\"#d70000\\\",\\n        \\\"rgb\\\": \\\"rgb(215,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 161,\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\n        \\\"html\\\": \\\"#d7005f\\\",\\n        \\\"rgb\\\": \\\"rgb(215,0,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(33,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 162,\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\n        \\\"html\\\": \\\"#d70087\\\",\\n        \\\"rgb\\\": \\\"rgb(215,0,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(22,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 163,\\n        \\\"desc\\\": \\\"Magenta3\\\",\\n        \\\"html\\\": \\\"#d700af\\\",\\n        \\\"rgb\\\": \\\"rgb(215,0,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(11,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 164,\\n        \\\"desc\\\": \\\"Magenta3\\\",\\n        \\\"html\\\": \\\"#d700d7\\\",\\n        \\\"rgb\\\": \\\"rgb(215,0,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 165,\\n        \\\"desc\\\": \\\"Magenta2\\\",\\n        \\\"html\\\": \\\"#d700ff\\\",\\n        \\\"rgb\\\": \\\"rgb(215,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(90,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 166,\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\n        \\\"html\\\": \\\"#d75f00\\\",\\n        \\\"rgb\\\": \\\"rgb(215,95,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(6,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 167,\\n        \\\"desc\\\": \\\"IndianRed\\\",\\n        \\\"html\\\": \\\"#d75f5f\\\",\\n        \\\"rgb\\\": \\\"rgb(215,95,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 168,\\n        \\\"desc\\\": \\\"HotPink3\\\",\\n        \\\"html\\\": \\\"#d75f87\\\",\\n        \\\"rgb\\\": \\\"rgb(215,95,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(340,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 169,\\n        \\\"desc\\\": \\\"HotPink2\\\",\\n        \\\"html\\\": \\\"#d75faf\\\",\\n        \\\"rgb\\\": \\\"rgb(215,95,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(320,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 170,\\n        \\\"desc\\\": \\\"Orchid\\\",\\n        \\\"html\\\": \\\"#d75fd7\\\",\\n        \\\"rgb\\\": \\\"rgb(215,95,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 171,\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\n        \\\"html\\\": \\\"#d75fff\\\",\\n        \\\"rgb\\\": \\\"rgb(215,95,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(285,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 172,\\n        \\\"desc\\\": \\\"Orange3\\\",\\n        \\\"html\\\": \\\"#d78700\\\",\\n        \\\"rgb\\\": \\\"rgb(215,135,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(7,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 173,\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\n        \\\"html\\\": \\\"#d7875f\\\",\\n        \\\"rgb\\\": \\\"rgb(215,135,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(20,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 174,\\n        \\\"desc\\\": \\\"LightPink3\\\",\\n        \\\"html\\\": \\\"#d78787\\\",\\n        \\\"rgb\\\": \\\"rgb(215,135,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 175,\\n        \\\"desc\\\": \\\"Pink3\\\",\\n        \\\"html\\\": \\\"#d787af\\\",\\n        \\\"rgb\\\": \\\"rgb(215,135,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(330,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 176,\\n        \\\"desc\\\": \\\"Plum3\\\",\\n        \\\"html\\\": \\\"#d787d7\\\",\\n        \\\"rgb\\\": \\\"rgb(215,135,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 177,\\n        \\\"desc\\\": \\\"Violet\\\",\\n        \\\"html\\\": \\\"#d787ff\\\",\\n        \\\"rgb\\\": \\\"rgb(215,135,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(280,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 178,\\n        \\\"desc\\\": \\\"Gold3\\\",\\n        \\\"html\\\": \\\"#d7af00\\\",\\n        \\\"rgb\\\": \\\"rgb(215,175,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(8,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 179,\\n        \\\"desc\\\": \\\"LightGoldenrod3\\\",\\n        \\\"html\\\": \\\"#d7af5f\\\",\\n        \\\"rgb\\\": \\\"rgb(215,175,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(40,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 180,\\n        \\\"desc\\\": \\\"Tan\\\",\\n        \\\"html\\\": \\\"#d7af87\\\",\\n        \\\"rgb\\\": \\\"rgb(215,175,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(30,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 181,\\n        \\\"desc\\\": \\\"MistyRose3\\\",\\n        \\\"html\\\": \\\"#d7afaf\\\",\\n        \\\"rgb\\\": \\\"rgb(215,175,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,33%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 182,\\n        \\\"desc\\\": \\\"Thistle3\\\",\\n        \\\"html\\\": \\\"#d7afd7\\\",\\n        \\\"rgb\\\": \\\"rgb(215,175,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,33%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 183,\\n        \\\"desc\\\": \\\"Plum2\\\",\\n        \\\"html\\\": \\\"#d7afff\\\",\\n        \\\"rgb\\\": \\\"rgb(215,175,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(270,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 184,\\n        \\\"desc\\\": \\\"Yellow3\\\",\\n        \\\"html\\\": \\\"#d7d700\\\",\\n        \\\"rgb\\\": \\\"rgb(215,215,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,42%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 185,\\n        \\\"desc\\\": \\\"Khaki3\\\",\\n        \\\"html\\\": \\\"#d7d75f\\\",\\n        \\\"rgb\\\": \\\"rgb(215,215,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,60%,60%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 186,\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\n        \\\"html\\\": \\\"#d7d787\\\",\\n        \\\"rgb\\\": \\\"rgb(215,215,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,50%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 187,\\n        \\\"desc\\\": \\\"LightYellow3\\\",\\n        \\\"html\\\": \\\"#d7d7af\\\",\\n        \\\"rgb\\\": \\\"rgb(215,215,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,33%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 188,\\n        \\\"desc\\\": \\\"Grey84\\\",\\n        \\\"html\\\": \\\"#d7d7d7\\\",\\n        \\\"rgb\\\": \\\"rgb(215,215,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 189,\\n        \\\"desc\\\": \\\"LightSteelBlue1\\\",\\n        \\\"html\\\": \\\"#d7d7ff\\\",\\n        \\\"rgb\\\": \\\"rgb(215,215,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(240,100%,92%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 190,\\n        \\\"desc\\\": \\\"Yellow2\\\",\\n        \\\"html\\\": \\\"#d7ff00\\\",\\n        \\\"rgb\\\": \\\"rgb(215,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(9,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 191,\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\n        \\\"html\\\": \\\"#d7ff5f\\\",\\n        \\\"rgb\\\": \\\"rgb(215,255,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(75,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 192,\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\n        \\\"html\\\": \\\"#d7ff87\\\",\\n        \\\"rgb\\\": \\\"rgb(215,255,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(80,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 193,\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\n        \\\"html\\\": \\\"#d7ffaf\\\",\\n        \\\"rgb\\\": \\\"rgb(215,255,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(90,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 194,\\n        \\\"desc\\\": \\\"Honeydew2\\\",\\n        \\\"html\\\": \\\"#d7ffd7\\\",\\n        \\\"rgb\\\": \\\"rgb(215,255,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(120,100%,92%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 195,\\n        \\\"desc\\\": \\\"LightCyan1\\\",\\n        \\\"html\\\": \\\"#d7ffff\\\",\\n        \\\"rgb\\\": \\\"rgb(215,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(180,100%,92%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 196,\\n        \\\"desc\\\": \\\"Red1\\\",\\n        \\\"html\\\": \\\"#ff0000\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 197,\\n        \\\"desc\\\": \\\"DeepPink2\\\",\\n        \\\"html\\\": \\\"#ff005f\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(37,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 198,\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\n        \\\"html\\\": \\\"#ff0087\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(28,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 199,\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\n        \\\"html\\\": \\\"#ff00af\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(18,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 200,\\n        \\\"desc\\\": \\\"Magenta2\\\",\\n        \\\"html\\\": \\\"#ff00d7\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(09,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 201,\\n        \\\"desc\\\": \\\"Magenta1\\\",\\n        \\\"html\\\": \\\"#ff00ff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 202,\\n        \\\"desc\\\": \\\"OrangeRed1\\\",\\n        \\\"html\\\": \\\"#ff5f00\\\",\\n        \\\"rgb\\\": \\\"rgb(255,95,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(2,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 203,\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\n        \\\"html\\\": \\\"#ff5f5f\\\",\\n        \\\"rgb\\\": \\\"rgb(255,95,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 204,\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\n        \\\"html\\\": \\\"#ff5f87\\\",\\n        \\\"rgb\\\": \\\"rgb(255,95,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(345,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 205,\\n        \\\"desc\\\": \\\"HotPink\\\",\\n        \\\"html\\\": \\\"#ff5faf\\\",\\n        \\\"rgb\\\": \\\"rgb(255,95,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(330,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 206,\\n        \\\"desc\\\": \\\"HotPink\\\",\\n        \\\"html\\\": \\\"#ff5fd7\\\",\\n        \\\"rgb\\\": \\\"rgb(255,95,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(315,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 207,\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\n        \\\"html\\\": \\\"#ff5fff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,95,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 208,\\n        \\\"desc\\\": \\\"DarkOrange\\\",\\n        \\\"html\\\": \\\"#ff8700\\\",\\n        \\\"rgb\\\": \\\"rgb(255,135,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 209,\\n        \\\"desc\\\": \\\"Salmon1\\\",\\n        \\\"html\\\": \\\"#ff875f\\\",\\n        \\\"rgb\\\": \\\"rgb(255,135,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(15,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 210,\\n        \\\"desc\\\": \\\"LightCoral\\\",\\n        \\\"html\\\": \\\"#ff8787\\\",\\n        \\\"rgb\\\": \\\"rgb(255,135,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 211,\\n        \\\"desc\\\": \\\"PaleVioletRed1\\\",\\n        \\\"html\\\": \\\"#ff87af\\\",\\n        \\\"rgb\\\": \\\"rgb(255,135,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(340,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 212,\\n        \\\"desc\\\": \\\"Orchid2\\\",\\n        \\\"html\\\": \\\"#ff87d7\\\",\\n        \\\"rgb\\\": \\\"rgb(255,135,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(320,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 213,\\n        \\\"desc\\\": \\\"Orchid1\\\",\\n        \\\"html\\\": \\\"#ff87ff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,135,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 214,\\n        \\\"desc\\\": \\\"Orange1\\\",\\n        \\\"html\\\": \\\"#ffaf00\\\",\\n        \\\"rgb\\\": \\\"rgb(255,175,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 215,\\n        \\\"desc\\\": \\\"SandyBrown\\\",\\n        \\\"html\\\": \\\"#ffaf5f\\\",\\n        \\\"rgb\\\": \\\"rgb(255,175,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(30,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 216,\\n        \\\"desc\\\": \\\"LightSalmon1\\\",\\n        \\\"html\\\": \\\"#ffaf87\\\",\\n        \\\"rgb\\\": \\\"rgb(255,175,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(20,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 217,\\n        \\\"desc\\\": \\\"LightPink1\\\",\\n        \\\"html\\\": \\\"#ffafaf\\\",\\n        \\\"rgb\\\": \\\"rgb(255,175,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 218,\\n        \\\"desc\\\": \\\"Pink1\\\",\\n        \\\"html\\\": \\\"#ffafd7\\\",\\n        \\\"rgb\\\": \\\"rgb(255,175,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(330,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 219,\\n        \\\"desc\\\": \\\"Plum1\\\",\\n        \\\"html\\\": \\\"#ffafff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,175,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 220,\\n        \\\"desc\\\": \\\"Gold1\\\",\\n        \\\"html\\\": \\\"#ffd700\\\",\\n        \\\"rgb\\\": \\\"rgb(255,215,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 221,\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\n        \\\"html\\\": \\\"#ffd75f\\\",\\n        \\\"rgb\\\": \\\"rgb(255,215,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(45,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 222,\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\n        \\\"html\\\": \\\"#ffd787\\\",\\n        \\\"rgb\\\": \\\"rgb(255,215,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(40,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 223,\\n        \\\"desc\\\": \\\"NavajoWhite1\\\",\\n        \\\"html\\\": \\\"#ffd7af\\\",\\n        \\\"rgb\\\": \\\"rgb(255,215,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(30,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 224,\\n        \\\"desc\\\": \\\"MistyRose1\\\",\\n        \\\"html\\\": \\\"#ffd7d7\\\",\\n        \\\"rgb\\\": \\\"rgb(255,215,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,100%,92%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 225,\\n        \\\"desc\\\": \\\"Thistle1\\\",\\n        \\\"html\\\": \\\"#ffd7ff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,215,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(300,100%,92%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 226,\\n        \\\"desc\\\": \\\"Yellow1\\\",\\n        \\\"html\\\": \\\"#ffff00\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 227,\\n        \\\"desc\\\": \\\"LightGoldenrod1\\\",\\n        \\\"html\\\": \\\"#ffff5f\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,95)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,68%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 228,\\n        \\\"desc\\\": \\\"Khaki1\\\",\\n        \\\"html\\\": \\\"#ffff87\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,135)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,76%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 229,\\n        \\\"desc\\\": \\\"Wheat1\\\",\\n        \\\"html\\\": \\\"#ffffaf\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,175)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,84%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 230,\\n        \\\"desc\\\": \\\"Cornsilk1\\\",\\n        \\\"html\\\": \\\"#ffffd7\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,215)\\\",\\n        \\\"hsl\\\": \\\"hsl(60,100%,92%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 231,\\n        \\\"desc\\\": \\\"Grey100\\\",\\n        \\\"html\\\": \\\"#ffffff\\\",\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 232,\\n        \\\"desc\\\": \\\"Grey3\\\",\\n        \\\"html\\\": \\\"#080808\\\",\\n        \\\"rgb\\\": \\\"rgb(8,8,8)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,3%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 233,\\n        \\\"desc\\\": \\\"Grey7\\\",\\n        \\\"html\\\": \\\"#121212\\\",\\n        \\\"rgb\\\": \\\"rgb(18,18,18)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,7%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 234,\\n        \\\"desc\\\": \\\"Grey11\\\",\\n        \\\"html\\\": \\\"#1c1c1c\\\",\\n        \\\"rgb\\\": \\\"rgb(28,28,28)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,10%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 235,\\n        \\\"desc\\\": \\\"Grey15\\\",\\n        \\\"html\\\": \\\"#262626\\\",\\n        \\\"rgb\\\": \\\"rgb(38,38,38)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,14%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 236,\\n        \\\"desc\\\": \\\"Grey19\\\",\\n        \\\"html\\\": \\\"#303030\\\",\\n        \\\"rgb\\\": \\\"rgb(48,48,48)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,18%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 237,\\n        \\\"desc\\\": \\\"Grey23\\\",\\n        \\\"html\\\": \\\"#3a3a3a\\\",\\n        \\\"rgb\\\": \\\"rgb(58,58,58)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,22%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 238,\\n        \\\"desc\\\": \\\"Grey27\\\",\\n        \\\"html\\\": \\\"#444444\\\",\\n        \\\"rgb\\\": \\\"rgb(68,68,68)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,26%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 239,\\n        \\\"desc\\\": \\\"Grey30\\\",\\n        \\\"html\\\": \\\"#4e4e4e\\\",\\n        \\\"rgb\\\": \\\"rgb(78,78,78)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,30%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 240,\\n        \\\"desc\\\": \\\"Grey35\\\",\\n        \\\"html\\\": \\\"#585858\\\",\\n        \\\"rgb\\\": \\\"rgb(88,88,88)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,34%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 241,\\n        \\\"desc\\\": \\\"Grey39\\\",\\n        \\\"html\\\": \\\"#626262\\\",\\n        \\\"rgb\\\": \\\"rgb(98,98,98)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 242,\\n        \\\"desc\\\": \\\"Grey42\\\",\\n        \\\"html\\\": \\\"#6c6c6c\\\",\\n        \\\"rgb\\\": \\\"rgb(108,108,108)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,40%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 243,\\n        \\\"desc\\\": \\\"Grey46\\\",\\n        \\\"html\\\": \\\"#767676\\\",\\n        \\\"rgb\\\": \\\"rgb(118,118,118)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,46%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 244,\\n        \\\"desc\\\": \\\"Grey50\\\",\\n        \\\"html\\\": \\\"#808080\\\",\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 245,\\n        \\\"desc\\\": \\\"Grey54\\\",\\n        \\\"html\\\": \\\"#8a8a8a\\\",\\n        \\\"rgb\\\": \\\"rgb(138,138,138)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,54%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 246,\\n        \\\"desc\\\": \\\"Grey58\\\",\\n        \\\"html\\\": \\\"#949494\\\",\\n        \\\"rgb\\\": \\\"rgb(148,148,148)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,58%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 247,\\n        \\\"desc\\\": \\\"Grey62\\\",\\n        \\\"html\\\": \\\"#9e9e9e\\\",\\n        \\\"rgb\\\": \\\"rgb(158,158,158)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,61%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 248,\\n        \\\"desc\\\": \\\"Grey66\\\",\\n        \\\"html\\\": \\\"#a8a8a8\\\",\\n        \\\"rgb\\\": \\\"rgb(168,168,168)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,65%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 249,\\n        \\\"desc\\\": \\\"Grey70\\\",\\n        \\\"html\\\": \\\"#b2b2b2\\\",\\n        \\\"rgb\\\": \\\"rgb(178,178,178)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,69%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 250,\\n        \\\"desc\\\": \\\"Grey74\\\",\\n        \\\"html\\\": \\\"#bcbcbc\\\",\\n        \\\"rgb\\\": \\\"rgb(188,188,188)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,73%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 251,\\n        \\\"desc\\\": \\\"Grey78\\\",\\n        \\\"html\\\": \\\"#c6c6c6\\\",\\n        \\\"rgb\\\": \\\"rgb(198,198,198)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,77%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 252,\\n        \\\"desc\\\": \\\"Grey82\\\",\\n        \\\"html\\\": \\\"#d0d0d0\\\",\\n        \\\"rgb\\\": \\\"rgb(208,208,208)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,81%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 253,\\n        \\\"desc\\\": \\\"Grey85\\\",\\n        \\\"html\\\": \\\"#dadada\\\",\\n        \\\"rgb\\\": \\\"rgb(218,218,218)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,85%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 254,\\n        \\\"desc\\\": \\\"Grey89\\\",\\n        \\\"html\\\": \\\"#e4e4e4\\\",\\n        \\\"rgb\\\": \\\"rgb(228,228,228)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,89%)\\\\r\\\"\\n    },\\n    {\\n        \\\"ansi\\\": 255,\\n        \\\"desc\\\": \\\"Grey93\\\",\\n        \\\"html\\\": \\\"#eeeeee\\\",\\n        \\\"rgb\\\": \\\"rgb(238,238,238)\\\",\\n        \\\"hsl\\\": \\\"hsl(0,0%,93%)\\\"\\n    }\\n];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RhYmxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFDL0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBLENBQUMsd0NBQXdDO0FBQzFELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtBQUU5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO0FBQ2xGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztBQUN2RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsb0RBQW9EO0FBRXBFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxVQUFVLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRTNELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsc0RBQXNEO0lBQ3RELG1GQUFtRjtJQUNuRixtR0FBbUc7SUFDbkcsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FB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UUFBUTtJQUM1QyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLENBQUMsQ0FDQSxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUVELDJEQUEyRDtBQUMzRCxTQUFTLFdBQVcsQ0FBQyxRQUFRO0lBQzVCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxH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LE1BQU0sRUFBRSxRQUFRO1FBQ2hCLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsS0FBSyxFQUFFLGVBQWU7S0FDdEI7Q0FDRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSEVBREVSID0gMDtcdC8vIEluZGV4IG9mIHRoZSBoZWFkZXIgc3R5bGVzXG5jb25zdCBESVZJREVSID0gMVx0Ly8gSW5kZXggb2YgdGhlIGhvcml6b250YWwgZGl2aWRlciBzdHlsZVxuY29uc3QgRk9PVEVSID0gMjtcdC8vIEluZGV4IG9mIHRoZSBmb290ZXIgc3R5bGVcblxuY29uc3QgT1BFTkVSID0gMDtcdC8vIEluZGV4IG9mIHRoZSBvcGVuZXIgbGluZSBjaGFyYWN0ZXJcbmNvbnN0IFNFUEFSQVRPUiA9IDE7IC8vIEluZGV4IG9mIHRoZSBzZXBhcmF0b3IgbGluZSBjaGFyYWN0ZXIgKHdoZXJlIGNvbHVtbnMgbWVldClcbmNvbnN0IENMT1NFUiA9IDI7XHQvLyBJbmRleCBvZiB0aGUgY2xvc2VyIGxpbmUgY2hhcmFjdGVyXG5jb25zdCBGSUxMRVIgPSAzO1x0Ly8gSW5kZXggb2YgdGhlIGZpbGxlciBsaW5lIGNoYXJhY3RlclxuY29uc3QgQkFSID0gNDtcdFx0Ly8gSW5kZXggb2YgdGhlIHN0cmFpZ2h0IHZlcnRpY2FsIGJhciBsaW5lIGNoYXJhY3RlclxuXG5leHBvcnQgbGV0IHdpbiA9IGdsb2JhbFRoaXMsIGRvYyA9IHdpbltcImRvY3VtZW50XCJdXG5sZXQgZm10ID0gSW50bC5OdW1iZXJGb3JtYXQoJ2VuJywgeyBub3RhdGlvbjogJ2NvbXBhY3QnIH0pO1xuXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XG5cdG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuXG5cdC8vIFNvbWUgc2FtcGxlIGRhdGEsIGJhc2ljIGluZm9ybWF0aW9uIG9uIHJvb3Qgc2VydmVyc1xuXHQvLyBOb3RlIHRoYXQgaWYgeW91IHdhbnQgY29sb3IsIHlvdSBuZWVkIHRvIHVzZSBDb2xvclByaW50IGFzIHRoZSBwcmludGluZyBmdW5jdGlvblxuXHQvLyBDb2xvcmVkIGNlbGxzIG5lZWQgdG8gYmUgYW4gb2JqZWN0IHdpdGggY29sb3IgYW5kIHRleHQsIGluc3RlYWQgb2YgXCJhbnlcIi4uIFJlZCBjZWxsIGV4YW1wbGUgaGVyZVxuXHRsZXQgZGF0YSA9IG5zLnNjYW4oJ2hvbWUnKS5tYXAocyA9PiBbeyBjb2xvcjogJ3JlZCcsIHRleHQ6IHMgfSwgbnMuZ2V0U2VydmVyTWF4UmFtKHMpLCBucy5nZXRTZXJ2ZXJNYXhNb25leShzKV0pO1xuXG5cdC8vIEZvciBib2xkIHdlIG5lZWQgdG8gY29ycmVjdCB0aGUgc3BhY2luZy4uLiBTa2V0Y2ggQUYsIG5vdCBzdXJlIGhvdyBlbHNlLlxuXHQvLyBsZXQgYm9sZFRleHQgPSAnYm9sZCB0ZXh0IGV4YW1wbGUgYmxhaCc7XG5cdC8vIGxldCBzcGFjaW5nID0gLTAuMDA2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjcgKiBib2xkVGV4dC5sZW5ndGg7XG5cdGRhdGEucHVzaChbXG5cdFx0eyBzdHlsZTogeyBjb2xvcjogJ3JlZCcgfSwgdGV4dDogJ25vcGUnIH0sXG5cdFx0Ly97IHN0eWxlOiB7IGNvbG9yOiAncmVkJywgZm9udFdlaWdodDogJ2JvbGQnLCBsZXR0ZXJTcGFjaW5nOiBzcGFjaW5nIH0sIHRleHQ6IGJvbGRUZXh0IH0sXG5cdFx0eyBzdHlsZTogeyBjb2xvcjogJ3doaXRlJywgZm9udFN0eWxlOiAnaXRhbGljJyB9LCB0ZXh0OiAnaXRhbGljIHRleHQnIH0sXG5cdFx0eyBzdHlsZTogeyBjb2xvcjogJ3doaXRlJywgdGV4dERlY29yYXRpb25MaW5lOiAnbGluZS10aHJvdWdoJywgdGV4dERlY29yYXRpb25TdHlsZTogJ3NvbGlkJyB9LCB0ZXh0OiAnc3RyaWtldGhyb3VnaCB0ZXh0JyB9XG5cdF0pO1xuXG5cdC8vIEZyZWUgc3R5bGUsIG5vIGNvbHVtbnMsIHRoZSB0YWJsZSBhZGp1c3RzIHRvIGNvbnRlbnRzXG5cdFByaW50VGFibGUobnMsIGRhdGEsIHVuZGVmaW5lZCwgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xuXG5cdC8vIEV4YW1wbGUgb2YgYWRkaW5nIGEgYnJlYWsgbGluZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSB0YWJsZTpcblx0Ly8gZGF0YS5wdXNoKG51bGwpO1xuXHQvLyBkYXRhLnB1c2goLi4ubnMuc2Nhbignc2lnbWEtY29zbWV0aWNzJykuc2xpY2UoMSkubWFwKHMgPT4gW3MsIG5zLmdldFNlcnZlck1heFJhbShzKSwgbnMuZ2V0U2VydmVyTWF4TW9uZXkocyldKSk7XG5cblx0Ly8gV2UgdXNlIHByZS1kZWZpbmVkIGNvbHVtbnNcblx0Ly8gaGVhZGVyOiBUaGUgdGV4dCB0byBkaXNwbGF5XG5cdC8vIHdpZHRoIDogV2lkdGggb2YgdGhlIGNvbHVtbiBjb250ZW50XG5cdC8vIHBhZCAgIDogMCBmb3IgY2VudGVyLCA8IDAgZm9yIGxlZnQsID4gMCBmb3IgcmlnaHRcblx0Y29uc3QgY29sdW1ucyA9IFtcblx0XHR7IGhlYWRlcjogJ1NlcnZlcnMnLCB3aWR0aDogNDAgfSxcblx0XHR7IGhlYWRlcjogJ1JhbScsIHdpZHRoOiAxMyB9LFxuXHRcdHsgaGVhZGVyOiAnTW9uZXknLCB3aWR0aDogMjAgfVxuXHRdO1xuXHRQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBEZWZhdWx0U3R5bGUoKSwgQ29sb3JQcmludCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmludFRhYmxlKG5zLCBkYXRhLCBjb2x1bW5zLCBzdHlsZSA9IERlZmF1bHRTdHlsZSgpLCBwcmludGZ1bmMgPSBucy5wcmludCkge1xuXHQvLyBpZiAocHJpbnRmdW5jICE9IG5zLnByaW50KVxuXHQvLyBcdHByaW50ZnVuYyA9IG5zLnRwcmludDsgLy8gVGVtcCBmaXggdW50aWwgSSBnZXQgYW5zaSBjb2xvcnMgd29ya2luZ1xuXG5cdC8vIENyZWF0ZSBkZWZhdWx0IGNvbHVtbnMgaWYgbm8gZGVmaW5pdGlvbiB3ZXJlIHByb3ZpZGVkXG5cdGxldCBjb2x1bW5zUHJvdmlkZWQgPSB0cnVlO1xuXHRpZiAoY29sdW1ucyA9PSB1bmRlZmluZWQpIHtcblx0XHRjb2x1bW5zUHJvdmlkZWQgPSBmYWxzZTtcblx0XHRjb2x1bW5zID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhWzBdLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgbG9uZ2VzdCA9IDA7XG5cdFx0XHRmb3IgKGxldCBpaSA9IDA7IGlpIDwgZGF0YS5sZW5ndGg7IGlpKyspIHtcblx0XHRcdFx0aWYgKGRhdGFbaWldID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0XHRsZXQgbGVuID0gZGF0YVtpaV1baV0udGV4dCAhPSB1bmRlZmluZWQgPyBkYXRhW2lpXVtpXS50ZXh0Lmxlbmd0aCA6IGRhdGFbaWldW2ldLnRvU3RyaW5nKCkubGVuZ3RoO1xuXHRcdFx0XHRpZiAobGVuID4gbG9uZ2VzdCkgbG9uZ2VzdCA9IGxlbjtcblx0XHRcdH1cblx0XHRcdGNvbHVtbnMucHVzaCh7IGhlYWRlcjogJycsIHdpZHRoOiBsb25nZXN0LCBwYWRIZWFkZXI6IDAsIHBhZENvbnRlbnQ6IDAgfSk7XG5cdFx0fVxuXHR9XG5cblx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0hFQURFUl0sIHByaW50ZnVuYyk7XG5cdGlmIChjb2x1bW5zUHJvdmlkZWQpIHtcblx0XHRQcmludEhlYWRlcihucywgY29sdW1ucywgc3R5bGVbSEVBREVSXSwgcHJpbnRmdW5jKVxuXHRcdFByaW50Qm9yZGVyKG5zLCBjb2x1bW5zLCBzdHlsZVtESVZJREVSXSwgcHJpbnRmdW5jKTtcblx0fVxuXHRsZXQgaSA9IDA7XG5cdGZvciAoY29uc3QgbGluZSBvZiBkYXRhKSB7XG5cdFx0UHJpbnRMaW5lKG5zLCBjb2x1bW5zLCBsaW5lLCBzdHlsZSwgcHJpbnRmdW5jLCBpKysgJSAyID09IDApO1xuXHR9XG5cdFByaW50Qm9yZGVyKG5zLCBjb2x1bW5zLCBzdHlsZVtGT09URVJdLCBwcmludGZ1bmMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRGVmYXVsdFN0eWxlKCkge1xuXHRyZXR1cm4gW1xuXHRcdFsn4pWtJywgJ+KUrCcsICfila4nLCAn4pSAJywgJ+KUgiddLFxuXHRcdFsn4pScJywgJ+KUvCcsICfilKQnLCAn4pSAJywgJ+KUgiddLFxuXHRcdFsn4pWwJywgJ+KUtCcsICfila8nLCAn4pSAJywgJ+KUgiddXG5cdF07XG59XG5cbmZ1bmN0aW9uIFByaW50Qm9yZGVyKG5zLCBjb2x1bW5zLCBzdHlsZSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcblx0bGV0IHByaW50U3RhY2sgPSBbXTtcblx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW09QRU5FUl0pO1xuXHRmb3IgKGxldCBjID0gMDsgYyA8IGNvbHVtbnMubGVuZ3RoOyBjKyspIHtcbiAgICBpZiAoY29sdW1uc1tjXS5oaWRlKSBjb250aW51ZTtcblx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgJycucGFkRW5kKGNvbHVtbnNbY10ud2lkdGgsIHN0eWxlW0ZJTExFUl0pKTtcblx0XHRpZiAoYyA9PSBjb2x1bW5zLmxlbmd0aCAtIDEpXG5cdFx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbQ0xPU0VSXSk7XG5cdFx0ZWxzZVxuXHRcdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW1NFUEFSQVRPUl0pO1xuXG5cdH1cblx0UHJpbnRTdGFjayhucywgcHJpbnRTdGFjaywgcHJpbnRmdW5jKTtcbn1cblxuZnVuY3Rpb24gUHJpbnRIZWFkZXIobnMsIGNvbHVtbnMsIHN0eWxlLCBwcmludGZ1bmMgPSBucy5wcmludCkge1xuXHRsZXQgcHJpbnRTdGFjayA9IFtdO1xuXHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbQkFSXSk7XG5cdGZvciAobGV0IGMgPSAwOyBjIDwgY29sdW1ucy5sZW5ndGg7IGMrKykge1xuICAgIGlmIChjb2x1bW5zW2NdLmhpZGUpIGNvbnRpbnVlO1xuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBjb2x1bW5zW2NdLmhlYWRlci5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtCQVJdKTtcblx0fVxuXHRQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpO1xufVxuXG5mdW5jdGlvbiBQcmludExpbmUobnMsIGNvbHVtbnMsIGRhdGEsIHN0eWxlLCBwcmludGZ1bmMgPSBucy5wcmludCwgaGlnaGxpZ2h0KSB7XG5cdGlmIChkYXRhID09IG51bGwpIHtcblx0XHRQcmludEJvcmRlcihucywgY29sdW1ucywgc3R5bGVbRElWSURFUl0sIHByaW50ZnVuYyk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bGV0IHByaW50U3RhY2sgPSBbXTtcblx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlWzBdW0JBUl0pO1xuXHRmb3IgKGxldCBjID0gMDsgYyA8IGNvbHVtbnMubGVuZ3RoOyBjKyspIHtcbiAgICBpZiAoY29sdW1uc1tjXS5oaWRlKSBjb250aW51ZTtcblx0XHRpZiAoZGF0YVtjXS5zdHlsZSAhPSB1bmRlZmluZWQpXG5cdFx0XHRwcmludFN0YWNrLnB1c2goeyBzdHlsZTogZGF0YVtjXS5zdHlsZSB9LCBkYXRhW2NdLnRleHQucGFkRW5kKGNvbHVtbnNbY10ud2lkdGgpKTtcblx0XHRlbHNlIGlmIChkYXRhW2NdLmNvbG9yICE9IHVuZGVmaW5lZClcblx0XHRcdHByaW50U3RhY2sucHVzaChDcmVhdGVTdHlsZShkYXRhW2NdLmNvbG9yLCBoaWdobGlnaHQpLCBkYXRhW2NdLnRleHQucGFkRW5kKGNvbHVtbnNbY10ud2lkdGgpKTtcblx0XHRlbHNlXG5cdFx0XHRwcmludFN0YWNrLnB1c2goQ3JlYXRlU3R5bGUoJ3doaXRlJywgaGlnaGxpZ2h0KSwgZGF0YVtjXS50b1N0cmluZygpLnBhZEVuZChjb2x1bW5zW2NdLndpZHRoKSk7XG5cdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlWzBdW0JBUl0pO1xuXHR9XG5cblx0UHJpbnRTdGFjayhucywgcHJpbnRTdGFjaywgcHJpbnRmdW5jKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVN0eWxlKGNvbG9yLCBoaWdobGlnaHQpIHtcblx0Ly9yZXR1cm4gY29sb3I7XG5cdGxldCBiYWNrQ29sb3IgPSBoaWdobGlnaHQgPyAnIzAwMDAwMCcgOiAnIzFBMUExQSc7XG5cdHJldHVybiB7IHN0eWxlOiB7IGNvbG9yOiBjb2xvciwgYmFja2dyb3VuZENvbG9yOiBiYWNrQ29sb3IgfSB9O1xufVxuXG5mdW5jdGlvbiBQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpIHtcblx0aWYgKHByaW50ZnVuYyA9PSBucy50cHJpbnQgfHwgcHJpbnRmdW5jID09IG5zLnByaW50IHx8IHByaW50ZnVuYyA9PSBucy50cHJpbnRmKSB7XG5cdFx0Q29sb3JQcmludChucywgcHJpbnRTdGFjaywgZmFsc2UpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHByaW50ZnVuYyhucywgcHJpbnRTdGFjaywgdHJ1ZSk7XG5cdH1cbn1cblxuLy8gU2VsZWN0cyBhIGNvbG9yIGJhc2VkIG9uIGEgMS1iYXNlZCBwZXJjZW50YWdlXG5leHBvcnQgZnVuY3Rpb24gcGN0Q29sb3IocGN0KSB7XG5cdGlmIChwY3QgPj0gMSkgcmV0dXJuICdMaW1lJztcblx0ZWxzZSBpZiAocGN0ID49IDAuOSkgcmV0dXJuICdHcmVlbic7XG5cdGVsc2UgaWYgKHBjdCA+PSAwLjc1KSByZXR1cm4gJ0RhcmtHcmVlbic7XG5cdGVsc2UgaWYgKHBjdCA+PSAwLjYpIHJldHVybiAnR3JlZW5ZZWxsb3cnO1xuXHRlbHNlIGlmIChwY3QgPj0gMC4zKSByZXR1cm4gJ1llbGxvdyc7XG5cdGVsc2UgaWYgKHBjdCAhPSAwKSByZXR1cm4gJ0RhcmtPcmFuZ2UnO1xuXHRyZXR1cm4gJ1JlZCc7XG59XG5cbi8vIFVzYWdlOiBDb2xvclByaW50KG5zLCBbJ3JlZCcsICdUaGlzIGlzIHNvbWUgcmVkIHRleHQnLCAnI0ZGRkZGRicsICcgVGhpcyBpcyBzb21lIHdoaXRlIHRleHRdLCB0cnVlKTtcbmV4cG9ydCBmdW5jdGlvbiBDb2xvclByaW50KG5zLCBzdGFjaywgdG9UZXJtaW5hbCA9IHRydWUpIHtcblx0bGV0IG91dCA9ICcnO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSArPSAyKSB7XG5cdFx0bGV0IHN0eWxlID0gc3RhY2tbaV07XG5cdFx0aWYgKHN0eWxlLnN0eWxlID09IHVuZGVmaW5lZCkge1xuXHRcdFx0c3R5bGUgPSB7IHN0eWxlOiB7IGNvbG9yOiBzdGFja1tpXSwgYmFja2dyb3VuZENvbG9yOiAnIzAwMDAwMCcgfSB9O1xuXHRcdH1cblxuXHRcdGxldCBjb2xvciA9IHN0eWxlO1xuXHRcdGlmIChzdHlsZS5zdHlsZSkgY29sb3IgPSBzdHlsZS5zdHlsZS5jb2xvcjtcblxuXHRcdGxldCBtYXRjaCA9IENPTE9SUy5maW5kKHMgPT4gcy5odG1sID09IGNvbG9yIHx8IHMuZGVzYy50b0xvd2VyQ2FzZSgpID09IGNvbG9yLnRvTG93ZXJDYXNlKCkpO1xuXHRcdGlmICghbWF0Y2ggJiYgY29sb3Iuc3RhcnRzV2l0aCgnIycpKSBtYXRjaCA9IEZpbmRIdG1sQ29sb3JFcXVpdmFsZW50KG5zLCBjb2xvcik7XG5cdFx0aWYgKCFtYXRjaCkgbWF0Y2ggPSBDT0xPUlMuZmluZChzID0+IHMuZGVzYy50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoY29sb3IudG9Mb3dlckNhc2UoKSkpO1xuXHRcdGlmIChtYXRjaCkgY29sb3IgPSAnXFx4MWJbMzg7NTsnICsgbWF0Y2guYW5zaSArICdtJztcblx0XHRlbHNlIG5zLnRwcmludCgnRkFJTDogdW5zdXBwb3J0ZWQgY29sb3I6ICcgKyBjb2xvcik7XG5cblx0XHRsZXQgdGV4dCA9IHN0YWNrW2kgKyAxXS5yZXBsYWNlKCclJywgJyUlJyk7XG5cdFx0b3V0ID0gb3V0ICsgY29sb3IgKyB0ZXh0O1xuXHR9XG5cblx0aWYgKHRvVGVybWluYWwpXG5cdFx0bnMudHByaW50ZihvdXQpO1xuXHRlbHNlXG5cdFx0bnMucHJpbnRmKG91dCk7XG59XG5cbi8vIEFOU0kgY29sb3JzIHN1cHBvcnRlZCBieSB0aGUgZ2FtZSBhcmUgMjU2IGNvbG9ycywgSFRNTCBjb2xvciBpcyBSR0Jcbi8vIFRoaXMgZnVuY3Rpb25zIGZpbmRzIHRoZSBjbG9zZXN0IG1hdGNoIHRvIGEgZnVsbCByYW5nZSBIVE1MIGNvbG9yIGNvZGUgaW4gdGhlIDI1NiBjb2xvciBBTlNJIGNvbG9ycyB3ZSBoYXZlIHRvIHdvcmsgd2l0aFxuZnVuY3Rpb24gRmluZEh0bWxDb2xvckVxdWl2YWxlbnQobnMsIGh0bWxDb2RlKSB7XG5cdGxldCBjb3B5ID0gQ09MT1JTLm1hcChzID0+IHMpO1xuXG5cdGNvcHkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuXHRcdGxldCBjYSA9IHJnYkZyb21IdG1sKGEuaHRtbCk7XG5cdFx0bGV0IGNiID0gcmdiRnJvbUh0bWwoYi5odG1sKTtcblx0XHRsZXQgY29sID0gcmdiRnJvbUh0bWwoaHRtbENvZGUpO1xuXG5cdFx0bGV0IG9hID0gTWF0aC5hYnMoY2EuciAtIGNvbC5yKSArIE1hdGguYWJzKGNhLmcgLSBjb2wuZykgKyBNYXRoLmFicyhjYS5iIC0gY29sLmIpO1xuXHRcdGxldCBvYiA9IE1hdGguYWJzKGNiLnIgLSBjb2wucikgKyBNYXRoLmFicyhjYi5nIC0gY29sLmcpICsgTWF0aC5hYnMoY2IuYiAtIGNvbC5iKTtcblx0XHRyZXR1cm4gb2EgLSBvYjtcblx0fVxuXHQpO1xuXG5cdHJldHVybiBjb3B5WzBdO1xufVxuXG4vLyBDb252ZXJ0cyBhIGhleGFkZWNpbWFsIEhUTUwgY29sb3IgYmFjayB0byBSR0IgaW50IHZhbHVlc1xuZnVuY3Rpb24gcmdiRnJvbUh0bWwoaHRtbENvZGUpIHtcblx0bGV0IHIgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cigxLCAyKSk7XG5cdGxldCBnID0gTnVtYmVyLnBhcnNlSW50KCcweCcgKyBodG1sQ29kZS5zdWJzdHIoMywgMikpO1xuXHRsZXQgYiA9IE51bWJlci5wYXJzZUludCgnMHgnICsgaHRtbENvZGUuc3Vic3RyKDUsIDIpKTtcblx0cmV0dXJuIHsgcjogciwgZzogZywgYjogYiB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnN9IFxuICogQHBhcmFtIHtBcnJheX0gSlNPTiBEQVRBIGluIGZvcm0gb2YgW3tpZDoxLG5hbWU6XCJMZXhpY29uXCJ9LHtpZDoyLG5hbWU6XCJQYXJhZG94XCJ9XVxuICogQHBhcmFtIHtBcnJheX0gcGFzcyBhbiBhcnJheSBvZiBjb2x1bW5zIFxuICogQHJldHVybnMge0hUTUxUYWJsZUVsZW1lbnR9IFJldHVybnMgYSBIVE1MVGFibGVFbGVtZW50IHRoYXQgeW91IGNhbiB1c2UgRE9NLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhUTUxUYWJsZUZyb21KU09OKG5zLCBkYXRhLCBjb2x1bW5zKSB7XG5cblx0dmFyIGZvcm1hdHRlZERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEsIGNvbHVtbnMpKTtcblx0dmFyIGNvbCA9IFtdO1xuICB2YXIgaTtcblx0Zm9yIChpID0gMDsgaSA8IGZvcm1hdHRlZERhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRmb3IgKHZhciBrZXkgaW4gZm9ybWF0dGVkRGF0YVtpXSkge1xuXHRcdFx0aWYgKGNvbC5pbmRleE9mKGtleSkgPT09IC0xKSB7XG5cdFx0XHRcdGNvbC5wdXNoKGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dmFyIHRhYmxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcblx0dGFibGUuc3R5bGUud2lkdGggPSAnMTAwJSdcblxuXHR2YXIgdHIgPSB0YWJsZS5pbnNlcnRSb3coLTEpOyAgICAgICAgICAgICAgICAgICAvLyBUQUJMRSBST1cuXG5cblx0Zm9yIChpID0gMDsgaSA8IGNvbC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0aCA9IGRvYy5jcmVhdGVFbGVtZW50KFwidGhcIik7ICAgICAgLy8gVEFCTEUgSEVBREVSLlxuXHRcdHRoLmlubmVySFRNTCA9IGNvbFtpXTtcblx0XHR0ci5hcHBlbmRDaGlsZCh0aCk7XG5cdH1cblxuXHRmb3IgKGkgPSAwOyBpIDwgZm9ybWF0dGVkRGF0YS5sZW5ndGg7IGkrKykge1xuXG5cdFx0dHIgPSB0YWJsZS5pbnNlcnRSb3coLTEpO1xuXG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjb2wubGVuZ3RoOyBqKyspIHtcblx0XHRcdHZhciB0YWJDZWxsID0gdHIuaW5zZXJ0Q2VsbCgtMSk7XG5cdFx0XHRpZiAodHlwZW9mIChmb3JtYXR0ZWREYXRhW2ldW2NvbFtqXV0pID09ICdudW1iZXInKSB7XG5cdFx0XHRcdHZhciBudW1iZXIgPSBmb3JtYXR0ZWREYXRhW2ldW2NvbFtqXV1cblx0XHRcdFx0aWYgKG51bWJlciA+IDApXG5cdFx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBhZGRIdG1sV2l0aENvbG9yKFwiYVwiLCBmbXQuZm9ybWF0KG51bWJlciksIFwiZ3JlZW5cIik7XG5cdFx0XHRcdGVsc2UgaWYgKG51bWJlciA9PSAwKVxuXHRcdFx0XHRcdHRhYkNlbGwuaW5uZXJIVE1MID0gYWRkSHRtbFdpdGhDb2xvcihcImFcIiwgZm10LmZvcm1hdChudW1iZXIpLCBcIndoaXRlXCIpO1xuXHRcdFx0XHRlbHNlIGlmIChudW1iZXIgPCAwKVxuXHRcdFx0XHRcdHRhYkNlbGwuaW5uZXJIVE1MID0gYWRkSHRtbFdpdGhDb2xvcihcImFcIiwgZm10LmZvcm1hdChudW1iZXIpLCBcInJlZFwiKTtcblxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YWJDZWxsLmlubmVySFRNTCA9IGZvcm1hdHRlZERhdGFbaV1bY29sW2pdXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YWJsZTtcbn1cblxubGV0IGFkZEh0bWxXaXRoQ29sb3IgPSAodGFnLCBkYXRhLCBjb2xvcikgPT4ge1xuXHRyZXR1cm4gXCI8XCIgKyB0YWcgKyBcIiBzdHlsZT0nY29sb3I6XCIgKyBjb2xvciArIFwiJz5cIiArIGRhdGEgKyBcIjwvXCIgKyB0YWcgKyBcIj5cIjtcbn1cblxuZXhwb3J0IGxldCBDT0xPUlMgPSBbXG5cdHtcblx0XHRcImFuc2lcIjogMCxcblx0XHRcImRlc2NcIjogXCJHcmV5XCIsXG5cdFx0XCJodG1sXCI6IFwiIzgwODA4MFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMTI4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMSxcblx0XHRcImRlc2NcIjogXCJSZWRcIixcblx0XHRcImh0bWxcIjogXCIjZmYwMDAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMixcblx0XHRcImRlc2NcIjogXCJMaW1lXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwZmYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMyxcblx0XHRcImRlc2NcIjogXCJZZWxsb3dcIixcblx0XHRcImh0bWxcIjogXCIjZmZmZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNCxcblx0XHRcImRlc2NcIjogXCJCbHVlXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwMDBmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNSxcblx0XHRcImRlc2NcIjogXCJGdWNoc2lhXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2LFxuXHRcdFwiZGVzY1wiOiBcIkFxdWFcIixcblx0XHRcImh0bWxcIjogXCIjMDBmZmZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDcsXG5cdFx0XCJkZXNjXCI6IFwiV2hpdGVcIixcblx0XHRcImh0bWxcIjogXCIjZmZmZmZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMDAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogOCxcblx0XHRcImRlc2NcIjogXCJCbGFja1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwMDBcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogOSxcblx0XHRcImRlc2NcIjogXCJNYXJvb25cIixcblx0XHRcImh0bWxcIjogXCIjODAwMDAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTI4LDAsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMjUlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTAsXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW5cIixcblx0XHRcImh0bWxcIjogXCIjMDA4MDAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMjgsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSwyNSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMSxcblx0XHRcImRlc2NcIjogXCJPbGl2ZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4MDgwMDBcIixcblx0XHRcInJnYlwiOiBcInJnYigxMjgsMTI4LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSwyNSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMixcblx0XHRcImRlc2NcIjogXCJOYXZ5XCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwMDA4MFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwxMjgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMjUlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTMsXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlXCIsXG5cdFx0XCJodG1sXCI6IFwiIzgwMDA4MFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwwLDEyOClcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwyNSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNCxcblx0XHRcImRlc2NcIjogXCJUZWFsXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwODA4MFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTI4LDEyOClcIixcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSwyNSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNSxcblx0XHRcImRlc2NcIjogXCJTaWx2ZXJcIixcblx0XHRcImh0bWxcIjogXCIjYzBjMGMwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTkyLDE5MiwxOTIpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3NSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNixcblx0XHRcImRlc2NcIjogXCJHcmV5MFwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwMDBcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTcsXG5cdFx0XCJkZXNjXCI6IFwiTmF2eUJsdWVcIixcblx0XHRcImh0bWxcIjogXCIjMDAwMDVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDE4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE4LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtCbHVlXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwMDA4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMjYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTksXG5cdFx0XCJkZXNjXCI6IFwiQmx1ZTNcIixcblx0XHRcImh0bWxcIjogXCIjMDAwMGFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMCxcblx0XHRcImRlc2NcIjogXCJCbHVlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwZDdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIxLFxuXHRcdFwiZGVzY1wiOiBcIkJsdWUxXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwMDBmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjIsXG5cdFx0XCJkZXNjXCI6IFwiRGFya0dyZWVuXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwNWYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSwxOCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMyxcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTRcIixcblx0XHRcImh0bWxcIjogXCIjMDA1ZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSwxOCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNCxcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTRcIixcblx0XHRcImh0bWxcIjogXCIjMDA1Zjg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woOTcsMTAwJSwyNiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNSxcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTRcIixcblx0XHRcImh0bWxcIjogXCIjMDA1ZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMDcsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNixcblx0XHRcImRlc2NcIjogXCJEb2RnZXJCbHVlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmZDdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDk1LDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMywxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI3LFxuXHRcdFwiZGVzY1wiOiBcIkRvZGdlckJsdWUyXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwNWZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE3LDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjgsXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW40XCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwODcwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsMjYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjksXG5cdFx0XCJkZXNjXCI6IFwiU3ByaW5nR3JlZW40XCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwODc1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDYyLDEwMCUsMjYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMzAsXG5cdFx0XCJkZXNjXCI6IFwiVHVycXVvaXNlNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDEzNSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMjYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMzEsXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWUzXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwODdhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg5MywxMDAlLDM0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDMyLFxuXHRcdFwiZGVzY1wiOiBcIkRlZXBTa3lCbHVlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3ZDdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDEzNSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMDIsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAzMyxcblx0XHRcImRlc2NcIjogXCJEb2RnZXJCbHVlMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3ZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDEzNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMDgsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAzNCxcblx0XHRcImRlc2NcIjogXCJHcmVlbjNcIixcblx0XHRcImh0bWxcIjogXCIjMDBhZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAzNSxcblx0XHRcImRlc2NcIjogXCJTcHJpbmdHcmVlbjNcIixcblx0XHRcImh0bWxcIjogXCIjMDBhZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNTIsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAzNixcblx0XHRcImRlc2NcIjogXCJEYXJrQ3lhblwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGFmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjYsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAzNyxcblx0XHRcImRlc2NcIjogXCJMaWdodFNlYUdyZWVuXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwYWZhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAzOCxcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTJcIixcblx0XHRcImh0bWxcIjogXCIjMDBhZmQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDkxLDEwMCUsNDIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMzksXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWUxXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwYWZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg5OCwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDQwLFxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3MDBcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDQxLFxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3NWZcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg0NiwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDQyLFxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNTcsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA0Myxcblx0XHRcImRlc2NcIjogXCJDeWFuM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3YWZcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjgsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA0NCxcblx0XHRcImRlc2NcIjogXCJEYXJrVHVycXVvaXNlXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwZDdkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA0NSxcblx0XHRcImRlc2NcIjogXCJUdXJxdW9pc2UyXCIsXG5cdFx0XCJodG1sXCI6IFwiIzAwZDdmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg4OSwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDQ2LFxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmMDBcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDQ3LFxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmNWZcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg0MiwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDQ4LFxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNTEsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA0OSxcblx0XHRcImRlc2NcIjogXCJNZWRpdW1TcHJpbmdHcmVlblwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjEsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA1MCxcblx0XHRcImRlc2NcIjogXCJDeWFuMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmZDdcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNzAsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA1MSxcblx0XHRcImRlc2NcIjogXCJDeWFuMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNTIsXG5cdFx0XCJkZXNjXCI6IFwiRGFya1JlZFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwMDBcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwwLDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDE4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDUzLFxuXHRcdFwiZGVzY1wiOiBcIkRlZXBQaW5rNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwNWZcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwwLDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDE4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDU0LFxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTRcIixcblx0XHRcImh0bWxcIjogXCIjNWYwMDg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woODIsMTAwJSwyNiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA1NSxcblx0XHRcImRlc2NcIjogXCJQdXJwbGU0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmMDBhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDcyLDEwMCUsMzQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNTYsXG5cdFx0XCJkZXNjXCI6IFwiUHVycGxlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwZDdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwwLDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2NiwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDU3LFxuXHRcdFwiZGVzY1wiOiBcIkJsdWVWaW9sZXRcIixcblx0XHRcImh0bWxcIjogXCIjNWYwMGZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjIsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA1OCxcblx0XHRcImRlc2NcIjogXCJPcmFuZ2U0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmNWYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSwxOCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA1OSxcblx0XHRcImRlc2NcIjogXCJHcmV5MzdcIixcblx0XHRcImh0bWxcIjogXCIjNWY1ZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsOTUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNyUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2MCxcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGU0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmNWY4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTclLDQ1JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDYxLFxuXHRcdFwiZGVzY1wiOiBcIlNsYXRlQmx1ZTNcIixcblx0XHRcImh0bWxcIjogXCIjNWY1ZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsOTUsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwzMyUsNTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNjIsXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmZDdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDYwJSw2MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2Myxcblx0XHRcImRlc2NcIjogXCJSb3lhbEJsdWUxXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmNWZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2NCxcblx0XHRcImRlc2NcIjogXCJDaGFydHJldXNlNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3MDBcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg3LDEwMCUsMjYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNjUsXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3NWZcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDE3JSw0NSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2Nixcblx0XHRcImRlc2NcIjogXCJQYWxlVHVycXVvaXNlNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxNyUsNDUlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNjcsXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmODdhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjEwLDMzJSw1MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2OCxcblx0XHRcImRlc2NcIjogXCJTdGVlbEJsdWUzXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmODdkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjIwLDYwJSw2MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA2OSxcblx0XHRcImRlc2NcIjogXCJDb3JuZmxvd2VyQmx1ZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3ZmZcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyNSwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDcwLFxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2UzXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmYWYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDcsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA3MSxcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW40XCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmYWY1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMzMlLDUyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDcyLFxuXHRcdFwiZGVzY1wiOiBcIkNhZGV0Qmx1ZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmODdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxNzUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCwzMyUsNTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNzMsXG5cdFx0XCJkZXNjXCI6IFwiQ2FkZXRCbHVlXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmYWZhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDMzJSw1MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA3NCxcblx0XHRcImRlc2NcIjogXCJTa3lCbHVlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmZDdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxNzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIwMCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNzUsXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmZmZcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwxNzUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIxMCwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDc2LFxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2UzXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmZDcwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDIxNSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA3Nyxcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4zXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmZDc1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDIxNSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsNjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDc4LFxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE0MCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogNzksXG5cdFx0XCJkZXNjXCI6IFwiQXF1YW1hcmluZTNcIixcblx0XHRcImh0bWxcIjogXCIjNWZkN2FmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxNjAsNjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDgwLFxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVR1cnF1b2lzZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3ZDdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogODEsXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3ZmZcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwyMTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE5NSwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDgyLFxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2UyXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmZmYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDcsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA4Myxcblx0XHRcImRlc2NcIjogXCJTZWFHcmVlbjJcIixcblx0XHRcImh0bWxcIjogXCIjNWZmZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDg0LFxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmODdcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEzNSwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDg1LFxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDg2LFxuXHRcdFwiZGVzY1wiOiBcIkFxdWFtYXJpbmUxXCIsXG5cdFx0XCJodG1sXCI6IFwiIzVmZmZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTY1LDEwMCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogODcsXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NsYXRlR3JheTJcIixcblx0XHRcImh0bWxcIjogXCIjNWZmZmZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA4OCxcblx0XHRcImRlc2NcIjogXCJEYXJrUmVkXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3MDAwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDI2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDg5LFxuXHRcdFwiZGVzY1wiOiBcIkRlZXBQaW5rNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwNWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxNywxMDAlLDI2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDkwLFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtNYWdlbnRhXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3MDA4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwyNiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA5MSxcblx0XHRcImRlc2NcIjogXCJEYXJrTWFnZW50YVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woODYsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA5Mixcblx0XHRcImRlc2NcIjogXCJEYXJrVmlvbGV0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3MDBkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg3NywxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDkzLFxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNzEsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA5NCxcblx0XHRcImRlc2NcIjogXCJPcmFuZ2U0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3NWYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIsMTAwJSwyNiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA5NSxcblx0XHRcImRlc2NcIjogXCJMaWdodFBpbms0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3NWY1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDE3JSw0NSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiA5Nixcblx0XHRcImRlc2NcIjogXCJQbHVtNFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxNyUsNDUlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogOTcsXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3MCwzMyUsNTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogOTgsXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmZDdcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI2MCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogOTksXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI1NSwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEwMCxcblx0XHRcImRlc2NcIjogXCJZZWxsb3c0XCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3ODcwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDI2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEwMSxcblx0XHRcImRlc2NcIjogXCJXaGVhdDRcIixcblx0XHRcImh0bWxcIjogXCIjODc4NzVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxNyUsNDUlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTAyLFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1M1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDUyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEwMyxcblx0XHRcImRlc2NcIjogXCJMaWdodFNsYXRlR3JleVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3YWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEwNCxcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGVcIixcblx0XHRcImh0bWxcIjogXCIjODc4N2Q3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMDUsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTbGF0ZUJsdWVcIixcblx0XHRcImh0bWxcIjogXCIjODc4N2ZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTA2LFxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzRcIixcblx0XHRcImh0bWxcIjogXCIjODdhZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMDcsXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4zXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3YWY1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsMzMlLDUyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEwOCxcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW5cIixcblx0XHRcImh0bWxcIjogXCIjODdhZjg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDIwJSw2MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMDksXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTa3lCbHVlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiM4N2FmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDExMCxcblx0XHRcImRlc2NcIjogXCJMaWdodFNreUJsdWUzXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3YWZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIxMCw1MCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTExLFxuXHRcdFwiZGVzY1wiOiBcIlNreUJsdWUyXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3YWZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyMCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDExMixcblx0XHRcImRlc2NcIjogXCJDaGFydHJldXNlMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3MDBcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMiwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDExMyxcblx0XHRcImRlc2NcIjogXCJEYXJrT2xpdmVHcmVlbjNcIixcblx0XHRcImh0bWxcIjogXCIjODdkNzVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMDAsNjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDExNCxcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4zXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3ZDc4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCw1MCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTE1LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjNcIixcblx0XHRcImh0bWxcIjogXCIjODdkN2FmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTUwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMTYsXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NsYXRlR3JheTNcIixcblx0XHRcImh0bWxcIjogXCIjODdkN2Q3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMTcsXG5cdFx0XCJkZXNjXCI6IFwiU2t5Qmx1ZTFcIixcblx0XHRcImh0bWxcIjogXCIjODdkN2ZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjAwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTE4LFxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2UxXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3ZmYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg4LDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTE5LFxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R3JlZW5cIixcblx0XHRcImh0bWxcIjogXCIjODdmZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDI1NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMDUsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMjAsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHcmVlblwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw3NiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMjEsXG5cdFx0XCJkZXNjXCI6IFwiUGFsZUdyZWVuMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxNDAsMTAwJSw3NiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMjIsXG5cdFx0XCJkZXNjXCI6IFwiQXF1YW1hcmluZTFcIixcblx0XHRcImh0bWxcIjogXCIjODdmZmQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDI1NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTYwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTIzLFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTbGF0ZUdyYXkxXCIsXG5cdFx0XCJodG1sXCI6IFwiIzg3ZmZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEyNCxcblx0XHRcImRlc2NcIjogXCJSZWQzXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmMDAwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDM0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEyNSxcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazRcIixcblx0XHRcImh0bWxcIjogXCIjYWYwMDVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDAsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjcsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMjYsXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtVmlvbGV0UmVkXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmMDA4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMywxMDAlLDM0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEyNyxcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsMzQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTI4LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtWaW9sZXRcIixcblx0XHRcImh0bWxcIjogXCIjYWYwMGQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDAsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDg4LDEwMCUsNDIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTI5LFxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woODEsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMzAsXG5cdFx0XCJkZXNjXCI6IFwiRGFya09yYW5nZTNcIixcblx0XHRcImh0bWxcIjogXCIjYWY1ZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMiwxMDAlLDM0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEzMSxcblx0XHRcImRlc2NcIjogXCJJbmRpYW5SZWRcIixcblx0XHRcImh0bWxcIjogXCIjYWY1ZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMzMlLDUyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEzMixcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZjVmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCwzMyUsNTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTMzLFxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bU9yY2hpZDNcIixcblx0XHRcImh0bWxcIjogXCIjYWY1ZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMzMlLDUyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEzNCxcblx0XHRcImRlc2NcIjogXCJNZWRpdW1PcmNoaWRcIixcblx0XHRcImh0bWxcIjogXCIjYWY1ZmQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyODAsNjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEzNSxcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmNWZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSw5NSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjcwLDEwMCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTM2LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtHb2xkZW5yb2RcIixcblx0XHRcImh0bWxcIjogXCIjYWY4NzAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDYsMTAwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxMzcsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTYWxtb24zXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmODc1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzAsMzMlLDUyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDEzOCxcblx0XHRcImRlc2NcIjogXCJSb3N5QnJvd25cIixcblx0XHRcImh0bWxcIjogXCIjYWY4Nzg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwyMCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTM5LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk2M1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZjg3YWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTM1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE0MCxcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmODdkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3MCw1MCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTQxLFxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTFcIixcblx0XHRcImh0bWxcIjogXCIjYWY4N2ZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjYwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTQyLFxuXHRcdFwiZGVzY1wiOiBcIkdvbGQzXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmYWYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDM0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE0Myxcblx0XHRcImRlc2NcIjogXCJEYXJrS2hha2lcIixcblx0XHRcImh0bWxcIjogXCIjYWZhZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwzMyUsNTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTQ0LFxuXHRcdFwiZGVzY1wiOiBcIk5hdmFqb1doaXRlM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwyMCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTQ1LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk2OVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE0Nixcblx0XHRcImRlc2NcIjogXCJMaWdodFN0ZWVsQmx1ZTNcIixcblx0XHRcImh0bWxcIjogXCIjYWZhZmQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDMzJSw3NiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNDcsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTdGVlbEJsdWVcIixcblx0XHRcImh0bWxcIjogXCIjYWZhZmZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsODQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTQ4LFxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzNcIixcblx0XHRcImh0bWxcIjogXCIjYWZkNzAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNDksXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4zXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmZDc1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woODAsNjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE1MCxcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4zXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmZDc4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNTEsXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZmQ3YWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMzMlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE1Mixcblx0XHRcImRlc2NcIjogXCJMaWdodEN5YW4zXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmZDdkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwzMyUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTUzLFxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2t5Qmx1ZTFcIixcblx0XHRcImh0bWxcIjogXCIjYWZkN2ZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjEwLDEwMCUsODQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTU0LFxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuWWVsbG93XCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmZmYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg4LDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTU1LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmNWZcIixcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjU1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDEwMCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTU2LFxuXHRcdFwiZGVzY1wiOiBcIlBhbGVHcmVlbjFcIixcblx0XHRcImh0bWxcIjogXCIjYWZmZjg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTAwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTU3LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjJcIixcblx0XHRcImh0bWxcIjogXCIjYWZmZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsODQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTU4LFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjFcIixcblx0XHRcImh0bWxcIjogXCIjYWZmZmQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTUwLDEwMCUsODQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTU5LFxuXHRcdFwiZGVzY1wiOiBcIlBhbGVUdXJxdW9pc2UxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2FmZmZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDg0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE2MCxcblx0XHRcImRlc2NcIjogXCJSZWQzXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3MDAwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE2MSxcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazNcIixcblx0XHRcImh0bWxcIjogXCIjZDcwMDVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDAsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzMsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNjIsXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmszXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3MDA4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyMiwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE2Myxcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTEsMTAwJSw0MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNjQsXG5cdFx0XCJkZXNjXCI6IFwiTWFnZW50YTNcIixcblx0XHRcImh0bWxcIjogXCIjZDcwMGQ3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDAsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE2NSxcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNjYsXG5cdFx0XCJkZXNjXCI6IFwiRGFya09yYW5nZTNcIixcblx0XHRcImh0bWxcIjogXCIjZDc1ZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNiwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE2Nyxcblx0XHRcImRlc2NcIjogXCJJbmRpYW5SZWRcIixcblx0XHRcImh0bWxcIjogXCIjZDc1ZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsNjAlLDYwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE2OCxcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNkNzVmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDM0MCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTY5LFxuXHRcdFwiZGVzY1wiOiBcIkhvdFBpbmsyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSw5NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzIwLDYwJSw2MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNzAsXG5cdFx0XCJkZXNjXCI6IFwiT3JjaGlkXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSw5NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDYwJSw2MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNzEsXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNkNzVmZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4NSwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE3Mixcblx0XHRcImRlc2NcIjogXCJPcmFuZ2UzXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODcwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg3LDEwMCUsNDIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTczLFxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2FsbW9uM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3NWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDIwLDYwJSw2MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNzQsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRQaW5rM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNzUsXG5cdFx0XCJkZXNjXCI6IFwiUGluazNcIixcblx0XHRcImh0bWxcIjogXCIjZDc4N2FmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzMwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNzYsXG5cdFx0XCJkZXNjXCI6IFwiUGx1bTNcIixcblx0XHRcImh0bWxcIjogXCIjZDc4N2Q3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDUwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxNzcsXG5cdFx0XCJkZXNjXCI6IFwiVmlvbGV0XCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODdmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4MCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE3OCxcblx0XHRcImRlc2NcIjogXCJHb2xkM1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNkN2FmMDBcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woOCwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE3OSxcblx0XHRcImRlc2NcIjogXCJMaWdodEdvbGRlbnJvZDNcIixcblx0XHRcImh0bWxcIjogXCIjZDdhZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg0MCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTgwLFxuXHRcdFwiZGVzY1wiOiBcIlRhblwiLFxuXHRcdFwiaHRtbFwiOiBcIiNkN2FmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMCw1MCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTgxLFxuXHRcdFwiZGVzY1wiOiBcIk1pc3R5Um9zZTNcIixcblx0XHRcImh0bWxcIjogXCIjZDdhZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwzMyUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTgyLFxuXHRcdFwiZGVzY1wiOiBcIlRoaXN0bGUzXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxNzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwzMyUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTgzLFxuXHRcdFwiZGVzY1wiOiBcIlBsdW0yXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxNzUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3MCwxMDAlLDg0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE4NCxcblx0XHRcImRlc2NcIjogXCJZZWxsb3czXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZDcwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDQyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE4NSxcblx0XHRcImRlc2NcIjogXCJLaGFraTNcIixcblx0XHRcImh0bWxcIjogXCIjZDdkNzVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCw2MCUsNjAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTg2LFxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMlwiLFxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCw1MCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTg3LFxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0WWVsbG93M1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3YWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwzMyUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTg4LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk4NFwiLFxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3ZDdcIixcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDg0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE4OSxcblx0XHRcImRlc2NcIjogXCJMaWdodFN0ZWVsQmx1ZTFcIixcblx0XHRcImh0bWxcIjogXCIjZDdkN2ZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsOTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTkwLFxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzJcIixcblx0XHRcImh0bWxcIjogXCIjZDdmZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDksMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxOTEsXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4xXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmY1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyNTUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNzUsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxOTIsXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4xXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmY4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyNTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDgwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMTkzLFxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjFcIixcblx0XHRcImh0bWxcIjogXCIjZDdmZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsMTAwJSw4NCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxOTQsXG5cdFx0XCJkZXNjXCI6IFwiSG9uZXlkZXcyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyNTUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDkyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE5NSxcblx0XHRcImRlc2NcIjogXCJMaWdodEN5YW4xXCIsXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmZmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyNTUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDkyJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE5Nixcblx0XHRcImRlc2NcIjogXCJSZWQxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDAwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE5Nyxcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazJcIixcblx0XHRcImh0bWxcIjogXCIjZmYwMDVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzcsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAxOTgsXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmsxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDA4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgyOCwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDE5OSxcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazFcIixcblx0XHRcImh0bWxcIjogXCIjZmYwMGFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4LDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjAwLFxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDIxNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwOSwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIwMSxcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZjAwZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjAyLFxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZVJlZDFcIixcblx0XHRcImh0bWxcIjogXCIjZmY1ZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMiwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIwMyxcblx0XHRcImRlc2NcIjogXCJJbmRpYW5SZWQxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWY1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjA0LFxuXHRcdFwiZGVzY1wiOiBcIkluZGlhblJlZDFcIixcblx0XHRcImh0bWxcIjogXCIjZmY1Zjg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzNDUsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMDUsXG5cdFx0XCJkZXNjXCI6IFwiSG90UGlua1wiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZjVmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsOTUsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIwNixcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSwyMTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzE1LDEwMCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjA3LFxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bU9yY2hpZDFcIixcblx0XHRcImh0bWxcIjogXCIjZmY1ZmZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMDgsXG5cdFx0XCJkZXNjXCI6IFwiRGFya09yYW5nZVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZjg3MDBcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDApXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMSwxMDAlLDUwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIwOSxcblx0XHRcImRlc2NcIjogXCJTYWxtb24xXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmODc1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMTUsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMTAsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRDb3JhbFwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZjg3ODdcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjExLFxuXHRcdFwiZGVzY1wiOiBcIlBhbGVWaW9sZXRSZWQxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmODdhZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMTc1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDM0MCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIxMixcblx0XHRcImRlc2NcIjogXCJPcmNoaWQyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmODdkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMyMCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIxMyxcblx0XHRcImRlc2NcIjogXCJPcmNoaWQxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmODdmZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMjU1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIxNCxcblx0XHRcImRlc2NcIjogXCJPcmFuZ2UxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWYwMFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMClcIixcblx0XHRcImhzbFwiOiBcImhzbCgxLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjE1LFxuXHRcdFwiZGVzY1wiOiBcIlNhbmR5QnJvd25cIixcblx0XHRcImh0bWxcIjogXCIjZmZhZjVmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSw5NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMCwxMDAlLDY4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIxNixcblx0XHRcImRlc2NcIjogXCJMaWdodFNhbG1vbjFcIixcblx0XHRcImh0bWxcIjogXCIjZmZhZjg3XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwxMzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMjAsMTAwJSw3NiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMTcsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRQaW5rMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmYWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsODQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjE4LFxuXHRcdFwiZGVzY1wiOiBcIlBpbmsxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCwxMDAlLDg0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIxOSxcblx0XHRcImRlc2NcIjogXCJQbHVtMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmZmZcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDI1NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw4NCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMjAsXG5cdFx0XCJkZXNjXCI6IFwiR29sZDFcIixcblx0XHRcImh0bWxcIjogXCIjZmZkNzAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw1MCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMjEsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDc1ZlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsOTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNDUsMTAwJSw2OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMjIsXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QyXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDc4N1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsMTM1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDQwLDEwMCUsNzYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjIzLFxuXHRcdFwiZGVzY1wiOiBcIk5hdmFqb1doaXRlMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZmQ3YWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDE3NSlcIixcblx0XHRcImhzbFwiOiBcImhzbCgzMCwxMDAlLDg0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIyNCxcblx0XHRcImRlc2NcIjogXCJNaXN0eVJvc2UxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDdkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw5MiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMjUsXG5cdFx0XCJkZXNjXCI6IFwiVGhpc3RsZTFcIixcblx0XHRcImh0bWxcIjogXCIjZmZkN2ZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsOTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjI2LFxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzFcIixcblx0XHRcImh0bWxcIjogXCIjZmZmZjAwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwwKVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjI3LFxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmNWZcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDk1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNjglKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjI4LFxuXHRcdFwiZGVzY1wiOiBcIktoYWtpMVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmODdcIixcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjU1LDEzNSlcIixcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDc2JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIyOSxcblx0XHRcImRlc2NcIjogXCJXaGVhdDFcIixcblx0XHRcImh0bWxcIjogXCIjZmZmZmFmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwxNzUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSw4NCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMzAsXG5cdFx0XCJkZXNjXCI6IFwiQ29ybnNpbGsxXCIsXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZkN1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsMjE1KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsOTIlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjMxLFxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxMDBcIixcblx0XHRcImh0bWxcIjogXCIjZmZmZmZmXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMDAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjMyLFxuXHRcdFwiZGVzY1wiOiBcIkdyZXkzXCIsXG5cdFx0XCJodG1sXCI6IFwiIzA4MDgwOFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDgsOCw4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMyUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMzMsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTdcIixcblx0XHRcImh0bWxcIjogXCIjMTIxMjEyXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTgsMTgsMTgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIzNCxcblx0XHRcImRlc2NcIjogXCJHcmV5MTFcIixcblx0XHRcImh0bWxcIjogXCIjMWMxYzFjXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjgsMjgsMjgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMzUsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTE1XCIsXG5cdFx0XCJodG1sXCI6IFwiIzI2MjYyNlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDM4LDM4LDM4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMTQlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjM2LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxOVwiLFxuXHRcdFwiaHRtbFwiOiBcIiMzMDMwMzBcIixcblx0XHRcInJnYlwiOiBcInJnYig0OCw0OCw0OClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDE4JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDIzNyxcblx0XHRcImRlc2NcIjogXCJHcmV5MjNcIixcblx0XHRcImh0bWxcIjogXCIjM2EzYTNhXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoNTgsNTgsNTgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwyMiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyMzgsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTI3XCIsXG5cdFx0XCJodG1sXCI6IFwiIzQ0NDQ0NFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDY4LDY4LDY4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMjYlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjM5LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXkzMFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM0ZTRlNGVcIixcblx0XHRcInJnYlwiOiBcInJnYig3OCw3OCw3OClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDMwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI0MCxcblx0XHRcImRlc2NcIjogXCJHcmV5MzVcIixcblx0XHRcImh0bWxcIjogXCIjNTg1ODU4XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoODgsODgsODgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNDEsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTM5XCIsXG5cdFx0XCJodG1sXCI6IFwiIzYyNjI2MlwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDk4LDk4LDk4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMzclKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjQyLFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk0MlwiLFxuXHRcdFwiaHRtbFwiOiBcIiM2YzZjNmNcIixcblx0XHRcInJnYlwiOiBcInJnYigxMDgsMTA4LDEwOClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDQwJSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI0Myxcblx0XHRcImRlc2NcIjogXCJHcmV5NDZcIixcblx0XHRcImh0bWxcIjogXCIjNzY3Njc2XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTE4LDExOCwxMTgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw0NiUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNDQsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTUwXCIsXG5cdFx0XCJodG1sXCI6IFwiIzgwODA4MFwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMTI4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNTAlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjQ1LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1NFwiLFxuXHRcdFwiaHRtbFwiOiBcIiM4YThhOGFcIixcblx0XHRcInJnYlwiOiBcInJnYigxMzgsMTM4LDEzOClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDU0JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI0Nixcblx0XHRcImRlc2NcIjogXCJHcmV5NThcIixcblx0XHRcImh0bWxcIjogXCIjOTQ5NDk0XCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTQ4LDE0OCwxNDgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1OCUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNDcsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTYyXCIsXG5cdFx0XCJodG1sXCI6IFwiIzllOWU5ZVwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE1OCwxNTgsMTU4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNjElKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjQ4LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk2NlwiLFxuXHRcdFwiaHRtbFwiOiBcIiNhOGE4YThcIixcblx0XHRcInJnYlwiOiBcInJnYigxNjgsMTY4LDE2OClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDY1JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI0OSxcblx0XHRcImRlc2NcIjogXCJHcmV5NzBcIixcblx0XHRcImh0bWxcIjogXCIjYjJiMmIyXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc4LDE3OCwxNzgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2OSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNTAsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTc0XCIsXG5cdFx0XCJodG1sXCI6IFwiI2JjYmNiY1wiLFxuXHRcdFwicmdiXCI6IFwicmdiKDE4OCwxODgsMTg4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNzMlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjUxLFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk3OFwiLFxuXHRcdFwiaHRtbFwiOiBcIiNjNmM2YzZcIixcblx0XHRcInJnYlwiOiBcInJnYigxOTgsMTk4LDE5OClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDc3JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI1Mixcblx0XHRcImRlc2NcIjogXCJHcmV5ODJcIixcblx0XHRcImh0bWxcIjogXCIjZDBkMGQwXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjA4LDIwOCwyMDgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4MSUpXFxyXCJcblx0fSxcblx0e1xuXHRcdFwiYW5zaVwiOiAyNTMsXG5cdFx0XCJkZXNjXCI6IFwiR3JleTg1XCIsXG5cdFx0XCJodG1sXCI6IFwiI2RhZGFkYVwiLFxuXHRcdFwicmdiXCI6IFwicmdiKDIxOCwyMTgsMjE4KVwiLFxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsODUlKVxcclwiXG5cdH0sXG5cdHtcblx0XHRcImFuc2lcIjogMjU0LFxuXHRcdFwiZGVzY1wiOiBcIkdyZXk4OVwiLFxuXHRcdFwiaHRtbFwiOiBcIiNlNGU0ZTRcIixcblx0XHRcInJnYlwiOiBcInJnYigyMjgsMjI4LDIyOClcIixcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDg5JSlcXHJcIlxuXHR9LFxuXHR7XG5cdFx0XCJhbnNpXCI6IDI1NSxcblx0XHRcImRlc2NcIjogXCJHcmV5OTNcIixcblx0XHRcImh0bWxcIjogXCIjZWVlZWVlXCIsXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjM4LDIzOCwyMzgpXCIsXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw5MyUpXCJcblx0fVxuXTtcbiJdfQ==\",\"filename\":\"tables.js\",\"server\":\"home\"}}],[\"cct.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"./util\\\";\\nexport async function main(ns) {\\n    for (const server of getAllServers(ns)) {\\n        const contracts = ns.ls(server, '.cct');\\n        for (const contract of contracts) {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            // ns.tprintf(`${server}: ${contract} | ${type}`);\\n            solve(type, data, server, contract, ns);\\n        }\\n    }\\n}\\nasync function solve(type, data, server, contract, ns) {\\n    let solution = 'none';\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor3(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = solveFindAllValidMathExpressions(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solverLargestSubset(ns, data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = SanitizeParensSolver(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solverArrayJumpingGame(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solverWaysToSum(data);\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            solution = solveWaysToSumII(data);\\n            break;\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\n            solution = HammingEncode(data);\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            solution = HammingDecode(data);\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            solution = ShortestPathInAGrid(data);\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            solution = solverArrayJumpingGameII(data);\\n            break;\\n        case \\\"Compression II: LZ Decompression\\\":\\n            solution = comprLZDecode(data);\\n            break;\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\n            solution = coloringGraph(data);\\n            break;\\n        case \\\"Compression III: LZ Compression\\\":\\n            solution = comprLZEncode(data);\\n            break;\\n        case \\\"Compression I: RLE Compression\\\":\\n            solution = RLEencode(data);\\n            break;\\n        case \\\"Encryption I: Caesar Cipher\\\":\\n            solution = caesarCipher(data);\\n            break;\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\n            solution = vignereCipher(data);\\n            break;\\n    }\\n    if (solution == 'none') {\\n        ns.tprint('ERROR: NO SOLVER FOR ' + contract + ' ' + solution);\\n        return '';\\n    }\\n    var ret = ns.codingcontract.attempt(solution, contract, server, { returnReward: true });\\n    if (ret == false) {\\n        ns.tprint('FAILED TO SOLVE: ' + contract + ' type: ' + type + ' data: ' + data + ' attempted solution: ' + solution);\\n    }\\n    else {\\n        ns.tprintf(ret);\\n    }\\n    return ret;\\n}\\nfunction vignereCipher(data) {\\n    const cipher = [...data[0]]\\n        .map((a, i) => {\\n        return a === \\\" \\\"\\n            ? a\\n            : String.fromCharCode(((a.charCodeAt(0) - 2 * 65 + data[1].charCodeAt(i % data[1].length)) % 26) + 65);\\n    })\\n        .join(\\\"\\\");\\n    return cipher;\\n}\\nfunction caesarCipher(data) {\\n    const cipher = [...data[0]]\\n        .map((a) => (a === \\\" \\\" ? a : String.fromCharCode(((a.charCodeAt(0) - 65 - data[1] + 26) % 26) + 65)))\\n        .join(\\\"\\\");\\n    return cipher;\\n}\\nfunction solverArrayJumpingGameII(arrayData) {\\n    let n = arrayData.length;\\n    let reach = 0;\\n    let jumps = 0;\\n    let lastJump = -1;\\n    while (reach < n - 1) {\\n        let jumpedFrom = -1;\\n        for (let i = reach; i > lastJump; i--) {\\n            if (i + arrayData[i] > reach) {\\n                reach = i + arrayData[i];\\n                jumpedFrom = i;\\n            }\\n        }\\n        if (jumpedFrom === -1) {\\n            jumps = 0;\\n            break;\\n        }\\n        lastJump = jumpedFrom;\\n        jumps++;\\n    }\\n    return jumps;\\n}\\nfunction ShortestPathInAGrid(data) {\\n    let H = data.length, W = data[0].length;\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\n    dist[0][0] = 0;\\n    let queue = [[0, 0]];\\n    while (queue.length > 0) {\\n        let [i, j] = queue.shift();\\n        let d = dist[i][j];\\n        if (i > 0 && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1) {\\n            dist[i - 1][j] = d + 1;\\n            queue.push([i - 1, j]);\\n        }\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1) {\\n            dist[i + 1][j] = d + 1;\\n            queue.push([i + 1, j]);\\n        }\\n        if (j > 0 && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1) {\\n            dist[i][j - 1] = d + 1;\\n            queue.push([i, j - 1]);\\n        }\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1) {\\n            dist[i][j + 1] = d + 1;\\n            queue.push([i, j + 1]);\\n        }\\n    }\\n    let path = \\\"\\\";\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\n        let i = H - 1, j = W - 1;\\n        while (i !== 0 || j !== 0) {\\n            let d = dist[i][j];\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\n            if (i > 0 && dist[i - 1][j] < d) {\\n                d = dist[i - 1][j];\\n                new_i = i - 1;\\n                new_j = j;\\n                dir = \\\"D\\\";\\n            }\\n            if (i < H - 1 && dist[i + 1][j] < d) {\\n                d = dist[i + 1][j];\\n                new_i = i + 1;\\n                new_j = j;\\n                dir = \\\"U\\\";\\n            }\\n            if (j > 0 && dist[i][j - 1] < d) {\\n                d = dist[i][j - 1];\\n                new_i = i;\\n                new_j = j - 1;\\n                dir = \\\"R\\\";\\n            }\\n            if (j < W - 1 && dist[i][j + 1] < d) {\\n                d = dist[i][j + 1];\\n                new_i = i;\\n                new_j = j + 1;\\n                dir = \\\"L\\\";\\n            }\\n            i = new_i;\\n            j = new_j;\\n            path = dir + path;\\n        }\\n    }\\n    return path;\\n}\\n/**\\n *\\n * @param {number[][]} input [targetNumber,[available numbers]]\\n * @returns\\n */\\nfunction solveWaysToSumII(input) {\\n    /**\\n     *\\n     * @param {number} target\\n     * @param {number[]} nums\\n     * @returns\\n     */\\n    let n = input[0];\\n    let nums = input[1];\\n    let table = new Array(n + 1);\\n    for (let i = 0; i < n + 1; i++) {\\n        table[i] = 0;\\n    }\\n    table[0] = 1;\\n    for (let i of nums) {\\n        if (i > n) {\\n            continue;\\n        }\\n        for (let j = i; j <= n; j++) {\\n            table[j] += table[j - i];\\n        }\\n        console.log(table);\\n    }\\n    return table[n];\\n}\\n//ALGORITHMIC STOCK TRADER\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n//SMALLEST TRIANGLE SUM\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n//UNIQUE PATHS IN A GRID\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n//GENERATE IP ADDRESSES\\nfunction generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    const ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips.toString();\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n//GREATEST FACTOR\\nfunction factor3(n) {\\n    // Returns all the prime factors of a positive integer\\n    let factors = [];\\n    let d = 2;\\n    while (n > 1) {\\n        while (n % d == 0) {\\n            factors.push(d);\\n            n /= d;\\n        }\\n        d = d + 1;\\n        if (d * d > n) {\\n            if (n > 1)\\n                factors.push(n);\\n            break;\\n        }\\n    }\\n    if (factors.length > 0)\\n        return factors.pop();\\n    return '';\\n}\\n//SPIRALIZE Matrix\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n// Merge Overlapping Intervals\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\nfunction SanitizeParensSolver(data) {\\n    var left = 0;\\n    var right = 0;\\n    var res = [];\\n    for (var i = 0; i < data.length; ++i) {\\n        if (data[i] === '(') {\\n            ++left;\\n        }\\n        else if (data[i] === ')') {\\n            left > 0 ? --left : ++right;\\n        }\\n    }\\n    function dfs(pair, index, left, right, s, solution, res) {\\n        if (s.length === index) {\\n            if (left === 0 && right === 0 && pair === 0) {\\n                for (var i = 0; i < res.length; i++) {\\n                    if (res[i] === solution) {\\n                        return;\\n                    }\\n                }\\n                res.push(solution);\\n            }\\n            return;\\n        }\\n        if (s[index] === '(') {\\n            if (left > 0) {\\n                dfs(pair, index + 1, left - 1, right, s, solution, res);\\n            }\\n            dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\n        }\\n        else if (s[index] === ')') {\\n            if (right > 0)\\n                dfs(pair, index + 1, left, right - 1, s, solution, res);\\n            if (pair > 0)\\n                dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\n        }\\n        else {\\n            dfs(pair, index + 1, left, right, s, solution + s[index], res);\\n        }\\n    }\\n    dfs(0, 0, left, right, data, '', res);\\n    return res;\\n}\\nfunction solverArrayJumpingGame(arrayData) {\\n    if (arrayData[0] == 0)\\n        return '0';\\n    let arrayJump = [1];\\n    for (let n = 0; n < arrayData.length; n++) {\\n        if (arrayJump[n]) {\\n            for (let p = n; p <= Math.min(n + arrayData[n], arrayData.length - 1); p++) { // fixed off-by-one error\\n                arrayJump[p] = 1;\\n            }\\n        }\\n    }\\n    return 0 + Boolean(arrayJump[arrayData.length - 1]); // thanks /u/Kalumniatoris\\n}\\nfunction solverWaysToSum(arrayData) {\\n    var ways = [];\\n    ways[0] = 1;\\n    for (var a = 1; a <= arrayData; a++) {\\n        ways[a] = 0;\\n    }\\n    for (var i = 1; i <= arrayData - 1; i++) {\\n        for (var j = i; j <= arrayData; j++) {\\n            ways[j] += ways[j - i];\\n        }\\n    }\\n    return ways[arrayData];\\n}\\nfunction solverWaysToExpress(ns, arrayData) {\\n    let i, j, k;\\n    let operatorList = [\\\"\\\", \\\"+\\\", \\\"-\\\", \\\"*\\\"];\\n    let validExpressions = [];\\n    let tempPermutations = Math.pow(4, (arrayData[0].length - 1));\\n    for (i = 0; i < tempPermutations; i++) {\\n        let arraySummands = [];\\n        let candidateExpression = arrayData[0].substr(0, 1);\\n        arraySummands[0] = parseInt(arrayData[0].substr(0, 1));\\n        for (j = 1; j < arrayData[0].length; j++) {\\n            candidateExpression += operatorList[(i >> ((j - 1) * 2)) % 4] + arrayData[0].substr(j, 1);\\n            let rollingOperator = operatorList[(i >> ((j - 1) * 2)) % 4];\\n            let rollingOperand = parseInt(arrayData[0].substr(j, 1));\\n            switch (rollingOperator) {\\n                case \\\"\\\":\\n                    rollingOperand = rollingOperand * (arraySummands[arraySummands.length - 1] / Math.abs(arraySummands[arraySummands.length - 1]));\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * 10 + rollingOperand;\\n                    break;\\n                case \\\"+\\\":\\n                    arraySummands[arraySummands.length] = rollingOperand;\\n                    break;\\n                case \\\"-\\\":\\n                    arraySummands[arraySummands.length] = 0 - rollingOperand;\\n                    break;\\n                case \\\"*\\\":\\n                    while (j < arrayData[0].length - 1 && ((i >> (j * 2)) % 4) === 0) {\\n                        j += 1;\\n                        candidateExpression += arrayData[0].substr(j, 1);\\n                        rollingOperand = rollingOperand * 10 + parseInt(arrayData[0].substr(j, 1));\\n                    }\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * rollingOperand;\\n                    break;\\n            }\\n        }\\n        let rollingTotal = arraySummands.reduce(function (a, b) { return a + b; });\\n        if (arrayData[1] === rollingTotal) {\\n            validExpressions[validExpressions.length] = candidateExpression;\\n        }\\n    }\\n    return JSON.stringify(validExpressions);\\n}\\nfunction solveFindAllValidMathExpressions(arrayData) {\\n    const num = arrayData[0];\\n    const target = arrayData[1];\\n    function helper(res, path, num, target, pos, evaluated, multed) {\\n        if (pos === num.length) {\\n            if (target === evaluated) {\\n                res.push(path);\\n            }\\n            return;\\n        }\\n        for (let i = pos; i < num.length; ++i) {\\n            if (i != pos && num[pos] == \\\"0\\\") {\\n                break;\\n            }\\n            const cur = parseInt(num.substring(pos, i + 1));\\n            if (pos === 0) {\\n                helper(res, path + cur, num, target, i + 1, cur, cur);\\n            }\\n            else {\\n                helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\n                helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\n                helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\n            }\\n        }\\n    }\\n    const result = [];\\n    helper(result, \\\"\\\", num, target, 0, 0, 0);\\n    return result;\\n}\\nfunction solverLargestSubset(ns, arrayData) {\\n    let highestSubset = arrayData[0];\\n    for (let i = 0; i < arrayData.length; i++) {\\n        for (let j = i; j < arrayData.length; j++) {\\n            let tempSubset = 0;\\n            for (let k = i; k <= j; k++) {\\n                tempSubset += arrayData[k];\\n            }\\n            if (highestSubset < tempSubset) {\\n                highestSubset = tempSubset;\\n            }\\n        }\\n    }\\n    return highestSubset;\\n}\\nexport function HammingSumOfParity(_lengthOfDBits) {\\n    return (_lengthOfDBits < 3 || _lengthOfDBits == 0)\\n        ? ((_lengthOfDBits == 0) ? 0 : _lengthOfDBits + 1)\\n        // the Math.log2-math will only work, if the length is greater egqual 3 otherwise it's \\\"kinda broken\\\" :D\\n        : ((Math.ceil(Math.log2(_lengthOfDBits * 2))) <= Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits)))))\\n            ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\n            : Math.ceil(Math.log2(_lengthOfDBits));\\n}\\nexport function HammingEncode(value) {\\n    let _dataBits = value.toString(2); // change value into string of binary bits\\n    let _sum_parity = HammingSumOfParity(_dataBits.length); // get the sum of needed parity bits\\n    let _data = _dataBits.split(\\\"\\\"); // create new array with the given data bits\\n    let _build = []; // init new array for building\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\n    // count specified data in the array, for later use\\n    _build.push(\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)); // pre-build the \\\"pre-build\\\"\\n    for (let i = 2; i < _sum_parity; i++) { // add new paritybits and the corresponding data bits\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\n    }\\n    // \\\"pre\\\"-build my array, now the \\\"calculation\\\"... get the paritybits working\\n    for (let index of _build.reduce(function (a, e, i) { if (e == \\\"x\\\")\\n        a.push(i); return a; }, [])) {\\n        let _tempcount = index + 1; // set the \\\"stepsize\\\"\\n        let _temparray = []; // temporary array to store the corresponding bits\\n        let _tempdata = [..._build]; // copy the \\\"build\\\"\\n        while (_tempdata[index] !== undefined) { // as long as there are bits, do \\\"cut\\\"\\n            let _temp = _tempdata.splice(index, _tempcount * 2); // get x*2 bits, then\\n            _temparray.push(..._temp.splice(0, _tempcount)); // .. cut them and keep first half\\n        }\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\n        _build[index] = ((count(_temparray, \\\"1\\\")) % 2.).toString(); // simple count and remainder of 2 with \\\"toString\\\" to store it\\n    }\\n    _build.unshift(((count(_build, \\\"1\\\")) % 2.).toString()); // adding first index, which is done as last element\\n    return _build.join(\\\"\\\"); // return a string again\\n}\\nexport function HammingDecode(_data) {\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\n    _testArray.push((_overallParity == (count(_build, \\\"1\\\") % 2).toString()) ? true : false); // checking the \\\"overall\\\" parity\\n    for (var i = 0; i < _sum_parity; i++) {\\n        let _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\n        let _tempStep = _tempIndex + 1; // set the stepsize\\n        let _tempData = [..._build]; // \\\"copy\\\" the build-data\\n        let _tempArray = []; // init empty array for \\\"testing\\\"\\n        while (_tempData[_tempIndex] != undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\n        }\\n        let _tempParity = _tempArray.shift(); // and cut the first index for checking with the rest of the data\\n        _testArray.push(((_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString())) ? true : false); // is the _tempParity the calculated data?\\n    }\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2);\\n    }\\n    _build.unshift(_overallParity);\\n    // fix the actual hammingcode if there is an error\\n    if (_fixIndex > 0 && _testArray[0] == false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\n        _build[_fixIndex] = (_build[_fixIndex] == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\n    }\\n    else if (_testArray[0] == false) { // otherwise, if the the overall_parity is only wrong, fix that one\\n        _overallParity = (_overallParity == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\n    }\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How?\\n    }\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\n    for (var j = _sum_parity; j >= 0; j--) { // start from the last parity down the starting one\\n        _build.splice(Math.pow(2, j), 1);\\n    }\\n    _build.splice(0, 1);\\n    return parseInt(_build.join(\\\"\\\"), 2);\\n}\\n// decompress LZ-compressed string, or return null if input is invalid\\nfunction comprLZDecode(compr) {\\n    let plain = \\\"\\\";\\n    for (let i = 0; i < compr.length;) {\\n        const literal_length = compr.charCodeAt(i) - 0x30;\\n        if (literal_length < 0 || literal_length > 9 || i + 1 + literal_length > compr.length) {\\n            return null;\\n        }\\n        plain += compr.substring(i + 1, i + 1 + literal_length);\\n        i += 1 + literal_length;\\n        if (i >= compr.length) {\\n            break;\\n        }\\n        const backref_length = compr.charCodeAt(i) - 0x30;\\n        if (backref_length < 0 || backref_length > 9) {\\n            return null;\\n        }\\n        else if (backref_length === 0) {\\n            ++i;\\n        }\\n        else {\\n            if (i + 1 >= compr.length) {\\n                return null;\\n            }\\n            const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\n            if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) || backref_offset > plain.length) {\\n                return null;\\n            }\\n            for (let j = 0; j < backref_length; ++j) {\\n                plain += plain[plain.length - backref_offset];\\n            }\\n            i += 2;\\n        }\\n    }\\n    return plain;\\n}\\nfunction coloringGraph(data) {\\n    //Helper function to get neighbourhood of a vertex\\n    function neighbourhood(vertex) {\\n        const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\n        const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\n        return adjLeft.concat(adjRight);\\n    }\\n    //Verify that there is no solution by attempting to create a proper 2-coloring.\\n    const coloring = Array(data[0]).fill(undefined);\\n    while (coloring.some((val) => val === undefined)) {\\n        //Color a vertex in the graph\\n        const initialVertex = coloring.findIndex((val) => val === undefined);\\n        coloring[initialVertex] = 0;\\n        const frontier = [initialVertex];\\n        //Propogate the coloring throughout the component containing v greedily\\n        while (frontier.length > 0) {\\n            const v = frontier.pop() || 0;\\n            const neighbors = neighbourhood(v);\\n            //For each vertex u adjacent to v\\n            for (const id in neighbors) {\\n                const u = neighbors[id];\\n                //Set the color of u to the opposite of v's color if it is new,\\n                //then add u to the frontier to continue the algorithm.\\n                if (coloring[u] === undefined) {\\n                    if (coloring[v] === 0)\\n                        coloring[u] = 1;\\n                    else\\n                        coloring[u] = 0;\\n                    frontier.push(u);\\n                }\\n                //Assert u,v do not have the same color\\n                else if (coloring[u] === coloring[v]) {\\n                    //If u,v do have the same color, no proper 2-coloring exists, meaning\\n                    //the player was correct to say there is no proper 2-coloring of the graph.\\n                    return \\\"[]\\\";\\n                }\\n            }\\n        }\\n    }\\n    return coloring;\\n}\\n// compress plaintest string\\nexport function comprLZEncode(plain) {\\n    // for state[i][j]:\\n    //      if i is 0, we're adding a literal of length j\\n    //      else, we're adding a backreference of offset i and length j\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\n    let new_state = Array.from(Array(10), () => Array(10));\\n    function set(state, i, j, str) {\\n        const current = state[i][j];\\n        if (current == null || str.length < current.length) {\\n            state[i][j] = str;\\n        }\\n        else if (str.length === current.length && Math.random() < 0.5) {\\n            // if two strings are the same length, pick randomly so that\\n            // we generate more possible inputs to Compression II\\n            state[i][j] = str;\\n        }\\n    }\\n    // initial state is a literal of length 1\\n    cur_state[0][1] = \\\"\\\";\\n    for (let i = 1; i < plain.length; ++i) {\\n        for (const row of new_state) {\\n            row.fill(null);\\n        }\\n        const c = plain[i];\\n        // handle literals\\n        for (let length = 1; length <= 9; ++length) {\\n            const string = cur_state[0][length];\\n            if (string == null) {\\n                continue;\\n            }\\n            if (length < 9) {\\n                // extend current literal\\n                set(new_state, 0, length + 1, string);\\n            }\\n            else {\\n                // start new literal\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\n            }\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\n                if (plain[i - offset] === c) {\\n                    // start new backreference\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\n                }\\n            }\\n        }\\n        // handle backreferences\\n        for (let offset = 1; offset <= 9; ++offset) {\\n            for (let length = 1; length <= 9; ++length) {\\n                const string = cur_state[offset][length];\\n                if (string == null) {\\n                    continue;\\n                }\\n                if (plain[i - offset] === c) {\\n                    if (length < 9) {\\n                        // extend current backreference\\n                        set(new_state, offset, length + 1, string);\\n                    }\\n                    else {\\n                        // start new backreference\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\n                    }\\n                }\\n                // start new literal\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\n                // end current backreference and start new backreference\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\n                    if (plain[i - new_offset] === c) {\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\n                    }\\n                }\\n            }\\n        }\\n        const tmp_state = new_state;\\n        new_state = cur_state;\\n        cur_state = tmp_state;\\n    }\\n    let result = null;\\n    for (let len = 1; len <= 9; ++len) {\\n        let string = cur_state[0][len];\\n        if (string == null) {\\n            continue;\\n        }\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\n        if (result == null || string.length < result.length) {\\n            result = string;\\n        }\\n        else if (string.length == result.length && Math.random() < 0.5) {\\n            result = string;\\n        }\\n    }\\n    for (let offset = 1; offset <= 9; ++offset) {\\n        for (let len = 1; len <= 9; ++len) {\\n            let string = cur_state[offset][len];\\n            if (string == null) {\\n                continue;\\n            }\\n            string += String(len) + \\\"\\\" + String(offset);\\n            if (result == null || string.length < result.length) {\\n                result = string;\\n            }\\n            else if (string.length == result.length && Math.random() < 0.5) {\\n                result = string;\\n            }\\n        }\\n    }\\n    return result ?? \\\"\\\";\\n}\\nfunction RLEencode(data) {\\n    let chars = Array.from(data);\\n    let answer = '';\\n    let current = undefined;\\n    let count = 0;\\n    while (chars.length > 0) {\\n        let char = chars.shift();\\n        switch (current) {\\n            case undefined:\\n                current = char;\\n                count = 1;\\n                break;\\n            case char:\\n                if (count == 9) {\\n                    answer = `${answer}${count}${current}`;\\n                    count = 0;\\n                }\\n                count++;\\n                break;\\n            default:\\n                answer = `${answer}${count}${current}`;\\n                current = char;\\n                count = 1;\\n                break;\\n        }\\n    }\\n    answer = `${answer}${count}${current}`;\\n    return answer;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDM0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDdEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6RCxrREFBa0Q7WUFDbEQsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QztLQUNGO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7SUFDcEQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBRXRCLFFBQVEsSUFBSSxFQUFFO1FBQ2IsS0FBSyw0QkFBNEI7WUFDaEMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU07UUFDUCxLQUFLLDZCQUE2QjtZQUNqQyxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFF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LENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ2hILElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3BILElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDaEgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxD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aUJBQ3JLO3FCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzVJO3FCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMxQixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkk7cUJBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQzFCLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMs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LEVBQUU7UUFDeEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLFFBQVEsT0FBTyxFQUFFO1lBQ2hCLEtBQUssU0FBUztnQkFDYixPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNmLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ1YsTUFBTTtZQUNQLEtBQUssSUFBSTtnQkFDUixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7b0JBQ2YsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztvQkFDdkMsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDVjtnQkFDRCxLQUFLLEVBQUUsQ0FBQztnQkFDUixNQUFNO1lBQ1A7Z0JBQ0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztnQkFDdkMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLE1BQU07U0FDUDtLQUNEO0lBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUN2QyxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XG4gIGZvciAoY29uc3Qgc2VydmVyIG9mIGdldEFsbFNlcnZlcnMobnMpKSB7XG4gICAgY29uc3QgY29udHJhY3RzID0gbnMubHMoc2VydmVyLCAnLmNjdCcpO1xuICAgIGZvciAoY29uc3QgY29udHJhY3Qgb2YgY29udHJhY3RzKSB7XG4gICAgICBjb25zdCB0eXBlID0gbnMuY29kaW5nY29udHJhY3QuZ2V0Q29udHJhY3RUeXBlKGNvbnRyYWN0LCBzZXJ2ZXIpO1xuICAgICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XG4gICAgICAvLyBucy50cHJpbnRmKGAke3NlcnZlcn06ICR7Y29udHJhY3R9IHwgJHt0eXBlfWApO1xuICAgICAgc29sdmUodHlwZSwgZGF0YSwgc2VydmVyLCBjb250cmFjdCwgbnMpO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzb2x2ZSh0eXBlLCBkYXRhLCBzZXJ2ZXIsIGNvbnRyYWN0LCBucykge1xuXHRsZXQgc29sdXRpb24gPSAnbm9uZSc7XG5cblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Y2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJXCI6XG5cdFx0XHRzb2x1dGlvbiA9IG1heFByb2ZpdChbMSwgZGF0YV0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJSVwiOlxuXHRcdFx0c29sdXRpb24gPSBtYXhQcm9maXQoW01hdGguY2VpbChkYXRhLmxlbmd0aCAvIDIpLCBkYXRhXSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElJSVwiOlxuXHRcdFx0c29sdXRpb24gPSBtYXhQcm9maXQoWzIsIGRhdGFdKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJBbGdvcml0aG1pYyBTdG9jayBUcmFkZXIgSVZcIjpcblx0XHRcdHNvbHV0aW9uID0gbWF4UHJvZml0KGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIk1pbmltdW0gUGF0aCBTdW0gaW4gYSBUcmlhbmdsZVwiOlxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZVRyaWFuZ2xlU3VtKGRhdGEsIG5zKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJVbmlxdWUgUGF0aHMgaW4gYSBHcmlkIElcIjpcblx0XHRcdHNvbHV0aW9uID0gdW5pcXVlUGF0aHNJKGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIlVuaXF1ZSBQYXRocyBpbiBhIEdyaWQgSUlcIjpcblx0XHRcdHNvbHV0aW9uID0gdW5pcXVlUGF0aHNJSShkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJHZW5lcmF0ZSBJUCBBZGRyZXNzZXNcIjpcblx0XHRcdHNvbHV0aW9uID0gZ2VuZXJhdGVJcHMoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiRmluZCBMYXJnZXN0IFByaW1lIEZhY3RvclwiOlxuXHRcdFx0c29sdXRpb24gPSBmYWN0b3IzKGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIlNwaXJhbGl6ZSBNYXRyaXhcIjpcblx0XHRcdHNvbHV0aW9uID0gc3BpcmFsKGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIk1lcmdlIE92ZXJsYXBwaW5nIEludGVydmFsc1wiOlxuXHRcdFx0c29sdXRpb24gPSBtZXJnZU92ZXJsYXAoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiRmluZCBBbGwgVmFsaWQgTWF0aCBFeHByZXNzaW9uc1wiOlxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZUZpbmRBbGxWYWxpZE1hdGhFeHByZXNzaW9ucyhkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJTdWJhcnJheSB3aXRoIE1heGltdW0gU3VtXCI6XG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlckxhcmdlc3RTdWJzZXQobnMsIGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIlNhbml0aXplIFBhcmVudGhlc2VzIGluIEV4cHJlc3Npb25cIjpcblx0XHRcdHNvbHV0aW9uID0gU2FuaXRpemVQYXJlbnNTb2x2ZXIoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiQXJyYXkgSnVtcGluZyBHYW1lXCI6XG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlckFycmF5SnVtcGluZ0dhbWUoZGF0YSlcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bVwiOlxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZXJXYXlzVG9TdW0oZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiVG90YWwgV2F5cyB0byBTdW0gSUlcIjpcblx0XHRcdHNvbHV0aW9uID0gc29sdmVXYXlzVG9TdW1JSShkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJIYW1taW5nQ29kZXM6IEludGVnZXIgdG8gRW5jb2RlZCBCaW5hcnlcIjpcblx0XHRcdHNvbHV0aW9uID0gSGFtbWluZ0VuY29kZShkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJIYW1taW5nQ29kZXM6IEVuY29kZWQgQmluYXJ5IHRvIEludGVnZXJcIjpcblx0XHRcdHNvbHV0aW9uID0gSGFtbWluZ0RlY29kZShkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJTaG9ydGVzdCBQYXRoIGluIGEgR3JpZFwiOlxuXHRcdFx0c29sdXRpb24gPSBTaG9ydGVzdFBhdGhJbkFHcmlkKGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIkFycmF5IEp1bXBpbmcgR2FtZSBJSVwiOlxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZXJBcnJheUp1bXBpbmdHYW1lSUkoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiQ29tcHJlc3Npb24gSUk6IExaIERlY29tcHJlc3Npb25cIjpcblx0XHRcdHNvbHV0aW9uID0gY29tcHJMWkRlY29kZShkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJQcm9wZXIgMi1Db2xvcmluZyBvZiBhIEdyYXBoXCI6XG5cdFx0XHRzb2x1dGlvbiA9IGNvbG9yaW5nR3JhcGgoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiQ29tcHJlc3Npb24gSUlJOiBMWiBDb21wcmVzc2lvblwiOlxuXHRcdFx0c29sdXRpb24gPSBjb21wckxaRW5jb2RlKGRhdGEpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIkNvbXByZXNzaW9uIEk6IFJMRSBDb21wcmVzc2lvblwiOlxuXHRcdFx0c29sdXRpb24gPSBSTEVlbmNvZGUoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiRW5jcnlwdGlvbiBJOiBDYWVzYXIgQ2lwaGVyXCI6XG5cdFx0XHRzb2x1dGlvbiA9IGNhZXNhckNpcGhlcihkYXRhKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJFbmNyeXB0aW9uIElJOiBWaWdlbsOocmUgQ2lwaGVyXCI6XG5cdFx0XHRzb2x1dGlvbiA9IHZpZ25lcmVDaXBoZXIoZGF0YSk7XG5cdFx0XHRicmVhaztcblx0fVxuXG5cdGlmIChzb2x1dGlvbiA9PSAnbm9uZScpIHtcblx0XHRucy50cHJpbnQoJ0VSUk9SOiBOTyBTT0xWRVIgRk9SICcgKyBjb250cmFjdCArICcgJyArIHNvbHV0aW9uKTtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHR2YXIgcmV0ID0gbnMuY29kaW5nY29udHJhY3QuYXR0ZW1wdChzb2x1dGlvbiwgY29udHJhY3QsIHNlcnZlciwgeyByZXR1cm5SZXdhcmQ6IHRydWUgfSk7XG5cdGlmIChyZXQgPT0gZmFsc2UpIHtcblx0XHRucy50cHJpbnQoJ0ZBSUxFRCBUTyBTT0xWRTogJyArIGNvbnRyYWN0ICsgJyB0eXBlOiAnICsgdHlwZSArICcgZGF0YTogJyArIGRhdGEgKyAnIGF0dGVtcHRlZCBzb2x1dGlvbjogJyArIHNvbHV0aW9uKTtcblx0fSBlbHNlIHtcbiAgICBucy50cHJpbnRmKHJldCk7XG4gIH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB2aWduZXJlQ2lwaGVyKGRhdGEpIHtcblx0Y29uc3QgY2lwaGVyID0gWy4uLmRhdGFbMF1dXG5cdFx0Lm1hcCgoYSwgaSkgPT4ge1xuXHRcdFx0cmV0dXJuIGEgPT09IFwiIFwiXG5cdFx0XHRcdD8gYVxuXHRcdFx0XHQ6IFN0cmluZy5mcm9tQ2hhckNvZGUoKChhLmNoYXJDb2RlQXQoMCkgLSAyICogNjUgKyBkYXRhWzFdLmNoYXJDb2RlQXQoaSAlIGRhdGFbMV0ubGVuZ3RoKSkgJSAyNikgKyA2NSk7XG5cdFx0fSlcblx0XHQuam9pbihcIlwiKTtcblx0cmV0dXJuIGNpcGhlcjtcbn1cblxuZnVuY3Rpb24gY2Flc2FyQ2lwaGVyKGRhdGEpIHtcblx0Y29uc3QgY2lwaGVyID0gWy4uLmRhdGFbMF1dXG5cdFx0Lm1hcCgoYSkgPT4gKGEgPT09IFwiIFwiID8gYSA6IFN0cmluZy5mcm9tQ2hhckNvZGUoKChhLmNoYXJDb2RlQXQoMCkgLSA2NSAtIGRhdGFbMV0gKyAyNikgJSAyNikgKyA2NSkpKVxuXHRcdC5qb2luKFwiXCIpO1xuXHRyZXR1cm4gY2lwaGVyO1xufVxuXG5mdW5jdGlvbiBzb2x2ZXJBcnJheUp1bXBpbmdHYW1lSUkoYXJyYXlEYXRhKSB7XG5cdGxldCBuID0gYXJyYXlEYXRhLmxlbmd0aDtcblx0bGV0IHJlYWNoID0gMDtcblx0bGV0IGp1bXBzID0gMDtcblx0bGV0IGxhc3RKdW1wID0gLTE7XG5cdHdoaWxlIChyZWFjaCA8IG4gLSAxKSB7XG5cdFx0bGV0IGp1bXBlZEZyb20gPSAtMTtcblx0XHRmb3IgKGxldCBpID0gcmVhY2g7IGkgPiBsYXN0SnVtcDsgaS0tKSB7XG5cdFx0XHRpZiAoaSArIGFycmF5RGF0YVtpXSA+IHJlYWNoKSB7XG5cdFx0XHRcdHJlYWNoID0gaSArIGFycmF5RGF0YVtpXTtcblx0XHRcdFx0anVtcGVkRnJvbSA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChqdW1wZWRGcm9tID09PSAtMSkge1xuXHRcdFx0anVtcHMgPSAwO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGxhc3RKdW1wID0ganVtcGVkRnJvbTtcblx0XHRqdW1wcysrO1xuXHR9XG5cdHJldHVybiBqdW1wc1xufVxuXG5mdW5jdGlvbiBTaG9ydGVzdFBhdGhJbkFHcmlkKGRhdGEpIHtcblx0bGV0IEggPSBkYXRhLmxlbmd0aCwgVyA9IGRhdGFbMF0ubGVuZ3RoO1xuXHRsZXQgZGlzdCA9IEFycmF5LmZyb20oQXJyYXkoSCksICgpID0+IEFycmF5KFcpLmZpbGwoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSk7XG5cdGRpc3RbMF1bMF0gPSAwO1xuXG5cdGxldCBxdWV1ZSA9IFtbMCwgMF1dO1xuXHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdGxldCBbaSwgal0gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdGxldCBkID0gZGlzdFtpXVtqXTtcblxuXHRcdGlmIChpID4gMCAmJiBkICsgMSA8IGRpc3RbaSAtIDFdW2pdICYmIGRhdGFbaSAtIDFdW2pdICE9PSAxKSB7IGRpc3RbaSAtIDFdW2pdID0gZCArIDE7IHF1ZXVlLnB1c2goW2kgLSAxLCBqXSk7IH1cblx0XHRpZiAoaSA8IEggLSAxICYmIGQgKyAxIDwgZGlzdFtpICsgMV1bal0gJiYgZGF0YVtpICsgMV1bal0gIT09IDEpIHsgZGlzdFtpICsgMV1bal0gPSBkICsgMTsgcXVldWUucHVzaChbaSArIDEsIGpdKTsgfVxuXHRcdGlmIChqID4gMCAmJiBkICsgMSA8IGRpc3RbaV1baiAtIDFdICYmIGRhdGFbaV1baiAtIDFdICE9PSAxKSB7IGRpc3RbaV1baiAtIDFdID0gZCArIDE7IHF1ZXVlLnB1c2goW2ksIGogLSAxXSk7IH1cblx0XHRpZiAoaiA8IFcgLSAxICYmIGQgKyAxIDwgZGlzdFtpXVtqICsgMV0gJiYgZGF0YVtpXVtqICsgMV0gIT09IDEpIHsgZGlzdFtpXVtqICsgMV0gPSBkICsgMTsgcXVldWUucHVzaChbaSwgaiArIDFdKTsgfVxuXHR9XG5cblx0bGV0IHBhdGggPSBcIlwiO1xuXHRpZiAoTnVtYmVyLmlzRmluaXRlKGRpc3RbSCAtIDFdW1cgLSAxXSkpIHtcblx0XHRsZXQgaSA9IEggLSAxLCBqID0gVyAtIDE7XG5cdFx0d2hpbGUgKGkgIT09IDAgfHwgaiAhPT0gMCkge1xuXHRcdFx0bGV0IGQgPSBkaXN0W2ldW2pdO1xuXG5cdFx0XHRsZXQgbmV3X2kgPSAwLCBuZXdfaiA9IDAsIGRpciA9IFwiXCI7XG5cdFx0XHRpZiAoaSA+IDAgJiYgZGlzdFtpIC0gMV1bal0gPCBkKSB7IGQgPSBkaXN0W2kgLSAxXVtqXTsgbmV3X2kgPSBpIC0gMTsgbmV3X2ogPSBqOyBkaXIgPSBcIkRcIjsgfVxuXHRcdFx0aWYgKGkgPCBIIC0gMSAmJiBkaXN0W2kgKyAxXVtqXSA8IGQpIHsgZCA9IGRpc3RbaSArIDFdW2pdOyBuZXdfaSA9IGkgKyAxOyBuZXdfaiA9IGo7IGRpciA9IFwiVVwiOyB9XG5cdFx0XHRpZiAoaiA+IDAgJiYgZGlzdFtpXVtqIC0gMV0gPCBkKSB7IGQgPSBkaXN0W2ldW2ogLSAxXTsgbmV3X2kgPSBpOyBuZXdfaiA9IGogLSAxOyBkaXIgPSBcIlJcIjsgfVxuXHRcdFx0aWYgKGogPCBXIC0gMSAmJiBkaXN0W2ldW2ogKyAxXSA8IGQpIHsgZCA9IGRpc3RbaV1baiArIDFdOyBuZXdfaSA9IGk7IG5ld19qID0gaiArIDE7IGRpciA9IFwiTFwiOyB9XG5cblx0XHRcdGkgPSBuZXdfaTsgaiA9IG5ld19qO1xuXHRcdFx0cGF0aCA9IGRpciArIHBhdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHBhdGg7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyW11bXX0gaW5wdXQgW3RhcmdldE51bWJlcixbYXZhaWxhYmxlIG51bWJlcnNdXVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gc29sdmVXYXlzVG9TdW1JSShpbnB1dCkge1xuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldFxuXHQgKiBAcGFyYW0ge251bWJlcltdfSBudW1zXG5cdCAqIEByZXR1cm5zXG5cdCAqL1xuXHRsZXQgbiA9IGlucHV0WzBdO1xuXHRsZXQgbnVtcyA9IGlucHV0WzFdO1xuXHRsZXQgdGFibGUgPSBuZXcgQXJyYXkobiArIDEpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IG4gKyAxOyBpKyspIHtcblx0XHR0YWJsZVtpXSA9IDA7XG5cdH1cblx0dGFibGVbMF0gPSAxO1xuXG5cdGZvciAobGV0IGkgb2YgbnVtcykge1xuXHRcdGlmIChpID4gbikge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGZvciAobGV0IGogPSBpOyBqIDw9IG47IGorKykge1xuXHRcdFx0dGFibGVbal0gKz0gdGFibGVbaiAtIGldO1xuXHRcdH1cblx0XHRjb25zb2xlLmxvZyh0YWJsZSk7XG5cdH1cblx0cmV0dXJuIHRhYmxlW25dO1xufVxuXG4vL0FMR09SSVRITUlDIFNUT0NLIFRSQURFUlxuZnVuY3Rpb24gbWF4UHJvZml0KGFycmF5RGF0YSkge1xuXHRsZXQgaSwgaiwgaztcblxuXHRsZXQgbWF4VHJhZGVzID0gYXJyYXlEYXRhWzBdO1xuXHRsZXQgc3RvY2tQcmljZXMgPSBhcnJheURhdGFbMV07XG5cblx0bGV0IHRlbXBTdHIgPSBcIlswXCI7XG5cdGZvciAoaSA9IDA7IGkgPCBzdG9ja1ByaWNlcy5sZW5ndGg7IGkrKykge1xuXHRcdHRlbXBTdHIgKz0gXCIsMFwiO1xuXHR9XG5cdHRlbXBTdHIgKz0gXCJdXCI7XG5cdGxldCB0ZW1wQXJyID0gXCJbXCIgKyB0ZW1wU3RyO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWF4VHJhZGVzIC0gMTsgaSsrKSB7XG5cdFx0dGVtcEFyciArPSBcIixcIiArIHRlbXBTdHI7XG5cdH1cblx0dGVtcEFyciArPSBcIl1cIjtcblxuXHRsZXQgaGlnaGVzdFByb2ZpdCA9IEpTT04ucGFyc2UodGVtcEFycik7XG5cblx0Zm9yIChpID0gMDsgaSA8IG1heFRyYWRlczsgaSsrKSB7XG5cdFx0Zm9yIChqID0gMDsgaiA8IHN0b2NrUHJpY2VzLmxlbmd0aDsgaisrKSB7IC8vIEJ1eSAvIFN0YXJ0XG5cdFx0XHRmb3IgKGsgPSBqOyBrIDwgc3RvY2tQcmljZXMubGVuZ3RoOyBrKyspIHsgLy8gU2VsbCAvIEVuZFxuXHRcdFx0XHRpZiAoaSA+IDAgJiYgaiA+IDAgJiYgayA+IDApIHtcblx0XHRcdFx0XHRoaWdoZXN0UHJvZml0W2ldW2tdID0gTWF0aC5tYXgoaGlnaGVzdFByb2ZpdFtpXVtrXSwgaGlnaGVzdFByb2ZpdFtpIC0gMV1ba10sIGhpZ2hlc3RQcm9maXRbaV1bayAtIDFdLCBoaWdoZXN0UHJvZml0W2kgLSAxXVtqIC0gMV0gKyBzdG9ja1ByaWNlc1trXSAtIHN0b2NrUHJpY2VzW2pdKTtcblx0XHRcdFx0fSBlbHNlIGlmIChpID4gMCAmJiBqID4gMCkge1xuXHRcdFx0XHRcdGhpZ2hlc3RQcm9maXRbaV1ba10gPSBNYXRoLm1heChoaWdoZXN0UHJvZml0W2ldW2tdLCBoaWdoZXN0UHJvZml0W2kgLSAxXVtrXSwgaGlnaGVzdFByb2ZpdFtpIC0gMV1baiAtIDFdICsgc3RvY2tQcmljZXNba10gLSBzdG9ja1ByaWNlc1tqXSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaSA+IDAgJiYgayA+IDApIHtcblx0XHRcdFx0XHRoaWdoZXN0UHJvZml0W2ldW2tdID0gTWF0aC5tYXgoaGlnaGVzdFByb2ZpdFtpXVtrXSwgaGlnaGVzdFByb2ZpdFtpIC0gMV1ba10sIGhpZ2hlc3RQcm9maXRbaV1bayAtIDFdLCBzdG9ja1ByaWNlc1trXSAtIHN0b2NrUHJpY2VzW2pdKTtcblx0XHRcdFx0fSBlbHNlIGlmIChqID4gMCAmJiBrID4gMCkge1xuXHRcdFx0XHRcdGhpZ2hlc3RQcm9maXRbaV1ba10gPSBNYXRoLm1heChoaWdoZXN0UHJvZml0W2ldW2tdLCBoaWdoZXN0UHJvZml0W2ldW2sgLSAxXSwgc3RvY2tQcmljZXNba10gLSBzdG9ja1ByaWNlc1tqXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIHN0b2NrUHJpY2VzW2tdIC0gc3RvY2tQcmljZXNbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBoaWdoZXN0UHJvZml0W21heFRyYWRlcyAtIDFdW3N0b2NrUHJpY2VzLmxlbmd0aCAtIDFdO1xufVxuXG4vL1NNQUxMRVNUIFRSSUFOR0xFIFNVTVxuZnVuY3Rpb24gc29sdmVUcmlhbmdsZVN1bShhcnJheURhdGEsIG5zKSB7XG5cdGxldCB0cmlhbmdsZSA9IGFycmF5RGF0YTtcblx0bGV0IG5leHRBcnJheTtcblx0bGV0IHByZXZpb3VzQXJyYXkgPSB0cmlhbmdsZVswXTtcblxuXHRmb3IgKGxldCBpID0gMTsgaSA8IHRyaWFuZ2xlLmxlbmd0aDsgaSsrKSB7XG5cdFx0bmV4dEFycmF5ID0gW107XG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCB0cmlhbmdsZVtpXS5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKGogPT0gMCkge1xuXHRcdFx0XHRuZXh0QXJyYXkucHVzaChwcmV2aW91c0FycmF5W2pdICsgdHJpYW5nbGVbaV1bal0pO1xuXHRcdFx0fSBlbHNlIGlmIChqID09IHRyaWFuZ2xlW2ldLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0bmV4dEFycmF5LnB1c2gocHJldmlvdXNBcnJheVtqIC0gMV0gKyB0cmlhbmdsZVtpXVtqXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXh0QXJyYXkucHVzaChNYXRoLm1pbihwcmV2aW91c0FycmF5W2pdLCBwcmV2aW91c0FycmF5W2ogLSAxXSkgKyB0cmlhbmdsZVtpXVtqXSk7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwcmV2aW91c0FycmF5ID0gbmV4dEFycmF5O1xuXHR9XG5cblx0cmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIG5leHRBcnJheSk7XG59XG5cbi8vVU5JUVVFIFBBVEhTIElOIEEgR1JJRFxuZnVuY3Rpb24gdW5pcXVlUGF0aHNJKGdyaWQpIHtcblx0Y29uc3QgcmlnaHRNb3ZlcyA9IGdyaWRbMF0gLSAxO1xuXHRjb25zdCBkb3duTW92ZXMgPSBncmlkWzFdIC0gMTtcblxuXHRyZXR1cm4gTWF0aC5yb3VuZChmYWN0b3JpYWxEaXZpc2lvbihyaWdodE1vdmVzICsgZG93bk1vdmVzLCByaWdodE1vdmVzKSAvIChmYWN0b3JpYWwoZG93bk1vdmVzKSkpO1xufVxuXG5mdW5jdGlvbiBmYWN0b3JpYWwobikge1xuXHRyZXR1cm4gZmFjdG9yaWFsRGl2aXNpb24obiwgMSk7XG59XG5cbmZ1bmN0aW9uIGZhY3RvcmlhbERpdmlzaW9uKG4sIGQpIHtcblx0aWYgKG4gPT0gMCB8fCBuID09IDEgfHwgbiA9PSBkKVxuXHRcdHJldHVybiAxO1xuXHRyZXR1cm4gZmFjdG9yaWFsRGl2aXNpb24obiAtIDEsIGQpICogbjtcbn1cblxuZnVuY3Rpb24gdW5pcXVlUGF0aHNJSShncmlkLCBpZ25vcmVGaXJzdCA9IGZhbHNlLCBpZ25vcmVMYXN0ID0gZmFsc2UpIHtcblx0Y29uc3QgcmlnaHRNb3ZlcyA9IGdyaWRbMF0ubGVuZ3RoIC0gMTtcblx0Y29uc3QgZG93bk1vdmVzID0gZ3JpZC5sZW5ndGggLSAxO1xuXG5cdGxldCB0b3RhbFBvc3NpYmxlUGF0aHMgPSBNYXRoLnJvdW5kKGZhY3RvcmlhbERpdmlzaW9uKHJpZ2h0TW92ZXMgKyBkb3duTW92ZXMsIHJpZ2h0TW92ZXMpIC8gKGZhY3RvcmlhbChkb3duTW92ZXMpKSk7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBncmlkLmxlbmd0aDsgaSsrKSB7XG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBncmlkW2ldLmxlbmd0aDsgaisrKSB7XG5cblx0XHRcdGlmIChncmlkW2ldW2pdID09IDEgJiYgKCFpZ25vcmVGaXJzdCB8fCAoaSAhPSAwIHx8IGogIT0gMCkpICYmICghaWdub3JlTGFzdCB8fCAoaSAhPSBncmlkLmxlbmd0aCAtIDEgfHwgaiAhPSBncmlkW2ldLmxlbmd0aCAtIDEpKSkge1xuXHRcdFx0XHRjb25zdCBuZXdBcnJheSA9IFtdO1xuXHRcdFx0XHRmb3IgKGxldCBrID0gaTsgayA8IGdyaWQubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRuZXdBcnJheS5wdXNoKGdyaWRba10uc2xpY2UoaiwgZ3JpZFtpXS5sZW5ndGgpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCByZW1vdmVkUGF0aHMgPSB1bmlxdWVQYXRoc0lJKG5ld0FycmF5LCB0cnVlLCBpZ25vcmVMYXN0KTtcblx0XHRcdFx0cmVtb3ZlZFBhdGhzICo9IHVuaXF1ZVBhdGhzSShbaSArIDEsIGogKyAxXSk7XG5cblx0XHRcdFx0dG90YWxQb3NzaWJsZVBhdGhzIC09IHJlbW92ZWRQYXRocztcblx0XHRcdH1cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB0b3RhbFBvc3NpYmxlUGF0aHM7XG59XG5cbi8vR0VORVJBVEUgSVAgQUREUkVTU0VTXG5mdW5jdGlvbiBnZW5lcmF0ZUlwcyhudW0pIHtcblx0bnVtID0gbnVtLnRvU3RyaW5nKCk7XG5cdGNvbnN0IGxlbmd0aCA9IG51bS5sZW5ndGg7XG5cdGNvbnN0IGlwcyA9IFtdO1xuXHRmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aCAtIDI7IGkrKykge1xuXHRcdGZvciAobGV0IGogPSBpICsgMTsgaiA8IGxlbmd0aCAtIDE7IGorKykge1xuXHRcdFx0Zm9yIChsZXQgayA9IGogKyAxOyBrIDwgbGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0Y29uc3QgaXAgPSBbXG5cdFx0XHRcdFx0bnVtLnNsaWNlKDAsIGkpLFxuXHRcdFx0XHRcdG51bS5zbGljZShpLCBqKSxcblx0XHRcdFx0XHRudW0uc2xpY2UoaiwgayksXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGssIG51bS5sZW5ndGgpXG5cdFx0XHRcdF07XG5cdFx0XHRcdGxldCBpc1ZhbGlkID0gdHJ1ZTtcblx0XHRcdFx0aXAuZm9yRWFjaChzZWcgPT4ge1xuXHRcdFx0XHRcdGlzVmFsaWQgPSBpc1ZhbGlkICYmIGlzVmFsaWRJcFNlZ21lbnQoc2VnKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlmIChpc1ZhbGlkKSBpcHMucHVzaChpcC5qb2luKFwiLlwiKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpcHMudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZElwU2VnbWVudChzZWdtZW50KSB7XG5cdGlmIChzZWdtZW50WzBdID09IFwiMFwiICYmIHNlZ21lbnQgIT0gXCIwXCIpIHJldHVybiBmYWxzZTtcblx0c2VnbWVudCA9IE51bWJlcihzZWdtZW50KTtcblx0aWYgKHNlZ21lbnQgPCAwIHx8IHNlZ21lbnQgPiAyNTUpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIHRydWU7XG59XG5cbi8vR1JFQVRFU1QgRkFDVE9SXG5mdW5jdGlvbiBmYWN0b3IzKG4pIHtcblx0Ly8gUmV0dXJucyBhbGwgdGhlIHByaW1lIGZhY3RvcnMgb2YgYSBwb3NpdGl2ZSBpbnRlZ2VyXG5cdGxldCBmYWN0b3JzID0gW107XG5cdGxldCBkID0gMlxuXHR3aGlsZSAobiA+IDEpIHtcblx0XHR3aGlsZSAobiAlIGQgPT0gMCkge1xuXHRcdFx0ZmFjdG9ycy5wdXNoKGQpO1xuXHRcdFx0biAvPSBkO1xuXHRcdH1cblx0XHRkID0gZCArIDFcblx0XHRpZiAoZCAqIGQgPiBuKSB7XG5cdFx0XHRpZiAobiA+IDEpIGZhY3RvcnMucHVzaChuKTtcblx0XHRcdGJyZWFrXG5cdFx0fVxuXHR9XG5cblx0aWYgKGZhY3RvcnMubGVuZ3RoID4gMCkgcmV0dXJuIGZhY3RvcnMucG9wKCk7XG5cdHJldHVybiAnJztcbn1cblxuLy9TUElSQUxJWkUgTWF0cml4XG5mdW5jdGlvbiBzcGlyYWwoYXJyLCBhY2N1bSA9IFtdKSB7XG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gYWNjdW07XG5cdH1cblx0YWNjdW0gPSBhY2N1bS5jb25jYXQoYXJyLnNoaWZ0KCkpO1xuXHRpZiAoYXJyLmxlbmd0aCA9PT0gMCB8fCBhcnJbMF0ubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIGFjY3VtO1xuXHR9XG5cdGFjY3VtID0gYWNjdW0uY29uY2F0KGNvbHVtbihhcnIsIGFyclswXS5sZW5ndGggLSAxKSk7XG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gYWNjdW07XG5cdH1cblx0YWNjdW0gPSBhY2N1bS5jb25jYXQoYXJyLnBvcCgpLnJldmVyc2UoKSk7XG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gYWNjdW07XG5cdH1cblx0YWNjdW0gPSBhY2N1bS5jb25jYXQoY29sdW1uKGFyciwgMCkucmV2ZXJzZSgpKTtcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiBhY2N1bTtcblx0fVxuXHRyZXR1cm4gc3BpcmFsKGFyciwgYWNjdW0pO1xufVxuXG5mdW5jdGlvbiBjb2x1bW4oYXJyLCBpbmRleCkge1xuXHRjb25zdCByZXMgPSBbXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBlbG0gPSBhcnJbaV0uc3BsaWNlKGluZGV4LCAxKVswXTtcblx0XHRpZiAoZWxtKSB7XG5cdFx0XHRyZXMucHVzaChlbG0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzO1xufVxuXG4vLyBNZXJnZSBPdmVybGFwcGluZyBJbnRlcnZhbHNcbmZ1bmN0aW9uIG1lcmdlT3ZlcmxhcChpbnRlcnZhbHMpIHtcblx0aW50ZXJ2YWxzLnNvcnQoKFttaW5BXSwgW21pbkJdKSA9PiBtaW5BIC0gbWluQik7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgaW50ZXJ2YWxzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Zm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgaW50ZXJ2YWxzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRjb25zdCBbbWluLCBtYXhdID0gaW50ZXJ2YWxzW2ldO1xuXHRcdFx0Y29uc3QgW2xhdGVyTWluLCBsYXRlck1heF0gPSBpbnRlcnZhbHNbal07XG5cdFx0XHRpZiAobGF0ZXJNaW4gPD0gbWF4KSB7XG5cdFx0XHRcdGNvbnN0IG5ld01heCA9IGxhdGVyTWF4ID4gbWF4ID8gbGF0ZXJNYXggOiBtYXg7XG5cdFx0XHRcdGNvbnN0IG5ld0ludGVydmFsID0gW21pbiwgbmV3TWF4XTtcblx0XHRcdFx0aW50ZXJ2YWxzW2ldID0gbmV3SW50ZXJ2YWw7XG5cdFx0XHRcdGludGVydmFscy5zcGxpY2UoaiwgMSk7XG5cdFx0XHRcdGogPSBpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gaW50ZXJ2YWxzO1xufVxuXG5mdW5jdGlvbiBTYW5pdGl6ZVBhcmVuc1NvbHZlcihkYXRhKSB7XG5cdHZhciBsZWZ0ID0gMFxuXHR2YXIgcmlnaHQgPSAwXG5cdHZhciByZXMgPSBbXVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcblx0XHRpZiAoZGF0YVtpXSA9PT0gJygnKSB7XG5cdFx0XHQrK2xlZnRcblx0XHR9IGVsc2UgaWYgKGRhdGFbaV0gPT09ICcpJykge1xuXHRcdFx0bGVmdCA+IDAgPyAtLWxlZnQgOiArK3JpZ2h0XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZGZzKHBhaXIsIGluZGV4LCBsZWZ0LCByaWdodCwgcywgc29sdXRpb24sIHJlcykge1xuXHRcdGlmIChzLmxlbmd0aCA9PT0gaW5kZXgpIHtcblx0XHRcdGlmIChsZWZ0ID09PSAwICYmIHJpZ2h0ID09PSAwICYmIHBhaXIgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAocmVzW2ldID09PSBzb2x1dGlvbikge1xuXHRcdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJlcy5wdXNoKHNvbHV0aW9uKVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdGlmIChzW2luZGV4XSA9PT0gJygnKSB7XG5cdFx0XHRpZiAobGVmdCA+IDApIHtcblx0XHRcdFx0ZGZzKHBhaXIsIGluZGV4ICsgMSwgbGVmdCAtIDEsIHJpZ2h0LCBzLCBzb2x1dGlvbiwgcmVzKVxuXHRcdFx0fVxuXHRcdFx0ZGZzKHBhaXIgKyAxLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0LCBzLCBzb2x1dGlvbiArIHNbaW5kZXhdLCByZXMpXG5cdFx0fSBlbHNlIGlmIChzW2luZGV4XSA9PT0gJyknKSB7XG5cdFx0XHRpZiAocmlnaHQgPiAwKSBkZnMocGFpciwgaW5kZXggKyAxLCBsZWZ0LCByaWdodCAtIDEsIHMsIHNvbHV0aW9uLCByZXMpXG5cdFx0XHRpZiAocGFpciA+IDApIGRmcyhwYWlyIC0gMSwgaW5kZXggKyAxLCBsZWZ0LCByaWdodCwgcywgc29sdXRpb24gKyBzW2luZGV4XSwgcmVzKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZnMocGFpciwgaW5kZXggKyAxLCBsZWZ0LCByaWdodCwgcywgc29sdXRpb24gKyBzW2luZGV4XSwgcmVzKVxuXHRcdH1cblx0fVxuXG5cdGRmcygwLCAwLCBsZWZ0LCByaWdodCwgZGF0YSwgJycsIHJlcylcblx0cmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzb2x2ZXJBcnJheUp1bXBpbmdHYW1lKGFycmF5RGF0YSkge1xuXHRpZiAoYXJyYXlEYXRhWzBdID09IDApIHJldHVybiAnMCc7XG5cdGxldCBhcnJheUp1bXAgPSBbMV07XG5cblx0Zm9yIChsZXQgbiA9IDA7IG4gPCBhcnJheURhdGEubGVuZ3RoOyBuKyspIHtcblx0XHRpZiAoYXJyYXlKdW1wW25dKSB7XG5cdFx0XHRmb3IgKGxldCBwID0gbjsgcCA8PSBNYXRoLm1pbihuICsgYXJyYXlEYXRhW25dLCBhcnJheURhdGEubGVuZ3RoIC0gMSk7IHArKykgeyAvLyBmaXhlZCBvZmYtYnktb25lIGVycm9yXG5cdFx0XHRcdGFycmF5SnVtcFtwXSA9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIDAgKyBCb29sZWFuKGFycmF5SnVtcFthcnJheURhdGEubGVuZ3RoIC0gMV0pOyAvLyB0aGFua3MgL3UvS2FsdW1uaWF0b3Jpc1xufVxuXG5mdW5jdGlvbiBzb2x2ZXJXYXlzVG9TdW0oYXJyYXlEYXRhKSB7XG5cdHZhciB3YXlzID0gW107XG5cdHdheXNbMF0gPSAxO1xuXG5cdGZvciAodmFyIGEgPSAxOyBhIDw9IGFycmF5RGF0YTsgYSsrKSB7XG5cdFx0d2F5c1thXSA9IDA7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMTsgaSA8PSBhcnJheURhdGEgLSAxOyBpKyspIHtcblx0XHRmb3IgKHZhciBqID0gaTsgaiA8PSBhcnJheURhdGE7IGorKykge1xuXHRcdFx0d2F5c1tqXSArPSB3YXlzW2ogLSBpXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gd2F5c1thcnJheURhdGFdO1xufVxuXG5mdW5jdGlvbiBzb2x2ZXJXYXlzVG9FeHByZXNzKG5zLCBhcnJheURhdGEpIHtcblx0bGV0IGksIGosIGs7XG5cblx0bGV0IG9wZXJhdG9yTGlzdCA9IFtcIlwiLCBcIitcIiwgXCItXCIsIFwiKlwiXTtcblx0bGV0IHZhbGlkRXhwcmVzc2lvbnMgPSBbXTtcblxuXHRsZXQgdGVtcFBlcm11dGF0aW9ucyA9IE1hdGgucG93KDQsIChhcnJheURhdGFbMF0ubGVuZ3RoIC0gMSkpO1xuXG5cdGZvciAoaSA9IDA7IGkgPCB0ZW1wUGVybXV0YXRpb25zOyBpKyspIHtcblx0XHRsZXQgYXJyYXlTdW1tYW5kcyA9IFtdO1xuXHRcdGxldCBjYW5kaWRhdGVFeHByZXNzaW9uID0gYXJyYXlEYXRhWzBdLnN1YnN0cigwLCAxKTtcblx0XHRhcnJheVN1bW1hbmRzWzBdID0gcGFyc2VJbnQoYXJyYXlEYXRhWzBdLnN1YnN0cigwLCAxKSk7XG5cblx0XHRmb3IgKGogPSAxOyBqIDwgYXJyYXlEYXRhWzBdLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRjYW5kaWRhdGVFeHByZXNzaW9uICs9IG9wZXJhdG9yTGlzdFsoaSA+PiAoKGogLSAxKSAqIDIpKSAlIDRdICsgYXJyYXlEYXRhWzBdLnN1YnN0cihqLCAxKTtcblxuXHRcdFx0bGV0IHJvbGxpbmdPcGVyYXRvciA9IG9wZXJhdG9yTGlzdFsoaSA+PiAoKGogLSAxKSAqIDIpKSAlIDRdO1xuXHRcdFx0bGV0IHJvbGxpbmdPcGVyYW5kID0gcGFyc2VJbnQoYXJyYXlEYXRhWzBdLnN1YnN0cihqLCAxKSk7XG5cblx0XHRcdHN3aXRjaCAocm9sbGluZ09wZXJhdG9yKSB7XG5cdFx0XHRcdGNhc2UgXCJcIjpcblx0XHRcdFx0XHRyb2xsaW5nT3BlcmFuZCA9IHJvbGxpbmdPcGVyYW5kICogKGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSAvIE1hdGguYWJzKGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSkpO1xuXHRcdFx0XHRcdGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSA9IGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSAqIDEwICsgcm9sbGluZ09wZXJhbmQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCIrXCI6XG5cdFx0XHRcdFx0YXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aF0gPSByb2xsaW5nT3BlcmFuZDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIi1cIjpcblx0XHRcdFx0XHRhcnJheVN1bW1hbmRzW2FycmF5U3VtbWFuZHMubGVuZ3RoXSA9IDAgLSByb2xsaW5nT3BlcmFuZDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIipcIjpcblx0XHRcdFx0XHR3aGlsZSAoaiA8IGFycmF5RGF0YVswXS5sZW5ndGggLSAxICYmICgoaSA+PiAoaiAqIDIpKSAlIDQpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRqICs9IDE7XG5cdFx0XHRcdFx0XHRjYW5kaWRhdGVFeHByZXNzaW9uICs9IGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSk7XG5cdFx0XHRcdFx0XHRyb2xsaW5nT3BlcmFuZCA9IHJvbGxpbmdPcGVyYW5kICogMTAgKyBwYXJzZUludChhcnJheURhdGFbMF0uc3Vic3RyKGosIDEpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdID0gYXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdICogcm9sbGluZ09wZXJhbmQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHJvbGxpbmdUb3RhbCA9IGFycmF5U3VtbWFuZHMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhICsgYjsgfSk7XG5cblx0XHRpZiAoYXJyYXlEYXRhWzFdID09PSByb2xsaW5nVG90YWwpIHtcblx0XHRcdHZhbGlkRXhwcmVzc2lvbnNbdmFsaWRFeHByZXNzaW9ucy5sZW5ndGhdID0gY2FuZGlkYXRlRXhwcmVzc2lvbjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsaWRFeHByZXNzaW9ucyk7XG59XG5cbmZ1bmN0aW9uIHNvbHZlRmluZEFsbFZhbGlkTWF0aEV4cHJlc3Npb25zKGFycmF5RGF0YSkge1xuICBjb25zdCBudW0gPSBhcnJheURhdGFbMF07XG4gIGNvbnN0IHRhcmdldCA9IGFycmF5RGF0YVsxXTtcblxuICBmdW5jdGlvbiBoZWxwZXIocmVzLCBwYXRoLCBudW0sIHRhcmdldCwgcG9zLCBldmFsdWF0ZWQsIG11bHRlZCkge1xuICAgICAgaWYgKHBvcyA9PT0gbnVtLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGV2YWx1YXRlZCkge1xuICAgICAgICAgICAgICByZXMucHVzaChwYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgbnVtLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaWYgKGkgIT0gcG9zICYmIG51bVtwb3NdID09IFwiMFwiKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjdXIgPSBwYXJzZUludChudW0uc3Vic3RyaW5nKHBvcywgaSArIDEpKTtcblxuICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcbiAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArIGN1ciwgbnVtLCB0YXJnZXQsIGkgKyAxLCBjdXIsIGN1cik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArIFwiK1wiICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGV2YWx1YXRlZCArIGN1ciwgY3VyKTtcbiAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArIFwiLVwiICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGV2YWx1YXRlZCAtIGN1ciwgLWN1cik7XG4gICAgICAgICAgICAgIGhlbHBlcihyZXMsIHBhdGggKyBcIipcIiArIGN1ciwgbnVtLCB0YXJnZXQsIGkgKyAxLCBldmFsdWF0ZWQgLSBtdWx0ZWQgKyBtdWx0ZWQgKiBjdXIsIG11bHRlZCAqIGN1cik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGhlbHBlcihyZXN1bHQsIFwiXCIsIG51bSwgdGFyZ2V0LCAwLCAwLCAwKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzb2x2ZXJMYXJnZXN0U3Vic2V0KG5zLCBhcnJheURhdGEpIHtcblx0bGV0IGhpZ2hlc3RTdWJzZXQgPSBhcnJheURhdGFbMF07XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheURhdGEubGVuZ3RoOyBpKyspIHtcblxuXHRcdGZvciAobGV0IGogPSBpOyBqIDwgYXJyYXlEYXRhLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRsZXQgdGVtcFN1YnNldCA9IDA7XG5cdFx0XHRmb3IgKGxldCBrID0gaTsgayA8PSBqOyBrKyspIHtcblx0XHRcdFx0dGVtcFN1YnNldCArPSBhcnJheURhdGFba107XG5cdFx0XHR9XG5cblx0XHRcdGlmIChoaWdoZXN0U3Vic2V0IDwgdGVtcFN1YnNldCkge1xuXHRcdFx0XHRoaWdoZXN0U3Vic2V0ID0gdGVtcFN1YnNldDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gaGlnaGVzdFN1YnNldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhhbW1pbmdTdW1PZlBhcml0eShfbGVuZ3RoT2ZEQml0cykgeyAvLyB3aWxsIGNhbGN1bGF0ZSB0aGUgbmVlZGVkIGFtb3VudCBvZiBwYXJpdHlCaXRzICd3aXRob3V0JyB0aGUgXCJvdmVyYWxsXCItUGFyaXR5XG5cdHJldHVybiAoX2xlbmd0aE9mREJpdHMgPCAzIHx8IF9sZW5ndGhPZkRCaXRzID09IDApXG5cdFx0PyAoKF9sZW5ndGhPZkRCaXRzID09IDApID8gMCA6IF9sZW5ndGhPZkRCaXRzICsgMSlcblx0XHQvLyB0aGUgTWF0aC5sb2cyLW1hdGggd2lsbCBvbmx5IHdvcmssIGlmIHRoZSBsZW5ndGggaXMgZ3JlYXRlciBlZ3F1YWwgMyBvdGhlcndpc2UgaXQncyBcImtpbmRhIGJyb2tlblwiIDpEXG5cdFx0OiAoKE1hdGguY2VpbChNYXRoLmxvZzIoX2xlbmd0aE9mREJpdHMgKiAyKSkpIDw9IE1hdGguY2VpbChNYXRoLmxvZzIoMSArIF9sZW5ndGhPZkRCaXRzICsgTWF0aC5jZWlsKE1hdGgubG9nMihfbGVuZ3RoT2ZEQml0cykpKSkpXG5cdFx0XHQ/IE1hdGguY2VpbChNYXRoLmxvZzIoX2xlbmd0aE9mREJpdHMpICsgMSlcblx0XHRcdDogTWF0aC5jZWlsKE1hdGgubG9nMihfbGVuZ3RoT2ZEQml0cykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW1taW5nRW5jb2RlKHZhbHVlKSB7XG5cdGxldCBfZGF0YUJpdHMgPSB2YWx1ZS50b1N0cmluZygyKTsgLy8gY2hhbmdlIHZhbHVlIGludG8gc3RyaW5nIG9mIGJpbmFyeSBiaXRzXG5cdGxldCBfc3VtX3Bhcml0eSA9IEhhbW1pbmdTdW1PZlBhcml0eShfZGF0YUJpdHMubGVuZ3RoKTsgLy8gZ2V0IHRoZSBzdW0gb2YgbmVlZGVkIHBhcml0eSBiaXRzXG5cdGxldCBfZGF0YSA9IF9kYXRhQml0cy5zcGxpdChcIlwiKTsgLy8gY3JlYXRlIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZlbiBkYXRhIGJpdHNcblx0bGV0IF9idWlsZCA9IFtdOyAvLyBpbml0IG5ldyBhcnJheSBmb3IgYnVpbGRpbmdcblx0bGV0IGNvdW50ID0gKGFyciwgdmFsKSA9PiBhcnIucmVkdWNlKChhLCB2KSA9PiAodiA9PT0gdmFsID8gYSArIDEgOiBhKSwgMCk7XG5cdC8vIGNvdW50IHNwZWNpZmllZCBkYXRhIGluIHRoZSBhcnJheSwgZm9yIGxhdGVyIHVzZVxuXG5cdF9idWlsZC5wdXNoKFwieFwiLCBcInhcIiwgLi4uX2RhdGEuc3BsaWNlKDAsIDEpKTsgLy8gcHJlLWJ1aWxkIHRoZSBcInByZS1idWlsZFwiXG5cblx0Zm9yIChsZXQgaSA9IDI7IGkgPCBfc3VtX3Bhcml0eTsgaSsrKSB7IC8vIGFkZCBuZXcgcGFyaXR5Yml0cyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgZGF0YSBiaXRzXG5cdFx0X2J1aWxkLnB1c2goXCJ4XCIsIC4uLl9kYXRhLnNwbGljZSgwLCBNYXRoLnBvdygyLCBpKSAtIDEpKVxuXHR9XG5cdC8vIFwicHJlXCItYnVpbGQgbXkgYXJyYXksIG5vdyB0aGUgXCJjYWxjdWxhdGlvblwiLi4uIGdldCB0aGUgcGFyaXR5Yml0cyB3b3JraW5nXG5cdGZvciAobGV0IGluZGV4IG9mIF9idWlsZC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGUsIGkpIHsgaWYgKGUgPT0gXCJ4XCIpIGEucHVzaChpKTsgcmV0dXJuIGE7IH0sIFtdKSkge1xuXHRcdGxldCBfdGVtcGNvdW50ID0gaW5kZXggKyAxOyAvLyBzZXQgdGhlIFwic3RlcHNpemVcIlxuXHRcdGxldCBfdGVtcGFycmF5ID0gW107IC8vIHRlbXBvcmFyeSBhcnJheSB0byBzdG9yZSB0aGUgY29ycmVzcG9uZGluZyBiaXRzXG5cdFx0bGV0IF90ZW1wZGF0YSA9IFsuLi5fYnVpbGRdOyAvLyBjb3B5IHRoZSBcImJ1aWxkXCJcblx0XHR3aGlsZSAoX3RlbXBkYXRhW2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7IC8vIGFzIGxvbmcgYXMgdGhlcmUgYXJlIGJpdHMsIGRvIFwiY3V0XCJcblx0XHRcdGxldCBfdGVtcCA9IF90ZW1wZGF0YS5zcGxpY2UoaW5kZXgsIF90ZW1wY291bnQgKiAyKTsgLy8gZ2V0IHgqMiBiaXRzLCB0aGVuXG5cdFx0XHRfdGVtcGFycmF5LnB1c2goLi4uX3RlbXAuc3BsaWNlKDAsIF90ZW1wY291bnQpKTsgLy8gLi4gY3V0IHRoZW0gYW5kIGtlZXAgZmlyc3QgaGFsZlxuXHRcdH1cblx0XHRfdGVtcGFycmF5LnNwbGljZSgwLCAxKTsgLy8gcmVtb3ZlIGZpcnN0IGJpdCwgd2hpY2ggaXMgdGhlIHBhcml0eSBvbmVcblx0XHRfYnVpbGRbaW5kZXhdID0gKChjb3VudChfdGVtcGFycmF5LCBcIjFcIikpICUgMi4pLnRvU3RyaW5nKCkgLy8gc2ltcGxlIGNvdW50IGFuZCByZW1haW5kZXIgb2YgMiB3aXRoIFwidG9TdHJpbmdcIiB0byBzdG9yZSBpdFxuXHR9XG5cdF9idWlsZC51bnNoaWZ0KCgoY291bnQoX2J1aWxkLCBcIjFcIikpICUgMi4pLnRvU3RyaW5nKCkpIC8vIGFkZGluZyBmaXJzdCBpbmRleCwgd2hpY2ggaXMgZG9uZSBhcyBsYXN0IGVsZW1lbnRcblx0cmV0dXJuIF9idWlsZC5qb2luKFwiXCIpIC8vIHJldHVybiBhIHN0cmluZyBhZ2FpblxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGFtbWluZ0RlY29kZShfZGF0YSkge1xuXHRsZXQgX2J1aWxkID0gX2RhdGEuc3BsaXQoXCJcIik7IC8vIHllLCBhbiBhcnJheSBhZ2FpblxuXHRsZXQgX3Rlc3RBcnJheSA9IFtdOyAgLy9mb3IgdGhlIFwidGVzdHNcIi4gaWYgYW55IGlzIGZhbHNlLCBpdCBpcyBiZWVuIGFsdGVyZWQgZGF0YSwgd2lsbCBjaGVjayBhbmQgZml4IGl0IGxhdGVyXG5cdGxldCBfc3VtX3Bhcml0eSA9IE1hdGguY2VpbChNYXRoLmxvZzIoX2RhdGEubGVuZ3RoKSk7IC8vIGV4Y2x1ZGluZyBmaXJzdCBiaXRcblx0bGV0IGNvdW50ID0gKGFyciwgdmFsKSA9PiBhcnIucmVkdWNlKChhLCB2KSA9PiAodiA9PT0gdmFsID8gYSArIDEgOiBhKSwgMCk7IC8vIGNvdW50Li4uLiBhZ2FpbiA7KVxuXHRsZXQgX292ZXJhbGxQYXJpdHkgPSBfYnVpbGQuc3BsaWNlKDAsIDEpLmpvaW4oXCJcIik7IC8vIHJlbW92ZSBmaXJzdCBpbmRleCwgZm9yIGNoZWNraW5nIGFuZCB0byB1c2UgdGhlIF9idWlsZCBwcm9wZXJseSBsYXRlclxuXHRfdGVzdEFycmF5LnB1c2goKF9vdmVyYWxsUGFyaXR5ID09IChjb3VudChfYnVpbGQsIFwiMVwiKSAlIDIpLnRvU3RyaW5nKCkpID8gdHJ1ZSA6IGZhbHNlKTsgLy8gY2hlY2tpbmcgdGhlIFwib3ZlcmFsbFwiIHBhcml0eVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IF9zdW1fcGFyaXR5OyBpKyspIHtcblx0XHRsZXQgX3RlbXBJbmRleCA9IE1hdGgucG93KDIsIGkpIC0gMSAvLyBnZXQgdGhlIHBhcml0eUJpdHMgSW5kZXhcblx0XHRsZXQgX3RlbXBTdGVwID0gX3RlbXBJbmRleCArIDEgLy8gc2V0IHRoZSBzdGVwc2l6ZVxuXHRcdGxldCBfdGVtcERhdGEgPSBbLi4uX2J1aWxkXSAvLyBcImNvcHlcIiB0aGUgYnVpbGQtZGF0YVxuXHRcdGxldCBfdGVtcEFycmF5ID0gW10gLy8gaW5pdCBlbXB0eSBhcnJheSBmb3IgXCJ0ZXN0aW5nXCJcblx0XHR3aGlsZSAoX3RlbXBEYXRhW190ZW1wSW5kZXhdICE9IHVuZGVmaW5lZCkgeyAvLyBleHRyYWN0IGZyb20gdGhlIGNvcGllZCBkYXRhIHVudGlsIHRoZSBcInN0YXJ0aW5nXCIgaW5kZXggaXMgdW5kZWZpbmVkXG5cdFx0XHR2YXIgX3RlbXAgPSBbLi4uX3RlbXBEYXRhLnNwbGljZShfdGVtcEluZGV4LCBfdGVtcFN0ZXAgKiAyKV0gLy8gZXh0cmFjdCAyKnN0ZXBzaXplXG5cdFx0XHRfdGVtcEFycmF5LnB1c2goLi4uX3RlbXAuc3BsaWNlKDAsIF90ZW1wU3RlcCkpICAvLyBhbmQgY3V0IGFnYWluIGZvciBrZWVwaW5nIGZpcnN0IGhhbGZcblx0XHR9XG5cdFx0bGV0IF90ZW1wUGFyaXR5ID0gX3RlbXBBcnJheS5zaGlmdCgpIC8vIGFuZCBjdXQgdGhlIGZpcnN0IGluZGV4IGZvciBjaGVja2luZyB3aXRoIHRoZSByZXN0IG9mIHRoZSBkYXRhXG5cdFx0X3Rlc3RBcnJheS5wdXNoKCgoX3RlbXBQYXJpdHkgPT0gKGNvdW50KF90ZW1wQXJyYXksIFwiMVwiKSAlIDIpLnRvU3RyaW5nKCkpKSA/IHRydWUgOiBmYWxzZSkgLy8gaXMgdGhlIF90ZW1wUGFyaXR5IHRoZSBjYWxjdWxhdGVkIGRhdGE/XG5cdH1cblx0bGV0IF9maXhJbmRleCA9IDA7IC8vIGluaXQgdGhlIFwiZml4aW5nXCIgaW5kZXggYW1kIHN0YXJ0IHdpdGggLTEsIGJjIHdlIGFscmVhZHkgcmVtb3ZlZCB0aGUgZmlyc3QgYml0XG5cdGZvciAobGV0IGkgPSAxOyBpIDwgX3N1bV9wYXJpdHkgKyAxOyBpKyspIHtcblx0XHRfZml4SW5kZXggKz0gKF90ZXN0QXJyYXlbaV0pID8gMCA6IChNYXRoLnBvdygyLCBpKSAvIDIpXG5cdH1cblx0X2J1aWxkLnVuc2hpZnQoX292ZXJhbGxQYXJpdHkpXG5cdC8vIGZpeCB0aGUgYWN0dWFsIGhhbW1pbmdjb2RlIGlmIHRoZXJlIGlzIGFuIGVycm9yXG5cdGlmIChfZml4SW5kZXggPiAwICYmIF90ZXN0QXJyYXlbMF0gPT0gZmFsc2UpIHsgIC8vIGlmIHRoZSBvdmVyYWxsIGlzIGZhbHNlIGFuZCB0aGUgc3VtIG9mIGNhbGN1bGF0ZWQgdmFsdWVzIGlzIGdyZWF0ZXIgZXF1YWwgMCwgZml4IHRoZSBjb3JyZXNwb25kaW5nIGhhbW1pbmctYml0XG5cdFx0X2J1aWxkW19maXhJbmRleF0gPSAoX2J1aWxkW19maXhJbmRleF0gPT0gXCIwXCIpID8gXCIxXCIgOiBcIjBcIlxuXHR9XG5cdGVsc2UgaWYgKF90ZXN0QXJyYXlbMF0gPT0gZmFsc2UpIHsgLy8gb3RoZXJ3aXNlLCBpZiB0aGUgdGhlIG92ZXJhbGxfcGFyaXR5IGlzIG9ubHkgd3JvbmcsIGZpeCB0aGF0IG9uZVxuXHRcdF9vdmVyYWxsUGFyaXR5ID0gKF9vdmVyYWxsUGFyaXR5ID09IFwiMFwiKSA/IFwiMVwiIDogXCIwXCJcblx0fVxuXHRlbHNlIGlmIChfdGVzdEFycmF5WzBdID09IHRydWUgJiYgX3Rlc3RBcnJheS5zb21lKCh0cnV0aCkgPT4gdHJ1dGggPT0gZmFsc2UpKSB7XG5cdFx0cmV0dXJuIDAgLy8gdWhtLCB0aGVyZSdzIHNvbWUgc3RyYW5nZSBnb2luZyBvbi4uLiAyIGJpdHMgYXJlIGFsdGVyZWQ/IEhvdz9cblx0fVxuXHQvLyBvb2YuLiBoYWxmd2F5IHRocm91Z2guLi4gd2UgZml4ZWQgdGhlIGFsdGVyZWQgYml0LCBub3cgXCJleHRyYWN0XCIgdGhlIHBhcml0eSBmcm9tIHRoZSBidWlsZCBhbmQgcGFyc2UgdGhlIGJpbmFyeSBkYXRhXG5cdGZvciAodmFyIGogPSBfc3VtX3Bhcml0eTsgaiA+PSAwOyBqLS0pIHsgLy8gc3RhcnQgZnJvbSB0aGUgbGFzdCBwYXJpdHkgZG93biB0aGUgc3RhcnRpbmcgb25lXG5cdFx0X2J1aWxkLnNwbGljZShNYXRoLnBvdygyLCBqKSwgMSlcblx0fVxuXHRfYnVpbGQuc3BsaWNlKDAsIDEpXG5cdHJldHVybiBwYXJzZUludChfYnVpbGQuam9pbihcIlwiKSwgMilcbn1cblxuXG4vLyBkZWNvbXByZXNzIExaLWNvbXByZXNzZWQgc3RyaW5nLCBvciByZXR1cm4gbnVsbCBpZiBpbnB1dCBpcyBpbnZhbGlkXG5mdW5jdGlvbiBjb21wckxaRGVjb2RlKGNvbXByKSB7XG5cdGxldCBwbGFpbiA9IFwiXCI7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb21wci5sZW5ndGg7KSB7XG5cdFx0Y29uc3QgbGl0ZXJhbF9sZW5ndGggPSBjb21wci5jaGFyQ29kZUF0KGkpIC0gMHgzMDtcblxuXHRcdGlmIChsaXRlcmFsX2xlbmd0aCA8IDAgfHwgbGl0ZXJhbF9sZW5ndGggPiA5IHx8IGkgKyAxICsgbGl0ZXJhbF9sZW5ndGggPiBjb21wci5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHBsYWluICs9IGNvbXByLnN1YnN0cmluZyhpICsgMSwgaSArIDEgKyBsaXRlcmFsX2xlbmd0aCk7XG5cdFx0aSArPSAxICsgbGl0ZXJhbF9sZW5ndGg7XG5cblx0XHRpZiAoaSA+PSBjb21wci5sZW5ndGgpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRjb25zdCBiYWNrcmVmX2xlbmd0aCA9IGNvbXByLmNoYXJDb2RlQXQoaSkgLSAweDMwO1xuXG5cdFx0aWYgKGJhY2tyZWZfbGVuZ3RoIDwgMCB8fCBiYWNrcmVmX2xlbmd0aCA+IDkpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0gZWxzZSBpZiAoYmFja3JlZl9sZW5ndGggPT09IDApIHtcblx0XHRcdCsraTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKGkgKyAxID49IGNvbXByLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgYmFja3JlZl9vZmZzZXQgPSBjb21wci5jaGFyQ29kZUF0KGkgKyAxKSAtIDB4MzA7XG5cdFx0XHRpZiAoKGJhY2tyZWZfbGVuZ3RoID4gMCAmJiAoYmFja3JlZl9vZmZzZXQgPCAxIHx8IGJhY2tyZWZfb2Zmc2V0ID4gOSkpIHx8IGJhY2tyZWZfb2Zmc2V0ID4gcGxhaW4ubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGJhY2tyZWZfbGVuZ3RoOyArK2opIHtcblx0XHRcdFx0cGxhaW4gKz0gcGxhaW5bcGxhaW4ubGVuZ3RoIC0gYmFja3JlZl9vZmZzZXRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpICs9IDI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHBsYWluO1xufVxuXG5mdW5jdGlvbiBjb2xvcmluZ0dyYXBoKGRhdGEpIHtcblx0Ly9IZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IG5laWdoYm91cmhvb2Qgb2YgYSB2ZXJ0ZXhcblx0ZnVuY3Rpb24gbmVpZ2hib3VyaG9vZCh2ZXJ0ZXgpIHtcblx0XHRjb25zdCBhZGpMZWZ0ID0gZGF0YVsxXS5maWx0ZXIoKFthLCBfXSkgPT4gYSA9PSB2ZXJ0ZXgpLm1hcCgoW18sIGJdKSA9PiBiKTtcblx0XHRjb25zdCBhZGpSaWdodCA9IGRhdGFbMV0uZmlsdGVyKChbXywgYl0pID0+IGIgPT0gdmVydGV4KS5tYXAoKFthLCBfXSkgPT4gYSk7XG5cdFx0cmV0dXJuIGFkakxlZnQuY29uY2F0KGFkalJpZ2h0KTtcblx0fVxuXG5cdC8vVmVyaWZ5IHRoYXQgdGhlcmUgaXMgbm8gc29sdXRpb24gYnkgYXR0ZW1wdGluZyB0byBjcmVhdGUgYSBwcm9wZXIgMi1jb2xvcmluZy5cblx0Y29uc3QgY29sb3JpbmcgPSBBcnJheShkYXRhWzBdKS5maWxsKHVuZGVmaW5lZCk7XG5cdHdoaWxlIChjb2xvcmluZy5zb21lKCh2YWwpID0+IHZhbCA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdC8vQ29sb3IgYSB2ZXJ0ZXggaW4gdGhlIGdyYXBoXG5cdFx0Y29uc3QgaW5pdGlhbFZlcnRleCA9IGNvbG9yaW5nLmZpbmRJbmRleCgodmFsKSA9PiB2YWwgPT09IHVuZGVmaW5lZCk7XG5cdFx0Y29sb3JpbmdbaW5pdGlhbFZlcnRleF0gPSAwO1xuXHRcdGNvbnN0IGZyb250aWVyID0gW2luaXRpYWxWZXJ0ZXhdO1xuXG5cdFx0Ly9Qcm9wb2dhdGUgdGhlIGNvbG9yaW5nIHRocm91Z2hvdXQgdGhlIGNvbXBvbmVudCBjb250YWluaW5nIHYgZ3JlZWRpbHlcblx0XHR3aGlsZSAoZnJvbnRpZXIubGVuZ3RoID4gMCkge1xuXHRcdFx0Y29uc3QgdiA9IGZyb250aWVyLnBvcCgpIHx8IDA7XG5cdFx0XHRjb25zdCBuZWlnaGJvcnMgPSBuZWlnaGJvdXJob29kKHYpO1xuXG5cdFx0XHQvL0ZvciBlYWNoIHZlcnRleCB1IGFkamFjZW50IHRvIHZcblx0XHRcdGZvciAoY29uc3QgaWQgaW4gbmVpZ2hib3JzKSB7XG5cdFx0XHRcdGNvbnN0IHUgPSBuZWlnaGJvcnNbaWRdO1xuXG5cdFx0XHRcdC8vU2V0IHRoZSBjb2xvciBvZiB1IHRvIHRoZSBvcHBvc2l0ZSBvZiB2J3MgY29sb3IgaWYgaXQgaXMgbmV3LFxuXHRcdFx0XHQvL3RoZW4gYWRkIHUgdG8gdGhlIGZyb250aWVyIHRvIGNvbnRpbnVlIHRoZSBhbGdvcml0aG0uXG5cdFx0XHRcdGlmIChjb2xvcmluZ1t1XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0aWYgKGNvbG9yaW5nW3ZdID09PSAwKSBjb2xvcmluZ1t1XSA9IDE7XG5cdFx0XHRcdFx0ZWxzZSBjb2xvcmluZ1t1XSA9IDA7XG5cblx0XHRcdFx0XHRmcm9udGllci5wdXNoKHUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9Bc3NlcnQgdSx2IGRvIG5vdCBoYXZlIHRoZSBzYW1lIGNvbG9yXG5cdFx0XHRcdGVsc2UgaWYgKGNvbG9yaW5nW3VdID09PSBjb2xvcmluZ1t2XSkge1xuXHRcdFx0XHRcdC8vSWYgdSx2IGRvIGhhdmUgdGhlIHNhbWUgY29sb3IsIG5vIHByb3BlciAyLWNvbG9yaW5nIGV4aXN0cywgbWVhbmluZ1xuXHRcdFx0XHRcdC8vdGhlIHBsYXllciB3YXMgY29ycmVjdCB0byBzYXkgdGhlcmUgaXMgbm8gcHJvcGVyIDItY29sb3Jpbmcgb2YgdGhlIGdyYXBoLlxuXHRcdFx0XHRcdHJldHVybiBcIltdXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGNvbG9yaW5nO1xufVxuXG4vLyBjb21wcmVzcyBwbGFpbnRlc3Qgc3RyaW5nXG5leHBvcnQgZnVuY3Rpb24gY29tcHJMWkVuY29kZShwbGFpbikge1xuXHQvLyBmb3Igc3RhdGVbaV1bal06XG5cdC8vICAgICAgaWYgaSBpcyAwLCB3ZSdyZSBhZGRpbmcgYSBsaXRlcmFsIG9mIGxlbmd0aCBqXG5cdC8vICAgICAgZWxzZSwgd2UncmUgYWRkaW5nIGEgYmFja3JlZmVyZW5jZSBvZiBvZmZzZXQgaSBhbmQgbGVuZ3RoIGpcblx0bGV0IGN1cl9zdGF0ZSA9IEFycmF5LmZyb20oQXJyYXkoMTApLCAoKSA9PiBBcnJheSgxMCkuZmlsbChudWxsKSk7XG5cdGxldCBuZXdfc3RhdGUgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApKTtcblxuXHRmdW5jdGlvbiBzZXQoc3RhdGUsIGksIGosIHN0cikge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBzdGF0ZVtpXVtqXTtcblx0XHRpZiAoY3VycmVudCA9PSBudWxsIHx8IHN0ci5sZW5ndGggPCBjdXJyZW50Lmxlbmd0aCkge1xuXHRcdFx0c3RhdGVbaV1bal0gPSBzdHI7XG5cdFx0fSBlbHNlIGlmIChzdHIubGVuZ3RoID09PSBjdXJyZW50Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG5cdFx0XHQvLyBpZiB0d28gc3RyaW5ncyBhcmUgdGhlIHNhbWUgbGVuZ3RoLCBwaWNrIHJhbmRvbWx5IHNvIHRoYXRcblx0XHRcdC8vIHdlIGdlbmVyYXRlIG1vcmUgcG9zc2libGUgaW5wdXRzIHRvIENvbXByZXNzaW9uIElJXG5cdFx0XHRzdGF0ZVtpXVtqXSA9IHN0cjtcblx0XHR9XG5cdH1cblxuXHQvLyBpbml0aWFsIHN0YXRlIGlzIGEgbGl0ZXJhbCBvZiBsZW5ndGggMVxuXHRjdXJfc3RhdGVbMF1bMV0gPSBcIlwiO1xuXG5cdGZvciAobGV0IGkgPSAxOyBpIDwgcGxhaW4ubGVuZ3RoOyArK2kpIHtcblx0XHRmb3IgKGNvbnN0IHJvdyBvZiBuZXdfc3RhdGUpIHtcblx0XHRcdHJvdy5maWxsKG51bGwpO1xuXHRcdH1cblx0XHRjb25zdCBjID0gcGxhaW5baV07XG5cblx0XHQvLyBoYW5kbGUgbGl0ZXJhbHNcblx0XHRmb3IgKGxldCBsZW5ndGggPSAxOyBsZW5ndGggPD0gOTsgKytsZW5ndGgpIHtcblx0XHRcdGNvbnN0IHN0cmluZyA9IGN1cl9zdGF0ZVswXVtsZW5ndGhdO1xuXHRcdFx0aWYgKHN0cmluZyA9PSBudWxsKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGVuZ3RoIDwgOSkge1xuXHRcdFx0XHQvLyBleHRlbmQgY3VycmVudCBsaXRlcmFsXG5cdFx0XHRcdHNldChuZXdfc3RhdGUsIDAsIGxlbmd0aCArIDEsIHN0cmluZyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBzdGFydCBuZXcgbGl0ZXJhbFxuXHRcdFx0XHRzZXQobmV3X3N0YXRlLCAwLCAxLCBzdHJpbmcgKyBcIjlcIiArIHBsYWluLnN1YnN0cmluZyhpIC0gOSwgaSkgKyBcIjBcIik7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSBNYXRoLm1pbig5LCBpKTsgKytvZmZzZXQpIHtcblx0XHRcdFx0aWYgKHBsYWluW2kgLSBvZmZzZXRdID09PSBjKSB7XG5cdFx0XHRcdFx0Ly8gc3RhcnQgbmV3IGJhY2tyZWZlcmVuY2Vcblx0XHRcdFx0XHRzZXQobmV3X3N0YXRlLCBvZmZzZXQsIDEsIHN0cmluZyArIFN0cmluZyhsZW5ndGgpICsgcGxhaW4uc3Vic3RyaW5nKGkgLSBsZW5ndGgsIGkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIGhhbmRsZSBiYWNrcmVmZXJlbmNlc1xuXHRcdGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSA5OyArK29mZnNldCkge1xuXHRcdFx0Zm9yIChsZXQgbGVuZ3RoID0gMTsgbGVuZ3RoIDw9IDk7ICsrbGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnN0IHN0cmluZyA9IGN1cl9zdGF0ZVtvZmZzZXRdW2xlbmd0aF07XG5cdFx0XHRcdGlmIChzdHJpbmcgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHBsYWluW2kgLSBvZmZzZXRdID09PSBjKSB7XG5cdFx0XHRcdFx0aWYgKGxlbmd0aCA8IDkpIHtcblx0XHRcdFx0XHRcdC8vIGV4dGVuZCBjdXJyZW50IGJhY2tyZWZlcmVuY2Vcblx0XHRcdFx0XHRcdHNldChuZXdfc3RhdGUsIG9mZnNldCwgbGVuZ3RoICsgMSwgc3RyaW5nKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gc3RhcnQgbmV3IGJhY2tyZWZlcmVuY2Vcblx0XHRcdFx0XHRcdHNldChuZXdfc3RhdGUsIG9mZnNldCwgMSwgc3RyaW5nICsgXCI5XCIgKyBTdHJpbmcob2Zmc2V0KSArIFwiMFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBzdGFydCBuZXcgbGl0ZXJhbFxuXHRcdFx0XHRzZXQobmV3X3N0YXRlLCAwLCAxLCBzdHJpbmcgKyBTdHJpbmcobGVuZ3RoKSArIFN0cmluZyhvZmZzZXQpKTtcblxuXHRcdFx0XHQvLyBlbmQgY3VycmVudCBiYWNrcmVmZXJlbmNlIGFuZCBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxuXHRcdFx0XHRmb3IgKGxldCBuZXdfb2Zmc2V0ID0gMTsgbmV3X29mZnNldCA8PSBNYXRoLm1pbig5LCBpKTsgKytuZXdfb2Zmc2V0KSB7XG5cdFx0XHRcdFx0aWYgKHBsYWluW2kgLSBuZXdfb2Zmc2V0XSA9PT0gYykge1xuXHRcdFx0XHRcdFx0c2V0KG5ld19zdGF0ZSwgbmV3X29mZnNldCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBTdHJpbmcob2Zmc2V0KSArIFwiMFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCB0bXBfc3RhdGUgPSBuZXdfc3RhdGU7XG5cdFx0bmV3X3N0YXRlID0gY3VyX3N0YXRlO1xuXHRcdGN1cl9zdGF0ZSA9IHRtcF9zdGF0ZTtcblx0fVxuXG5cdGxldCByZXN1bHQgPSBudWxsO1xuXG5cdGZvciAobGV0IGxlbiA9IDE7IGxlbiA8PSA5OyArK2xlbikge1xuXHRcdGxldCBzdHJpbmcgPSBjdXJfc3RhdGVbMF1bbGVuXTtcblx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHN0cmluZyArPSBTdHJpbmcobGVuKSArIHBsYWluLnN1YnN0cmluZyhwbGFpbi5sZW5ndGggLSBsZW4sIHBsYWluLmxlbmd0aCk7XG5cdFx0aWYgKHJlc3VsdCA9PSBudWxsIHx8IHN0cmluZy5sZW5ndGggPCByZXN1bHQubGVuZ3RoKSB7XG5cdFx0XHRyZXN1bHQgPSBzdHJpbmc7XG5cdFx0fSBlbHNlIGlmIChzdHJpbmcubGVuZ3RoID09IHJlc3VsdC5sZW5ndGggJiYgTWF0aC5yYW5kb20oKSA8IDAuNSkge1xuXHRcdFx0cmVzdWx0ID0gc3RyaW5nO1xuXHRcdH1cblx0fVxuXG5cdGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSA5OyArK29mZnNldCkge1xuXHRcdGZvciAobGV0IGxlbiA9IDE7IGxlbiA8PSA5OyArK2xlbikge1xuXHRcdFx0bGV0IHN0cmluZyA9IGN1cl9zdGF0ZVtvZmZzZXRdW2xlbl07XG5cdFx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHN0cmluZyArPSBTdHJpbmcobGVuKSArIFwiXCIgKyBTdHJpbmcob2Zmc2V0KTtcblx0XHRcdGlmIChyZXN1bHQgPT0gbnVsbCB8fCBzdHJpbmcubGVuZ3RoIDwgcmVzdWx0Lmxlbmd0aCkge1xuXHRcdFx0XHRyZXN1bHQgPSBzdHJpbmc7XG5cdFx0XHR9IGVsc2UgaWYgKHN0cmluZy5sZW5ndGggPT0gcmVzdWx0Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG5cdFx0XHRcdHJlc3VsdCA9IHN0cmluZztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0ID8/IFwiXCI7XG59XG5cbmZ1bmN0aW9uIFJMRWVuY29kZShkYXRhKSB7XG5cdGxldCBjaGFycyA9IEFycmF5LmZyb20oZGF0YSk7XG5cdGxldCBhbnN3ZXIgPSAnJztcblx0bGV0IGN1cnJlbnQgPSB1bmRlZmluZWQ7XG5cdGxldCBjb3VudCA9IDA7XG5cdHdoaWxlIChjaGFycy5sZW5ndGggPiAwKSB7XG5cdFx0bGV0IGNoYXIgPSBjaGFycy5zaGlmdCgpO1xuXHRcdHN3aXRjaCAoY3VycmVudCkge1xuXHRcdFx0Y2FzZSB1bmRlZmluZWQ6XG5cdFx0XHRcdGN1cnJlbnQgPSBjaGFyO1xuXHRcdFx0XHRjb3VudCA9IDE7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBjaGFyOlxuXHRcdFx0XHRpZiAoY291bnQgPT0gOSkge1xuXHRcdFx0XHRcdGFuc3dlciA9IGAke2Fuc3dlcn0ke2NvdW50fSR7Y3VycmVudH1gO1xuXHRcdFx0XHRcdGNvdW50ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGFuc3dlciA9IGAke2Fuc3dlcn0ke2NvdW50fSR7Y3VycmVudH1gO1xuXHRcdFx0XHRjdXJyZW50ID0gY2hhcjtcblx0XHRcdFx0Y291bnQgPSAxO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblx0YW5zd2VyID0gYCR7YW5zd2VyfSR7Y291bnR9JHtjdXJyZW50fWA7XG5cdHJldHVybiBhbnN3ZXI7XG59XG4iXX0=\",\"filename\":\"cct.js\",\"server\":\"home\"}}],[\"hud.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint } from \\\"./tables\\\";\\nimport { formatTime } from \\\"./util\\\";\\nconst doc = eval('document');\\nconst hook0 = doc.getElementById('overview-extra-hook-0');\\nconst hook1 = doc.getElementById('overview-extra-hook-1');\\nconst hook2 = doc.getElementById('overview-extra-hook-2');\\nconst hookRootEl = hook0?.parentElement?.parentElement;\\nconst overviewEl = hookRootEl?.parentElement;\\nconst hpRootEl = overviewEl?.children[0];\\nconst hackRootEl = overviewEl?.children[2];\\nconst hackProgressEl = overviewEl?.children[3];\\nconst nextSibling = hookRootEl?.nextSibling;\\nfunction addEl(el) {\\n    if (nextSibling) {\\n        hookRootEl?.parentNode?.insertBefore(el, nextSibling);\\n    }\\n    else {\\n        hookRootEl?.parentNode?.appendChild(el);\\n    }\\n}\\nclass ProgressElement {\\n    rootEl;\\n    subEl1;\\n    subEl2;\\n    constructor() {\\n        this.rootEl = hackProgressEl?.cloneNode(true);\\n        this.subEl1 = this.rootEl?.children[0]?.children[0];\\n        this.subEl2 = this.rootEl?.children[0]?.children[0]?.children[0];\\n        if (!this.rootEl || !this.subEl1 || !this.subEl2)\\n            throw \\\"ProgressElement init failed\\\";\\n        // this.subEl1.setAttribute(\\\"aria-valuenow\\\", \\\"100\\\");\\n        // this.subEl2.setAttribute(\\\"style\\\", \\\"transform: translateX(-0%);\\\");\\n        this.rootEl.classList.add('HUD_el');\\n        this.subEl1.classList.add('HUD_el');\\n        this.subEl2.classList.add('HUD_el');\\n        this.subEl1.style.margin = '4px 0 0 0';\\n        addEl(this.rootEl);\\n    }\\n    update(current, max = 100, min = 0) {\\n        const wholeValue = Math.floor(Math.min(Math.max(((current - min) / (max - min)) * 100, 0), 100));\\n        const transform = 100 - wholeValue;\\n        this.subEl1.setAttribute(\\\"aria-valuenow\\\", `${wholeValue}`);\\n        this.subEl2.style.transform = `translateX(${-transform.toFixed(3)}%)`;\\n    }\\n    color(str1) {\\n        this.subEl2.style.backgroundColor = str1;\\n    }\\n    reset() {\\n        this.subEl1.setAttribute(\\\"aria-valuenow\\\", \\\"100\\\");\\n        this.subEl2.style.transform = \\\"transform: translateX(-0.000%)\\\";\\n    }\\n}\\nclass SingleElement {\\n    rootEl;\\n    subEl1;\\n    constructor() {\\n        this.rootEl = hpRootEl.cloneNode(true);\\n        this.subEl1 = this.rootEl.children[0].children[0];\\n        const child2 = this.rootEl.children[1].children[0];\\n        const child3 = this.rootEl.children[2].children[0];\\n        if (!this.rootEl || !this.subEl1 || !child2 || !child3)\\n            throw \\\"SingleElement init failed\\\";\\n        this.subEl1.removeAttribute(\\\"id\\\");\\n        this.subEl1.innerText = \\\"\\\";\\n        this.subEl1.parentElement?.setAttribute('colspan', '2');\\n        child2.removeAttribute(\\\"id\\\");\\n        child2.innerText = \\\"\\\";\\n        child3.removeAttribute(\\\"id\\\");\\n        child3.innerText = \\\"\\\";\\n        this.rootEl.classList.add('HUD_el');\\n        this.subEl1.classList.add('HUD_el');\\n        child2.classList.add('HUD_rm');\\n        child3.classList.add('HUD_rm');\\n        this.color('white');\\n        addEl(this.rootEl);\\n        doc.querySelectorAll('.HUD_rm').forEach(el => el.remove());\\n    }\\n    update(str1) {\\n        this.subEl1.innerText = str1;\\n    }\\n    color(str1) {\\n        this.subEl1.style.color = str1;\\n    }\\n    reset() {\\n        this.subEl1.innerText = \\\"\\\";\\n    }\\n}\\nclass DoubleElement {\\n    rootEl;\\n    subEl1;\\n    subEl2;\\n    constructor() {\\n        this.rootEl = hpRootEl.cloneNode(true);\\n        this.subEl1 = this.rootEl.children[0].children[0];\\n        this.subEl2 = this.rootEl.children[1].children[0];\\n        const child3 = this.rootEl.children[2].children[0];\\n        if (!this.rootEl || !this.subEl1 || !this.subEl2 || !child3)\\n            throw \\\"DoubleElement init failed\\\";\\n        this.subEl1.removeAttribute(\\\"id\\\");\\n        this.subEl1.innerText = \\\"\\\";\\n        this.subEl2.removeAttribute(\\\"id\\\");\\n        this.subEl2.innerText = \\\"\\\";\\n        child3.removeAttribute(\\\"id\\\");\\n        child3.innerText = \\\"\\\";\\n        this.rootEl.classList.add('HUD_el');\\n        this.subEl1.classList.add('HUD_el');\\n        this.subEl2.classList.add('HUD_el');\\n        child3.classList.add('HUD_rm');\\n        this.subEl1.style.margin = '2px 4px 0 0';\\n        this.subEl2.style.margin = '2px 0 0 4px';\\n        this.color('white', 'white');\\n        addEl(this.rootEl);\\n        doc.querySelectorAll('.HUD_rm').forEach(el => el.remove());\\n    }\\n    update(str1, str2) {\\n        if (str1 !== undefined) {\\n            this.subEl1.innerText = str1;\\n        }\\n        if (str2 !== undefined) {\\n            this.subEl2.innerText = str2;\\n        }\\n    }\\n    color(str1, str2) {\\n        if (str1 !== undefined) {\\n            this.subEl1.style.color = str1;\\n        }\\n        if (str2 !== undefined) {\\n            this.subEl2.style.color = str2;\\n        }\\n    }\\n    reset() {\\n        this.subEl1.innerText = \\\"----\\\";\\n        this.subEl2.innerText = \\\"----\\\";\\n    }\\n}\\nclass DividerElement {\\n    rootEl;\\n    constructor() {\\n        this.rootEl = hackRootEl.cloneNode(true);\\n        const child1 = this.rootEl.children[0].children[0];\\n        const child2 = this.rootEl.children[1].children[0];\\n        const child3 = this.rootEl.children[2].children[0];\\n        if (!this.rootEl || !child1 || !child2 || !child3)\\n            throw \\\"DividerElement init failed\\\";\\n        child1.removeAttribute(\\\"id\\\");\\n        child1.innerText = \\\"\\\";\\n        child2.removeAttribute(\\\"id\\\");\\n        child2.innerText = \\\"\\\";\\n        child3.removeAttribute(\\\"id\\\");\\n        child3.innerText = \\\"\\\";\\n        this.rootEl.classList.add('HUD_el');\\n        child1.classList.add('HUD_rm');\\n        child2.classList.add('HUD_rm');\\n        child3.classList.add('HUD_rm');\\n        addEl(this.rootEl);\\n        doc.querySelectorAll('.HUD_rm').forEach(el => el.remove());\\n    }\\n}\\nfunction hudErr(ns, test, error) {\\n    if (test) {\\n        ColorPrint(ns, ['Red1', `HUD ERROR: ${error}`]);\\n        return true;\\n    }\\n    return false;\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const theme = ns.ui.getTheme();\\n    const removeByClassName = (sel) => doc.querySelectorAll(sel).forEach(el => el.remove());\\n    ns.atExit(function () { removeByClassName('.HUD_el'); });\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    if (hudErr(ns, hook0 === null, 'Unable to find hook0'))\\n        return;\\n    if (hudErr(ns, hook1 === null, 'Unable to find hook1'))\\n        return;\\n    if (hudErr(ns, hook2 === null, 'Unable to find hook2'))\\n        return;\\n    if (hudErr(ns, hookRootEl === null, 'Unable to find hookRootEl'))\\n        return;\\n    if (hudErr(ns, overviewEl === null, 'Unable to find overviewEl'))\\n        return;\\n    if (hudErr(ns, hackRootEl === null, 'Unable to find hackRootEl'))\\n        return;\\n    if (hudErr(ns, hackProgressEl === null, 'Unable to find hackProgressEl'))\\n        return;\\n    const clockKarmaEl = new DoubleElement();\\n    //new DividerElement();\\n    const hackStatsTargetGainEl = new DoubleElement();\\n    const hackStatsTimeEl = new DoubleElement();\\n    const hackStatsProgressEl = new ProgressElement();\\n    //new DividerElement();\\n    const repStatsEl = new DoubleElement();\\n    const repProgressEl = new ProgressElement();\\n    new DividerElement();\\n    let hackStats = { target: \\\"\\\", begin: 0, start: 0, end: 0, gainRate: 0 };\\n    const hackStatPort = ns.getPortHandle(1);\\n    while (true) {\\n        const date = new Date();\\n        clockKarmaEl.update(date.toLocaleTimeString(\\\"it-IT\\\"), `k: ${ns.heart.break().toFixed(0)}`);\\n        if (hackStatPort.peek() !== \\\"NULL PORT DATA\\\")\\n            hackStats = JSON.parse(hackStatPort.peek().toString());\\n        else\\n            hackStats = { target: \\\"\\\", begin: 0, start: 0, end: 0, gainRate: 0 };\\n        if (hackStats.target !== \\\"\\\" && (date.getTime() - 5000) > hackStats.end)\\n            hackStats.target = \\\"\\\";\\n        if (hackStats.target !== \\\"\\\") {\\n            hackStatsTargetGainEl.color(theme['hack'], theme['hack']);\\n            hackStatsTimeEl.color(theme['hack'], theme['hack']);\\n            hackStatsProgressEl.color(theme['hack']);\\n            hackStatsTargetGainEl.update(hackStats.target, `$${ns.formatNumber(hackStats.gainRate / ((hackStats.end - hackStats.start) / 1000), 0, 1000)}/s`);\\n            if (date.getTime() > hackStats.begin) {\\n                hackStatsProgressEl.color(theme['cha']);\\n                hackStatsTimeEl.color(theme['cha'], theme['cha']);\\n                const executeTime = hackStats.end - hackStats.begin;\\n                hackStatsTimeEl.update(formatTime(executeTime), formatTime(executeTime - (date.getTime() - hackStats.begin)));\\n                hackStatsProgressEl.update(date.getTime(), hackStats.end, hackStats.begin);\\n            }\\n            else {\\n                const executeTime = hackStats.begin - hackStats.start;\\n                hackStatsTimeEl.update(formatTime(executeTime), formatTime(executeTime - (date.getTime() - hackStats.start)));\\n                hackStatsProgressEl.update(date.getTime(), hackStats.begin, hackStats.start);\\n            }\\n        }\\n        else {\\n            hackStatsTargetGainEl.color(theme['hack'], theme['hack']);\\n            hackStatsTimeEl.color(theme['hack'], theme['hack']);\\n            hackStatsProgressEl.color(theme['hack']);\\n            hackStatsTargetGainEl.update(\\\"NO TARGET\\\", \\\"$0/s\\\");\\n            hackStatsProgressEl.update(0);\\n        }\\n        const work = ns.singularity.getCurrentWork();\\n        console.log(work);\\n        if (work?.type === \\\"FACTION\\\") {\\n            repStatsEl.color(theme['rep'], theme['rep']);\\n            repProgressEl.color(theme['rep']);\\n            const workStats = ns.formulas.work.factionGains(ns.getPlayer(), work.factionWorkType, ns.singularity.getFactionFavor(work.factionName));\\n            let targetRep = ns.formulas.reputation.calculateFavorToRep(150);\\n            if (work.factionName === \\\"Tian Di Hui\\\")\\n                targetRep = 6250;\\n            if (work.factionName === \\\"CyberSec\\\")\\n                targetRep = 10000;\\n            if (work.factionName === \\\"NiteSec\\\")\\n                targetRep = 45000;\\n            if (work.factionName === \\\"The Black Hand\\\")\\n                targetRep = 100000;\\n            const totalRep = ns.singularity.getFactionRep(work.factionName) + ns.formulas.reputation.calculateFavorToRep(ns.singularity.getFactionFavor(work.factionName));\\n            const repNeeded = Math.max(targetRep - totalRep, 0);\\n            const isFocused = ns.singularity.isFocused(); // || ns.singularity.getOwnedAugmentations().includes('Neuroreceptor Management Implant');\\n            const repGain = workStats.reputation * 5 * (isFocused ? 1 : 0.8);\\n            repStatsEl.update(`${ns.formatNumber(totalRep, 0, 1000).padStart(4)}/${ns.formatNumber(targetRep, 0, 1000, true)}`, formatTime((repNeeded / repGain) * 1000));\\n            repProgressEl.update(totalRep, repNeeded);\\n        }\\n        else if (work?.type === \\\"CREATE_PROGRAM\\\") {\\n            repStatsEl.color(theme['int'], theme['int']);\\n            repProgressEl.color(theme['int']);\\n            repStatsEl.update(work.programName, work.cyclesWorked);\\n            repProgressEl.update(0);\\n        }\\n        else {\\n            repStatsEl.color(theme['int'], theme['int']);\\n            repProgressEl.color(theme['int']);\\n            repStatsEl.reset();\\n            repProgressEl.update(100);\\n        }\\n        await ns.sleep(500);\\n    }\\n    // if (hook0 === null || hook1 === null) return;\\n    // const theme = ns.ui.getTheme();\\n    // ns.tprintf(theme['cha']);\\n    // hook0.insertadjacenthtml('beforeend', newrootel.outerhtml);\\n    // await ns.sleep(2000);\\n    // removeByClassName('.HUD_el');\\n    // while (true) {\\n    //   try {\\n    //     const player = ns.getPlayer();\\n    //     const playerCity = player.city; // city\\n    //     const playerLocation = player.location; // location\\n    //     const playerKills = player.numPeopleKilled; // numPeopleKilled\\n    //     const playerKarma = ns.heart.break();\\n    //     const purchased_servers = ns.getPurchasedServers(); // get every bought server if exists, else just create our blank array and add home to it.\\n    //     purchased_servers.push(\\\"home\\\"); // add home to the array.\\n    //     // End paramaters, begin CSS: \\n    //     removeByClassName('.HUD_el');\\n    //     theme = ns.ui.getTheme();\\n    //     removeByClassName('.HUD_sep');\\n    //     hook0.insertAdjacentHTML('beforeend', `<hr class=\\\"HUD_sep HUD_el\\\">`);\\n    //     hook1.insertAdjacentHTML('beforeend', `<hr class=\\\"HUD_sep HUD_el\\\">`);\\n    //     // playerCity\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_C HUD_el\\\" title=\\\"The name of the City you are currently in.\\\">City </element><br class=\\\"HUD_el\\\">`)\\n    //     colorByClassName(\\\".HUD_GN_C\\\", theme['cha'])\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_C HUD_el\\\">${playerCity + '<br class=\\\"HUD_el\\\">'}</element>`)\\n    //     colorByClassName(\\\".HUD_GN_C\\\", theme['cha'])\\n    //     // playerLocation\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_L HUD_el\\\" title=\\\"Your current location inside the city.\\\">Location </element><br class=\\\"HUD_el\\\">`)\\n    //     colorByClassName(\\\".HUD_GN_L\\\", theme['cha'])\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_L HUD_el\\\">${playerLocation + '<br class=\\\"HUD_el\\\">'}</element>`)\\n    //     colorByClassName(\\\".HUD_GN_L\\\", theme['cha'])\\n    //     // playerKarma\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Karma_H HUD_el\\\" title=\\\"Your karma.\\\"><br>Karma &nbsp;&nbsp;&nbsp;</element>`)\\n    //     colorByClassName(\\\".HUD_Karma_H\\\", theme['hp'])\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Karma HUD_el\\\"><br>${playerKarma}</element>`)\\n    //     colorByClassName(\\\".HUD_Karma\\\", theme['hp'])\\n    //     removeByClassName('.HUD_Kills_H')\\n    //     // playerKills\\n    //     hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Kills_H HUD_el\\\" title=\\\"Your kill count, increases every successful homicide.\\\"><br>Kills &nbsp;&nbsp;&nbsp;</element>`)\\n    //     colorByClassName(\\\".HUD_Kills_H\\\", theme['hp'])\\n    //     removeByClassName('.HUD_Kills')\\n    //     hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Kills HUD_el\\\"><br>${playerKills}</element>`)\\n    //     colorByClassName(\\\".HUD_Kills\\\", theme['hp'])\\n    //   } catch (err) {\\n    //     ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n    //   }\\n    //   ns.atExit(function () { removeByClassName('.HUD_el'); })\\n    //   await ns.sleep(200);\\n    // }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2h1ZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFVcEMsTUFBTSxHQUFHLEdBQWEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUMxRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDMUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzFELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO0FBQ3ZELE1BQU0sVUFBVSxHQUFHLFVBQVUsRUFBRSxhQUFhLENBQUM7QUFDN0MsTUFBTSxRQUFRLEdBQWdCLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsTUFBTSxVQUFVLEdBQWdCLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsTUFBTSxjQUFjLEdBQWdCLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsTUFBTSxXQUFXLEdBQUcsVUFBVSxFQUFFLFdBQVcsQ0FBQztBQUU1QyxTQUFTLEtBQUssQ0FBQyxFQUFlO0lBQzVCLElBQUksV0FBVyxFQUFFO1FBQ2YsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQ3ZEO1NBQ0k7UUFDSCxVQUFVLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN6QztBQUNILENBQUM7QUFFRCxNQUFNLGVBQWU7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QztJQUN0Qyw4R0FBOEc7SUFDOUcsa0RBQWtEO0lBQ2xELG9CQUFvQjtJQUNwQix5REFBeUQ7SUFDekQsTUFBTTtJQUVOLDZEQUE2RDtJQUM3RCx5QkFBeUI7SUFDekIsSUFBSTtBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IENvbG9yUHJpbnQgfSBmcm9tIFwiLi90YWJsZXNcIjtcbmltcG9ydCB7IGZvcm1hdFRpbWUgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFja1N0YXRzIHtcbiAgdGFyZ2V0OiBzdHJpbmc7XG4gIGJlZ2luOiBudW1iZXI7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xuICBnYWluUmF0ZTogbnVtYmVyO1xufVxuXG5jb25zdCBkb2M6IERvY3VtZW50ID0gZXZhbCgnZG9jdW1lbnQnKTtcbmNvbnN0IGhvb2swID0gZG9jLmdldEVsZW1lbnRCeUlkKCdvdmVydmlldy1leHRyYS1ob29rLTAnKTtcbmNvbnN0IGhvb2sxID0gZG9jLmdldEVsZW1lbnRCeUlkKCdvdmVydmlldy1leHRyYS1ob29rLTEnKTtcbmNvbnN0IGhvb2syID0gZG9jLmdldEVsZW1lbnRCeUlkKCdvdmVydmlldy1leHRyYS1ob29rLTInKTtcbmNvbnN0IGhvb2tSb290RWwgPSBob29rMD8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudDtcbmNvbnN0IG92ZXJ2aWV3RWwgPSBob29rUm9vdEVsPy5wYXJlbnRFbGVtZW50O1xuY29uc3QgaHBSb290RWwgPSA8SFRNTEVsZW1lbnQ+b3ZlcnZpZXdFbD8uY2hpbGRyZW5bMF07XG5jb25zdCBoYWNrUm9vdEVsID0gPEhUTUxFbGVtZW50Pm92ZXJ2aWV3RWw/LmNoaWxkcmVuWzJdO1xuY29uc3QgaGFja1Byb2dyZXNzRWwgPSA8SFRNTEVsZW1lbnQ+b3ZlcnZpZXdFbD8uY2hpbGRyZW5bM107XG5jb25zdCBuZXh0U2libGluZyA9IGhvb2tSb290RWw/Lm5leHRTaWJsaW5nO1xuXG5mdW5jdGlvbiBhZGRFbChlbDogSFRNTEVsZW1lbnQpIHtcbiAgaWYgKG5leHRTaWJsaW5nKSB7XG4gICAgaG9va1Jvb3RFbD8ucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKGVsLCBuZXh0U2libGluZyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaG9va1Jvb3RFbD8ucGFyZW50Tm9kZT8uYXBwZW5kQ2hpbGQoZWwpO1xuICB9XG59XG5cbmNsYXNzIFByb2dyZXNzRWxlbWVudCB7XG4gIHByaXZhdGUgcm9vdEVsOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBzdWJFbDE6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHN1YkVsMjogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yb290RWwgPSA8SFRNTEVsZW1lbnQ+aGFja1Byb2dyZXNzRWw/LmNsb25lTm9kZSh0cnVlKTtcbiAgICB0aGlzLnN1YkVsMSA9IDxIVE1MRWxlbWVudD50aGlzLnJvb3RFbD8uY2hpbGRyZW5bMF0/LmNoaWxkcmVuWzBdO1xuICAgIHRoaXMuc3ViRWwyID0gPEhUTUxFbGVtZW50PnRoaXMucm9vdEVsPy5jaGlsZHJlblswXT8uY2hpbGRyZW5bMF0/LmNoaWxkcmVuWzBdO1xuXG4gICAgaWYgKCF0aGlzLnJvb3RFbCB8fCAhdGhpcy5zdWJFbDEgfHwgIXRoaXMuc3ViRWwyKSB0aHJvdyBcIlByb2dyZXNzRWxlbWVudCBpbml0IGZhaWxlZFwiO1xuXG4gICAgLy8gdGhpcy5zdWJFbDEuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCBcIjEwMFwiKTtcbiAgICAvLyB0aGlzLnN1YkVsMi5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcInRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMCUpO1wiKTtcblxuICAgIHRoaXMucm9vdEVsLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xuICAgIHRoaXMuc3ViRWwxLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xuICAgIHRoaXMuc3ViRWwyLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xuXG4gICAgdGhpcy5zdWJFbDEuc3R5bGUubWFyZ2luID0gJzRweCAwIDAgMCc7XG4gIFxuICAgIGFkZEVsKHRoaXMucm9vdEVsKTtcbiAgfVxuXG4gIHVwZGF0ZShjdXJyZW50OiBudW1iZXIsIG1heCA9IDEwMCwgbWluID0gMCkge1xuICAgIGNvbnN0IHdob2xlVmFsdWUgPSBNYXRoLmZsb29yKE1hdGgubWluKE1hdGgubWF4KCgoY3VycmVudCAtIG1pbikgLyAobWF4IC0gbWluKSkgKiAxMDAsIDApLCAxMDApKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSAxMDAgLSB3aG9sZVZhbHVlO1xuXG4gICAgdGhpcy5zdWJFbDEuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCBgJHt3aG9sZVZhbHVlfWApO1xuICAgIHRoaXMuc3ViRWwyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7LXRyYW5zZm9ybS50b0ZpeGVkKDMpfSUpYDtcbiAgfVxuXG4gIGNvbG9yKHN0cjE6IHN0cmluZykge1xuICAgIHRoaXMuc3ViRWwyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHN0cjE7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnN1YkVsMS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIFwiMTAwXCIpO1xuICAgIHRoaXMuc3ViRWwyLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0wLjAwMCUpXCI7XG4gIH1cbn1cblxuY2xhc3MgU2luZ2xlRWxlbWVudCB7XG4gIHByaXZhdGUgcm9vdEVsOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBzdWJFbDE6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucm9vdEVsID0gPEhUTUxFbGVtZW50PmhwUm9vdEVsLmNsb25lTm9kZSh0cnVlKTtcbiAgICB0aGlzLnN1YkVsMSA9IDxIVE1MRWxlbWVudD50aGlzLnJvb3RFbC5jaGlsZHJlblswXS5jaGlsZHJlblswXTtcbiAgICBjb25zdCBjaGlsZDIgPSA8SFRNTEVsZW1lbnQ+dGhpcy5yb290RWwuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF07XG4gICAgY29uc3QgY2hpbGQzID0gPEhUTUxFbGVtZW50PnRoaXMucm9vdEVsLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdO1xuXG4gICAgaWYgKCF0aGlzLnJvb3RFbCB8fCAhdGhpcy5zdWJFbDEgfHwgIWNoaWxkMiB8fCAhY2hpbGQzKSB0aHJvdyBcIlNpbmdsZUVsZW1lbnQgaW5pdCBmYWlsZWRcIjtcblxuICAgIHRoaXMuc3ViRWwxLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgIHRoaXMuc3ViRWwxLmlubmVyVGV4dCA9IFwiXCI7XG5cbiAgICB0aGlzLnN1YkVsMS5wYXJlbnRFbGVtZW50Py5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCAnMicpO1xuICBcbiAgICBjaGlsZDIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgY2hpbGQyLmlubmVyVGV4dCA9IFwiXCI7XG5cbiAgICBjaGlsZDMucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgY2hpbGQzLmlubmVyVGV4dCA9IFwiXCI7XG5cbiAgICB0aGlzLnJvb3RFbC5jbGFzc0xpc3QuYWRkKCdIVURfZWwnKTtcbiAgICB0aGlzLnN1YkVsMS5jbGFzc0xpc3QuYWRkKCdIVURfZWwnKTtcbiAgICBjaGlsZDIuY2xhc3NMaXN0LmFkZCgnSFVEX3JtJyk7XG4gICAgY2hpbGQzLmNsYXNzTGlzdC5hZGQoJ0hVRF9ybScpO1xuXG4gICAgdGhpcy5jb2xvcignd2hpdGUnKTtcbiAgXG4gICAgYWRkRWwodGhpcy5yb290RWwpO1xuXG4gICAgZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJy5IVURfcm0nKS5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKTtcbiAgfVxuXG4gIHVwZGF0ZShzdHIxOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1YkVsMS5pbm5lclRleHQgPSBzdHIxO1xuICB9XG5cbiAgY29sb3Ioc3RyMTogc3RyaW5nKSB7XG4gICAgdGhpcy5zdWJFbDEuc3R5bGUuY29sb3IgPSBzdHIxO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zdWJFbDEuaW5uZXJUZXh0ID0gXCJcIjtcbiAgfVxufVxuXG5jbGFzcyBEb3VibGVFbGVtZW50IHtcbiAgcHJpdmF0ZSByb290RWw6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHN1YkVsMTogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgc3ViRWwyOiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJvb3RFbCA9IDxIVE1MRWxlbWVudD5ocFJvb3RFbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgdGhpcy5zdWJFbDEgPSA8SFRNTEVsZW1lbnQ+dGhpcy5yb290RWwuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF07XG4gICAgdGhpcy5zdWJFbDIgPSA8SFRNTEVsZW1lbnQ+dGhpcy5yb290RWwuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF07XG4gICAgY29uc3QgY2hpbGQzID0gPEhUTUxFbGVtZW50PnRoaXMucm9vdEVsLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdO1xuXG4gICAgaWYgKCF0aGlzLnJvb3RFbCB8fCAhdGhpcy5zdWJFbDEgfHwgIXRoaXMuc3ViRWwyIHx8ICFjaGlsZDMpIHRocm93IFwiRG91YmxlRWxlbWVudCBpbml0IGZhaWxlZFwiO1xuXG4gICAgdGhpcy5zdWJFbDEucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgdGhpcy5zdWJFbDEuaW5uZXJUZXh0ID0gXCJcIjtcbiAgXG4gICAgdGhpcy5zdWJFbDIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgdGhpcy5zdWJFbDIuaW5uZXJUZXh0ID0gXCJcIjtcblxuICAgIGNoaWxkMy5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICBjaGlsZDMuaW5uZXJUZXh0ID0gXCJcIjtcblxuICAgIHRoaXMucm9vdEVsLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xuICAgIHRoaXMuc3ViRWwxLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xuICAgIHRoaXMuc3ViRWwyLmNsYXNzTGlzdC5hZGQoJ0hVRF9lbCcpO1xuICAgIGNoaWxkMy5jbGFzc0xpc3QuYWRkKCdIVURfcm0nKTtcblxuICAgIHRoaXMuc3ViRWwxLnN0eWxlLm1hcmdpbiA9ICcycHggNHB4IDAgMCc7XG4gICAgdGhpcy5zdWJFbDIuc3R5bGUubWFyZ2luID0gJzJweCAwIDAgNHB4JztcblxuICAgIHRoaXMuY29sb3IoJ3doaXRlJywgJ3doaXRlJyk7XG4gIFxuICAgIGFkZEVsKHRoaXMucm9vdEVsKTtcblxuICAgIGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcuSFVEX3JtJykuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XG4gIH1cblxuICB1cGRhdGUoc3RyMT86IHN0cmluZywgc3RyMj86IHN0cmluZykge1xuICAgIGlmIChzdHIxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc3ViRWwxLmlubmVyVGV4dCA9IHN0cjE7XG4gICAgfVxuXG4gICAgaWYgKHN0cjIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdWJFbDIuaW5uZXJUZXh0ID0gc3RyMjtcbiAgICB9XG4gIH1cblxuICBjb2xvcihzdHIxPzogc3RyaW5nLCBzdHIyPzogc3RyaW5nKSB7XG4gICAgaWYgKHN0cjEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdWJFbDEuc3R5bGUuY29sb3IgPSBzdHIxO1xuICAgIH1cblxuICAgIGlmIChzdHIyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc3ViRWwyLnN0eWxlLmNvbG9yID0gc3RyMjtcbiAgICB9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnN1YkVsMS5pbm5lclRleHQgPSBcIi0tLS1cIjtcbiAgICB0aGlzLnN1YkVsMi5pbm5lclRleHQgPSBcIi0tLS1cIjsgXG4gIH1cbn1cblxuY2xhc3MgRGl2aWRlckVsZW1lbnQge1xuICBwcml2YXRlIHJvb3RFbDogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucm9vdEVsID0gPEhUTUxFbGVtZW50PmhhY2tSb290RWwuY2xvbmVOb2RlKHRydWUpO1xuICAgIGNvbnN0IGNoaWxkMSA9IDxIVE1MRWxlbWVudD50aGlzLnJvb3RFbC5jaGlsZHJlblswXS5jaGlsZHJlblswXTtcbiAgICBjb25zdCBjaGlsZDIgPSA8SFRNTEVsZW1lbnQ+dGhpcy5yb290RWwuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF07XG4gICAgY29uc3QgY2hpbGQzID0gPEhUTUxFbGVtZW50PnRoaXMucm9vdEVsLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdO1xuXG4gICAgaWYgKCF0aGlzLnJvb3RFbCB8fCAhY2hpbGQxIHx8ICFjaGlsZDIgfHwgIWNoaWxkMykgdGhyb3cgXCJEaXZpZGVyRWxlbWVudCBpbml0IGZhaWxlZFwiO1xuXG4gICAgY2hpbGQxLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgIGNoaWxkMS5pbm5lclRleHQgPSBcIlwiO1xuICBcbiAgICBjaGlsZDIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgY2hpbGQyLmlubmVyVGV4dCA9IFwiXCI7XG5cbiAgICBjaGlsZDMucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgY2hpbGQzLmlubmVyVGV4dCA9IFwiXCI7XG5cbiAgICB0aGlzLnJvb3RFbC5jbGFzc0xpc3QuYWRkKCdIVURfZWwnKTtcbiAgICBjaGlsZDEuY2xhc3NMaXN0LmFkZCgnSFVEX3JtJyk7XG4gICAgY2hpbGQyLmNsYXNzTGlzdC5hZGQoJ0hVRF9ybScpO1xuICAgIGNoaWxkMy5jbGFzc0xpc3QuYWRkKCdIVURfcm0nKTtcblxuICAgIGFkZEVsKHRoaXMucm9vdEVsKTtcblxuICAgIGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcuSFVEX3JtJykuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaHVkRXJyKG5zOiBOUywgdGVzdDogYm9vbGVhbiwgZXJyb3I6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAodGVzdCkge1xuICAgIENvbG9yUHJpbnQobnMsIFsnUmVkMScsIGBIVUQgRVJST1I6ICR7ZXJyb3J9YF0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcblxuICBjb25zdCB0aGVtZSA9IG5zLnVpLmdldFRoZW1lKCk7XG5cbiAgY29uc3QgcmVtb3ZlQnlDbGFzc05hbWUgPSAoc2VsOiBzdHJpbmcpID0+IGRvYy5xdWVyeVNlbGVjdG9yQWxsKHNlbCkuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XG4gIG5zLmF0RXhpdChmdW5jdGlvbiAoKSB7IHJlbW92ZUJ5Q2xhc3NOYW1lKCcuSFVEX2VsJyk7IH0pXG5cbiAgY29uc3QgYXJncyA9IG5zLmZsYWdzKFtbXCJoZWxwXCIsIGZhbHNlXV0pO1xuICBpZiAoYXJncy5oZWxwKSB7XG4gICAgICBucy50cHJpbnQoXCJUaGlzIHNjcmlwdCB3aWxsIGVuaGFuY2UgeW91ciBIVUQgKEhlYWRzIHVwIERpc3BsYXkpIHdpdGggY3VzdG9tIHN0YXRpc3RpY3MuXCIpO1xuICAgICAgbnMudHByaW50KGBVc2FnZTogcnVuICR7bnMuZ2V0U2NyaXB0TmFtZSgpfWApO1xuICAgICAgbnMudHByaW50KFwiRXhhbXBsZTpcIik7XG4gICAgICBucy50cHJpbnQoYD4gcnVuICR7bnMuZ2V0U2NyaXB0TmFtZSgpfWApO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGh1ZEVycihucywgaG9vazAgPT09IG51bGwsICdVbmFibGUgdG8gZmluZCBob29rMCcpKSByZXR1cm47XG4gIGlmIChodWRFcnIobnMsIGhvb2sxID09PSBudWxsLCAnVW5hYmxlIHRvIGZpbmQgaG9vazEnKSkgcmV0dXJuO1xuICBpZiAoaHVkRXJyKG5zLCBob29rMiA9PT0gbnVsbCwgJ1VuYWJsZSB0byBmaW5kIGhvb2syJykpIHJldHVybjtcbiAgaWYgKGh1ZEVycihucywgaG9va1Jvb3RFbCA9PT0gbnVsbCwgJ1VuYWJsZSB0byBmaW5kIGhvb2tSb290RWwnKSkgcmV0dXJuO1xuICBpZiAoaHVkRXJyKG5zLCBvdmVydmlld0VsID09PSBudWxsLCAnVW5hYmxlIHRvIGZpbmQgb3ZlcnZpZXdFbCcpKSByZXR1cm47XG4gIGlmIChodWRFcnIobnMsIGhhY2tSb290RWwgPT09IG51bGwsICdVbmFibGUgdG8gZmluZCBoYWNrUm9vdEVsJykpIHJldHVybjtcbiAgaWYgKGh1ZEVycihucywgaGFja1Byb2dyZXNzRWwgPT09IG51bGwsICdVbmFibGUgdG8gZmluZCBoYWNrUHJvZ3Jlc3NFbCcpKSByZXR1cm47XG5cbiAgY29uc3QgY2xvY2tLYXJtYUVsID0gbmV3IERvdWJsZUVsZW1lbnQoKTtcbiAgLy9uZXcgRGl2aWRlckVsZW1lbnQoKTtcbiAgY29uc3QgaGFja1N0YXRzVGFyZ2V0R2FpbkVsID0gbmV3IERvdWJsZUVsZW1lbnQoKTtcbiAgY29uc3QgaGFja1N0YXRzVGltZUVsID0gbmV3IERvdWJsZUVsZW1lbnQoKTtcbiAgY29uc3QgaGFja1N0YXRzUHJvZ3Jlc3NFbCA9IG5ldyBQcm9ncmVzc0VsZW1lbnQoKTtcbiAgLy9uZXcgRGl2aWRlckVsZW1lbnQoKTtcbiAgY29uc3QgcmVwU3RhdHNFbCA9IG5ldyBEb3VibGVFbGVtZW50KCk7XG4gIGNvbnN0IHJlcFByb2dyZXNzRWwgPSBuZXcgUHJvZ3Jlc3NFbGVtZW50KCk7XG4gIG5ldyBEaXZpZGVyRWxlbWVudCgpO1xuXG4gIGxldCBoYWNrU3RhdHM6IEhhY2tTdGF0cyA9IHsgdGFyZ2V0OiBcIlwiLCBiZWdpbjogMCwgc3RhcnQ6IDAsIGVuZDogMCwgZ2FpblJhdGU6IDAgfTtcblxuICBjb25zdCBoYWNrU3RhdFBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKDEpO1xuICBcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcblxuICAgIGNsb2NrS2FybWFFbC51cGRhdGUoZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoXCJpdC1JVFwiKSwgYGs6ICR7bnMuaGVhcnQuYnJlYWsoKS50b0ZpeGVkKDApfWApO1xuXG4gICAgaWYgKGhhY2tTdGF0UG9ydC5wZWVrKCkgIT09IFwiTlVMTCBQT1JUIERBVEFcIilcbiAgICAgIGhhY2tTdGF0cyA9IEpTT04ucGFyc2UoaGFja1N0YXRQb3J0LnBlZWsoKS50b1N0cmluZygpKTtcbiAgICBlbHNlXG4gICAgICBoYWNrU3RhdHMgPSB7IHRhcmdldDogXCJcIiwgYmVnaW46IDAsIHN0YXJ0OiAwLCBlbmQ6IDAsIGdhaW5SYXRlOiAwIH07XG4gICAgXG4gICAgaWYgKGhhY2tTdGF0cy50YXJnZXQgIT09IFwiXCIgJiYgKGRhdGUuZ2V0VGltZSgpIC0gNTAwMCkgPiBoYWNrU3RhdHMuZW5kKVxuICAgICAgaGFja1N0YXRzLnRhcmdldCA9IFwiXCI7XG5cbiAgICBpZiAoaGFja1N0YXRzLnRhcmdldCAhPT0gXCJcIikge1xuICAgICAgaGFja1N0YXRzVGFyZ2V0R2FpbkVsLmNvbG9yKHRoZW1lWydoYWNrJ10sIHRoZW1lWydoYWNrJ10pO1xuICAgICAgaGFja1N0YXRzVGltZUVsLmNvbG9yKHRoZW1lWydoYWNrJ10sIHRoZW1lWydoYWNrJ10pO1xuICAgICAgaGFja1N0YXRzUHJvZ3Jlc3NFbC5jb2xvcih0aGVtZVsnaGFjayddKTtcblxuICAgICAgaGFja1N0YXRzVGFyZ2V0R2FpbkVsLnVwZGF0ZShoYWNrU3RhdHMudGFyZ2V0LCBgJCR7bnMuZm9ybWF0TnVtYmVyKGhhY2tTdGF0cy5nYWluUmF0ZSAvICgoaGFja1N0YXRzLmVuZCAtIGhhY2tTdGF0cy5zdGFydCkgLyAxMDAwKSwgMCwgMTAwMCl9L3NgKTtcbiAgICAgIFxuICAgICAgaWYgKGRhdGUuZ2V0VGltZSgpID4gaGFja1N0YXRzLmJlZ2luKSB7XG4gICAgICAgIGhhY2tTdGF0c1Byb2dyZXNzRWwuY29sb3IodGhlbWVbJ2NoYSddKTtcbiAgICAgICAgaGFja1N0YXRzVGltZUVsLmNvbG9yKHRoZW1lWydjaGEnXSwgdGhlbWVbJ2NoYSddKTtcblxuICAgICAgICBjb25zdCBleGVjdXRlVGltZSA9IGhhY2tTdGF0cy5lbmQgLSBoYWNrU3RhdHMuYmVnaW47XG4gICAgICAgIGhhY2tTdGF0c1RpbWVFbC51cGRhdGUoZm9ybWF0VGltZShleGVjdXRlVGltZSksIGZvcm1hdFRpbWUoZXhlY3V0ZVRpbWUgLSAoZGF0ZS5nZXRUaW1lKCkgLSBoYWNrU3RhdHMuYmVnaW4pKSk7XG4gICAgICAgIGhhY2tTdGF0c1Byb2dyZXNzRWwudXBkYXRlKGRhdGUuZ2V0VGltZSgpLCBoYWNrU3RhdHMuZW5kLCBoYWNrU3RhdHMuYmVnaW4pO1xuICAgICAgICBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGVUaW1lID0gaGFja1N0YXRzLmJlZ2luIC0gaGFja1N0YXRzLnN0YXJ0O1xuICAgICAgICBoYWNrU3RhdHNUaW1lRWwudXBkYXRlKGZvcm1hdFRpbWUoZXhlY3V0ZVRpbWUpLCBmb3JtYXRUaW1lKGV4ZWN1dGVUaW1lIC0gKGRhdGUuZ2V0VGltZSgpIC0gaGFja1N0YXRzLnN0YXJ0KSkpO1xuICAgICAgICBoYWNrU3RhdHNQcm9ncmVzc0VsLnVwZGF0ZShkYXRlLmdldFRpbWUoKSwgaGFja1N0YXRzLmJlZ2luLCBoYWNrU3RhdHMuc3RhcnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYWNrU3RhdHNUYXJnZXRHYWluRWwuY29sb3IodGhlbWVbJ2hhY2snXSwgdGhlbWVbJ2hhY2snXSk7XG4gICAgICBoYWNrU3RhdHNUaW1lRWwuY29sb3IodGhlbWVbJ2hhY2snXSwgdGhlbWVbJ2hhY2snXSk7XG4gICAgICBoYWNrU3RhdHNQcm9ncmVzc0VsLmNvbG9yKHRoZW1lWydoYWNrJ10pO1xuXG4gICAgICBoYWNrU3RhdHNUYXJnZXRHYWluRWwudXBkYXRlKFwiTk8gVEFSR0VUXCIsIFwiJDAvc1wiKTtcbiAgICAgIGhhY2tTdGF0c1Byb2dyZXNzRWwudXBkYXRlKDApO1xuICAgIH1cblxuXG4gICAgY29uc3Qgd29yayA9IG5zLnNpbmd1bGFyaXR5LmdldEN1cnJlbnRXb3JrKCk7XG4gICAgY29uc29sZS5sb2cod29yayk7XG4gICAgaWYgKHdvcms/LnR5cGUgPT09IFwiRkFDVElPTlwiKSB7XG4gICAgICByZXBTdGF0c0VsLmNvbG9yKHRoZW1lWydyZXAnXSwgdGhlbWVbJ3JlcCddKTtcbiAgICAgIHJlcFByb2dyZXNzRWwuY29sb3IodGhlbWVbJ3JlcCddKTtcbiAgICAgIFxuICAgICAgY29uc3Qgd29ya1N0YXRzID0gbnMuZm9ybXVsYXMud29yay5mYWN0aW9uR2FpbnMobnMuZ2V0UGxheWVyKCksIHdvcmsuZmFjdGlvbldvcmtUeXBlLCBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uRmF2b3Iod29yay5mYWN0aW9uTmFtZSkpO1xuICAgICAgbGV0IHRhcmdldFJlcCA9IG5zLmZvcm11bGFzLnJlcHV0YXRpb24uY2FsY3VsYXRlRmF2b3JUb1JlcCgxNTApO1xuICAgICAgaWYgKHdvcmsuZmFjdGlvbk5hbWUgPT09IFwiVGlhbiBEaSBIdWlcIikgdGFyZ2V0UmVwID0gNjI1MDtcbiAgICAgIGlmICh3b3JrLmZhY3Rpb25OYW1lID09PSBcIkN5YmVyU2VjXCIpIHRhcmdldFJlcCA9IDEwMDAwO1xuICAgICAgaWYgKHdvcmsuZmFjdGlvbk5hbWUgPT09IFwiTml0ZVNlY1wiKSB0YXJnZXRSZXAgPSA0NTAwMDtcbiAgICAgIGlmICh3b3JrLmZhY3Rpb25OYW1lID09PSBcIlRoZSBCbGFjayBIYW5kXCIpIHRhcmdldFJlcCA9IDEwMDAwMDtcbiAgICAgIGNvbnN0IHRvdGFsUmVwID0gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcCh3b3JrLmZhY3Rpb25OYW1lKSArIG5zLmZvcm11bGFzLnJlcHV0YXRpb24uY2FsY3VsYXRlRmF2b3JUb1JlcChucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uRmF2b3Iod29yay5mYWN0aW9uTmFtZSkpO1xuICAgICAgY29uc3QgcmVwTmVlZGVkID0gTWF0aC5tYXgodGFyZ2V0UmVwIC0gdG90YWxSZXAsIDApO1xuICAgICAgY29uc3QgaXNGb2N1c2VkID0gbnMuc2luZ3VsYXJpdHkuaXNGb2N1c2VkKCk7Ly8gfHwgbnMuc2luZ3VsYXJpdHkuZ2V0T3duZWRBdWdtZW50YXRpb25zKCkuaW5jbHVkZXMoJ05ldXJvcmVjZXB0b3IgTWFuYWdlbWVudCBJbXBsYW50Jyk7XG4gICAgICBjb25zdCByZXBHYWluID0gd29ya1N0YXRzLnJlcHV0YXRpb24gKiA1ICogKGlzRm9jdXNlZCA/IDEgOiAwLjgpO1xuICAgICAgcmVwU3RhdHNFbC51cGRhdGUoYCR7bnMuZm9ybWF0TnVtYmVyKHRvdGFsUmVwLCAwLCAxMDAwKS5wYWRTdGFydCg0KX0vJHtucy5mb3JtYXROdW1iZXIodGFyZ2V0UmVwLCAwLCAxMDAwLCB0cnVlKX1gLCBmb3JtYXRUaW1lKChyZXBOZWVkZWQvcmVwR2FpbikgKiAxMDAwKSk7XG4gICAgICByZXBQcm9ncmVzc0VsLnVwZGF0ZSh0b3RhbFJlcCwgcmVwTmVlZGVkKTtcbiAgICB9IGVsc2UgaWYgKHdvcms/LnR5cGUgPT09IFwiQ1JFQVRFX1BST0dSQU1cIikge1xuICAgICAgcmVwU3RhdHNFbC5jb2xvcih0aGVtZVsnaW50J10sIHRoZW1lWydpbnQnXSk7XG4gICAgICByZXBQcm9ncmVzc0VsLmNvbG9yKHRoZW1lWydpbnQnXSk7XG4gICAgICByZXBTdGF0c0VsLnVwZGF0ZSh3b3JrLnByb2dyYW1OYW1lLCB3b3JrLmN5Y2xlc1dvcmtlZCk7XG4gICAgICByZXBQcm9ncmVzc0VsLnVwZGF0ZSgwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwU3RhdHNFbC5jb2xvcih0aGVtZVsnaW50J10sIHRoZW1lWydpbnQnXSk7XG4gICAgICByZXBQcm9ncmVzc0VsLmNvbG9yKHRoZW1lWydpbnQnXSk7XG4gICAgICByZXBTdGF0c0VsLnJlc2V0KCk7XG4gICAgICByZXBQcm9ncmVzc0VsLnVwZGF0ZSgxMDApO1xuICAgIH1cbiAgICBcblxuICAgIGF3YWl0IG5zLnNsZWVwKDUwMCk7XG4gIH0gIFxuIFxuICAvLyBpZiAoaG9vazAgPT09IG51bGwgfHwgaG9vazEgPT09IG51bGwpIHJldHVybjtcblxuICAvLyBjb25zdCB0aGVtZSA9IG5zLnVpLmdldFRoZW1lKCk7XG4gIC8vIG5zLnRwcmludGYodGhlbWVbJ2NoYSddKTtcblxuICAvLyBob29rMC5pbnNlcnRhZGphY2VudGh0bWwoJ2JlZm9yZWVuZCcsIG5ld3Jvb3RlbC5vdXRlcmh0bWwpO1xuXG4gIC8vIGF3YWl0IG5zLnNsZWVwKDIwMDApO1xuICAvLyByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9lbCcpO1xuICAvLyB3aGlsZSAodHJ1ZSkge1xuICAvLyAgIHRyeSB7XG4gIC8vICAgICBjb25zdCBwbGF5ZXIgPSBucy5nZXRQbGF5ZXIoKTtcblxuICAvLyAgICAgY29uc3QgcGxheWVyQ2l0eSA9IHBsYXllci5jaXR5OyAvLyBjaXR5XG4gIC8vICAgICBjb25zdCBwbGF5ZXJMb2NhdGlvbiA9IHBsYXllci5sb2NhdGlvbjsgLy8gbG9jYXRpb25cbiAgLy8gICAgIGNvbnN0IHBsYXllcktpbGxzID0gcGxheWVyLm51bVBlb3BsZUtpbGxlZDsgLy8gbnVtUGVvcGxlS2lsbGVkXG4gIC8vICAgICBjb25zdCBwbGF5ZXJLYXJtYSA9IG5zLmhlYXJ0LmJyZWFrKCk7XG5cbiAgLy8gICAgIGNvbnN0IHB1cmNoYXNlZF9zZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpOyAvLyBnZXQgZXZlcnkgYm91Z2h0IHNlcnZlciBpZiBleGlzdHMsIGVsc2UganVzdCBjcmVhdGUgb3VyIGJsYW5rIGFycmF5IGFuZCBhZGQgaG9tZSB0byBpdC5cbiAgLy8gICAgIHB1cmNoYXNlZF9zZXJ2ZXJzLnB1c2goXCJob21lXCIpOyAvLyBhZGQgaG9tZSB0byB0aGUgYXJyYXkuXG5cbiAgLy8gICAgIC8vIEVuZCBwYXJhbWF0ZXJzLCBiZWdpbiBDU1M6IFxuXG4gIC8vICAgICByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9lbCcpO1xuICAvLyAgICAgdGhlbWUgPSBucy51aS5nZXRUaGVtZSgpO1xuICAvLyAgICAgcmVtb3ZlQnlDbGFzc05hbWUoJy5IVURfc2VwJyk7XG5cbiAgLy8gICAgIGhvb2swLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxociBjbGFzcz1cIkhVRF9zZXAgSFVEX2VsXCI+YCk7XG4gIC8vICAgICBob29rMS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8aHIgY2xhc3M9XCJIVURfc2VwIEhVRF9lbFwiPmApO1xuXG4gIC8vICAgICAvLyBwbGF5ZXJDaXR5XG4gIC8vICAgICBob29rMC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9HTl9DIEhVRF9lbFwiIHRpdGxlPVwiVGhlIG5hbWUgb2YgdGhlIENpdHkgeW91IGFyZSBjdXJyZW50bHkgaW4uXCI+Q2l0eSA8L2VsZW1lbnQ+PGJyIGNsYXNzPVwiSFVEX2VsXCI+YClcbiAgLy8gICAgIGNvbG9yQnlDbGFzc05hbWUoXCIuSFVEX0dOX0NcIiwgdGhlbWVbJ2NoYSddKVxuICAvLyAgICAgaG9vazEuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfR05fQyBIVURfZWxcIj4ke3BsYXllckNpdHkgKyAnPGJyIGNsYXNzPVwiSFVEX2VsXCI+J308L2VsZW1lbnQ+YClcbiAgLy8gICAgIGNvbG9yQnlDbGFzc05hbWUoXCIuSFVEX0dOX0NcIiwgdGhlbWVbJ2NoYSddKVxuXG4gIC8vICAgICAvLyBwbGF5ZXJMb2NhdGlvblxuICAvLyAgICAgaG9vazAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfR05fTCBIVURfZWxcIiB0aXRsZT1cIllvdXIgY3VycmVudCBsb2NhdGlvbiBpbnNpZGUgdGhlIGNpdHkuXCI+TG9jYXRpb24gPC9lbGVtZW50PjxiciBjbGFzcz1cIkhVRF9lbFwiPmApXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9HTl9MXCIsIHRoZW1lWydjaGEnXSlcbiAgLy8gICAgIGhvb2sxLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxlbGVtZW50IGNsYXNzPVwiSFVEX0dOX0wgSFVEX2VsXCI+JHtwbGF5ZXJMb2NhdGlvbiArICc8YnIgY2xhc3M9XCJIVURfZWxcIj4nfTwvZWxlbWVudD5gKVxuICAvLyAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfR05fTFwiLCB0aGVtZVsnY2hhJ10pXG5cbiAgLy8gICAgIC8vIHBsYXllckthcm1hXG4gIC8vICAgICBob29rMC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9LYXJtYV9IIEhVRF9lbFwiIHRpdGxlPVwiWW91ciBrYXJtYS5cIj48YnI+S2FybWEgJm5ic3A7Jm5ic3A7Jm5ic3A7PC9lbGVtZW50PmApXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LYXJtYV9IXCIsIHRoZW1lWydocCddKVxuICAvLyAgICAgaG9vazEuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfS2FybWEgSFVEX2VsXCI+PGJyPiR7cGxheWVyS2FybWF9PC9lbGVtZW50PmApXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LYXJtYVwiLCB0aGVtZVsnaHAnXSlcblxuICAvLyAgICAgcmVtb3ZlQnlDbGFzc05hbWUoJy5IVURfS2lsbHNfSCcpXG5cbiAgLy8gICAgIC8vIHBsYXllcktpbGxzXG4gIC8vICAgICBob29rMC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9LaWxsc19IIEhVRF9lbFwiIHRpdGxlPVwiWW91ciBraWxsIGNvdW50LCBpbmNyZWFzZXMgZXZlcnkgc3VjY2Vzc2Z1bCBob21pY2lkZS5cIj48YnI+S2lsbHMgJm5ic3A7Jm5ic3A7Jm5ic3A7PC9lbGVtZW50PmApXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LaWxsc19IXCIsIHRoZW1lWydocCddKVxuICAvLyAgICAgcmVtb3ZlQnlDbGFzc05hbWUoJy5IVURfS2lsbHMnKVxuICAvLyAgICAgaG9vazEuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfS2lsbHMgSFVEX2VsXCI+PGJyPiR7cGxheWVyS2lsbHN9PC9lbGVtZW50PmApXG4gIC8vICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LaWxsc1wiLCB0aGVtZVsnaHAnXSlcbiAgLy8gICB9IGNhdGNoIChlcnIpIHtcbiAgLy8gICAgIG5zLnByaW50KFwiRVJST1I6IFVwZGF0ZSBTa2lwcGVkOiBcIiArIFN0cmluZyhlcnIpKTtcbiAgLy8gICB9XG5cbiAgLy8gICBucy5hdEV4aXQoZnVuY3Rpb24gKCkgeyByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9lbCcpOyB9KVxuICAvLyAgIGF3YWl0IG5zLnNsZWVwKDIwMCk7XG4gIC8vIH1cbn1cblxuIl19\",\"filename\":\"hud.js\",\"server\":\"home\"}}],[\"backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { isRootable } from \\\"./util\\\";\\nfunction crackAndNuke(ns, s) {\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        ns.brutessh(s);\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        ns.ftpcrack(s);\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        ns.relaysmtp(s);\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        ns.httpworm(s);\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        ns.sqlinject(s);\\n    ns.nuke(s);\\n}\\nfunction getConnectedPaths(ns, current = 'home', path = [], paths = {}) {\\n    paths[current] = [...path, current];\\n    let parent = '';\\n    if (path.length > 0)\\n        parent = path[path.length - 1];\\n    for (const connected of ns.scan(current)) {\\n        if (connected === parent)\\n            continue;\\n        getConnectedPaths(ns, connected, paths[current], paths);\\n    }\\n    return paths;\\n}\\nexport async function main(ns) {\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\n        if (ns.fileExists(crack, \\\"home\\\"))\\n            count++;\\n        return count;\\n    }, 0);\\n    //for (const target of ['CSEC', 'avmnite-02h', 'I.I.I.I', 'run4theh111z', 'The-Cave', 'w0r1d_d43m0n', 'ecorp', 'fulcrumassets', 'fulcrumtech']) {\\n    for (const target of ['CSEC', 'avmnite-02h', 'I.I.I.I', 'run4theh111z', 'The-Cave', 'w0r1d_d43m0n']) {\\n        try {\\n            if (ns.getServer(target).backdoorInstalled)\\n                continue;\\n            if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(target))\\n                continue;\\n            if (!ns.hasRootAccess(target) && isRootable(ns, target, portCrackCount)) {\\n                crackAndNuke(ns, target);\\n            }\\n            if (ns.hasRootAccess(target)) {\\n                for (const s of getConnectedPaths(ns)[target]) {\\n                    ns.singularity.connect(s);\\n                }\\n                ns.tprintf(`Installing backdoor on ${target}`);\\n                await ns.singularity.installBackdoor();\\n            }\\n        }\\n        catch (e) {\\n            // do nothing\\n        }\\n    }\\n    if (ns.getServerMoneyAvailable('home') > 10500000) {\\n        const curCity = ns.getPlayer().city;\\n        const cities = ['Sector-12', 'Volhaven', 'Aevum', 'Ishima', 'Chongqing', 'New Tokyo'];\\n        for (const city of cities) {\\n            //ns.tprintf(`${city}`);\\n            ns.singularity.travelToCity(city);\\n            ns.singularity.checkFactionInvitations();\\n        }\\n        ns.singularity.travelToCity(curCity);\\n    }\\n    ns.singularity.connect('home');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2Rvb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmFja2Rvb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxTQUFTLFlBQVksQ0FBQyxFQUFNLEVBQUUsQ0FBUztJQUNyQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVELEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDYixDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsT0FBTyxHQUFHLE1BQU0sRUFBRSxPQUFpQixFQUFFLEVBQUUsUUFBa0MsRUFBRTtJQUM1RyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVwQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7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IjpbImltcG9ydCB7IE5TLCBDaXR5TmFtZSB9IGZyb20gXCJAbnNcIjtcbmltcG9ydCB7IGlzUm9vdGFibGUgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmZ1bmN0aW9uIGNyYWNrQW5kTnVrZShuczogTlMsIHM6IHN0cmluZyk6IHZvaWQge1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiLCBcImhvbWVcIikpIG5zLmJydXRlc3NoKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkZUUENyYWNrLmV4ZVwiLCBcImhvbWVcIikpIG5zLmZ0cGNyYWNrKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcInJlbGF5U01UUC5leGVcIiwgXCJob21lXCIpKSBucy5yZWxheXNtdHAocyk7XG4gIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIsIFwiaG9tZVwiKSkgbnMuaHR0cHdvcm0ocyk7XG4gIGlmIChucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiLCBcImhvbWVcIikpIG5zLnNxbGluamVjdChzKTtcblxuICBucy5udWtlKHMpO1xufVxuXG5mdW5jdGlvbiBnZXRDb25uZWN0ZWRQYXRocyhuczogTlMsIGN1cnJlbnQgPSAnaG9tZScsIHBhdGg6IHN0cmluZ1tdID0gW10sIHBhdGhzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4gPSB7fSkge1xuICBwYXRoc1tjdXJyZW50XSA9IFsuLi5wYXRoLCBjdXJyZW50XTtcbiAgXG4gIGxldCBwYXJlbnQgPSAnJztcbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkgcGFyZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICBcbiAgZm9yIChjb25zdCBjb25uZWN0ZWQgb2YgbnMuc2NhbihjdXJyZW50KSkge1xuICAgIGlmIChjb25uZWN0ZWQgPT09IHBhcmVudCkgY29udGludWU7XG4gICAgZ2V0Q29ubmVjdGVkUGF0aHMobnMsIGNvbm5lY3RlZCwgcGF0aHNbY3VycmVudF0sIHBhdGhzKTtcbiAgfVxuXG4gIHJldHVybiBwYXRocztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHBvcnRDcmFja3MgPSBbXCJCcnV0ZVNTSC5leGVcIiwgXCJGVFBDcmFjay5leGVcIiwgXCJyZWxheVNNVFAuZXhlXCIsIFwiSFRUUFdvcm0uZXhlXCIsIFwiU1FMSW5qZWN0LmV4ZVwiXTtcbiAgY29uc3QgcG9ydENyYWNrQ291bnQgPSBwb3J0Q3JhY2tzLnJlZHVjZSgoY291bnQsIGNyYWNrKSA9PiB7XG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoY3JhY2ssIFwiaG9tZVwiKSkgY291bnQrKztcbiAgICByZXR1cm4gY291bnQ7XG4gIH0sIDApO1xuXG4gIC8vZm9yIChjb25zdCB0YXJnZXQgb2YgWydDU0VDJywgJ2F2bW5pdGUtMDJoJywgJ0kuSS5JLkknLCAncnVuNHRoZWgxMTF6JywgJ1RoZS1DYXZlJywgJ3cwcjFkX2Q0M20wbicsICdlY29ycCcsICdmdWxjcnVtYXNzZXRzJywgJ2Z1bGNydW10ZWNoJ10pIHtcbiAgZm9yIChjb25zdCB0YXJnZXQgb2YgWydDU0VDJywgJ2F2bW5pdGUtMDJoJywgJ0kuSS5JLkknLCAncnVuNHRoZWgxMTF6JywgJ1RoZS1DYXZlJywgJ3cwcjFkX2Q0M20wbiddKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChucy5nZXRTZXJ2ZXIodGFyZ2V0KS5iYWNrZG9vckluc3RhbGxlZCkgY29udGludWU7XG5cbiAgICAgIGlmIChucy5nZXRIYWNraW5nTGV2ZWwoKSA8IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHRhcmdldCkpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAoIW5zLmhhc1Jvb3RBY2Nlc3ModGFyZ2V0KSAmJiBpc1Jvb3RhYmxlKG5zLCB0YXJnZXQsIHBvcnRDcmFja0NvdW50KSkge1xuICAgICAgICBjcmFja0FuZE51a2UobnMsIHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChucy5oYXNSb290QWNjZXNzKHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChjb25zdCBzIG9mIGdldENvbm5lY3RlZFBhdGhzKG5zKVt0YXJnZXRdKSB7XG4gICAgICAgICAgbnMuc2luZ3VsYXJpdHkuY29ubmVjdChzKTtcbiAgICAgICAgfVxuICAgICAgICBucy50cHJpbnRmKGBJbnN0YWxsaW5nIGJhY2tkb29yIG9uICR7dGFyZ2V0fWApO1xuICAgICAgICBhd2FpdCBucy5zaW5ndWxhcml0eS5pbnN0YWxsQmFja2Rvb3IoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG4gIH1cblxuICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA+IDEwNTAwMDAwKSB7XG4gICAgY29uc3QgY3VyQ2l0eSA9IG5zLmdldFBsYXllcigpLmNpdHk7XG4gICAgY29uc3QgY2l0aWVzID0gWydTZWN0b3ItMTInLCAnVm9saGF2ZW4nLCAnQWV2dW0nLCAnSXNoaW1hJywgJ0Nob25ncWluZycsICdOZXcgVG9reW8nXTtcbiAgICBmb3IgKGNvbnN0IGNpdHkgb2YgY2l0aWVzKSB7XG4gICAgICAvL25zLnRwcmludGYoYCR7Y2l0eX1gKTtcbiAgICAgIG5zLnNpbmd1bGFyaXR5LnRyYXZlbFRvQ2l0eSg8Q2l0eU5hbWU+Y2l0eSk7XG4gICAgICBucy5zaW5ndWxhcml0eS5jaGVja0ZhY3Rpb25JbnZpdGF0aW9ucygpO1xuICAgIH1cblxuICAgIG5zLnNpbmd1bGFyaXR5LnRyYXZlbFRvQ2l0eShjdXJDaXR5KTsgICAgXG4gIH1cblxuICBucy5zaW5ndWxhcml0eS5jb25uZWN0KCdob21lJyk7XG59XG4iXX0=\",\"filename\":\"backdoor.js\",\"server\":\"home\"}}],[\"learn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Algorithms\\\", false);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhcm4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGVhcm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM3RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xuICBucy5zaW5ndWxhcml0eS51bml2ZXJzaXR5Q291cnNlKFwiUm90aG1hbiBVbml2ZXJzaXR5XCIsIFwiQWxnb3JpdGhtc1wiLCBmYWxzZSk7XG59XG4iXX0=\",\"filename\":\"learn.js\",\"server\":\"home\"}}],[\"reset.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.killall();\\n    await ns.sleep(30);\\n    ns.singularity.softReset('hud.js');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDYixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbnMua2lsbGFsbCgpO1xuICBhd2FpdCBucy5zbGVlcCgzMCk7XG4gIG5zLnNpbmd1bGFyaXR5LnNvZnRSZXNldCgnaHVkLmpzJyk7XG59XG4iXX0=\",\"filename\":\"reset.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HSUpgradeType } from \\\"lib/hacknet/hs-upgrade-type\\\";\\nimport { ExtendedNodeStats } from \\\"lib/hacknet/extended-node-stats\\\";\\nimport { HSUpgrade } from \\\"lib/hacknet/hs-upgrade\\\";\\nexport function cleanLogs(ns) {\\n    ns.disableLog(\\\"disableLog\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    // ns.disableLog(\\\"sleep\\\")\\n    // ns.disableLog(\\\"exec\\\")\\n    // ns.disableLog(\\\"getServerMaxRam\\\")\\n    // ns.disableLog(\\\"getServerSecurityLevel\\\")\\n    // ns.disableLog(\\\"getServerMinSecurityLevel\\\")\\n    // ns.disableLog(\\\"getServerMaxMoney\\\")\\n    // ns.disableLog(\\\"getHackingLevel\\\")\\n    // ns.disableLog(\\\"getServerRequiredHackingLevel\\\")\\n    // ns.disableLog(\\\"scan\\\")\\n    // ns.disableLog(\\\"getServerMoneyAvailable\\\")\\n    // ns.disableLog(\\\"getServerUsedRam\\\")\\n}\\nexport function llog(ns, str, ...args) {\\n    ns.print(ns.sprintf(\\\"%8s \\\" + str, new Date().toLocaleTimeString(\\\"it-IT\\\"), ...args));\\n}\\nfunction generateNewServerValue(ns) {\\n    const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(0));\\n    stats.cache = 1;\\n    stats.cores = 1;\\n    stats.hashCapacity = 64;\\n    stats.level = 1;\\n    stats.ram = 1;\\n    stats.timeOnline = 1;\\n    stats.totalCost = ns.hacknet.getPurchaseNodeCost();\\n    stats.updateProduction(ns);\\n    // ns.tprintf(\\\"New Server Production: %s\\\", stats.production);\\n    // ns.tprintf(\\\"New Server Cost: %s\\\", ns.nFormat(stats.totalCost, \\\"($0.000a)\\\"));\\n    // ns.tprintf(\\\"New Server Total Value: %.2f h/s/$bn\\\", (stats.production / stats.totalCost) * 1000000000);\\n    let bestUpgrade;\\n    while (true) {\\n        const hashServerUpgrades = Object.keys(HSUpgradeType)\\n            .map((key) => new HSUpgrade(ns, ns.hacknet.numNodes(), HSUpgradeType[key], stats))\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\n        const newBestUpgrade = hashServerUpgrades[0];\\n        switch (newBestUpgrade.type) {\\n            case HSUpgradeType.CORES:\\n                stats.cores += 1;\\n                break;\\n            case HSUpgradeType.LEVEL:\\n                stats.level += 1;\\n                break;\\n            case HSUpgradeType.RAM:\\n                stats.ram *= 2;\\n                break;\\n        }\\n        const newProduction = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n        const newCost = stats.totalCost + newBestUpgrade.upgradeCost;\\n        const newValue = newProduction / newCost;\\n        if (newValue < stats.totalValue)\\n            break;\\n        stats.production = newProduction;\\n        stats.totalCost = newCost;\\n        stats.totalValue = newValue;\\n        bestUpgrade = newBestUpgrade;\\n        // ns.tprintf(\\n        //     \\\"%s => Total Value: %s\\\",\\n        //     hashServerUpgrades[0].toString(ns, stats.production),\\n        //     stats.totalValue * 1000000000\\n        // );\\n        const checkStats = ns.hacknet.getNodeStats(0);\\n        if (stats.cores >= checkStats.cores && stats.level >= checkStats.level && stats.ram >= checkStats.ram)\\n            break;\\n    }\\n    if (bestUpgrade === undefined)\\n        return bestUpgrade;\\n    bestUpgrade.upgradeCost = ns.hacknet.getPurchaseNodeCost();\\n    bestUpgrade.upgradeValue = stats.totalValue;\\n    bestUpgrade.type = HSUpgradeType.SERVER;\\n    bestUpgrade.upgradeProductionIncrease = stats.production;\\n    return bestUpgrade;\\n}\\nexport async function main(ns) {\\n    cleanLogs(ns);\\n    // while (true) {\\n    //   if (ns.hacknet.hashCapacity() < ns.hacknet.hashCost(\\\"Reduce Minimum Security\\\")) break;\\n    //   while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Reduce Minimum Security\\\"))\\n    //     ns.hacknet.spendHashes(\\\"Reduce Minimum Security\\\", 'phantasy');\\n    //   await ns.sleep(1000);\\n    // }\\n    // while (true) {\\n    //   while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n    //     ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n    //   await ns.sleep(1000);\\n    // }\\n    let prodCalc = 0;\\n    for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\n        const stats = ns.hacknet.getNodeStats(idx);\\n        stats.ramUsed = 0;\\n        stats.production = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n        prodCalc += stats.production;\\n    }\\n    const prodIncome = (prodCalc / ns.hacknet.hashCost(\\\"Sell for Money\\\")) * 1000000;\\n    ns.tprintf(\\\"Income: %.2f h/s | %s/s\\\", prodCalc, ns.nFormat(prodIncome, \\\"($0.000a)\\\"));\\n    if (ns.hacknet.numNodes() === 0) {\\n        ns.print(ns.sprintf(\\\"%s | 0 hacknet nodes available, waiting for funds to buy one for %s\\\", new Date().toLocaleTimeString(\\\"it-IT\\\"), ns.nFormat(ns.hacknet.getPurchaseNodeCost(), \\\"($0.000a)\\\")));\\n    }\\n    while (ns.hacknet.numNodes() === 0) {\\n        if (ns.getPlayer().money >= ns.hacknet.getPurchaseNodeCost()) {\\n            ns.hacknet.purchaseNode();\\n        }\\n        else {\\n            await ns.sleep(1000);\\n        }\\n    }\\n    let buyServerUpgrade = generateNewServerValue(ns);\\n    if (ns.args[0]) {\\n        let hashServerUpgrades = [];\\n        if (buyServerUpgrade !== undefined)\\n            hashServerUpgrades.push(buyServerUpgrade);\\n        let totalProduction = 0;\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\n            stats.ramUsed = 0;\\n            stats.updateProduction(ns);\\n            Object.keys(HSUpgradeType).forEach((key) => {\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\n            });\\n            totalProduction += stats.production;\\n        }\\n        hashServerUpgrades = hashServerUpgrades\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue)\\n            .filter((a) => a.upgradeValue * 1000000000 > 0.15);\\n        for (const upg of hashServerUpgrades)\\n            ns.tprintf(upg.toString(ns, totalProduction));\\n        return;\\n    }\\n    while (true) {\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n        let hashServerUpgrades = [];\\n        if (buyServerUpgrade !== undefined)\\n            hashServerUpgrades.push(buyServerUpgrade);\\n        let totalProduction = 0;\\n        for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\n            const stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(idx));\\n            stats.ramUsed = 0;\\n            stats.updateProduction(ns);\\n            Object.keys(HSUpgradeType).forEach((key) => {\\n                if (key !== \\\"CACHE\\\" && key != \\\"SERVER\\\")\\n                    hashServerUpgrades.push(new HSUpgrade(ns, idx, HSUpgradeType[key], stats));\\n            });\\n            totalProduction += stats.production;\\n        }\\n        hashServerUpgrades = hashServerUpgrades\\n            .sort((a, b) => b.upgradeValue - a.upgradeValue);\\n        //.filter((a) => a.upgradeValue * 1000000000 > 0.15);\\n        const targetUpgrade = hashServerUpgrades[0];\\n        if (targetUpgrade) {\\n            const port = ns.getPortHandle(2);\\n            port.clear();\\n            port.write(JSON.stringify([totalProduction, targetUpgrade]));\\n            llog(ns, \\\"%s\\\", targetUpgrade.toString(ns, totalProduction));\\n            // const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\n            // const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\n            // const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\n            // while (effectiveMoneyAvailable < targetUpgrade.upgradeCost) {\\n            //     numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\n            //     effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\n            //     while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n            //         ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n            //     await ns.sleep(1000);\\n            // }\\n            while (ns.getPlayer().money < targetUpgrade.upgradeCost) {\\n                while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n                    ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n                await ns.sleep(1000);\\n            }\\n            targetUpgrade.buy(ns);\\n        }\\n        else {\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n            await ns.sleep(1000);\\n        }\\n        buyServerUpgrade = generateNewServerValue(ns);\\n        await ns.sleep(20);\\n    }\\n    ns.print(ns.sprintf(\\\"%s | Leeching...\\\", new Date().toLocaleTimeString(\\\"it-IT\\\")));\\n    while (true) {\\n        while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n        await ns.sleep(1000);\\n    }\\n    while (true) {\\n        //let studyCost = ns.hacknet.hashCost(\\\"Increase Maximum Money\\\");\\n        const studyCost = ns.hacknet.hashCost(\\\"Improve Studying\\\");\\n        while (ns.hacknet.hashCapacity() < studyCost) {\\n            while (ns.hacknet.numHashes() > ns.hacknet.hashCost(\\\"Sell for Money\\\"))\\n                ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n            // find the cheapest cache upgrade and attempt to buy it\\n            let targetIdx = -1;\\n            let targetIdxCost = Number.MAX_SAFE_INTEGER;\\n            for (let idx = 0; idx < ns.hacknet.numNodes(); idx++) {\\n                const idxCost = ns.hacknet.getCacheUpgradeCost(idx, 1);\\n                if (idxCost < targetIdxCost) {\\n                    targetIdx = idx;\\n                    targetIdxCost = idxCost;\\n                }\\n            }\\n            if (ns.getPlayer().money > targetIdxCost) {\\n                ns.hacknet.upgradeCache(targetIdx, 1);\\n                continue;\\n            }\\n            await ns.sleep(1000);\\n        }\\n        while (ns.hacknet.numHashes() < studyCost)\\n            await ns.sleep(1000);\\n        //ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"phantasy\\\");\\n        ns.hacknet.spendHashes(\\\"Improve Studying\\\");\\n        await ns.sleep(20);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFbkQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxFQUFNO0lBQzlCLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQix5QkFBeUI7SUFDekIsd0JBQXdCO0lBQ3hCLG1DQUFtQztJQUNuQywwQ0FBMEM7SUFDMUMsNkNBQTZDO0lBQzdDLHFDQUFxQztJQUNyQyxtQ0FBbUM7SUFDbkMsaURBQWlEO0lBQ2pELHdCQUF3QjtJQUN4QiwyQ0FBMkM7SUFDM0Msb0NBQW9DO0FBQ3RDLENBQUM7QUFFRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxHQUFXLEVBQUUsR0FBRyxJQUF5QjtJQUNwRSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN0RixDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxFQUFNO0lBQ2xDLE1BQU0sS0FBSyxHQUFHLElBQUksaUJBQWlCLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNoQixLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNoQixLQUFLLENB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QVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNsRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxPQUFPLEdBQUcsYUFBYSxFQUFFO29CQUN6QixTQUFTLEdBQUcsR0FBRyxDQUFDO29CQUNoQixhQUFhLEdBQUcsT0FBTyxDQUFDO2lCQUMzQjthQUNKO1lBRUQsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxHQUFHLGFBQWEsRUFBRTtnQkFDdEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxTQUFTO2FBQ1o7WUFFRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7UUFFRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsU0FBUztZQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRSwrREFBK0Q7UUFDL0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUUzQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBIU1VwZ3JhZGVUeXBlIH0gZnJvbSBcImxpYi9oYWNrbmV0L2hzLXVwZ3JhZGUtdHlwZVwiO1xuaW1wb3J0IHsgRXh0ZW5kZWROb2RlU3RhdHMgfSBmcm9tIFwibGliL2hhY2tuZXQvZXh0ZW5kZWQtbm9kZS1zdGF0c1wiO1xuaW1wb3J0IHsgSFNVcGdyYWRlIH0gZnJvbSBcImxpYi9oYWNrbmV0L2hzLXVwZ3JhZGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuTG9ncyhuczogTlMpOiB2b2lkIHtcbiAgbnMuZGlzYWJsZUxvZyhcImRpc2FibGVMb2dcIik7XG4gIG5zLmRpc2FibGVMb2coXCJBTExcIik7XG4gIC8vIG5zLmRpc2FibGVMb2coXCJzbGVlcFwiKVxuICAvLyBucy5kaXNhYmxlTG9nKFwiZXhlY1wiKVxuICAvLyBucy5kaXNhYmxlTG9nKFwiZ2V0U2VydmVyTWF4UmFtXCIpXG4gIC8vIG5zLmRpc2FibGVMb2coXCJnZXRTZXJ2ZXJTZWN1cml0eUxldmVsXCIpXG4gIC8vIG5zLmRpc2FibGVMb2coXCJnZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsXCIpXG4gIC8vIG5zLmRpc2FibGVMb2coXCJnZXRTZXJ2ZXJNYXhNb25leVwiKVxuICAvLyBucy5kaXNhYmxlTG9nKFwiZ2V0SGFja2luZ0xldmVsXCIpXG4gIC8vIG5zLmRpc2FibGVMb2coXCJnZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbFwiKVxuICAvLyBucy5kaXNhYmxlTG9nKFwic2NhblwiKVxuICAvLyBucy5kaXNhYmxlTG9nKFwiZ2V0U2VydmVyTW9uZXlBdmFpbGFibGVcIilcbiAgLy8gbnMuZGlzYWJsZUxvZyhcImdldFNlcnZlclVzZWRSYW1cIilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxsb2cobnM6IE5TLCBzdHI6IHN0cmluZywgLi4uYXJnczogKHN0cmluZyB8IG51bWJlcilbXSk6IHZvaWQge1xuICBucy5wcmludChucy5zcHJpbnRmKFwiJThzIFwiICsgc3RyLCBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZyhcIml0LUlUXCIpLCAuLi5hcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV3U2VydmVyVmFsdWUobnM6IE5TKTogSFNVcGdyYWRlIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBzdGF0cyA9IG5ldyBFeHRlbmRlZE5vZGVTdGF0cyhucy5oYWNrbmV0LmdldE5vZGVTdGF0cygwKSk7XG4gICAgc3RhdHMuY2FjaGUgPSAxO1xuICAgIHN0YXRzLmNvcmVzID0gMTtcbiAgICBzdGF0cy5oYXNoQ2FwYWNpdHkgPSA2NDtcbiAgICBzdGF0cy5sZXZlbCA9IDE7XG4gICAgc3RhdHMucmFtID0gMTtcbiAgICBzdGF0cy50aW1lT25saW5lID0gMTtcbiAgICBzdGF0cy50b3RhbENvc3QgPSBucy5oYWNrbmV0LmdldFB1cmNoYXNlTm9kZUNvc3QoKTtcbiAgICBzdGF0cy51cGRhdGVQcm9kdWN0aW9uKG5zKTtcblxuICAgIC8vIG5zLnRwcmludGYoXCJOZXcgU2VydmVyIFByb2R1Y3Rpb246ICVzXCIsIHN0YXRzLnByb2R1Y3Rpb24pO1xuICAgIC8vIG5zLnRwcmludGYoXCJOZXcgU2VydmVyIENvc3Q6ICVzXCIsIG5zLm5Gb3JtYXQoc3RhdHMudG90YWxDb3N0LCBcIigkMC4wMDBhKVwiKSk7XG4gICAgLy8gbnMudHByaW50ZihcIk5ldyBTZXJ2ZXIgVG90YWwgVmFsdWU6ICUuMmYgaC9zLyRiblwiLCAoc3RhdHMucHJvZHVjdGlvbiAvIHN0YXRzLnRvdGFsQ29zdCkgKiAxMDAwMDAwMDAwKTtcblxuICAgIGxldCBiZXN0VXBncmFkZTogSFNVcGdyYWRlIHwgdW5kZWZpbmVkO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IGhhc2hTZXJ2ZXJVcGdyYWRlcyA9IE9iamVjdC5rZXlzKEhTVXBncmFkZVR5cGUpXG4gICAgICAgICAgICAubWFwKChrZXkpID0+IG5ldyBIU1VwZ3JhZGUobnMsIG5zLmhhY2tuZXQubnVtTm9kZXMoKSwgSFNVcGdyYWRlVHlwZVtrZXkgYXMgSFNVcGdyYWRlVHlwZV0sIHN0YXRzKSlcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnVwZ3JhZGVWYWx1ZSAtIGEudXBncmFkZVZhbHVlKTtcblxuICAgICAgICBjb25zdCBuZXdCZXN0VXBncmFkZSA9IGhhc2hTZXJ2ZXJVcGdyYWRlc1swXTtcblxuICAgICAgICBzd2l0Y2ggKG5ld0Jlc3RVcGdyYWRlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgSFNVcGdyYWRlVHlwZS5DT1JFUzpcbiAgICAgICAgICAgICAgICBzdGF0cy5jb3JlcyArPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBIU1VwZ3JhZGVUeXBlLkxFVkVMOlxuICAgICAgICAgICAgICAgIHN0YXRzLmxldmVsICs9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEhTVXBncmFkZVR5cGUuUkFNOlxuICAgICAgICAgICAgICAgIHN0YXRzLnJhbSAqPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3UHJvZHVjdGlvbiA9IG5zLmZvcm11bGFzLmhhY2tuZXRTZXJ2ZXJzLmhhc2hHYWluUmF0ZShcbiAgICAgICAgICAgIHN0YXRzLmxldmVsLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIHN0YXRzLnJhbSxcbiAgICAgICAgICAgIHN0YXRzLmNvcmVzLFxuICAgICAgICAgICAgbnMuZ2V0Qml0Tm9kZU11bHRpcGxpZXJzKCkuSGFja25ldE5vZGVNb25leVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBuZXdDb3N0ID0gc3RhdHMudG90YWxDb3N0ICsgbmV3QmVzdFVwZ3JhZGUudXBncmFkZUNvc3Q7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3UHJvZHVjdGlvbiAvIG5ld0Nvc3Q7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlIDwgc3RhdHMudG90YWxWYWx1ZSkgYnJlYWs7XG5cbiAgICAgICAgc3RhdHMucHJvZHVjdGlvbiA9IG5ld1Byb2R1Y3Rpb247XG4gICAgICAgIHN0YXRzLnRvdGFsQ29zdCA9IG5ld0Nvc3Q7XG4gICAgICAgIHN0YXRzLnRvdGFsVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgYmVzdFVwZ3JhZGUgPSBuZXdCZXN0VXBncmFkZTtcblxuICAgICAgICAvLyBucy50cHJpbnRmKFxuICAgICAgICAvLyAgICAgXCIlcyA9PiBUb3RhbCBWYWx1ZTogJXNcIixcbiAgICAgICAgLy8gICAgIGhhc2hTZXJ2ZXJVcGdyYWRlc1swXS50b1N0cmluZyhucywgc3RhdHMucHJvZHVjdGlvbiksXG4gICAgICAgIC8vICAgICBzdGF0cy50b3RhbFZhbHVlICogMTAwMDAwMDAwMFxuICAgICAgICAvLyApO1xuXG4gICAgICAgIGNvbnN0IGNoZWNrU3RhdHMgPSBucy5oYWNrbmV0LmdldE5vZGVTdGF0cygwKTtcbiAgICAgICAgaWYgKHN0YXRzLmNvcmVzID49IGNoZWNrU3RhdHMuY29yZXMgJiYgc3RhdHMubGV2ZWwgPj0gY2hlY2tTdGF0cy5sZXZlbCAmJiBzdGF0cy5yYW0gPj0gY2hlY2tTdGF0cy5yYW0pIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChiZXN0VXBncmFkZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gYmVzdFVwZ3JhZGU7XG5cbiAgICBiZXN0VXBncmFkZS51cGdyYWRlQ29zdCA9IG5zLmhhY2tuZXQuZ2V0UHVyY2hhc2VOb2RlQ29zdCgpO1xuICAgIGJlc3RVcGdyYWRlLnVwZ3JhZGVWYWx1ZSA9IHN0YXRzLnRvdGFsVmFsdWU7XG4gICAgYmVzdFVwZ3JhZGUudHlwZSA9IEhTVXBncmFkZVR5cGUuU0VSVkVSO1xuICAgIGJlc3RVcGdyYWRlLnVwZ3JhZGVQcm9kdWN0aW9uSW5jcmVhc2UgPSBzdGF0cy5wcm9kdWN0aW9uO1xuXG4gICAgcmV0dXJuIGJlc3RVcGdyYWRlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjbGVhbkxvZ3MobnMpO1xuXG5cbiAgICAvLyB3aGlsZSAodHJ1ZSkge1xuICAgIC8vICAgaWYgKG5zLmhhY2tuZXQuaGFzaENhcGFjaXR5KCkgPCBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiUmVkdWNlIE1pbmltdW0gU2VjdXJpdHlcIikpIGJyZWFrO1xuICAgIC8vICAgd2hpbGUgKG5zLmhhY2tuZXQubnVtSGFzaGVzKCkgPiBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiUmVkdWNlIE1pbmltdW0gU2VjdXJpdHlcIikpXG4gICAgLy8gICAgIG5zLmhhY2tuZXQuc3BlbmRIYXNoZXMoXCJSZWR1Y2UgTWluaW11bSBTZWN1cml0eVwiLCAncGhhbnRhc3knKTtcbiAgICAvLyAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgIC8vIH1cblxuICAgIC8vIHdoaWxlICh0cnVlKSB7XG4gICAgLy8gICB3aGlsZSAobnMuaGFja25ldC5udW1IYXNoZXMoKSA+IG5zLmhhY2tuZXQuaGFzaENvc3QoXCJTZWxsIGZvciBNb25leVwiKSlcbiAgICAvLyAgICAgbnMuaGFja25ldC5zcGVuZEhhc2hlcyhcIlNlbGwgZm9yIE1vbmV5XCIpO1xuICAgIC8vICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG4gICAgLy8gfVxuXG4gICAgbGV0IHByb2RDYWxjID0gMDtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBucy5oYWNrbmV0Lm51bU5vZGVzKCk7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gbnMuaGFja25ldC5nZXROb2RlU3RhdHMoaWR4KTtcbiAgICAgICAgc3RhdHMucmFtVXNlZCA9IDA7XG4gICAgICAgIHN0YXRzLnByb2R1Y3Rpb24gPSBucy5mb3JtdWxhcy5oYWNrbmV0U2VydmVycy5oYXNoR2FpblJhdGUoXG4gICAgICAgICAgICBzdGF0cy5sZXZlbCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBzdGF0cy5yYW0sXG4gICAgICAgICAgICBzdGF0cy5jb3JlcyxcbiAgICAgICAgICAgIG5zLmdldEJpdE5vZGVNdWx0aXBsaWVycygpLkhhY2tuZXROb2RlTW9uZXlcbiAgICAgICAgKTtcblxuICAgICAgICBwcm9kQ2FsYyArPSBzdGF0cy5wcm9kdWN0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2RJbmNvbWUgPSAocHJvZENhbGMgLyBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiU2VsbCBmb3IgTW9uZXlcIikpICogMTAwMDAwMDtcbiAgICBucy50cHJpbnRmKFwiSW5jb21lOiAlLjJmIGgvcyB8ICVzL3NcIiwgcHJvZENhbGMsIG5zLm5Gb3JtYXQocHJvZEluY29tZSwgXCIoJDAuMDAwYSlcIikpO1xuXG4gICAgaWYgKG5zLmhhY2tuZXQubnVtTm9kZXMoKSA9PT0gMCkge1xuICAgICAgICBucy5wcmludChcbiAgICAgICAgICAgIG5zLnNwcmludGYoXG4gICAgICAgICAgICAgICAgXCIlcyB8IDAgaGFja25ldCBub2RlcyBhdmFpbGFibGUsIHdhaXRpbmcgZm9yIGZ1bmRzIHRvIGJ1eSBvbmUgZm9yICVzXCIsXG4gICAgICAgICAgICAgICAgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoXCJpdC1JVFwiKSxcbiAgICAgICAgICAgICAgICBucy5uRm9ybWF0KG5zLmhhY2tuZXQuZ2V0UHVyY2hhc2VOb2RlQ29zdCgpLCBcIigkMC4wMDBhKVwiKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHdoaWxlIChucy5oYWNrbmV0Lm51bU5vZGVzKCkgPT09IDApIHtcbiAgICAgICAgaWYgKG5zLmdldFBsYXllcigpLm1vbmV5ID49IG5zLmhhY2tuZXQuZ2V0UHVyY2hhc2VOb2RlQ29zdCgpKSB7XG4gICAgICAgICAgICBucy5oYWNrbmV0LnB1cmNoYXNlTm9kZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgYnV5U2VydmVyVXBncmFkZSA9IGdlbmVyYXRlTmV3U2VydmVyVmFsdWUobnMpO1xuXG4gICAgaWYgKG5zLmFyZ3NbMF0pIHtcbiAgICAgICAgbGV0IGhhc2hTZXJ2ZXJVcGdyYWRlczogSFNVcGdyYWRlW10gPSBbXTtcbiAgICAgICAgaWYgKGJ1eVNlcnZlclVwZ3JhZGUgIT09IHVuZGVmaW5lZCkgaGFzaFNlcnZlclVwZ3JhZGVzLnB1c2goYnV5U2VydmVyVXBncmFkZSk7XG5cbiAgICAgICAgbGV0IHRvdGFsUHJvZHVjdGlvbiA9IDA7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG5zLmhhY2tuZXQubnVtTm9kZXMoKTsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gbmV3IEV4dGVuZGVkTm9kZVN0YXRzKG5zLmhhY2tuZXQuZ2V0Tm9kZVN0YXRzKGlkeCkpO1xuICAgICAgICAgICAgc3RhdHMucmFtVXNlZCA9IDA7XG4gICAgICAgICAgICBzdGF0cy51cGRhdGVQcm9kdWN0aW9uKG5zKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoSFNVcGdyYWRlVHlwZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJDQUNIRVwiICYmIGtleSAhPSBcIlNFUlZFUlwiKVxuICAgICAgICAgICAgICAgICAgICBoYXNoU2VydmVyVXBncmFkZXMucHVzaChuZXcgSFNVcGdyYWRlKG5zLCBpZHgsIEhTVXBncmFkZVR5cGVba2V5IGFzIEhTVXBncmFkZVR5cGVdLCBzdGF0cykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRvdGFsUHJvZHVjdGlvbiArPSBzdGF0cy5wcm9kdWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFzaFNlcnZlclVwZ3JhZGVzID0gaGFzaFNlcnZlclVwZ3JhZGVzXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYi51cGdyYWRlVmFsdWUgLSBhLnVwZ3JhZGVWYWx1ZSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGEpID0+IGEudXBncmFkZVZhbHVlICogMTAwMDAwMDAwMCA+IDAuMTUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgdXBnIG9mIGhhc2hTZXJ2ZXJVcGdyYWRlcykgbnMudHByaW50Zih1cGcudG9TdHJpbmcobnMsIHRvdGFsUHJvZHVjdGlvbikpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB3aGlsZSAobnMuaGFja25ldC5udW1IYXNoZXMoKSA+IG5zLmhhY2tuZXQuaGFzaENvc3QoXCJTZWxsIGZvciBNb25leVwiKSlcbiAgICAgICAgICBucy5oYWNrbmV0LnNwZW5kSGFzaGVzKFwiU2VsbCBmb3IgTW9uZXlcIik7XG4gICAgICBcbiAgICAgICAgbGV0IGhhc2hTZXJ2ZXJVcGdyYWRlczogSFNVcGdyYWRlW10gPSBbXTtcbiAgICAgICAgaWYgKGJ1eVNlcnZlclVwZ3JhZGUgIT09IHVuZGVmaW5lZCkgaGFzaFNlcnZlclVwZ3JhZGVzLnB1c2goYnV5U2VydmVyVXBncmFkZSk7XG4gICAgICAgIGxldCB0b3RhbFByb2R1Y3Rpb24gPSAwO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBucy5oYWNrbmV0Lm51bU5vZGVzKCk7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IG5ldyBFeHRlbmRlZE5vZGVTdGF0cyhucy5oYWNrbmV0LmdldE5vZGVTdGF0cyhpZHgpKTtcbiAgICAgICAgICAgIHN0YXRzLnJhbVVzZWQgPSAwO1xuICAgICAgICAgICAgc3RhdHMudXBkYXRlUHJvZHVjdGlvbihucyk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKEhTVXBncmFkZVR5cGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09IFwiQ0FDSEVcIiAmJiBrZXkgIT0gXCJTRVJWRVJcIilcbiAgICAgICAgICAgICAgICAgICAgaGFzaFNlcnZlclVwZ3JhZGVzLnB1c2gobmV3IEhTVXBncmFkZShucywgaWR4LCBIU1VwZ3JhZGVUeXBlW2tleSBhcyBIU1VwZ3JhZGVUeXBlXSwgc3RhdHMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0b3RhbFByb2R1Y3Rpb24gKz0gc3RhdHMucHJvZHVjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc2hTZXJ2ZXJVcGdyYWRlcyA9IGhhc2hTZXJ2ZXJVcGdyYWRlc1xuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIudXBncmFkZVZhbHVlIC0gYS51cGdyYWRlVmFsdWUpXG4gICAgICAgICAgICAvLy5maWx0ZXIoKGEpID0+IGEudXBncmFkZVZhbHVlICogMTAwMDAwMDAwMCA+IDAuMTUpO1xuXG4gICAgICAgIGNvbnN0IHRhcmdldFVwZ3JhZGUgPSBoYXNoU2VydmVyVXBncmFkZXNbMF07XG4gICAgICAgIGlmICh0YXJnZXRVcGdyYWRlKSB7XG4gICAgICAgICAgICBjb25zdCBwb3J0ID0gbnMuZ2V0UG9ydEhhbmRsZSgyKTtcbiAgICAgICAgICAgIHBvcnQuY2xlYXIoKTtcbiAgICAgICAgICAgIHBvcnQud3JpdGUoSlNPTi5zdHJpbmdpZnkoW3RvdGFsUHJvZHVjdGlvbiwgdGFyZ2V0VXBncmFkZV0pKTtcblxuICAgICAgICAgICAgbGxvZyhucywgXCIlc1wiLCB0YXJnZXRVcGdyYWRlLnRvU3RyaW5nKG5zLCB0b3RhbFByb2R1Y3Rpb24pKTtcblxuICAgICAgICAgICAgLy8gY29uc3QgaGFzaEJ1eUNvc3QgPSBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiU2VsbCBmb3IgTW9uZXlcIik7XG4gICAgICAgICAgICAvLyBjb25zdCBudW1IYXNoQnV5cyA9IE1hdGguZmxvb3IobnMuaGFja25ldC5udW1IYXNoZXMoKSAvIGhhc2hCdXlDb3N0KTtcbiAgICAgICAgICAgIC8vIGNvbnN0IGVmZmVjdGl2ZU1vbmV5QXZhaWxhYmxlID0gbnMuZ2V0UGxheWVyKCkubW9uZXkgKyBudW1IYXNoQnV5cyAqIDEwMDAwMDA7XG5cbiAgICAgICAgICAgIC8vIHdoaWxlIChlZmZlY3RpdmVNb25leUF2YWlsYWJsZSA8IHRhcmdldFVwZ3JhZGUudXBncmFkZUNvc3QpIHtcbiAgICAgICAgICAgIC8vICAgICBudW1IYXNoQnV5cyA9IE1hdGguZmxvb3IobnMuaGFja25ldC5udW1IYXNoZXMoKSAvIGhhc2hCdXlDb3N0KTtcbiAgICAgICAgICAgIC8vICAgICBlZmZlY3RpdmVNb25leUF2YWlsYWJsZSA9IG5zLmdldFBsYXllcigpLm1vbmV5ICsgbnVtSGFzaEJ1eXMgKiAxMDAwMDAwO1xuXG4gICAgICAgICAgICAvLyAgICAgd2hpbGUgKG5zLmhhY2tuZXQubnVtSGFzaGVzKCkgPiBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiU2VsbCBmb3IgTW9uZXlcIikpXG4gICAgICAgICAgICAvLyAgICAgICAgIG5zLmhhY2tuZXQuc3BlbmRIYXNoZXMoXCJTZWxsIGZvciBNb25leVwiKTtcblxuICAgICAgICAgICAgLy8gICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICB3aGlsZSAobnMuZ2V0UGxheWVyKCkubW9uZXkgPCB0YXJnZXRVcGdyYWRlLnVwZ3JhZGVDb3N0KSB7XG4gICAgICAgICAgICAgIHdoaWxlIChucy5oYWNrbmV0Lm51bUhhc2hlcygpID4gbnMuaGFja25ldC5oYXNoQ29zdChcIlNlbGwgZm9yIE1vbmV5XCIpKVxuICAgICAgICAgICAgICAgIG5zLmhhY2tuZXQuc3BlbmRIYXNoZXMoXCJTZWxsIGZvciBNb25leVwiKTtcbiAgICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhcmdldFVwZ3JhZGUuYnV5KG5zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChucy5oYWNrbmV0Lm51bUhhc2hlcygpID4gbnMuaGFja25ldC5oYXNoQ29zdChcIlNlbGwgZm9yIE1vbmV5XCIpKVxuICAgICAgICAgICAgICAgIG5zLmhhY2tuZXQuc3BlbmRIYXNoZXMoXCJTZWxsIGZvciBNb25leVwiKTtcblxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBidXlTZXJ2ZXJVcGdyYWRlID0gZ2VuZXJhdGVOZXdTZXJ2ZXJWYWx1ZShucyk7XG5cbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMjApO1xuICAgIH1cblxuICAgIG5zLnByaW50KG5zLnNwcmludGYoXCIlcyB8IExlZWNoaW5nLi4uXCIsIG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKFwiaXQtSVRcIikpKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB3aGlsZSAobnMuaGFja25ldC5udW1IYXNoZXMoKSA+IG5zLmhhY2tuZXQuaGFzaENvc3QoXCJTZWxsIGZvciBNb25leVwiKSkgbnMuaGFja25ldC5zcGVuZEhhc2hlcyhcIlNlbGwgZm9yIE1vbmV5XCIpO1xuXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgIH1cblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIC8vbGV0IHN0dWR5Q29zdCA9IG5zLmhhY2tuZXQuaGFzaENvc3QoXCJJbmNyZWFzZSBNYXhpbXVtIE1vbmV5XCIpO1xuICAgICAgICBjb25zdCBzdHVkeUNvc3QgPSBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiSW1wcm92ZSBTdHVkeWluZ1wiKTtcblxuICAgICAgICB3aGlsZSAobnMuaGFja25ldC5oYXNoQ2FwYWNpdHkoKSA8IHN0dWR5Q29zdCkge1xuICAgICAgICAgICAgd2hpbGUgKG5zLmhhY2tuZXQubnVtSGFzaGVzKCkgPiBucy5oYWNrbmV0Lmhhc2hDb3N0KFwiU2VsbCBmb3IgTW9uZXlcIikpXG4gICAgICAgICAgICAgICAgbnMuaGFja25ldC5zcGVuZEhhc2hlcyhcIlNlbGwgZm9yIE1vbmV5XCIpO1xuXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBjaGVhcGVzdCBjYWNoZSB1cGdyYWRlIGFuZCBhdHRlbXB0IHRvIGJ1eSBpdFxuICAgICAgICAgICAgbGV0IHRhcmdldElkeCA9IC0xO1xuICAgICAgICAgICAgbGV0IHRhcmdldElkeENvc3QgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG5zLmhhY2tuZXQubnVtTm9kZXMoKTsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZHhDb3N0ID0gbnMuaGFja25ldC5nZXRDYWNoZVVwZ3JhZGVDb3N0KGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGlkeENvc3QgPCB0YXJnZXRJZHhDb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElkeCA9IGlkeDtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWR4Q29zdCA9IGlkeENvc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobnMuZ2V0UGxheWVyKCkubW9uZXkgPiB0YXJnZXRJZHhDb3N0KSB7XG4gICAgICAgICAgICAgICAgbnMuaGFja25ldC51cGdyYWRlQ2FjaGUodGFyZ2V0SWR4LCAxKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobnMuaGFja25ldC5udW1IYXNoZXMoKSA8IHN0dWR5Q29zdCkgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XG5cbiAgICAgICAgLy9ucy5oYWNrbmV0LnNwZW5kSGFzaGVzKFwiSW5jcmVhc2UgTWF4aW11bSBNb25leVwiLCBcInBoYW50YXN5XCIpO1xuICAgICAgICBucy5oYWNrbmV0LnNwZW5kSGFzaGVzKFwiSW1wcm92ZSBTdHVkeWluZ1wiKTtcblxuICAgICAgICBhd2FpdCBucy5zbGVlcCgyMCk7XG4gICAgfVxufSJdfQ==\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"lib/hacknet/hs-upgrade-type.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export var HSUpgradeType;\\n(function (HSUpgradeType) {\\n    HSUpgradeType[\\\"LEVEL\\\"] = \\\"LEVEL\\\";\\n    HSUpgradeType[\\\"RAM\\\"] = \\\"RAM\\\";\\n    HSUpgradeType[\\\"CORES\\\"] = \\\"CORES\\\";\\n    HSUpgradeType[\\\"CACHE\\\"] = \\\"CACHE\\\";\\n    HSUpgradeType[\\\"SERVER\\\"] = \\\"SERVER\\\";\\n})(HSUpgradeType || (HSUpgradeType = {}));\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHMtdXBncmFkZS10eXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9oYWNrbmV0L2hzLXVwZ3JhZGUtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxhQU1YO0FBTkQsV0FBWSxhQUFhO0lBQ3ZCLGdDQUFlLENBQUE7SUFDZiw0QkFBVyxDQUFBO0lBQ1gsZ0NBQWUsQ0FBQTtJQUNmLGdDQUFlLENBQUE7SUFDZixrQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTlcsYUFBYSxLQUFiLGFBQWEsUUFNeEIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBIU1VwZ3JhZGVUeXBlIHtcbiAgTEVWRUwgPSBcIkxFVkVMXCIsXG4gIFJBTSA9IFwiUkFNXCIsXG4gIENPUkVTID0gXCJDT1JFU1wiLFxuICBDQUNIRSA9IFwiQ0FDSEVcIixcbiAgU0VSVkVSID0gXCJTRVJWRVJcIixcbn0iXX0=\",\"filename\":\"lib/hacknet/hs-upgrade-type.js\",\"server\":\"home\"}}],[\"lib/hacknet/extended-node-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ExtendedNodeStats {\\n    name;\\n    level;\\n    ram;\\n    ramUsed;\\n    cores;\\n    cache;\\n    hashCapacity;\\n    production;\\n    timeOnline;\\n    totalCost;\\n    totalValue;\\n    constructor(stats) {\\n        this.name = stats.name;\\n        this.level = stats.level;\\n        this.ram = stats.ram;\\n        this.ramUsed = stats.ramUsed || 0;\\n        this.cores = stats.cores;\\n        this.cache = stats.cache || 0;\\n        this.hashCapacity = stats.hashCapacity || 0;\\n        this.production = stats.production;\\n        this.timeOnline = stats.timeOnline;\\n        this.totalCost = 0;\\n        this.totalValue = 0;\\n    }\\n    updateProduction(ns, zeroRamUsed = true) {\\n        this.production = ns.formulas.hacknetServers.hashGainRate(this.level, zeroRamUsed ? 0 : this.ramUsed, this.ram, this.cores, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kZWQtbm9kZS1zdGF0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvaGFja25ldC9leHRlbmRlZC1ub2RlLXN0YXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxpQkFBaUI7SUFDMUIsSUFBSSxDQUFTO0lBQ2IsS0FBSyxDQUFTO0lBQ2QsR0FBRyxDQUFTO0lBQ1osT0FBTyxDQUFTO0lBQ2hCLEtBQUssQ0FBUztJQUNkLEtBQUssQ0FBUztJQUNkLFlBQVksQ0FBUztJQUNyQixVQUFVLENBQVM7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFNBQVMsQ0FBUztJQUNsQixVQUFVLENBQVM7SUFFbkIsWUFBWSxLQUFnQjtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBTSxFQUFFLFdBQVcsR0FBRyxJQUFJO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUNyRCxJQUFJLENBQUMsS0FBSyxFQUNWLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUM5QixJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxLQUFLLEVBQ1YsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsZ0JBQWdCLENBQzlDLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUywgTm9kZVN0YXRzIH0gZnJvbSAnQG5zJ1xuXG5leHBvcnQgY2xhc3MgRXh0ZW5kZWROb2RlU3RhdHMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBsZXZlbDogbnVtYmVyO1xuICAgIHJhbTogbnVtYmVyO1xuICAgIHJhbVVzZWQ6IG51bWJlcjtcbiAgICBjb3JlczogbnVtYmVyO1xuICAgIGNhY2hlOiBudW1iZXI7XG4gICAgaGFzaENhcGFjaXR5OiBudW1iZXI7XG4gICAgcHJvZHVjdGlvbjogbnVtYmVyO1xuICAgIHRpbWVPbmxpbmU6IG51bWJlcjtcbiAgICB0b3RhbENvc3Q6IG51bWJlcjtcbiAgICB0b3RhbFZhbHVlOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0czogTm9kZVN0YXRzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IHN0YXRzLm5hbWU7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBzdGF0cy5sZXZlbDtcbiAgICAgICAgdGhpcy5yYW0gPSBzdGF0cy5yYW07XG4gICAgICAgIHRoaXMucmFtVXNlZCA9IHN0YXRzLnJhbVVzZWQgfHwgMDtcbiAgICAgICAgdGhpcy5jb3JlcyA9IHN0YXRzLmNvcmVzO1xuICAgICAgICB0aGlzLmNhY2hlID0gc3RhdHMuY2FjaGUgfHwgMDtcbiAgICAgICAgdGhpcy5oYXNoQ2FwYWNpdHkgPSBzdGF0cy5oYXNoQ2FwYWNpdHkgfHwgMDtcbiAgICAgICAgdGhpcy5wcm9kdWN0aW9uID0gc3RhdHMucHJvZHVjdGlvbjtcbiAgICAgICAgdGhpcy50aW1lT25saW5lID0gc3RhdHMudGltZU9ubGluZTtcbiAgICAgICAgdGhpcy50b3RhbENvc3QgPSAwO1xuICAgICAgICB0aGlzLnRvdGFsVmFsdWUgPSAwO1xuICAgIH1cblxuICAgIHVwZGF0ZVByb2R1Y3Rpb24obnM6IE5TLCB6ZXJvUmFtVXNlZCA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wcm9kdWN0aW9uID0gbnMuZm9ybXVsYXMuaGFja25ldFNlcnZlcnMuaGFzaEdhaW5SYXRlKFxuICAgICAgICAgICAgdGhpcy5sZXZlbCxcbiAgICAgICAgICAgIHplcm9SYW1Vc2VkID8gMCA6IHRoaXMucmFtVXNlZCxcbiAgICAgICAgICAgIHRoaXMucmFtLFxuICAgICAgICAgICAgdGhpcy5jb3JlcyxcbiAgICAgICAgICAgIG5zLmdldEJpdE5vZGVNdWx0aXBsaWVycygpLkhhY2tuZXROb2RlTW9uZXlcbiAgICAgICAgKTtcbiAgICB9XG59Il19\",\"filename\":\"lib/hacknet/extended-node-stats.js\",\"server\":\"home\"}}],[\"lib/hacknet/hs-upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HSUpgradeType } from \\\"lib/hacknet/hs-upgrade-type\\\";\\nimport { ExtendedNodeStats } from \\\"lib/hacknet/extended-node-stats\\\";\\nexport function stFormat(ns, ms, showms = false, showfull = false) {\\n    let timeLeft = ms;\\n    const hours = Math.floor(ms / (1000 * 60 * 60));\\n    timeLeft -= hours * (1000 * 60 * 60);\\n    const minutes = Math.floor(timeLeft / (1000 * 60));\\n    timeLeft -= minutes * (1000 * 60);\\n    const seconds = Math.floor(timeLeft / 1000);\\n    timeLeft -= seconds * 1000;\\n    const milliseconds = timeLeft;\\n    if (showms) {\\n        if (hours > 0 || showfull)\\n            return ns.sprintf(\\\"%02d:%02d:%02d.%03d\\\", hours, minutes, seconds, milliseconds);\\n        if (minutes > 0)\\n            return ns.sprintf(\\\"%02d:%02d.%03d\\\", minutes, seconds, milliseconds);\\n        return ns.sprintf(\\\"%02d.%03d\\\", seconds, milliseconds);\\n    }\\n    else {\\n        if (hours > 0 || showfull)\\n            return ns.sprintf(\\\"%02d:%02d:%02d\\\", hours, minutes, seconds);\\n        if (minutes > 0)\\n            return ns.sprintf(\\\"%02d:%02d\\\", minutes, seconds);\\n        return ns.sprintf(\\\"%02d\\\", seconds);\\n    }\\n}\\nexport class HSUpgrade {\\n    id;\\n    type;\\n    upgradeCost = 0;\\n    upgradeProductionTotal = 0;\\n    cacheIncrease = 0;\\n    cacheCostPerHash = 0;\\n    upgradeProductionIncrease = 0;\\n    upgradeCashProduction = 0;\\n    upgradePayoffTime = 0;\\n    upgradeValue = 0;\\n    constructor(ns, id, type, _stats) {\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\n        const prodMult = ns.getPlayer().mults.hacknet_node_money;\\n        const coreCostMult = ns.getPlayer().mults.hacknet_node_core_cost;\\n        const levelCostMult = ns.getPlayer().mults.hacknet_node_level_cost;\\n        const ramCostMult = ns.getPlayer().mults.hacknet_node_ram_cost;\\n        let stats;\\n        if (_stats)\\n            stats = _stats;\\n        else {\\n            stats = new ExtendedNodeStats(ns.hacknet.getNodeStats(id));\\n            stats.ramUsed = 0;\\n            stats.updateProduction(ns);\\n        }\\n        this.id = id;\\n        this.type = type;\\n        switch (this.type) {\\n            case HSUpgradeType.LEVEL: {\\n                this.upgradeCost = ns.formulas.hacknetServers.levelUpgradeCost(stats.level, 1, levelCostMult);\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level + 1, 0, stats.ram, stats.cores, prodMult);\\n                break;\\n            }\\n            case HSUpgradeType.RAM: {\\n                this.upgradeCost = ns.formulas.hacknetServers.ramUpgradeCost(stats.ram, 1, ramCostMult);\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram * 2, stats.cores, prodMult);\\n                break;\\n            }\\n            case HSUpgradeType.CORES: {\\n                this.upgradeCost = ns.formulas.hacknetServers.coreUpgradeCost(stats.cores, 1, coreCostMult);\\n                this.upgradeProductionTotal = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, stats.cores + 1, prodMult);\\n                break;\\n            }\\n            case HSUpgradeType.CACHE: {\\n                this.upgradeCost = ns.formulas.hacknetServers.cacheUpgradeCost(stats.cache);\\n                this.upgradeProductionTotal = stats.production;\\n                this.cacheIncrease = stats.cache;\\n                this.cacheCostPerHash = this.upgradeCost / this.cacheIncrease;\\n                break;\\n            }\\n        }\\n        this.upgradeProductionIncrease = this.upgradeProductionTotal - stats.production;\\n        this.upgradeCashProduction = (this.upgradeProductionTotal / hashBuyCost) * 1000000;\\n        this.upgradePayoffTime = (this.upgradeCost / this.upgradeCashProduction) * 1000;\\n        this.upgradeValue = this.upgradeProductionIncrease / this.upgradeCost;\\n    }\\n    toString(ns, totalProduction) {\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\n        const totalUpgradeCashProduction = ((totalProduction + this.upgradeProductionIncrease) / hashBuyCost) * 1000000;\\n        const totalUpgradePayoffTime = (this.upgradeCost / totalUpgradeCashProduction) * 1000;\\n        return ns.sprintf(\\\"%02d => %6s %9s +%s h/s %6s %5.2f h/s/$bn\\\", this.id, this.type, ns.formatNumber(this.upgradeCost, 1, 1000), // cost\\n        ns.formatNumber(this.upgradeProductionIncrease, 1, 1000), // hash increase\\n        stFormat(ns, totalUpgradePayoffTime), // upgrade payoff time\\n        this.upgradeValue * 1000000000);\\n    }\\n    buy(ns) {\\n        const hashBuyCost = ns.hacknet.hashCost(\\\"Sell for Money\\\");\\n        const numHashBuys = Math.floor(ns.hacknet.numHashes() / hashBuyCost);\\n        const effectiveMoneyAvailable = ns.getPlayer().money + numHashBuys * 1000000;\\n        if (effectiveMoneyAvailable < this.upgradeCost) {\\n            ns.print(\\\"WARNING: Attempted to buy an upgrade you can't afford\\\");\\n            return false;\\n        }\\n        while (ns.getPlayer().money < this.upgradeCost) {\\n            ns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n        }\\n        switch (this.type) {\\n            case HSUpgradeType.LEVEL: {\\n                return ns.hacknet.upgradeLevel(this.id, 1);\\n            }\\n            case HSUpgradeType.RAM: {\\n                return ns.hacknet.upgradeRam(this.id, 1);\\n            }\\n            case HSUpgradeType.CORES: {\\n                return ns.hacknet.upgradeCore(this.id, 1);\\n            }\\n            case HSUpgradeType.CACHE: {\\n                return ns.hacknet.upgradeCache(this.id, 1);\\n            }\\n            case HSUpgradeType.SERVER: {\\n                return ns.hacknet.purchaseNode() !== -1;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHMtdXBncmFkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvaGFja25ldC9ocy11cGdyYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVwRSxNQUFNLFVBQVUsUUFBUSxDQUFDLEVBQU0sRUFBRSxFQUFVLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsS0FBSztJQUMzRSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxRQUFRLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVDLFFBQVEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQzNCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQztJQUU5QixJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FB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TyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsS0FBSyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM5QztZQUNELEtBQUssYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN2QixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDM0M7U0FDSjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgSFNVcGdyYWRlVHlwZSB9IGZyb20gXCJsaWIvaGFja25ldC9ocy11cGdyYWRlLXR5cGVcIjtcbmltcG9ydCB7IEV4dGVuZGVkTm9kZVN0YXRzIH0gZnJvbSBcImxpYi9oYWNrbmV0L2V4dGVuZGVkLW5vZGUtc3RhdHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0Rm9ybWF0KG5zOiBOUywgbXM6IG51bWJlciwgc2hvd21zID0gZmFsc2UsIHNob3dmdWxsID0gZmFsc2UpOiBzdHJpbmcge1xuICBsZXQgdGltZUxlZnQgPSBtcztcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKG1zIC8gKDEwMDAgKiA2MCAqIDYwKSk7XG4gIHRpbWVMZWZ0IC09IGhvdXJzICogKDEwMDAgKiA2MCAqIDYwKTtcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodGltZUxlZnQgLyAoMTAwMCAqIDYwKSk7XG4gIHRpbWVMZWZ0IC09IG1pbnV0ZXMgKiAoMTAwMCAqIDYwKTtcbiAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IodGltZUxlZnQgLyAxMDAwKTtcbiAgdGltZUxlZnQgLT0gc2Vjb25kcyAqIDEwMDA7XG4gIGNvbnN0IG1pbGxpc2Vjb25kcyA9IHRpbWVMZWZ0O1xuXG4gIGlmIChzaG93bXMpIHtcbiAgICAgIGlmIChob3VycyA+IDAgfHwgc2hvd2Z1bGwpIHJldHVybiBucy5zcHJpbnRmKFwiJTAyZDolMDJkOiUwMmQuJTAzZFwiLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTtcbiAgICAgIGlmIChtaW51dGVzID4gMCkgcmV0dXJuIG5zLnNwcmludGYoXCIlMDJkOiUwMmQuJTAzZFwiLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xuICAgICAgcmV0dXJuIG5zLnNwcmludGYoXCIlMDJkLiUwM2RcIiwgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTtcbiAgfSBlbHNlIHtcbiAgICAgIGlmIChob3VycyA+IDAgfHwgc2hvd2Z1bGwpIHJldHVybiBucy5zcHJpbnRmKFwiJTAyZDolMDJkOiUwMmRcIiwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xuICAgICAgaWYgKG1pbnV0ZXMgPiAwKSByZXR1cm4gbnMuc3ByaW50ZihcIiUwMmQ6JTAyZFwiLCBtaW51dGVzLCBzZWNvbmRzKTtcbiAgICAgIHJldHVybiBucy5zcHJpbnRmKFwiJTAyZFwiLCBzZWNvbmRzKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhTVXBncmFkZUludGVyZmFjZSB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICB0eXBlOiBIU1VwZ3JhZGVUeXBlO1xuICAgIHVwZ3JhZGVDb3N0OiBudW1iZXI7XG4gICAgdXBncmFkZVByb2R1Y3Rpb25Ub3RhbDogbnVtYmVyO1xuICAgIGNhY2hlSW5jcmVhc2U6IG51bWJlcjtcbiAgICBjYWNoZUNvc3RQZXJIYXNoOiBudW1iZXI7XG4gICAgdXBncmFkZVByb2R1Y3Rpb25JbmNyZWFzZTogbnVtYmVyO1xuICAgIHVwZ3JhZGVDYXNoUHJvZHVjdGlvbjogbnVtYmVyO1xuICAgIHVwZ3JhZGVQYXlvZmZUaW1lOiBudW1iZXI7XG4gICAgdXBncmFkZVZhbHVlOiBudW1iZXI7XG5cblx0dG9TdHJpbmcobnM6IE5TLCB0b3RhbFByb2R1Y3Rpb246IG51bWJlcik6IHN0cmluZztcbiAgICBidXkobnM6IE5TKTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEhTVXBncmFkZSBpbXBsZW1lbnRzIEhTVXBncmFkZUludGVyZmFjZSB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICB0eXBlOiBIU1VwZ3JhZGVUeXBlO1xuICAgIHVwZ3JhZGVDb3N0ID0gMDtcbiAgICB1cGdyYWRlUHJvZHVjdGlvblRvdGFsID0gMDtcbiAgICBjYWNoZUluY3JlYXNlID0gMDtcbiAgICBjYWNoZUNvc3RQZXJIYXNoID0gMDtcbiAgICB1cGdyYWRlUHJvZHVjdGlvbkluY3JlYXNlID0gMDtcbiAgICB1cGdyYWRlQ2FzaFByb2R1Y3Rpb24gPSAwO1xuICAgIHVwZ3JhZGVQYXlvZmZUaW1lID0gMDtcbiAgICB1cGdyYWRlVmFsdWUgPSAwO1xuXG4gICAgY29uc3RydWN0b3IobnM6IE5TLCBpZDogbnVtYmVyLCB0eXBlOiBIU1VwZ3JhZGVUeXBlLCBfc3RhdHM6IEV4dGVuZGVkTm9kZVN0YXRzKSB7XG4gICAgICAgIGNvbnN0IGhhc2hCdXlDb3N0ID0gbnMuaGFja25ldC5oYXNoQ29zdChcIlNlbGwgZm9yIE1vbmV5XCIpO1xuICAgICAgICBjb25zdCBwcm9kTXVsdCA9IG5zLmdldFBsYXllcigpLm11bHRzLmhhY2tuZXRfbm9kZV9tb25leTtcbiAgICAgICAgY29uc3QgY29yZUNvc3RNdWx0ID0gbnMuZ2V0UGxheWVyKCkubXVsdHMuaGFja25ldF9ub2RlX2NvcmVfY29zdDtcbiAgICAgICAgY29uc3QgbGV2ZWxDb3N0TXVsdCA9IG5zLmdldFBsYXllcigpLm11bHRzLmhhY2tuZXRfbm9kZV9sZXZlbF9jb3N0O1xuICAgICAgICBjb25zdCByYW1Db3N0TXVsdCA9IG5zLmdldFBsYXllcigpLm11bHRzLmhhY2tuZXRfbm9kZV9yYW1fY29zdDtcblxuICAgICAgICBsZXQgc3RhdHM7XG4gICAgICAgIGlmIChfc3RhdHMpIHN0YXRzID0gX3N0YXRzO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRzID0gbmV3IEV4dGVuZGVkTm9kZVN0YXRzKG5zLmhhY2tuZXQuZ2V0Tm9kZVN0YXRzKGlkKSk7XG4gICAgICAgICAgICBzdGF0cy5yYW1Vc2VkID0gMDtcbiAgICAgICAgICAgIHN0YXRzLnVwZGF0ZVByb2R1Y3Rpb24obnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIEhTVXBncmFkZVR5cGUuTEVWRUw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVDb3N0ID0gbnMuZm9ybXVsYXMuaGFja25ldFNlcnZlcnMubGV2ZWxVcGdyYWRlQ29zdChzdGF0cy5sZXZlbCwgMSwgbGV2ZWxDb3N0TXVsdCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGdyYWRlUHJvZHVjdGlvblRvdGFsID0gbnMuZm9ybXVsYXMuaGFja25ldFNlcnZlcnMuaGFzaEdhaW5SYXRlKFxuICAgICAgICAgICAgICAgICAgICBzdGF0cy5sZXZlbCArIDEsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLnJhbSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMuY29yZXMsXG4gICAgICAgICAgICAgICAgICAgIHByb2RNdWx0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSFNVcGdyYWRlVHlwZS5SQU06IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVDb3N0ID0gbnMuZm9ybXVsYXMuaGFja25ldFNlcnZlcnMucmFtVXBncmFkZUNvc3Qoc3RhdHMucmFtLCAxLCByYW1Db3N0TXVsdCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGdyYWRlUHJvZHVjdGlvblRvdGFsID0gbnMuZm9ybXVsYXMuaGFja25ldFNlcnZlcnMuaGFzaEdhaW5SYXRlKFxuICAgICAgICAgICAgICAgICAgICBzdGF0cy5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMucmFtICogMixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMuY29yZXMsXG4gICAgICAgICAgICAgICAgICAgIHByb2RNdWx0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSFNVcGdyYWRlVHlwZS5DT1JFUzoge1xuICAgICAgICAgICAgICAgIHRoaXMudXBncmFkZUNvc3QgPSBucy5mb3JtdWxhcy5oYWNrbmV0U2VydmVycy5jb3JlVXBncmFkZUNvc3Qoc3RhdHMuY29yZXMsIDEsIGNvcmVDb3N0TXVsdCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGdyYWRlUHJvZHVjdGlvblRvdGFsID0gbnMuZm9ybXVsYXMuaGFja25ldFNlcnZlcnMuaGFzaEdhaW5SYXRlKFxuICAgICAgICAgICAgICAgICAgICBzdGF0cy5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHMucmFtLFxuICAgICAgICAgICAgICAgICAgICBzdGF0cy5jb3JlcyArIDEsXG4gICAgICAgICAgICAgICAgICAgIHByb2RNdWx0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSFNVcGdyYWRlVHlwZS5DQUNIRToge1xuICAgICAgICAgICAgICAgIHRoaXMudXBncmFkZUNvc3QgPSBucy5mb3JtdWxhcy5oYWNrbmV0U2VydmVycy5jYWNoZVVwZ3JhZGVDb3N0KHN0YXRzLmNhY2hlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVQcm9kdWN0aW9uVG90YWwgPSBzdGF0cy5wcm9kdWN0aW9uO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVJbmNyZWFzZSA9IHN0YXRzLmNhY2hlO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVDb3N0UGVySGFzaCA9IHRoaXMudXBncmFkZUNvc3QgLyB0aGlzLmNhY2hlSW5jcmVhc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZ3JhZGVQcm9kdWN0aW9uSW5jcmVhc2UgPSB0aGlzLnVwZ3JhZGVQcm9kdWN0aW9uVG90YWwgLSBzdGF0cy5wcm9kdWN0aW9uO1xuICAgICAgICB0aGlzLnVwZ3JhZGVDYXNoUHJvZHVjdGlvbiA9ICh0aGlzLnVwZ3JhZGVQcm9kdWN0aW9uVG90YWwgLyBoYXNoQnV5Q29zdCkgKiAxMDAwMDAwO1xuICAgICAgICB0aGlzLnVwZ3JhZGVQYXlvZmZUaW1lID0gKHRoaXMudXBncmFkZUNvc3QgLyB0aGlzLnVwZ3JhZGVDYXNoUHJvZHVjdGlvbikgKiAxMDAwO1xuICAgICAgICB0aGlzLnVwZ3JhZGVWYWx1ZSA9IHRoaXMudXBncmFkZVByb2R1Y3Rpb25JbmNyZWFzZSAvIHRoaXMudXBncmFkZUNvc3Q7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcobnM6IE5TLCB0b3RhbFByb2R1Y3Rpb246IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGhhc2hCdXlDb3N0ID0gbnMuaGFja25ldC5oYXNoQ29zdChcIlNlbGwgZm9yIE1vbmV5XCIpO1xuICAgICAgICBjb25zdCB0b3RhbFVwZ3JhZGVDYXNoUHJvZHVjdGlvbiA9ICgodG90YWxQcm9kdWN0aW9uICsgdGhpcy51cGdyYWRlUHJvZHVjdGlvbkluY3JlYXNlKSAvIGhhc2hCdXlDb3N0KSAqIDEwMDAwMDA7XG4gICAgICAgIGNvbnN0IHRvdGFsVXBncmFkZVBheW9mZlRpbWUgPSAodGhpcy51cGdyYWRlQ29zdCAvIHRvdGFsVXBncmFkZUNhc2hQcm9kdWN0aW9uKSAqIDEwMDA7XG5cbiAgICAgICAgcmV0dXJuIG5zLnNwcmludGYoXG4gICAgICAgICAgICBcIiUwMmQgPT4gJTZzICU5cyArJXMgaC9zICU2cyAlNS4yZiBoL3MvJGJuXCIsXG4gICAgICAgICAgICB0aGlzLmlkLFxuICAgICAgICAgICAgdGhpcy50eXBlLFxuICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKHRoaXMudXBncmFkZUNvc3QsIDEsIDEwMDApLCAvLyBjb3N0XG4gICAgICAgICAgICBucy5mb3JtYXROdW1iZXIodGhpcy51cGdyYWRlUHJvZHVjdGlvbkluY3JlYXNlLCAxLCAxMDAwKSwgLy8gaGFzaCBpbmNyZWFzZVxuICAgICAgICAgICAgc3RGb3JtYXQobnMsIHRvdGFsVXBncmFkZVBheW9mZlRpbWUpLCAvLyB1cGdyYWRlIHBheW9mZiB0aW1lXG4gICAgICAgICAgICB0aGlzLnVwZ3JhZGVWYWx1ZSAqIDEwMDAwMDAwMDBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBidXkobnM6IE5TKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGhhc2hCdXlDb3N0ID0gbnMuaGFja25ldC5oYXNoQ29zdChcIlNlbGwgZm9yIE1vbmV5XCIpO1xuICAgICAgICBjb25zdCBudW1IYXNoQnV5cyA9IE1hdGguZmxvb3IobnMuaGFja25ldC5udW1IYXNoZXMoKSAvIGhhc2hCdXlDb3N0KTtcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlTW9uZXlBdmFpbGFibGUgPSBucy5nZXRQbGF5ZXIoKS5tb25leSArIG51bUhhc2hCdXlzICogMTAwMDAwMDtcblxuICAgICAgICBpZiAoZWZmZWN0aXZlTW9uZXlBdmFpbGFibGUgPCB0aGlzLnVwZ3JhZGVDb3N0KSB7XG4gICAgICAgICAgICBucy5wcmludChcIldBUk5JTkc6IEF0dGVtcHRlZCB0byBidXkgYW4gdXBncmFkZSB5b3UgY2FuJ3QgYWZmb3JkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG5zLmdldFBsYXllcigpLm1vbmV5IDwgdGhpcy51cGdyYWRlQ29zdCkge1xuICAgICAgICAgICAgbnMuaGFja25ldC5zcGVuZEhhc2hlcyhcIlNlbGwgZm9yIE1vbmV5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgSFNVcGdyYWRlVHlwZS5MRVZFTDoge1xuICAgICAgICAgICAgICAgIHJldHVybiBucy5oYWNrbmV0LnVwZ3JhZGVMZXZlbCh0aGlzLmlkLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSFNVcGdyYWRlVHlwZS5SQU06IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnMuaGFja25ldC51cGdyYWRlUmFtKHRoaXMuaWQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBIU1VwZ3JhZGVUeXBlLkNPUkVTOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5zLmhhY2tuZXQudXBncmFkZUNvcmUodGhpcy5pZCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEhTVXBncmFkZVR5cGUuQ0FDSEU6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnMuaGFja25ldC51cGdyYWRlQ2FjaGUodGhpcy5pZCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEhTVXBncmFkZVR5cGUuU0VSVkVSOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5zLmhhY2tuZXQucHVyY2hhc2VOb2RlKCkgIT09IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSJdfQ==\",\"filename\":\"lib/hacknet/hs-upgrade.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hud.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1372.8100000001753,\"ramUsage\":4.7,\"server\":\"home\",\"scriptKey\":\"hud.js*[]\",\"title\":\"hud.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"test.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1260.2100000001496,\"ramUsage\":10.1,\"server\":\"home\",\"scriptKey\":\"test.js*[]\",\"title\":\"test.js \",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"15.5.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":6778643911.6,\"moneyMax\":16946609779,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1250,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"27.0.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":5415671799.8,\"moneyMax\":13539179499.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1224,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"89.5.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":73,\"moneyAvailable\":2771889568.5,\"moneyMax\":6929723921.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1054,\"serverGrowth\":69,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"88.0.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":74,\"moneyAvailable\":1412335900.1000001,\"moneyMax\":3530839750.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1168,\"serverGrowth\":84,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"94.5.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":2224215103.3,\"moneyMax\":5560537758.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1146,\"serverGrowth\":76,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"4.7.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":2457767868.1,\"moneyMax\":6144419670.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":995,\"serverGrowth\":46,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"96.2.2.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":82,\"moneyAvailable\":2106700394.5,\"moneyMax\":5266750986.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1025,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"68.2.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":58,\"moneyAvailable\":2060164960.1000001,\"moneyMax\":5150412400.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1151,\"serverGrowth\":86,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"30.1.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":81,\"moneyAvailable\":2729830291,\"moneyMax\":6824575727.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1186,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"24.3.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":70,\"moneyAvailable\":162055905.20000002,\"moneyMax\":405139763,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"43.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1487,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"81.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":74,\"moneyAvailable\":103048657.4,\"moneyMax\":257621643.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":89,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"40.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":73,\"moneyAvailable\":83962825.30000001,\"moneyMax\":209907063.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":48,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"51.9.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":70,\"moneyAvailable\":78345071.10000001,\"moneyMax\":195862677.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":38,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"45.0.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":78,\"moneyAvailable\":59179788.300000004,\"moneyMax\":147949470.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":78,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"99.7.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":68,\"moneyAvailable\":75612071.5,\"moneyMax\":189030178.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":881,\"serverGrowth\":77,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"22.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":72,\"moneyAvailable\":91188274.9,\"moneyMax\":227970687.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":94,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429637.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010100000001011110110011001001101000000010011010100111011011010\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"53.9.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":75,\"moneyAvailable\":111245612.60000001,\"moneyMax\":278114031.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":82,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"0.0.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":61,\"moneyAvailable\":86845203.10000001,\"moneyMax\":217113007.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":75,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"10.7.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":54,\"moneyAvailable\":63216556.300000004,\"moneyMax\":158041390.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":78,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"67.8.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":60,\"moneyAvailable\":80205080.4,\"moneyMax\":200512701,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":927,\"serverGrowth\":79,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"40.8.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":76601023.3,\"moneyMax\":191502558.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":80,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"38.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":67,\"moneyAvailable\":108534638.4,\"moneyMax\":271336596,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"44.5.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":79,\"moneyAvailable\":93828128.30000001,\"moneyMax\":234570320.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":62,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"98.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":93553690.80000001,\"moneyMax\":233884227,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"90.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":60,\"moneyAvailable\":80074913.2,\"moneyMax\":200187283,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":72,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"41.4.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":66,\"moneyAvailable\":88935850.80000001,\"moneyMax\":222339627,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"30.6.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":67,\"moneyAvailable\":159743199.4,\"moneyMax\":399357998.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":63,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"87.9.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":69,\"moneyAvailable\":171687735.10000002,\"moneyMax\":429219337.75,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":83,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"35.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":114062033.9,\"moneyMax\":285155084.75,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":82,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"68.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":136071310.8,\"moneyMax\":340178277,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":80,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"60.4.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":62,\"moneyAvailable\":100772051.2,\"moneyMax\":251930128,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":77,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"90.8.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":74201324.60000001,\"moneyMax\":185503311.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":730,\"serverGrowth\":56,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"21.9.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":50169362,\"moneyMax\":125423405,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":504,\"serverGrowth\":57,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"70.0.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":72356010,\"moneyMax\":180890025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":583,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"5.7.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":62,\"moneyAvailable\":28240769.3,\"moneyMax\":70601923.25,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":431,\"serverGrowth\":40,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"54.9.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":22432837.900000002,\"moneyMax\":56082094.75,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":422,\"serverGrowth\":38,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"41.0.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":68,\"moneyAvailable\":93786135.5,\"moneyMax\":234465338.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":773,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"61.8.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":21577582.3,\"moneyMax\":53943955.75,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":43,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"46.8.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":58926908.5,\"moneyMax\":147317271.25,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":568,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"74.8.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":49362727.400000006,\"moneyMax\":123406818.5,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":411,\"serverGrowth\":45,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"0.4.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":19308973.8,\"moneyMax\":48272434.5,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":294,\"serverGrowth\":53,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"81.3.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":24232429.700000003,\"moneyMax\":60581074.25,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":383,\"serverGrowth\":50,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"44.2.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":375,\"serverGrowth\":69,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"82.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":49,\"moneyAvailable\":8270139.300000001,\"moneyMax\":20675348.25,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":280,\"serverGrowth\":59,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"74.5.9.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2.5,\"hackDifficulty\":2.5,\"minDifficulty\":1,\"moneyAvailable\":7000,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"56.8.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":200000,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"20.4.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":230000,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"8.7.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":250000,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"15.0.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":750000,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"83.5.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":275000,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"14.7.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":500000,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"26.2.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":4500000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"28.4.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":300000,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"72.0.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":400000,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"60.0.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2400000,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"55.8.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":1000000,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"83.0.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77.5,\"hackDifficulty\":77.5,\"minDifficulty\":26,\"moneyAvailable\":6781218.300000001,\"moneyMax\":16953045.75,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":207,\"serverGrowth\":30,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"7.1.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":35,\"moneyAvailable\":5066201.5,\"moneyMax\":12665503.75,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":261,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"25.7.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":2000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"71.5.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":481,\"serverGrowth\":39,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"62.1.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":49,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1065,\"serverGrowth\":52,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"41.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":52,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"61.3.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":541,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"44.9.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":344,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"35.4.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":205,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"6.1.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":530,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"64.4.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"4.2.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"76.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"90.6.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"43.4.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":3,\"hashCapacity\":64,\"hashRate\":0.11342459707976404,\"level\":18,\"onlineTimeSeconds\":1363.600000000173,\"totalHashesGenerated\":58.717522629495186,\"runningScripts\":[]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"71.0.7.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.003674137213627448,\"level\":1,\"onlineTimeSeconds\":1363.600000000173,\"totalHashesGenerated\":5.0100535045022205,\"runningScripts\":[]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"74.7.5.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.003674137213627448,\"level\":1,\"onlineTimeSeconds\":1363.600000000173,\"totalHashesGenerated\":5.0100535045022205,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":108.4348,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":22.9857,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":176.6891,\"discovery\":\"known\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":97.2801,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":99.1103,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":113.2064,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":57.4956,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{\"ll\":\"run ll.js\",\"ka\":\"./ka.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; buy Formulas.exe\",\"peek\":\"./execute.js PEEK\",\"sh\":\"./super-hack.js\",\"sa\":\"scan-analyze 10\",\"t\":\"./test.js\",\"kh\":\"./kh.js\",\"eval\":\"./eval.js\",\"sb\":\"./super-break.js\",\"aug\":\"./augs.js\",\"cct\":\"./cct.js\",\"exp\":\"./exp.js\",\"bs\":\"./pserver.js\",\"rep\":\"./rep.js\",\"hud\":\"./hud.js\",\"khud\":\"kill hud.js\",\"uh\":\"./super-hack.js ecorp; ./super-hack.js megacorp; ./super-hack.js nwo; ./super-hack.js b-and-a; ./super-hack.js kuai-gong; ./super-hack.js clarkinc; ./super-hack.js 4sigma\",\"bss\":\"./pserver.js s\",\"bsss\":\"./pserver.js s s\",\"bd\":\"./backdoor.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.2,\"fontFamily\":\"JetBrainsMono Nerd Font\"},\"overview\":{\"x\":-1,\"y\":1,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"JetBrainsMono NFP\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"","LastExportBonus":"1703024340921","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}