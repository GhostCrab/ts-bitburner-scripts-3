{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":5163,\"strength\":2,\"defense\":2,\"dexterity\":3,\"agility\":2,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":138266220684.73642,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.164080328950551,\"hacking_speed\":3.0953296642729815,\"hacking_money\":10.265117619233,\"hacking_grow\":4.797390493473006,\"hacking\":8.31704914184816,\"hacking_exp\":8.760241900760255,\"strength\":2.522056716568665,\"strength_exp\":2.7742623882255306,\"defense\":2.193092797016231,\"defense_exp\":2.7742623882255306,\"dexterity\":3.4955706091641705,\"dexterity_exp\":2.7742623882255306,\"agility\":2.3027474368670426,\"agility_exp\":2.7742623882255306,\"charisma\":2.894882492061425,\"charisma_exp\":2.7742623882255306,\"hacknet_node_money\":2.193092797016231,\"hacknet_node_purchase_cost\":0.4559770573140034,\"hacknet_node_ram_cost\":0.4559770573140034,\"hacknet_node_core_cost\":0.4559770573140034,\"hacknet_node_level_cost\":0.4559770573140034,\"company_rep\":3.662026352457702,\"faction_rep\":2.774262388225532,\"work_money\":2.412402076717854,\"crime_success\":2.193092797016231,\"crime_money\":2.193092797016231,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":64,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":4,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Daedalus\"],\"factionInvitations\":[\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"Sector-12\",\"BitRunners\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Tian Di Hui\",\"Ishima\",\"Shadows of Anarchy\"]},\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":14306216750434400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-293760,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":14324733489636464,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":14306216749434400,\"work\":0,\"servers\":-18511433708388.344,\"other\":-5306200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-50349696,\"codingcontract\":14625000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":18601814727668360,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":16214596241787956,\"work\":65320.52799999898,\"servers\":-79487843390674.27,\"other\":-103131863400000,\"augmentations\":-2204613353809153.5}},\"playtimeSinceLastAug\":7697400,\"playtimeSinceLastBitnode\":230645800,\"lastAugReset\":1701627023344,\"lastNodeReset\":1701404073960,\"purchasedServers\":[\"PS-01\",\"PS-02\",\"PS-03\",\"PS-04\",\"PS-05\",\"PS-06\",\"PS-07\",\"PS-08\",\"PS-09\",\"PS-10\",\"PS-11\",\"PS-12\",\"PS-13\",\"PS-14\",\"PS-15\",\"PS-16\",\"PS-17\",\"PS-18\",\"PS-19\",\"PS-20\",\"PS-21\",\"PS-22\",\"PS-23\",\"PS-24\",\"PS-25\"],\"scriptProdSinceLastAug\":14324733489636464,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1701145827995},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1701202374276},{\"ID\":\"TOR\",\"unlockedOn\":1701204414269},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1701204774270},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1701208374382},{\"ID\":\"TRAVEL\",\"unlockedOn\":1701242031010},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1701271371001},{\"ID\":\"NITESEC\",\"unlockedOn\":1701280769859},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1701284874684},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701300894746},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1701302696087},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1701302696090},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1701302696092},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1701307089796},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1701324411006},{\"ID\":\"DONATION\",\"unlockedOn\":1701385029644},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701389755155},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1701394988151},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1701397071007},{\"ID\":\"SF1.1\",\"unlockedOn\":1701404107814},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701475371158}],\"terminalCommandHistory\":[\"./fl1ght.exe \",\"ka\",\"./break.js \",\"./simple-hack.js The-\",\"ka\",\"./simple-hack.js the-hub \",\"kh\",\"buyall \",\"eval\",\"./pserver.js b\",\"ka\",\"./break.js \",\"./connected.js \",\"eval\",\"./break.js \",\"sh megacorp\",\"t\",\"./fl1ght.exe \",\"./cct.js \",\"./break.js \",\"./exp.js \",\"t\",\"ka\",\"./simple-hack.js the-hub \",\"ka\",\"./break.js \",\"./simple-hack.js the-hub \",\"buyall \",\"./break.js \",\"t\",\"eval \",\"k\",\"ka\",\"sh clarkinc \",\"ka\",\"sh the-hub \",\"ka\",\"sh alpha-ent \",\"ka\",\"sh clarkinc \",\"./pserver.js \",\"./pserver.js p\",\"kh\",\"sh clarkinc \",\"kh\",\"./exp.js \",\"ka\",\"eval\",\"./break.js \",\"sh megacorp \"],\"lastUpdate\":1701634720561,\"lastSave\":1701634719431,\"totalPlaytime\":493691200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":36852,\"factionWorkType\":\"hacking\",\"factionName\":\"Daedalus\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"68b2bba17d5b1\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"50.8.4.7\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"tables.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const HEADER = 0; // Index of the header styles\\r\\nconst DIVIDER = 1; // Index of the horizontal divider style\\r\\nconst FOOTER = 2; // Index of the footer style\\r\\nconst OPENER = 0; // Index of the opener line character\\r\\nconst SEPARATOR = 1; // Index of the separator line character (where columns meet)\\r\\nconst CLOSER = 2; // Index of the closer line character\\r\\nconst FILLER = 3; // Index of the filler line character\\r\\nconst BAR = 4; // Index of the straight vertical bar line character\\r\\nexport let win = globalThis, doc = win[\\\"document\\\"];\\r\\nlet fmt = Intl.NumberFormat('en', { notation: 'compact' });\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    // Some sample data, basic information on root servers\\r\\n    // Note that if you want color, you need to use ColorPrint as the printing function\\r\\n    // Colored cells need to be an object with color and text, instead of \\\"any\\\".. Red cell example here\\r\\n    let data = ns.scan('home').map(s => [{ color: 'red', text: s }, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]);\\r\\n    // For bold we need to correct the spacing... Sketch AF, not sure how else.\\r\\n    // let boldText = 'bold text example blah';\\r\\n    // let spacing = -0.00666666666666666666666666666667 * boldText.length;\\r\\n    data.push([\\r\\n        { style: { color: 'red' }, text: 'nope' },\\r\\n        //{ style: { color: 'red', fontWeight: 'bold', letterSpacing: spacing }, text: boldText },\\r\\n        { style: { color: 'white', fontStyle: 'italic' }, text: 'italic text' },\\r\\n        { style: { color: 'white', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }, text: 'strikethrough text' }\\r\\n    ]);\\r\\n    // Free style, no columns, the table adjusts to contents\\r\\n    PrintTable(ns, data, undefined, DefaultStyle(), ColorPrint);\\r\\n    // Example of adding a break line in the middle of the table:\\r\\n    // data.push(null);\\r\\n    // data.push(...ns.scan('sigma-cosmetics').slice(1).map(s => [s, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]));\\r\\n    // We use pre-defined columns\\r\\n    // header: The text to display\\r\\n    // width : Width of the column content\\r\\n    // pad   : 0 for center, < 0 for left, > 0 for right\\r\\n    const columns = [\\r\\n        { header: 'Servers', width: 40 },\\r\\n        { header: 'Ram', width: 13 },\\r\\n        { header: 'Money', width: 20 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\nexport function PrintTable(ns, data, columns, style = DefaultStyle(), printfunc = ns.print) {\\r\\n    // if (printfunc != ns.print)\\r\\n    // \\tprintfunc = ns.tprint; // Temp fix until I get ansi colors working\\r\\n    // Create default columns if no definition were provided\\r\\n    let columnsProvided = true;\\r\\n    if (columns == undefined) {\\r\\n        columnsProvided = false;\\r\\n        columns = [];\\r\\n        for (let i = 0; i < data[0].length; i++) {\\r\\n            let longest = 0;\\r\\n            for (let ii = 0; ii < data.length; ii++) {\\r\\n                if (data[ii] == null)\\r\\n                    continue;\\r\\n                let len = data[ii][i].text != undefined ? data[ii][i].text.length : data[ii][i].toString().length;\\r\\n                if (len > longest)\\r\\n                    longest = len;\\r\\n            }\\r\\n            columns.push({ header: '', width: longest, padHeader: 0, padContent: 0 });\\r\\n        }\\r\\n    }\\r\\n    PrintBorder(ns, columns, style[HEADER], printfunc);\\r\\n    if (columnsProvided) {\\r\\n        PrintHeader(ns, columns, style[HEADER], printfunc);\\r\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\r\\n    }\\r\\n    let i = 0;\\r\\n    for (const line of data) {\\r\\n        PrintLine(ns, columns, line, style, printfunc, i++ % 2 == 0);\\r\\n    }\\r\\n    PrintBorder(ns, columns, style[FOOTER], printfunc);\\r\\n}\\r\\nexport function DefaultStyle() {\\r\\n    return [\\r\\n        ['╭', '┬', '╮', '─', '│'],\\r\\n        ['├', '┼', '┤', '─', '│'],\\r\\n        ['╰', '┴', '╯', '─', '│']\\r\\n    ];\\r\\n}\\r\\nfunction PrintBorder(ns, columns, style, printfunc = ns.print) {\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[OPENER]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        printStack.push('white', ''.padEnd(columns[c].width, style[FILLER]));\\r\\n        if (c == columns.length - 1)\\r\\n            printStack.push('white', style[CLOSER]);\\r\\n        else\\r\\n            printStack.push('white', style[SEPARATOR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nfunction PrintHeader(ns, columns, style, printfunc = ns.print) {\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[BAR]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        printStack.push('white', columns[c].header.padEnd(columns[c].width));\\r\\n        printStack.push('white', style[BAR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nfunction PrintLine(ns, columns, data, style, printfunc = ns.print, highlight) {\\r\\n    if (data == null) {\\r\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\r\\n        return;\\r\\n    }\\r\\n    let printStack = [];\\r\\n    printStack.push('white', style[0][BAR]);\\r\\n    for (let c = 0; c < columns.length; c++) {\\r\\n        if (data[c].style != undefined)\\r\\n            printStack.push({ style: data[c].style }, data[c].text.padEnd(columns[c].width));\\r\\n        else if (data[c].color != undefined)\\r\\n            printStack.push(CreateStyle(data[c].color, highlight), data[c].text.padEnd(columns[c].width));\\r\\n        else\\r\\n            printStack.push(CreateStyle('white', highlight), data[c].toString().padEnd(columns[c].width));\\r\\n        printStack.push('white', style[0][BAR]);\\r\\n    }\\r\\n    PrintStack(ns, printStack, printfunc);\\r\\n}\\r\\nexport function CreateStyle(color, highlight) {\\r\\n    //return color;\\r\\n    let backColor = highlight ? '#000000' : '#1A1A1A';\\r\\n    return { style: { color: color, backgroundColor: backColor } };\\r\\n}\\r\\nfunction PrintStack(ns, printStack, printfunc) {\\r\\n    if (printfunc == ns.tprint || printfunc == ns.print || printfunc == ns.tprintf) {\\r\\n        ColorPrint(ns, printStack, false);\\r\\n    }\\r\\n    else {\\r\\n        printfunc(ns, printStack, true);\\r\\n    }\\r\\n}\\r\\n// Selects a color based on a 1-based percentage\\r\\nexport function pctColor(pct) {\\r\\n    if (pct >= 1)\\r\\n        return 'Lime';\\r\\n    else if (pct >= 0.9)\\r\\n        return 'Green';\\r\\n    else if (pct >= 0.75)\\r\\n        return 'DarkGreen';\\r\\n    else if (pct >= 0.6)\\r\\n        return 'GreenYellow';\\r\\n    else if (pct >= 0.3)\\r\\n        return 'Yellow';\\r\\n    else if (pct != 0)\\r\\n        return 'DarkOrange';\\r\\n    return 'Red';\\r\\n}\\r\\n// Usage: ColorPrint(ns, ['red', 'This is some red text', '#FFFFFF', ' This is some white text], true);\\r\\nexport function ColorPrint(ns, stack, toTerminal = true) {\\r\\n    let out = '';\\r\\n    for (let i = 0; i < stack.length; i += 2) {\\r\\n        let style = stack[i];\\r\\n        if (style.style == undefined) {\\r\\n            style = { style: { color: stack[i], backgroundColor: '#000000' } };\\r\\n        }\\r\\n        let color = style;\\r\\n        if (style.style)\\r\\n            color = style.style.color;\\r\\n        let match = COLORS.find(s => s.html == color || s.desc.toLowerCase() == color.toLowerCase());\\r\\n        if (!match && color.startsWith('#'))\\r\\n            match = FindHtmlColorEquivalent(ns, color);\\r\\n        if (!match)\\r\\n            match = COLORS.find(s => s.desc.toLowerCase().startsWith(color.toLowerCase()));\\r\\n        if (match)\\r\\n            color = '\\\\x1b[38;5;' + match.ansi + 'm';\\r\\n        else\\r\\n            ns.tprint('FAIL: unsupported color: ' + color);\\r\\n        let text = stack[i + 1].replace('%', '%%');\\r\\n        out = out + color + text;\\r\\n    }\\r\\n    if (toTerminal)\\r\\n        ns.tprintf(out);\\r\\n    else\\r\\n        ns.printf(out);\\r\\n}\\r\\n// ANSI colors supported by the game are 256 colors, HTML color is RGB\\r\\n// This functions finds the closest match to a full range HTML color code in the 256 color ANSI colors we have to work with\\r\\nfunction FindHtmlColorEquivalent(ns, htmlCode) {\\r\\n    let copy = COLORS.map(s => s);\\r\\n    copy.sort(function (a, b) {\\r\\n        let ca = rgbFromHtml(a.html);\\r\\n        let cb = rgbFromHtml(b.html);\\r\\n        let col = rgbFromHtml(htmlCode);\\r\\n        let oa = Math.abs(ca.r - col.r) + Math.abs(ca.g - col.g) + Math.abs(ca.b - col.b);\\r\\n        let ob = Math.abs(cb.r - col.r) + Math.abs(cb.g - col.g) + Math.abs(cb.b - col.b);\\r\\n        return oa - ob;\\r\\n    });\\r\\n    return copy[0];\\r\\n}\\r\\n// Converts a hexadecimal HTML color back to RGB int values\\r\\nfunction rgbFromHtml(htmlCode) {\\r\\n    let r = Number.parseInt('0x' + htmlCode.substr(1, 2));\\r\\n    let g = Number.parseInt('0x' + htmlCode.substr(3, 2));\\r\\n    let b = Number.parseInt('0x' + htmlCode.substr(5, 2));\\r\\n    return { r: r, g: g, b: b };\\r\\n}\\r\\n/**\\r\\n * @param {ns}\\r\\n * @param {Array} JSON DATA in form of [{id:1,name:\\\"Lexicon\\\"},{id:2,name:\\\"Paradox\\\"}]\\r\\n * @param {Array} pass an array of columns\\r\\n * @returns {HTMLTableElement} Returns a HTMLTableElement that you can use DOM.appendChild(table);\\r\\n */\\r\\nexport function createHTMLTableFromJSON(ns, data, columns) {\\r\\n    var formattedData = JSON.parse(JSON.stringify(data, columns));\\r\\n    var col = [];\\r\\n    for (var i = 0; i < formattedData.length; i++) {\\r\\n        for (var key in formattedData[i]) {\\r\\n            if (col.indexOf(key) === -1) {\\r\\n                col.push(key);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    var table = doc.createElement(\\\"table\\\");\\r\\n    table.style.width = '100%';\\r\\n    var tr = table.insertRow(-1); // TABLE ROW.\\r\\n    for (var i = 0; i < col.length; i++) {\\r\\n        var th = doc.createElement(\\\"th\\\"); // TABLE HEADER.\\r\\n        th.innerHTML = col[i];\\r\\n        tr.appendChild(th);\\r\\n    }\\r\\n    for (var i = 0; i < formattedData.length; i++) {\\r\\n        tr = table.insertRow(-1);\\r\\n        for (var j = 0; j < col.length; j++) {\\r\\n            var tabCell = tr.insertCell(-1);\\r\\n            if (typeof (formattedData[i][col[j]]) == 'number') {\\r\\n                var number = formattedData[i][col[j]];\\r\\n                if (number > 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"green\\\");\\r\\n                else if (number == 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"white\\\");\\r\\n                else if (number < 0)\\r\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"red\\\");\\r\\n            }\\r\\n            else {\\r\\n                tabCell.innerHTML = formattedData[i][col[j]];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return table;\\r\\n}\\r\\nlet addHtmlWithColor = (tag, data, color) => {\\r\\n    return \\\"<\\\" + tag + \\\" style='color:\\\" + color + \\\"'>\\\" + data + \\\"</\\\" + tag + \\\">\\\";\\r\\n};\\r\\nexport let COLORS = [\\r\\n    {\\r\\n        \\\"ansi\\\": 0,\\r\\n        \\\"desc\\\": \\\"Grey\\\",\\r\\n        \\\"html\\\": \\\"#808080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 1,\\r\\n        \\\"desc\\\": \\\"Red\\\",\\r\\n        \\\"html\\\": \\\"#ff0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 2,\\r\\n        \\\"desc\\\": \\\"Lime\\\",\\r\\n        \\\"html\\\": \\\"#00ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 3,\\r\\n        \\\"desc\\\": \\\"Yellow\\\",\\r\\n        \\\"html\\\": \\\"#ffff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 4,\\r\\n        \\\"desc\\\": \\\"Blue\\\",\\r\\n        \\\"html\\\": \\\"#0000ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 5,\\r\\n        \\\"desc\\\": \\\"Fuchsia\\\",\\r\\n        \\\"html\\\": \\\"#ff00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 6,\\r\\n        \\\"desc\\\": \\\"Aqua\\\",\\r\\n        \\\"html\\\": \\\"#00ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 7,\\r\\n        \\\"desc\\\": \\\"White\\\",\\r\\n        \\\"html\\\": \\\"#ffffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 8,\\r\\n        \\\"desc\\\": \\\"Black\\\",\\r\\n        \\\"html\\\": \\\"#000000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 9,\\r\\n        \\\"desc\\\": \\\"Maroon\\\",\\r\\n        \\\"html\\\": \\\"#800000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 10,\\r\\n        \\\"desc\\\": \\\"Green\\\",\\r\\n        \\\"html\\\": \\\"#008000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,128,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 11,\\r\\n        \\\"desc\\\": \\\"Olive\\\",\\r\\n        \\\"html\\\": \\\"#808000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 12,\\r\\n        \\\"desc\\\": \\\"Navy\\\",\\r\\n        \\\"html\\\": \\\"#000080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 13,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#800080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,0,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 14,\\r\\n        \\\"desc\\\": \\\"Teal\\\",\\r\\n        \\\"html\\\": \\\"#008080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,25%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 15,\\r\\n        \\\"desc\\\": \\\"Silver\\\",\\r\\n        \\\"html\\\": \\\"#c0c0c0\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(192,192,192)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,75%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 16,\\r\\n        \\\"desc\\\": \\\"Grey0\\\",\\r\\n        \\\"html\\\": \\\"#000000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 17,\\r\\n        \\\"desc\\\": \\\"NavyBlue\\\",\\r\\n        \\\"html\\\": \\\"#00005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 18,\\r\\n        \\\"desc\\\": \\\"DarkBlue\\\",\\r\\n        \\\"html\\\": \\\"#000087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 19,\\r\\n        \\\"desc\\\": \\\"Blue3\\\",\\r\\n        \\\"html\\\": \\\"#0000af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 20,\\r\\n        \\\"desc\\\": \\\"Blue3\\\",\\r\\n        \\\"html\\\": \\\"#0000d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 21,\\r\\n        \\\"desc\\\": \\\"Blue1\\\",\\r\\n        \\\"html\\\": \\\"#0000ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 22,\\r\\n        \\\"desc\\\": \\\"DarkGreen\\\",\\r\\n        \\\"html\\\": \\\"#005f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 23,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 24,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(97,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 25,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue4\\\",\\r\\n        \\\"html\\\": \\\"#005faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(07,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 26,\\r\\n        \\\"desc\\\": \\\"DodgerBlue3\\\",\\r\\n        \\\"html\\\": \\\"#005fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(13,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 27,\\r\\n        \\\"desc\\\": \\\"DodgerBlue2\\\",\\r\\n        \\\"html\\\": \\\"#005fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(17,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 28,\\r\\n        \\\"desc\\\": \\\"Green4\\\",\\r\\n        \\\"html\\\": \\\"#008700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 29,\\r\\n        \\\"desc\\\": \\\"SpringGreen4\\\",\\r\\n        \\\"html\\\": \\\"#00875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(62,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 30,\\r\\n        \\\"desc\\\": \\\"Turquoise4\\\",\\r\\n        \\\"html\\\": \\\"#008787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 31,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#0087af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(93,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 32,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#0087d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(02,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 33,\\r\\n        \\\"desc\\\": \\\"DodgerBlue1\\\",\\r\\n        \\\"html\\\": \\\"#0087ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(08,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 34,\\r\\n        \\\"desc\\\": \\\"Green3\\\",\\r\\n        \\\"html\\\": \\\"#00af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 35,\\r\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\r\\n        \\\"html\\\": \\\"#00af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(52,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 36,\\r\\n        \\\"desc\\\": \\\"DarkCyan\\\",\\r\\n        \\\"html\\\": \\\"#00af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(66,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 37,\\r\\n        \\\"desc\\\": \\\"LightSeaGreen\\\",\\r\\n        \\\"html\\\": \\\"#00afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 38,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue2\\\",\\r\\n        \\\"html\\\": \\\"#00afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(91,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 39,\\r\\n        \\\"desc\\\": \\\"DeepSkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#00afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(98,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 40,\\r\\n        \\\"desc\\\": \\\"Green3\\\",\\r\\n        \\\"html\\\": \\\"#00d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 41,\\r\\n        \\\"desc\\\": \\\"SpringGreen3\\\",\\r\\n        \\\"html\\\": \\\"#00d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(46,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 42,\\r\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\r\\n        \\\"html\\\": \\\"#00d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(57,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 43,\\r\\n        \\\"desc\\\": \\\"Cyan3\\\",\\r\\n        \\\"html\\\": \\\"#00d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(68,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 44,\\r\\n        \\\"desc\\\": \\\"DarkTurquoise\\\",\\r\\n        \\\"html\\\": \\\"#00d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 45,\\r\\n        \\\"desc\\\": \\\"Turquoise2\\\",\\r\\n        \\\"html\\\": \\\"#00d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(89,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 46,\\r\\n        \\\"desc\\\": \\\"Green1\\\",\\r\\n        \\\"html\\\": \\\"#00ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 47,\\r\\n        \\\"desc\\\": \\\"SpringGreen2\\\",\\r\\n        \\\"html\\\": \\\"#00ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(42,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 48,\\r\\n        \\\"desc\\\": \\\"SpringGreen1\\\",\\r\\n        \\\"html\\\": \\\"#00ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(51,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 49,\\r\\n        \\\"desc\\\": \\\"MediumSpringGreen\\\",\\r\\n        \\\"html\\\": \\\"#00ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(61,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 50,\\r\\n        \\\"desc\\\": \\\"Cyan2\\\",\\r\\n        \\\"html\\\": \\\"#00ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(70,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 51,\\r\\n        \\\"desc\\\": \\\"Cyan1\\\",\\r\\n        \\\"html\\\": \\\"#00ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 52,\\r\\n        \\\"desc\\\": \\\"DarkRed\\\",\\r\\n        \\\"html\\\": \\\"#5f0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 53,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#5f005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 54,\\r\\n        \\\"desc\\\": \\\"Purple4\\\",\\r\\n        \\\"html\\\": \\\"#5f0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(82,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 55,\\r\\n        \\\"desc\\\": \\\"Purple4\\\",\\r\\n        \\\"html\\\": \\\"#5f00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(72,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 56,\\r\\n        \\\"desc\\\": \\\"Purple3\\\",\\r\\n        \\\"html\\\": \\\"#5f00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(66,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 57,\\r\\n        \\\"desc\\\": \\\"BlueViolet\\\",\\r\\n        \\\"html\\\": \\\"#5f00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(62,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 58,\\r\\n        \\\"desc\\\": \\\"Orange4\\\",\\r\\n        \\\"html\\\": \\\"#5f5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 59,\\r\\n        \\\"desc\\\": \\\"Grey37\\\",\\r\\n        \\\"html\\\": \\\"#5f5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 60,\\r\\n        \\\"desc\\\": \\\"MediumPurple4\\\",\\r\\n        \\\"html\\\": \\\"#5f5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 61,\\r\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 62,\\r\\n        \\\"desc\\\": \\\"SlateBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 63,\\r\\n        \\\"desc\\\": \\\"RoyalBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5f5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 64,\\r\\n        \\\"desc\\\": \\\"Chartreuse4\\\",\\r\\n        \\\"html\\\": \\\"#5f8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 65,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\r\\n        \\\"html\\\": \\\"#5f875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 66,\\r\\n        \\\"desc\\\": \\\"PaleTurquoise4\\\",\\r\\n        \\\"html\\\": \\\"#5f8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 67,\\r\\n        \\\"desc\\\": \\\"SteelBlue\\\",\\r\\n        \\\"html\\\": \\\"#5f87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 68,\\r\\n        \\\"desc\\\": \\\"SteelBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5f87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(220,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 69,\\r\\n        \\\"desc\\\": \\\"CornflowerBlue\\\",\\r\\n        \\\"html\\\": \\\"#5f87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(225,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 70,\\r\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\r\\n        \\\"html\\\": \\\"#5faf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 71,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen4\\\",\\r\\n        \\\"html\\\": \\\"#5faf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 72,\\r\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\r\\n        \\\"html\\\": \\\"#5faf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 73,\\r\\n        \\\"desc\\\": \\\"CadetBlue\\\",\\r\\n        \\\"html\\\": \\\"#5fafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 74,\\r\\n        \\\"desc\\\": \\\"SkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#5fafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(200,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 75,\\r\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5fafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 76,\\r\\n        \\\"desc\\\": \\\"Chartreuse3\\\",\\r\\n        \\\"html\\\": \\\"#5fd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(3,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 77,\\r\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\r\\n        \\\"html\\\": \\\"#5fd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 78,\\r\\n        \\\"desc\\\": \\\"SeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#5fd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(140,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 79,\\r\\n        \\\"desc\\\": \\\"Aquamarine3\\\",\\r\\n        \\\"html\\\": \\\"#5fd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(160,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 80,\\r\\n        \\\"desc\\\": \\\"MediumTurquoise\\\",\\r\\n        \\\"html\\\": \\\"#5fd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 81,\\r\\n        \\\"desc\\\": \\\"SteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#5fd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(195,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 82,\\r\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\r\\n        \\\"html\\\": \\\"#5fff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 83,\\r\\n        \\\"desc\\\": \\\"SeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#5fff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 84,\\r\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#5fff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(135,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 85,\\r\\n        \\\"desc\\\": \\\"SeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#5fffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 86,\\r\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\r\\n        \\\"html\\\": \\\"#5fffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(165,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 87,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray2\\\",\\r\\n        \\\"html\\\": \\\"#5fffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(95,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 88,\\r\\n        \\\"desc\\\": \\\"DarkRed\\\",\\r\\n        \\\"html\\\": \\\"#870000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 89,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#87005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(17,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 90,\\r\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\r\\n        \\\"html\\\": \\\"#870087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 91,\\r\\n        \\\"desc\\\": \\\"DarkMagenta\\\",\\r\\n        \\\"html\\\": \\\"#8700af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(86,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 92,\\r\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\r\\n        \\\"html\\\": \\\"#8700d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(77,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 93,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#8700ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(71,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 94,\\r\\n        \\\"desc\\\": \\\"Orange4\\\",\\r\\n        \\\"html\\\": \\\"#875f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 95,\\r\\n        \\\"desc\\\": \\\"LightPink4\\\",\\r\\n        \\\"html\\\": \\\"#875f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 96,\\r\\n        \\\"desc\\\": \\\"Plum4\\\",\\r\\n        \\\"html\\\": \\\"#875f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 97,\\r\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\r\\n        \\\"html\\\": \\\"#875faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 98,\\r\\n        \\\"desc\\\": \\\"MediumPurple3\\\",\\r\\n        \\\"html\\\": \\\"#875fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(260,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 99,\\r\\n        \\\"desc\\\": \\\"SlateBlue1\\\",\\r\\n        \\\"html\\\": \\\"#875fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(255,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 100,\\r\\n        \\\"desc\\\": \\\"Yellow4\\\",\\r\\n        \\\"html\\\": \\\"#878700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 101,\\r\\n        \\\"desc\\\": \\\"Wheat4\\\",\\r\\n        \\\"html\\\": \\\"#87875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,17%,45%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 102,\\r\\n        \\\"desc\\\": \\\"Grey53\\\",\\r\\n        \\\"html\\\": \\\"#878787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 103,\\r\\n        \\\"desc\\\": \\\"LightSlateGrey\\\",\\r\\n        \\\"html\\\": \\\"#8787af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 104,\\r\\n        \\\"desc\\\": \\\"MediumPurple\\\",\\r\\n        \\\"html\\\": \\\"#8787d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 105,\\r\\n        \\\"desc\\\": \\\"LightSlateBlue\\\",\\r\\n        \\\"html\\\": \\\"#8787ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 106,\\r\\n        \\\"desc\\\": \\\"Yellow4\\\",\\r\\n        \\\"html\\\": \\\"#87af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(3,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 107,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 108,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen\\\",\\r\\n        \\\"html\\\": \\\"#87af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 109,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#87afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 110,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue3\\\",\\r\\n        \\\"html\\\": \\\"#87afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 111,\\r\\n        \\\"desc\\\": \\\"SkyBlue2\\\",\\r\\n        \\\"html\\\": \\\"#87afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(220,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 112,\\r\\n        \\\"desc\\\": \\\"Chartreuse2\\\",\\r\\n        \\\"html\\\": \\\"#87d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 113,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(100,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 114,\\r\\n        \\\"desc\\\": \\\"PaleGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 115,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#87d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 116,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray3\\\",\\r\\n        \\\"html\\\": \\\"#87d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 117,\\r\\n        \\\"desc\\\": \\\"SkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#87d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(200,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 118,\\r\\n        \\\"desc\\\": \\\"Chartreuse1\\\",\\r\\n        \\\"html\\\": \\\"#87ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 119,\\r\\n        \\\"desc\\\": \\\"LightGreen\\\",\\r\\n        \\\"html\\\": \\\"#87ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(105,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 120,\\r\\n        \\\"desc\\\": \\\"LightGreen\\\",\\r\\n        \\\"html\\\": \\\"#87ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 121,\\r\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\r\\n        \\\"html\\\": \\\"#87ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(140,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 122,\\r\\n        \\\"desc\\\": \\\"Aquamarine1\\\",\\r\\n        \\\"html\\\": \\\"#87ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(160,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 123,\\r\\n        \\\"desc\\\": \\\"DarkSlateGray1\\\",\\r\\n        \\\"html\\\": \\\"#87ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(135,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 124,\\r\\n        \\\"desc\\\": \\\"Red3\\\",\\r\\n        \\\"html\\\": \\\"#af0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 125,\\r\\n        \\\"desc\\\": \\\"DeepPink4\\\",\\r\\n        \\\"html\\\": \\\"#af005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(27,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 126,\\r\\n        \\\"desc\\\": \\\"MediumVioletRed\\\",\\r\\n        \\\"html\\\": \\\"#af0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(13,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 127,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#af00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 128,\\r\\n        \\\"desc\\\": \\\"DarkViolet\\\",\\r\\n        \\\"html\\\": \\\"#af00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(88,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 129,\\r\\n        \\\"desc\\\": \\\"Purple\\\",\\r\\n        \\\"html\\\": \\\"#af00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(81,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 130,\\r\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\r\\n        \\\"html\\\": \\\"#af5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 131,\\r\\n        \\\"desc\\\": \\\"IndianRed\\\",\\r\\n        \\\"html\\\": \\\"#af5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 132,\\r\\n        \\\"desc\\\": \\\"HotPink3\\\",\\r\\n        \\\"html\\\": \\\"#af5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 133,\\r\\n        \\\"desc\\\": \\\"MediumOrchid3\\\",\\r\\n        \\\"html\\\": \\\"#af5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 134,\\r\\n        \\\"desc\\\": \\\"MediumOrchid\\\",\\r\\n        \\\"html\\\": \\\"#af5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(280,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 135,\\r\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\r\\n        \\\"html\\\": \\\"#af5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 136,\\r\\n        \\\"desc\\\": \\\"DarkGoldenrod\\\",\\r\\n        \\\"html\\\": \\\"#af8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(6,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 137,\\r\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\r\\n        \\\"html\\\": \\\"#af875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 138,\\r\\n        \\\"desc\\\": \\\"RosyBrown\\\",\\r\\n        \\\"html\\\": \\\"#af8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 139,\\r\\n        \\\"desc\\\": \\\"Grey63\\\",\\r\\n        \\\"html\\\": \\\"#af87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 140,\\r\\n        \\\"desc\\\": \\\"MediumPurple2\\\",\\r\\n        \\\"html\\\": \\\"#af87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 141,\\r\\n        \\\"desc\\\": \\\"MediumPurple1\\\",\\r\\n        \\\"html\\\": \\\"#af87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(260,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 142,\\r\\n        \\\"desc\\\": \\\"Gold3\\\",\\r\\n        \\\"html\\\": \\\"#afaf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 143,\\r\\n        \\\"desc\\\": \\\"DarkKhaki\\\",\\r\\n        \\\"html\\\": \\\"#afaf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,33%,52%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 144,\\r\\n        \\\"desc\\\": \\\"NavajoWhite3\\\",\\r\\n        \\\"html\\\": \\\"#afaf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,20%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 145,\\r\\n        \\\"desc\\\": \\\"Grey69\\\",\\r\\n        \\\"html\\\": \\\"#afafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 146,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue3\\\",\\r\\n        \\\"html\\\": \\\"#afafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 147,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue\\\",\\r\\n        \\\"html\\\": \\\"#afafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 148,\\r\\n        \\\"desc\\\": \\\"Yellow3\\\",\\r\\n        \\\"html\\\": \\\"#afd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 149,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen3\\\",\\r\\n        \\\"html\\\": \\\"#afd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(80,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 150,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen3\\\",\\r\\n        \\\"html\\\": \\\"#afd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 151,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 152,\\r\\n        \\\"desc\\\": \\\"LightCyan3\\\",\\r\\n        \\\"html\\\": \\\"#afd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 153,\\r\\n        \\\"desc\\\": \\\"LightSkyBlue1\\\",\\r\\n        \\\"html\\\": \\\"#afd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(210,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 154,\\r\\n        \\\"desc\\\": \\\"GreenYellow\\\",\\r\\n        \\\"html\\\": \\\"#afff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 155,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 156,\\r\\n        \\\"desc\\\": \\\"PaleGreen1\\\",\\r\\n        \\\"html\\\": \\\"#afff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(100,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 157,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen2\\\",\\r\\n        \\\"html\\\": \\\"#afffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 158,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#afffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(150,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 159,\\r\\n        \\\"desc\\\": \\\"PaleTurquoise1\\\",\\r\\n        \\\"html\\\": \\\"#afffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(175,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 160,\\r\\n        \\\"desc\\\": \\\"Red3\\\",\\r\\n        \\\"html\\\": \\\"#d70000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 161,\\r\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\r\\n        \\\"html\\\": \\\"#d7005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(33,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 162,\\r\\n        \\\"desc\\\": \\\"DeepPink3\\\",\\r\\n        \\\"html\\\": \\\"#d70087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(22,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 163,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#d700af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(11,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 164,\\r\\n        \\\"desc\\\": \\\"Magenta3\\\",\\r\\n        \\\"html\\\": \\\"#d700d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 165,\\r\\n        \\\"desc\\\": \\\"Magenta2\\\",\\r\\n        \\\"html\\\": \\\"#d700ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 166,\\r\\n        \\\"desc\\\": \\\"DarkOrange3\\\",\\r\\n        \\\"html\\\": \\\"#d75f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(6,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 167,\\r\\n        \\\"desc\\\": \\\"IndianRed\\\",\\r\\n        \\\"html\\\": \\\"#d75f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 168,\\r\\n        \\\"desc\\\": \\\"HotPink3\\\",\\r\\n        \\\"html\\\": \\\"#d75f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(340,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 169,\\r\\n        \\\"desc\\\": \\\"HotPink2\\\",\\r\\n        \\\"html\\\": \\\"#d75faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(320,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 170,\\r\\n        \\\"desc\\\": \\\"Orchid\\\",\\r\\n        \\\"html\\\": \\\"#d75fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 171,\\r\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\r\\n        \\\"html\\\": \\\"#d75fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(285,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 172,\\r\\n        \\\"desc\\\": \\\"Orange3\\\",\\r\\n        \\\"html\\\": \\\"#d78700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(7,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 173,\\r\\n        \\\"desc\\\": \\\"LightSalmon3\\\",\\r\\n        \\\"html\\\": \\\"#d7875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(20,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 174,\\r\\n        \\\"desc\\\": \\\"LightPink3\\\",\\r\\n        \\\"html\\\": \\\"#d78787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 175,\\r\\n        \\\"desc\\\": \\\"Pink3\\\",\\r\\n        \\\"html\\\": \\\"#d787af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 176,\\r\\n        \\\"desc\\\": \\\"Plum3\\\",\\r\\n        \\\"html\\\": \\\"#d787d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 177,\\r\\n        \\\"desc\\\": \\\"Violet\\\",\\r\\n        \\\"html\\\": \\\"#d787ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(280,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 178,\\r\\n        \\\"desc\\\": \\\"Gold3\\\",\\r\\n        \\\"html\\\": \\\"#d7af00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(8,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 179,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod3\\\",\\r\\n        \\\"html\\\": \\\"#d7af5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(40,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 180,\\r\\n        \\\"desc\\\": \\\"Tan\\\",\\r\\n        \\\"html\\\": \\\"#d7af87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 181,\\r\\n        \\\"desc\\\": \\\"MistyRose3\\\",\\r\\n        \\\"html\\\": \\\"#d7afaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 182,\\r\\n        \\\"desc\\\": \\\"Thistle3\\\",\\r\\n        \\\"html\\\": \\\"#d7afd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 183,\\r\\n        \\\"desc\\\": \\\"Plum2\\\",\\r\\n        \\\"html\\\": \\\"#d7afff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(270,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 184,\\r\\n        \\\"desc\\\": \\\"Yellow3\\\",\\r\\n        \\\"html\\\": \\\"#d7d700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,42%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 185,\\r\\n        \\\"desc\\\": \\\"Khaki3\\\",\\r\\n        \\\"html\\\": \\\"#d7d75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,60%,60%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 186,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#d7d787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,50%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 187,\\r\\n        \\\"desc\\\": \\\"LightYellow3\\\",\\r\\n        \\\"html\\\": \\\"#d7d7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,33%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 188,\\r\\n        \\\"desc\\\": \\\"Grey84\\\",\\r\\n        \\\"html\\\": \\\"#d7d7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 189,\\r\\n        \\\"desc\\\": \\\"LightSteelBlue1\\\",\\r\\n        \\\"html\\\": \\\"#d7d7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(240,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 190,\\r\\n        \\\"desc\\\": \\\"Yellow2\\\",\\r\\n        \\\"html\\\": \\\"#d7ff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(9,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 191,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(75,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 192,\\r\\n        \\\"desc\\\": \\\"DarkOliveGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(80,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 193,\\r\\n        \\\"desc\\\": \\\"DarkSeaGreen1\\\",\\r\\n        \\\"html\\\": \\\"#d7ffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(90,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 194,\\r\\n        \\\"desc\\\": \\\"Honeydew2\\\",\\r\\n        \\\"html\\\": \\\"#d7ffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(120,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 195,\\r\\n        \\\"desc\\\": \\\"LightCyan1\\\",\\r\\n        \\\"html\\\": \\\"#d7ffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(215,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(180,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 196,\\r\\n        \\\"desc\\\": \\\"Red1\\\",\\r\\n        \\\"html\\\": \\\"#ff0000\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 197,\\r\\n        \\\"desc\\\": \\\"DeepPink2\\\",\\r\\n        \\\"html\\\": \\\"#ff005f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(37,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 198,\\r\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\r\\n        \\\"html\\\": \\\"#ff0087\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(28,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 199,\\r\\n        \\\"desc\\\": \\\"DeepPink1\\\",\\r\\n        \\\"html\\\": \\\"#ff00af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(18,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 200,\\r\\n        \\\"desc\\\": \\\"Magenta2\\\",\\r\\n        \\\"html\\\": \\\"#ff00d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(09,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 201,\\r\\n        \\\"desc\\\": \\\"Magenta1\\\",\\r\\n        \\\"html\\\": \\\"#ff00ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 202,\\r\\n        \\\"desc\\\": \\\"OrangeRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(2,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 203,\\r\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 204,\\r\\n        \\\"desc\\\": \\\"IndianRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff5f87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(345,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 205,\\r\\n        \\\"desc\\\": \\\"HotPink\\\",\\r\\n        \\\"html\\\": \\\"#ff5faf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 206,\\r\\n        \\\"desc\\\": \\\"HotPink\\\",\\r\\n        \\\"html\\\": \\\"#ff5fd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(315,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 207,\\r\\n        \\\"desc\\\": \\\"MediumOrchid1\\\",\\r\\n        \\\"html\\\": \\\"#ff5fff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,95,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 208,\\r\\n        \\\"desc\\\": \\\"DarkOrange\\\",\\r\\n        \\\"html\\\": \\\"#ff8700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 209,\\r\\n        \\\"desc\\\": \\\"Salmon1\\\",\\r\\n        \\\"html\\\": \\\"#ff875f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(15,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 210,\\r\\n        \\\"desc\\\": \\\"LightCoral\\\",\\r\\n        \\\"html\\\": \\\"#ff8787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 211,\\r\\n        \\\"desc\\\": \\\"PaleVioletRed1\\\",\\r\\n        \\\"html\\\": \\\"#ff87af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(340,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 212,\\r\\n        \\\"desc\\\": \\\"Orchid2\\\",\\r\\n        \\\"html\\\": \\\"#ff87d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(320,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 213,\\r\\n        \\\"desc\\\": \\\"Orchid1\\\",\\r\\n        \\\"html\\\": \\\"#ff87ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,135,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 214,\\r\\n        \\\"desc\\\": \\\"Orange1\\\",\\r\\n        \\\"html\\\": \\\"#ffaf00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 215,\\r\\n        \\\"desc\\\": \\\"SandyBrown\\\",\\r\\n        \\\"html\\\": \\\"#ffaf5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 216,\\r\\n        \\\"desc\\\": \\\"LightSalmon1\\\",\\r\\n        \\\"html\\\": \\\"#ffaf87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(20,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 217,\\r\\n        \\\"desc\\\": \\\"LightPink1\\\",\\r\\n        \\\"html\\\": \\\"#ffafaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 218,\\r\\n        \\\"desc\\\": \\\"Pink1\\\",\\r\\n        \\\"html\\\": \\\"#ffafd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(330,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 219,\\r\\n        \\\"desc\\\": \\\"Plum1\\\",\\r\\n        \\\"html\\\": \\\"#ffafff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,175,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 220,\\r\\n        \\\"desc\\\": \\\"Gold1\\\",\\r\\n        \\\"html\\\": \\\"#ffd700\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 221,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#ffd75f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(45,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 222,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod2\\\",\\r\\n        \\\"html\\\": \\\"#ffd787\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(40,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 223,\\r\\n        \\\"desc\\\": \\\"NavajoWhite1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7af\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(30,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 224,\\r\\n        \\\"desc\\\": \\\"MistyRose1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7d7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 225,\\r\\n        \\\"desc\\\": \\\"Thistle1\\\",\\r\\n        \\\"html\\\": \\\"#ffd7ff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,215,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(300,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 226,\\r\\n        \\\"desc\\\": \\\"Yellow1\\\",\\r\\n        \\\"html\\\": \\\"#ffff00\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 227,\\r\\n        \\\"desc\\\": \\\"LightGoldenrod1\\\",\\r\\n        \\\"html\\\": \\\"#ffff5f\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,95)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,68%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 228,\\r\\n        \\\"desc\\\": \\\"Khaki1\\\",\\r\\n        \\\"html\\\": \\\"#ffff87\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,135)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,76%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 229,\\r\\n        \\\"desc\\\": \\\"Wheat1\\\",\\r\\n        \\\"html\\\": \\\"#ffffaf\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,175)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,84%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 230,\\r\\n        \\\"desc\\\": \\\"Cornsilk1\\\",\\r\\n        \\\"html\\\": \\\"#ffffd7\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,215)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(60,100%,92%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 231,\\r\\n        \\\"desc\\\": \\\"Grey100\\\",\\r\\n        \\\"html\\\": \\\"#ffffff\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 232,\\r\\n        \\\"desc\\\": \\\"Grey3\\\",\\r\\n        \\\"html\\\": \\\"#080808\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(8,8,8)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,3%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 233,\\r\\n        \\\"desc\\\": \\\"Grey7\\\",\\r\\n        \\\"html\\\": \\\"#121212\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(18,18,18)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,7%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 234,\\r\\n        \\\"desc\\\": \\\"Grey11\\\",\\r\\n        \\\"html\\\": \\\"#1c1c1c\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(28,28,28)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,10%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 235,\\r\\n        \\\"desc\\\": \\\"Grey15\\\",\\r\\n        \\\"html\\\": \\\"#262626\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(38,38,38)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,14%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 236,\\r\\n        \\\"desc\\\": \\\"Grey19\\\",\\r\\n        \\\"html\\\": \\\"#303030\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(48,48,48)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,18%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 237,\\r\\n        \\\"desc\\\": \\\"Grey23\\\",\\r\\n        \\\"html\\\": \\\"#3a3a3a\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(58,58,58)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,22%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 238,\\r\\n        \\\"desc\\\": \\\"Grey27\\\",\\r\\n        \\\"html\\\": \\\"#444444\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(68,68,68)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,26%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 239,\\r\\n        \\\"desc\\\": \\\"Grey30\\\",\\r\\n        \\\"html\\\": \\\"#4e4e4e\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(78,78,78)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,30%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 240,\\r\\n        \\\"desc\\\": \\\"Grey35\\\",\\r\\n        \\\"html\\\": \\\"#585858\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(88,88,88)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,34%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 241,\\r\\n        \\\"desc\\\": \\\"Grey39\\\",\\r\\n        \\\"html\\\": \\\"#626262\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(98,98,98)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 242,\\r\\n        \\\"desc\\\": \\\"Grey42\\\",\\r\\n        \\\"html\\\": \\\"#6c6c6c\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(108,108,108)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,40%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 243,\\r\\n        \\\"desc\\\": \\\"Grey46\\\",\\r\\n        \\\"html\\\": \\\"#767676\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(118,118,118)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,46%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 244,\\r\\n        \\\"desc\\\": \\\"Grey50\\\",\\r\\n        \\\"html\\\": \\\"#808080\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 245,\\r\\n        \\\"desc\\\": \\\"Grey54\\\",\\r\\n        \\\"html\\\": \\\"#8a8a8a\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(138,138,138)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,54%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 246,\\r\\n        \\\"desc\\\": \\\"Grey58\\\",\\r\\n        \\\"html\\\": \\\"#949494\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(148,148,148)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,58%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 247,\\r\\n        \\\"desc\\\": \\\"Grey62\\\",\\r\\n        \\\"html\\\": \\\"#9e9e9e\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(158,158,158)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,61%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 248,\\r\\n        \\\"desc\\\": \\\"Grey66\\\",\\r\\n        \\\"html\\\": \\\"#a8a8a8\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(168,168,168)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,65%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 249,\\r\\n        \\\"desc\\\": \\\"Grey70\\\",\\r\\n        \\\"html\\\": \\\"#b2b2b2\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(178,178,178)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,69%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 250,\\r\\n        \\\"desc\\\": \\\"Grey74\\\",\\r\\n        \\\"html\\\": \\\"#bcbcbc\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(188,188,188)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,73%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 251,\\r\\n        \\\"desc\\\": \\\"Grey78\\\",\\r\\n        \\\"html\\\": \\\"#c6c6c6\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(198,198,198)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,77%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 252,\\r\\n        \\\"desc\\\": \\\"Grey82\\\",\\r\\n        \\\"html\\\": \\\"#d0d0d0\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(208,208,208)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,81%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 253,\\r\\n        \\\"desc\\\": \\\"Grey85\\\",\\r\\n        \\\"html\\\": \\\"#dadada\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(218,218,218)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,85%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 254,\\r\\n        \\\"desc\\\": \\\"Grey89\\\",\\r\\n        \\\"html\\\": \\\"#e4e4e4\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(228,228,228)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,89%)\\\\r\\\"\\r\\n    },\\r\\n    {\\r\\n        \\\"ansi\\\": 255,\\r\\n        \\\"desc\\\": \\\"Grey93\\\",\\r\\n        \\\"html\\\": \\\"#eeeeee\\\",\\r\\n        \\\"rgb\\\": \\\"rgb(238,238,238)\\\",\\r\\n        \\\"hsl\\\": \\\"hsl(0,0%,93%)\\\"\\r\\n    }\\r\\n];\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RhYmxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFDL0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBLENBQUMsd0NBQXdDO0FBQzFELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtBQUU5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO0FBQ2xGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztBQUN2RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsb0RBQW9EO0FBRXBFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxVQUFVLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRTNELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsc0RBQXNEO0lBQ3RELG1GQUFtRjtJQUNuRixtR0FBbUc7SUFDbkcsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FB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Q0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLENBQUMsQ0FDQSxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUVELDJEQUEyRDtBQUMzRCxTQUFTLFdBQVcsQ0FBQyxRQUFRO0lBQzVCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FB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IHN0eWxlc1xyXG5jb25zdCBESVZJREVSID0gMVx0Ly8gSW5kZXggb2YgdGhlIGhvcml6b250YWwgZGl2aWRlciBzdHlsZVxyXG5jb25zdCBGT09URVIgPSAyO1x0Ly8gSW5kZXggb2YgdGhlIGZvb3RlciBzdHlsZVxyXG5cclxuY29uc3QgT1BFTkVSID0gMDtcdC8vIEluZGV4IG9mIHRoZSBvcGVuZXIgbGluZSBjaGFyYWN0ZXJcclxuY29uc3QgU0VQQVJBVE9SID0gMTsgLy8gSW5kZXggb2YgdGhlIHNlcGFyYXRvciBsaW5lIGNoYXJhY3RlciAod2hlcmUgY29sdW1ucyBtZWV0KVxyXG5jb25zdCBDTE9TRVIgPSAyO1x0Ly8gSW5kZXggb2YgdGhlIGNsb3NlciBsaW5lIGNoYXJhY3RlclxyXG5jb25zdCBGSUxMRVIgPSAzO1x0Ly8gSW5kZXggb2YgdGhlIGZpbGxlciBsaW5lIGNoYXJhY3RlclxyXG5jb25zdCBCQVIgPSA0O1x0XHQvLyBJbmRleCBvZiB0aGUgc3RyYWlnaHQgdmVydGljYWwgYmFyIGxpbmUgY2hhcmFjdGVyXHJcblxyXG5leHBvcnQgbGV0IHdpbiA9IGdsb2JhbFRoaXMsIGRvYyA9IHdpbltcImRvY3VtZW50XCJdXHJcbmxldCBmbXQgPSBJbnRsLk51bWJlckZvcm1hdCgnZW4nLCB7IG5vdGF0aW9uOiAnY29tcGFjdCcgfSk7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcclxuXHRucy5kaXNhYmxlTG9nKCdBTEwnKTtcclxuXHJcblx0Ly8gU29tZSBzYW1wbGUgZGF0YSwgYmFzaWMgaW5mb3JtYXRpb24gb24gcm9vdCBzZXJ2ZXJzXHJcblx0Ly8gTm90ZSB0aGF0IGlmIHlvdSB3YW50IGNvbG9yLCB5b3UgbmVlZCB0byB1c2UgQ29sb3JQcmludCBhcyB0aGUgcHJpbnRpbmcgZnVuY3Rpb25cclxuXHQvLyBDb2xvcmVkIGNlbGxzIG5lZWQgdG8gYmUgYW4gb2JqZWN0IHdpdGggY29sb3IgYW5kIHRleHQsIGluc3RlYWQgb2YgXCJhbnlcIi4uIFJlZCBjZWxsIGV4YW1wbGUgaGVyZVxyXG5cdGxldCBkYXRhID0gbnMuc2NhbignaG9tZScpLm1hcChzID0+IFt7IGNvbG9yOiAncmVkJywgdGV4dDogcyB9LCBucy5nZXRTZXJ2ZXJNYXhSYW0ocyksIG5zLmdldFNlcnZlck1heE1vbmV5KHMpXSk7XHJcblxyXG5cdC8vIEZvciBib2xkIHdlIG5lZWQgdG8gY29ycmVjdCB0aGUgc3BhY2luZy4uLiBTa2V0Y2ggQUYsIG5vdCBzdXJlIGhvdyBlbHNlLlxyXG5cdC8vIGxldCBib2xkVGV4dCA9ICdib2xkIHRleHQgZXhhbXBsZSBibGFoJztcclxuXHQvLyBsZXQgc3BhY2luZyA9IC0wLjAwNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY3ICogYm9sZFRleHQubGVuZ3RoO1xyXG5cdGRhdGEucHVzaChbXHJcblx0XHR7IHN0eWxlOiB7IGNvbG9yOiAncmVkJyB9LCB0ZXh0OiAnbm9wZScgfSxcclxuXHRcdC8veyBzdHlsZTogeyBjb2xvcjogJ3JlZCcsIGZvbnRXZWlnaHQ6ICdib2xkJywgbGV0dGVyU3BhY2luZzogc3BhY2luZyB9LCB0ZXh0OiBib2xkVGV4dCB9LFxyXG5cdFx0eyBzdHlsZTogeyBjb2xvcjogJ3doaXRlJywgZm9udFN0eWxlOiAnaXRhbGljJyB9LCB0ZXh0OiAnaXRhbGljIHRleHQnIH0sXHJcblx0XHR7IHN0eWxlOiB7IGNvbG9yOiAnd2hpdGUnLCB0ZXh0RGVjb3JhdGlvbkxpbmU6ICdsaW5lLXRocm91Z2gnLCB0ZXh0RGVjb3JhdGlvblN0eWxlOiAnc29saWQnIH0sIHRleHQ6ICdzdHJpa2V0aHJvdWdoIHRleHQnIH1cclxuXHRdKTtcclxuXHJcblx0Ly8gRnJlZSBzdHlsZSwgbm8gY29sdW1ucywgdGhlIHRhYmxlIGFkanVzdHMgdG8gY29udGVudHNcclxuXHRQcmludFRhYmxlKG5zLCBkYXRhLCB1bmRlZmluZWQsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxuXHJcblx0Ly8gRXhhbXBsZSBvZiBhZGRpbmcgYSBicmVhayBsaW5lIGluIHRoZSBtaWRkbGUgb2YgdGhlIHRhYmxlOlxyXG5cdC8vIGRhdGEucHVzaChudWxsKTtcclxuXHQvLyBkYXRhLnB1c2goLi4ubnMuc2Nhbignc2lnbWEtY29zbWV0aWNzJykuc2xpY2UoMSkubWFwKHMgPT4gW3MsIG5zLmdldFNlcnZlck1heFJhbShzKSwgbnMuZ2V0U2VydmVyTWF4TW9uZXkocyldKSk7XHJcblxyXG5cdC8vIFdlIHVzZSBwcmUtZGVmaW5lZCBjb2x1bW5zXHJcblx0Ly8gaGVhZGVyOiBUaGUgdGV4dCB0byBkaXNwbGF5XHJcblx0Ly8gd2lkdGggOiBXaWR0aCBvZiB0aGUgY29sdW1uIGNvbnRlbnRcclxuXHQvLyBwYWQgICA6IDAgZm9yIGNlbnRlciwgPCAwIGZvciBsZWZ0LCA+IDAgZm9yIHJpZ2h0XHJcblx0Y29uc3QgY29sdW1ucyA9IFtcclxuXHRcdHsgaGVhZGVyOiAnU2VydmVycycsIHdpZHRoOiA0MCB9LFxyXG5cdFx0eyBoZWFkZXI6ICdSYW0nLCB3aWR0aDogMTMgfSxcclxuXHRcdHsgaGVhZGVyOiAnTW9uZXknLCB3aWR0aDogMjAgfVxyXG5cdF07XHJcblx0UHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgc3R5bGUgPSBEZWZhdWx0U3R5bGUoKSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcclxuXHQvLyBpZiAocHJpbnRmdW5jICE9IG5zLnByaW50KVxyXG5cdC8vIFx0cHJpbnRmdW5jID0gbnMudHByaW50OyAvLyBUZW1wIGZpeCB1bnRpbCBJIGdldCBhbnNpIGNvbG9ycyB3b3JraW5nXHJcblxyXG5cdC8vIENyZWF0ZSBkZWZhdWx0IGNvbHVtbnMgaWYgbm8gZGVmaW5pdGlvbiB3ZXJlIHByb3ZpZGVkXHJcblx0bGV0IGNvbHVtbnNQcm92aWRlZCA9IHRydWU7XHJcblx0aWYgKGNvbHVtbnMgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRjb2x1bW5zUHJvdmlkZWQgPSBmYWxzZTtcclxuXHRcdGNvbHVtbnMgPSBbXTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YVswXS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgbG9uZ2VzdCA9IDA7XHJcblx0XHRcdGZvciAobGV0IGlpID0gMDsgaWkgPCBkYXRhLmxlbmd0aDsgaWkrKykge1xyXG5cdFx0XHRcdGlmIChkYXRhW2lpXSA9PSBudWxsKSBjb250aW51ZTtcclxuXHRcdFx0XHRsZXQgbGVuID0gZGF0YVtpaV1baV0udGV4dCAhPSB1bmRlZmluZWQgPyBkYXRhW2lpXVtpXS50ZXh0Lmxlbmd0aCA6IGRhdGFbaWldW2ldLnRvU3RyaW5nKCkubGVuZ3RoO1xyXG5cdFx0XHRcdGlmIChsZW4gPiBsb25nZXN0KSBsb25nZXN0ID0gbGVuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbHVtbnMucHVzaCh7IGhlYWRlcjogJycsIHdpZHRoOiBsb25nZXN0LCBwYWRIZWFkZXI6IDAsIHBhZENvbnRlbnQ6IDAgfSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRQcmludEJvcmRlcihucywgY29sdW1ucywgc3R5bGVbSEVBREVSXSwgcHJpbnRmdW5jKTtcclxuXHRpZiAoY29sdW1uc1Byb3ZpZGVkKSB7XHJcblx0XHRQcmludEhlYWRlcihucywgY29sdW1ucywgc3R5bGVbSEVBREVSXSwgcHJpbnRmdW5jKVxyXG5cdFx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0RJVklERVJdLCBwcmludGZ1bmMpO1xyXG5cdH1cclxuXHRsZXQgaSA9IDA7XHJcblx0Zm9yIChjb25zdCBsaW5lIG9mIGRhdGEpIHtcclxuXHRcdFByaW50TGluZShucywgY29sdW1ucywgbGluZSwgc3R5bGUsIHByaW50ZnVuYywgaSsrICUgMiA9PSAwKTtcclxuXHR9XHJcblx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0ZPT1RFUl0sIHByaW50ZnVuYyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEZWZhdWx0U3R5bGUoKSB7XHJcblx0cmV0dXJuIFtcclxuXHRcdFsn4pWtJywgJ+KUrCcsICfila4nLCAn4pSAJywgJ+KUgiddLFxyXG5cdFx0WyfilJwnLCAn4pS8JywgJ+KUpCcsICfilIAnLCAn4pSCJ10sXHJcblx0XHRbJ+KVsCcsICfilLQnLCAn4pWvJywgJ+KUgCcsICfilIInXVxyXG5cdF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFByaW50Qm9yZGVyKG5zLCBjb2x1bW5zLCBzdHlsZSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcclxuXHRsZXQgcHJpbnRTdGFjayA9IFtdO1xyXG5cdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtPUEVORVJdKTtcclxuXHRmb3IgKGxldCBjID0gMDsgYyA8IGNvbHVtbnMubGVuZ3RoOyBjKyspIHtcclxuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCAnJy5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCwgc3R5bGVbRklMTEVSXSkpO1xyXG5cdFx0aWYgKGMgPT0gY29sdW1ucy5sZW5ndGggLSAxKVxyXG5cdFx0XHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbQ0xPU0VSXSk7XHJcblx0XHRlbHNlXHJcblx0XHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtTRVBBUkFUT1JdKTtcclxuXHJcblx0fVxyXG5cdFByaW50U3RhY2sobnMsIHByaW50U3RhY2ssIHByaW50ZnVuYyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFByaW50SGVhZGVyKG5zLCBjb2x1bW5zLCBzdHlsZSwgcHJpbnRmdW5jID0gbnMucHJpbnQpIHtcclxuXHRsZXQgcHJpbnRTdGFjayA9IFtdO1xyXG5cdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBzdHlsZVtCQVJdKTtcclxuXHRmb3IgKGxldCBjID0gMDsgYyA8IGNvbHVtbnMubGVuZ3RoOyBjKyspIHtcclxuXHRcdHByaW50U3RhY2sucHVzaCgnd2hpdGUnLCBjb2x1bW5zW2NdLmhlYWRlci5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlW0JBUl0pO1xyXG5cdH1cclxuXHRQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBQcmludExpbmUobnMsIGNvbHVtbnMsIGRhdGEsIHN0eWxlLCBwcmludGZ1bmMgPSBucy5wcmludCwgaGlnaGxpZ2h0KSB7XHJcblx0aWYgKGRhdGEgPT0gbnVsbCkge1xyXG5cdFx0UHJpbnRCb3JkZXIobnMsIGNvbHVtbnMsIHN0eWxlW0RJVklERVJdLCBwcmludGZ1bmMpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0bGV0IHByaW50U3RhY2sgPSBbXTtcclxuXHRwcmludFN0YWNrLnB1c2goJ3doaXRlJywgc3R5bGVbMF1bQkFSXSk7XHJcblx0Zm9yIChsZXQgYyA9IDA7IGMgPCBjb2x1bW5zLmxlbmd0aDsgYysrKSB7XHJcblx0XHRpZiAoZGF0YVtjXS5zdHlsZSAhPSB1bmRlZmluZWQpXHJcblx0XHRcdHByaW50U3RhY2sucHVzaCh7IHN0eWxlOiBkYXRhW2NdLnN0eWxlIH0sIGRhdGFbY10udGV4dC5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0ZWxzZSBpZiAoZGF0YVtjXS5jb2xvciAhPSB1bmRlZmluZWQpXHJcblx0XHRcdHByaW50U3RhY2sucHVzaChDcmVhdGVTdHlsZShkYXRhW2NdLmNvbG9yLCBoaWdobGlnaHQpLCBkYXRhW2NdLnRleHQucGFkRW5kKGNvbHVtbnNbY10ud2lkdGgpKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cHJpbnRTdGFjay5wdXNoKENyZWF0ZVN0eWxlKCd3aGl0ZScsIGhpZ2hsaWdodCksIGRhdGFbY10udG9TdHJpbmcoKS5wYWRFbmQoY29sdW1uc1tjXS53aWR0aCkpO1xyXG5cdFx0cHJpbnRTdGFjay5wdXNoKCd3aGl0ZScsIHN0eWxlWzBdW0JBUl0pO1xyXG5cdH1cclxuXHJcblx0UHJpbnRTdGFjayhucywgcHJpbnRTdGFjaywgcHJpbnRmdW5jKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVN0eWxlKGNvbG9yLCBoaWdobGlnaHQpIHtcclxuXHQvL3JldHVybiBjb2xvcjtcclxuXHRsZXQgYmFja0NvbG9yID0gaGlnaGxpZ2h0ID8gJyMwMDAwMDAnIDogJyMxQTFBMUEnO1xyXG5cdHJldHVybiB7IHN0eWxlOiB7IGNvbG9yOiBjb2xvciwgYmFja2dyb3VuZENvbG9yOiBiYWNrQ29sb3IgfSB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBQcmludFN0YWNrKG5zLCBwcmludFN0YWNrLCBwcmludGZ1bmMpIHtcclxuXHRpZiAocHJpbnRmdW5jID09IG5zLnRwcmludCB8fCBwcmludGZ1bmMgPT0gbnMucHJpbnQgfHwgcHJpbnRmdW5jID09IG5zLnRwcmludGYpIHtcclxuXHRcdENvbG9yUHJpbnQobnMsIHByaW50U3RhY2ssIGZhbHNlKTtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHRwcmludGZ1bmMobnMsIHByaW50U3RhY2ssIHRydWUpO1xyXG5cdH1cclxufVxyXG5cclxuLy8gU2VsZWN0cyBhIGNvbG9yIGJhc2VkIG9uIGEgMS1iYXNlZCBwZXJjZW50YWdlXHJcbmV4cG9ydCBmdW5jdGlvbiBwY3RDb2xvcihwY3QpIHtcclxuXHRpZiAocGN0ID49IDEpIHJldHVybiAnTGltZSc7XHJcblx0ZWxzZSBpZiAocGN0ID49IDAuOSkgcmV0dXJuICdHcmVlbic7XHJcblx0ZWxzZSBpZiAocGN0ID49IDAuNzUpIHJldHVybiAnRGFya0dyZWVuJztcclxuXHRlbHNlIGlmIChwY3QgPj0gMC42KSByZXR1cm4gJ0dyZWVuWWVsbG93JztcclxuXHRlbHNlIGlmIChwY3QgPj0gMC4zKSByZXR1cm4gJ1llbGxvdyc7XHJcblx0ZWxzZSBpZiAocGN0ICE9IDApIHJldHVybiAnRGFya09yYW5nZSc7XHJcblx0cmV0dXJuICdSZWQnO1xyXG59XHJcblxyXG4vLyBVc2FnZTogQ29sb3JQcmludChucywgWydyZWQnLCAnVGhpcyBpcyBzb21lIHJlZCB0ZXh0JywgJyNGRkZGRkYnLCAnIFRoaXMgaXMgc29tZSB3aGl0ZSB0ZXh0XSwgdHJ1ZSk7XHJcbmV4cG9ydCBmdW5jdGlvbiBDb2xvclByaW50KG5zLCBzdGFjaywgdG9UZXJtaW5hbCA9IHRydWUpIHtcclxuXHRsZXQgb3V0ID0gJyc7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkgKz0gMikge1xyXG5cdFx0bGV0IHN0eWxlID0gc3RhY2tbaV07XHJcblx0XHRpZiAoc3R5bGUuc3R5bGUgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHN0eWxlID0geyBzdHlsZTogeyBjb2xvcjogc3RhY2tbaV0sIGJhY2tncm91bmRDb2xvcjogJyMwMDAwMDAnIH0gfTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgY29sb3IgPSBzdHlsZTtcclxuXHRcdGlmIChzdHlsZS5zdHlsZSkgY29sb3IgPSBzdHlsZS5zdHlsZS5jb2xvcjtcclxuXHJcblx0XHRsZXQgbWF0Y2ggPSBDT0xPUlMuZmluZChzID0+IHMuaHRtbCA9PSBjb2xvciB8fCBzLmRlc2MudG9Mb3dlckNhc2UoKSA9PSBjb2xvci50b0xvd2VyQ2FzZSgpKTtcclxuXHRcdGlmICghbWF0Y2ggJiYgY29sb3Iuc3RhcnRzV2l0aCgnIycpKSBtYXRjaCA9IEZpbmRIdG1sQ29sb3JFcXVpdmFsZW50KG5zLCBjb2xvcik7XHJcblx0XHRpZiAoIW1hdGNoKSBtYXRjaCA9IENPTE9SUy5maW5kKHMgPT4gcy5kZXNjLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChjb2xvci50b0xvd2VyQ2FzZSgpKSk7XHJcblx0XHRpZiAobWF0Y2gpIGNvbG9yID0gJ1xceDFiWzM4OzU7JyArIG1hdGNoLmFuc2kgKyAnbSc7XHJcblx0XHRlbHNlIG5zLnRwcmludCgnRkFJTDogdW5zdXBwb3J0ZWQgY29sb3I6ICcgKyBjb2xvcik7XHJcblxyXG5cdFx0bGV0IHRleHQgPSBzdGFja1tpICsgMV0ucmVwbGFjZSgnJScsICclJScpO1xyXG5cdFx0b3V0ID0gb3V0ICsgY29sb3IgKyB0ZXh0O1xyXG5cdH1cclxuXHJcblx0aWYgKHRvVGVybWluYWwpXHJcblx0XHRucy50cHJpbnRmKG91dCk7XHJcblx0ZWxzZVxyXG5cdFx0bnMucHJpbnRmKG91dCk7XHJcbn1cclxuXHJcbi8vIEFOU0kgY29sb3JzIHN1cHBvcnRlZCBieSB0aGUgZ2FtZSBhcmUgMjU2IGNvbG9ycywgSFRNTCBjb2xvciBpcyBSR0JcclxuLy8gVGhpcyBmdW5jdGlvbnMgZmluZHMgdGhlIGNsb3Nlc3QgbWF0Y2ggdG8gYSBmdWxsIHJhbmdlIEhUTUwgY29sb3IgY29kZSBpbiB0aGUgMjU2IGNvbG9yIEFOU0kgY29sb3JzIHdlIGhhdmUgdG8gd29yayB3aXRoXHJcbmZ1bmN0aW9uIEZpbmRIdG1sQ29sb3JFcXVpdmFsZW50KG5zLCBodG1sQ29kZSkge1xyXG5cdGxldCBjb3B5ID0gQ09MT1JTLm1hcChzID0+IHMpO1xyXG5cclxuXHRjb3B5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuXHRcdGxldCBjYSA9IHJnYkZyb21IdG1sKGEuaHRtbCk7XHJcblx0XHRsZXQgY2IgPSByZ2JGcm9tSHRtbChiLmh0bWwpO1xyXG5cdFx0bGV0IGNvbCA9IHJnYkZyb21IdG1sKGh0bWxDb2RlKTtcclxuXHJcblx0XHRsZXQgb2EgPSBNYXRoLmFicyhjYS5yIC0gY29sLnIpICsgTWF0aC5hYnMoY2EuZyAtIGNvbC5nKSArIE1hdGguYWJzKGNhLmIgLSBjb2wuYik7XHJcblx0XHRsZXQgb2IgPSBNYXRoLmFicyhjYi5yIC0gY29sLnIpICsgTWF0aC5hYnMoY2IuZyAtIGNvbC5nKSArIE1hdGguYWJzKGNiLmIgLSBjb2wuYik7XHJcblx0XHRyZXR1cm4gb2EgLSBvYjtcclxuXHR9XHJcblx0KTtcclxuXHJcblx0cmV0dXJuIGNvcHlbMF07XHJcbn1cclxuXHJcbi8vIENvbnZlcnRzIGEgaGV4YWRlY2ltYWwgSFRNTCBjb2xvciBiYWNrIHRvIFJHQiBpbnQgdmFsdWVzXHJcbmZ1bmN0aW9uIHJnYkZyb21IdG1sKGh0bWxDb2RlKSB7XHJcblx0bGV0IHIgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cigxLCAyKSk7XHJcblx0bGV0IGcgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cigzLCAyKSk7XHJcblx0bGV0IGIgPSBOdW1iZXIucGFyc2VJbnQoJzB4JyArIGh0bWxDb2RlLnN1YnN0cig1LCAyKSk7XHJcblx0cmV0dXJuIHsgcjogciwgZzogZywgYjogYiB9O1xyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtuc30gXHJcbiAqIEBwYXJhbSB7QXJyYXl9IEpTT04gREFUQSBpbiBmb3JtIG9mIFt7aWQ6MSxuYW1lOlwiTGV4aWNvblwifSx7aWQ6MixuYW1lOlwiUGFyYWRveFwifV1cclxuICogQHBhcmFtIHtBcnJheX0gcGFzcyBhbiBhcnJheSBvZiBjb2x1bW5zIFxyXG4gKiBAcmV0dXJucyB7SFRNTFRhYmxlRWxlbWVudH0gUmV0dXJucyBhIEhUTUxUYWJsZUVsZW1lbnQgdGhhdCB5b3UgY2FuIHVzZSBET00uYXBwZW5kQ2hpbGQodGFibGUpO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhUTUxUYWJsZUZyb21KU09OKG5zLCBkYXRhLCBjb2x1bW5zKSB7XHJcblxyXG5cdHZhciBmb3JtYXR0ZWREYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhLCBjb2x1bW5zKSk7XHJcblx0dmFyIGNvbCA9IFtdO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0dGVkRGF0YS5sZW5ndGg7IGkrKykge1xyXG5cdFx0Zm9yICh2YXIga2V5IGluIGZvcm1hdHRlZERhdGFbaV0pIHtcclxuXHRcdFx0aWYgKGNvbC5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcblx0XHRcdFx0Y29sLnB1c2goa2V5KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dmFyIHRhYmxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcclxuXHR0YWJsZS5zdHlsZS53aWR0aCA9ICcxMDAlJ1xyXG5cclxuXHR2YXIgdHIgPSB0YWJsZS5pbnNlcnRSb3coLTEpOyAgICAgICAgICAgICAgICAgICAvLyBUQUJMRSBST1cuXHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgY29sLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgdGggPSBkb2MuY3JlYXRlRWxlbWVudChcInRoXCIpOyAgICAgIC8vIFRBQkxFIEhFQURFUi5cclxuXHRcdHRoLmlubmVySFRNTCA9IGNvbFtpXTtcclxuXHRcdHRyLmFwcGVuZENoaWxkKHRoKTtcclxuXHR9XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0dGVkRGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdHRyID0gdGFibGUuaW5zZXJ0Um93KC0xKTtcclxuXHJcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNvbC5sZW5ndGg7IGorKykge1xyXG5cdFx0XHR2YXIgdGFiQ2VsbCA9IHRyLmluc2VydENlbGwoLTEpO1xyXG5cdFx0XHRpZiAodHlwZW9mIChmb3JtYXR0ZWREYXRhW2ldW2NvbFtqXV0pID09ICdudW1iZXInKSB7XHJcblx0XHRcdFx0dmFyIG51bWJlciA9IGZvcm1hdHRlZERhdGFbaV1bY29sW2pdXVxyXG5cdFx0XHRcdGlmIChudW1iZXIgPiAwKVxyXG5cdFx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBhZGRIdG1sV2l0aENvbG9yKFwiYVwiLCBmbXQuZm9ybWF0KG51bWJlciksIFwiZ3JlZW5cIik7XHJcblx0XHRcdFx0ZWxzZSBpZiAobnVtYmVyID09IDApXHJcblx0XHRcdFx0XHR0YWJDZWxsLmlubmVySFRNTCA9IGFkZEh0bWxXaXRoQ29sb3IoXCJhXCIsIGZtdC5mb3JtYXQobnVtYmVyKSwgXCJ3aGl0ZVwiKTtcclxuXHRcdFx0XHRlbHNlIGlmIChudW1iZXIgPCAwKVxyXG5cdFx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBhZGRIdG1sV2l0aENvbG9yKFwiYVwiLCBmbXQuZm9ybWF0KG51bWJlciksIFwicmVkXCIpO1xyXG5cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGFiQ2VsbC5pbm5lckhUTUwgPSBmb3JtYXR0ZWREYXRhW2ldW2NvbFtqXV07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gdGFibGU7XHJcbn1cclxuXHJcbmxldCBhZGRIdG1sV2l0aENvbG9yID0gKHRhZywgZGF0YSwgY29sb3IpID0+IHtcclxuXHRyZXR1cm4gXCI8XCIgKyB0YWcgKyBcIiBzdHlsZT0nY29sb3I6XCIgKyBjb2xvciArIFwiJz5cIiArIGRhdGEgKyBcIjwvXCIgKyB0YWcgKyBcIj5cIjtcclxufVxyXG5cclxuZXhwb3J0IGxldCBDT0xPUlMgPSBbXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDAsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODA4MDgwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMjgsMTI4LDEyOClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMSxcclxuXHRcdFwiZGVzY1wiOiBcIlJlZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGltZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDMsXHJcblx0XHRcImRlc2NcIjogXCJZZWxsb3dcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNCxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRnVjaHNpYVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNixcclxuXHRcdFwiZGVzY1wiOiBcIkFxdWFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcsXHJcblx0XHRcImRlc2NcIjogXCJXaGl0ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDEwMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4LFxyXG5cdFx0XCJkZXNjXCI6IFwiQmxhY2tcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDksXHJcblx0XHRcImRlc2NcIjogXCJNYXJvb25cIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODAwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMjgsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDI1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExLFxyXG5cdFx0XCJkZXNjXCI6IFwiT2xpdmVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDgwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTIsXHJcblx0XHRcImRlc2NcIjogXCJOYXZ5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDgwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTMsXHJcblx0XHRcImRlc2NcIjogXCJQdXJwbGVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDAwODBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwwLDEyOClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDI1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0LFxyXG5cdFx0XCJkZXNjXCI6IFwiVGVhbFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODA4MFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMjgsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMjUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTUsXHJcblx0XHRcImRlc2NcIjogXCJTaWx2ZXJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNjMGMwYzBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE5MiwxOTIsMTkyKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkwXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNyxcclxuXHRcdFwiZGVzY1wiOiBcIk5hdnlCbHVlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtCbHVlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTksXHJcblx0XHRcImRlc2NcIjogXCJCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwMDBhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwwLDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDAwZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMSxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDAwMGZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWU0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMTglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjQsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTcsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNSxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBTa3lCbHVlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwNWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwNywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDI2LFxyXG5cdFx0XCJkZXNjXCI6IFwiRG9kZ2VyQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTMsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNyxcclxuXHRcdFwiZGVzY1wiOiBcIkRvZGdlckJsdWUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDA1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE3LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjgsXHJcblx0XHRcImRlc2NcIjogXCJHcmVlbjRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyOSxcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MiwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDMwLFxyXG5cdFx0XCJkZXNjXCI6IFwiVHVycXVvaXNlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzEsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkzLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzIsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwU2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMDg3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAyLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzMsXHJcblx0XHRcImRlc2NcIjogXCJEb2RnZXJCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwODdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMDgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzNCxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwYWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM1LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3ByaW5nR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDUyLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMzYsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrQ3lhblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjYsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAzNyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2VhR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGFmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM4LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MSwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDM5LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFNreUJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDE3NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5OCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQwLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkNzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDEsXHJcblx0XHRcImRlc2NcIjogXCJTcHJpbmdHcmVlbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGQ3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDYsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0MixcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZDc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyMTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNTcsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0MyxcclxuXHRcdFwiZGVzY1wiOiBcIkN5YW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2OCwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQ0LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1R1cnF1b2lzZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyMTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDUsXHJcblx0XHRcImRlc2NcIjogXCJUdXJxdW9pc2UyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBkN2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDIxNSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4OSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDQ2LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNDcsXHJcblx0XHRcImRlc2NcIjogXCJTcHJpbmdHcmVlbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDIsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0OCxcclxuXHRcdFwiZGVzY1wiOiBcIlNwcmluZ0dyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNTEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA0OSxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVNwcmluZ0dyZWVuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjMDBmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigwLDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDUwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ3lhbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwMGZmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDAsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDcwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTEsXHJcblx0XHRcImRlc2NcIjogXCJDeWFuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzAwZmZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMCwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTIsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWYwMDAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMTglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNTMsXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NCxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woODIsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NSxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzIsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NixcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjYsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1NyxcclxuXHRcdFwiZGVzY1wiOiBcIkJsdWVWaW9sZXRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjAwZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjIsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA1OCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDE4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDU5LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTM3XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsMzclKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjAsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGU0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1Zjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTclLDQ1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDYxLFxyXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmNWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2MixcclxuXHRcdFwiZGVzY1wiOiBcIlNsYXRlQmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZjVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjMsXHJcblx0XHRcImRlc2NcIjogXCJSb3lhbEJsdWUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSw5NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNDAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2NCxcclxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2U0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWY4NzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDcsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA2NSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTZWFHcmVlbjRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjYsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlVHVycXVvaXNlNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjcsXHJcblx0XHRcImRlc2NcIjogXCJTdGVlbEJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1Zjg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDEzNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMTAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDY4LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNjksXHJcblx0XHRcImRlc2NcIjogXCJDb3JuZmxvd2VyQmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmODdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTM1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyNSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcwLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDcxLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA3MixcclxuXHRcdFwiZGVzY1wiOiBcIkNhZGV0Qmx1ZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzMsXHJcblx0XHRcImRlc2NcIjogXCJDYWRldEJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc0LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2t5Qmx1ZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmFmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMDAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc1LFxyXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmYWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIxMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc2LFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMywxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDc3LFxyXG5cdFx0XCJkZXNjXCI6IFwiUGFsZUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA3OCxcclxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogNzksXHJcblx0XHRcImRlc2NcIjogXCJBcXVhbWFyaW5lM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE2MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODAsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1UdXJxdW9pc2VcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmQ3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgxLFxyXG5cdFx0XCJkZXNjXCI6IFwiU3RlZWxCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZDdmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjE1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE5NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgyLFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNywxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDgzLFxyXG5cdFx0XCJkZXNjXCI6IFwiU2VhR3JlZW4yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZmZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4NCxcclxuXHRcdFwiZGVzY1wiOiBcIlNlYUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEzNSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDg1LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2VhR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjNWZmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYig5NSwyNTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTUwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODYsXHJcblx0XHRcImRlc2NcIjogXCJBcXVhbWFyaW5lMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzVmZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoOTUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE2NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDg3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NsYXRlR3JheTJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ZmZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk1LDI1NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA4OCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtSZWRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogODksXHJcblx0XHRcImRlc2NcIjogXCJEZWVwUGluazRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzAwNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwwLDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTcsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5MCxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtNYWdlbnRhXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODcwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5MSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtNYWdlbnRhXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODcwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4NiwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDkyLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1Zpb2xldFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3MDBkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDAsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzcsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5MyxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3MDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNzEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5NCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMiwxMDAlLDI2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDk1LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRQaW5rNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTYsXHJcblx0XHRcImRlc2NcIjogXCJQbHVtNFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxNyUsNDUlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogOTcsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjcwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiA5OCxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4NzVmZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSw5NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDk5LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2xhdGVCbHVlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3NWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI1NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwMCxcclxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMjYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTAxLFxyXG5cdFx0XCJkZXNjXCI6IFwiV2hlYXQ0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4NzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTclLDQ1JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwMixcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk1M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDAlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwMyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2xhdGVHcmV5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4N2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODc4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA1LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTbGF0ZUJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4Nzg3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTA2LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93NFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEwNyxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW5cIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2FmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTIwLDIwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMDksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNreUJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTEwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTa3lCbHVlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3YWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMTAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExMSxcclxuXHRcdFwiZGVzY1wiOiBcIlNreUJsdWUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDIyMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExMixcclxuXHRcdFwiZGVzY1wiOiBcIkNoYXJ0cmV1c2UyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkNzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTEzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTAwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTQsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ZDdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDIxNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxNTAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDExNixcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTbGF0ZUdyYXkzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdkN2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjE1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE3LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2t5Qmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2Q3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjAwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTE4LFxyXG5cdFx0XCJkZXNjXCI6IFwiQ2hhcnRyZXVzZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4N2ZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzNSwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMTksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdyZWVuXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTA1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTIwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHcmVlblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiIzg3ZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTM1LDI1NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjEsXHJcblx0XHRcImRlc2NcIjogXCJQYWxlR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE0MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyMixcclxuXHRcdFwiZGVzY1wiOiBcIkFxdWFtYXJpbmUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE2MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyMyxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtTbGF0ZUdyYXkxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjODdmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxMzUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyNCxcclxuXHRcdFwiZGVzY1wiOiBcIlJlZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI1LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbms0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3LDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTI2LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtVmlvbGV0UmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMywxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyNyxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMjgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrVmlvbGV0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWYwMGQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4OCwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEyOSxcclxuXHRcdFwiZGVzY1wiOiBcIlB1cnBsZVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woODEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzAsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT3JhbmdlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmNWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTMxLFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzIsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmNWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzMCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTMzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmNWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDk1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwzMyUsNTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjgwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzUsXHJcblx0XHRcImRlc2NcIjogXCJNZWRpdW1QdXJwbGUyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY1ZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsOTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjcwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM2LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya0dvbGRlbnJvZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNiwxMDAlLDM0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDEzNyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2FsbW9uM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwLDMzJSw1MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxMzgsXHJcblx0XHRcImRlc2NcIjogXCJSb3N5QnJvd25cIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjg3ODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTM5LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTYzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWY4N2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTM1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtUHVycGxlMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDEzNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyNzAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0MSxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bVB1cnBsZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZjg3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxMzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjYwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQyLFxyXG5cdFx0XCJkZXNjXCI6IFwiR29sZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsMzQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya0toYWtpXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMzMlLDUyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0NCxcclxuXHRcdFwiZGVzY1wiOiBcIk5hdmFqb1doaXRlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmYWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwyMCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ1LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTY5XCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ2LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTdGVlbEJsdWUzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZhZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMTc1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI0MCwzMyUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRTdGVlbEJsdWVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmFmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwxNzUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTQ4LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93M1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMSwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE0OSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTAsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDkwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTEsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEyMCwzMyUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTUyLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRDeWFuM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxODAsMzMlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1MyxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0U2t5Qmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmQ3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjEwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTU0LFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JlZW5ZZWxsb3dcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTUsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT2xpdmVHcmVlbjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1NixcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVHcmVlbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhZmZmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3NSwyNTUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTAwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTU3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2FmZmZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMTc1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNTgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrU2VhR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZmZmQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjU1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE1OSxcclxuXHRcdFwiZGVzY1wiOiBcIlBhbGVUdXJxdW9pc2UxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjYWZmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxNzUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2MCxcclxuXHRcdFwiZGVzY1wiOiBcIlJlZDNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTYxLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMzLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTYyLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmszXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMiwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2MyxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMGFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMSwxMDAlLDQyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE2NCxcclxuXHRcdFwiZGVzY1wiOiBcIk1hZ2VudGEzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDcwMGQ3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMCwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjUsXHJcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3MDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOTAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjYsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT3JhbmdlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2LDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTY3LFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc1ZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsOTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDYwJSw2MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNjgsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDM0MCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTY5LFxyXG5cdFx0XCJkZXNjXCI6IFwiSG90UGluazJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzVmYWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSw5NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3MCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yY2hpZFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTcxLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWVkaXVtT3JjaGlkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3NWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDk1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4NSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3MixcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDcsMTAwJSw0MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzMsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNhbG1vbjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkNzg3NWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwxMzUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyMCw2MCUsNjAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDUwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxNzUsXHJcblx0XHRcImRlc2NcIjogXCJQaW5rM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ODdhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDEzNSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMzAsNTAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3NixcclxuXHRcdFwiZGVzY1wiOiBcIlBsdW0zXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc4N2Q3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc3LFxyXG5cdFx0XCJkZXNjXCI6IFwiVmlvbGV0XCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDc4N2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTM1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI4MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE3OCxcclxuXHRcdFwiZGVzY1wiOiBcIkdvbGQzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZjAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg4LDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTc5LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNDAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4MCxcclxuXHRcdFwiZGVzY1wiOiBcIlRhblwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTgxLFxyXG5cdFx0XCJkZXNjXCI6IFwiTWlzdHlSb3NlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDMzJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODIsXHJcblx0XHRcImRlc2NcIjogXCJUaGlzdGxlM1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3YWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMzMlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4MyxcclxuXHRcdFwiZGVzY1wiOiBcIlBsdW0yXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdhZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMTc1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDI3MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4NCxcclxuXHRcdFwiZGVzY1wiOiBcIlllbGxvdzNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3MDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDEwMCUsNDIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTg1LFxyXG5cdFx0XCJkZXNjXCI6IFwiS2hha2kzXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdkNzVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsNjAlLDYwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE4NixcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZDc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDIxNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCw1MCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTg3LFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRZZWxsb3czXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDYwLDMzJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODgsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3ZDdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxODksXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFN0ZWVsQmx1ZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkN2Q3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxNSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjQwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkwLFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woOSwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5MSxcclxuXHRcdFwiZGVzY1wiOiBcIkRhcmtPbGl2ZUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDc1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkyLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya09saXZlR3JlZW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZjg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDgwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTkzLFxyXG5cdFx0XCJkZXNjXCI6IFwiRGFya1NlYUdyZWVuMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg5MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5NCxcclxuXHRcdFwiZGVzY1wiOiBcIkhvbmV5ZGV3MlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2Q3ZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjE1LDI1NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxMjAsMTAwJSw5MiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAxOTUsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEN5YW4xXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZDdmZmZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyMTUsMjU1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE4MCwxMDAlLDkyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5NixcclxuXHRcdFwiZGVzY1wiOiBcIlJlZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjAwMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwwLDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk3LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmsyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMDVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDM3LDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMTk4LFxyXG5cdFx0XCJkZXNjXCI6IFwiRGVlcFBpbmsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmYwMDg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMCwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyOCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDE5OSxcclxuXHRcdFwiZGVzY1wiOiBcIkRlZXBQaW5rMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMTgsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDAsXHJcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMjE1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMDksMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDEsXHJcblx0XHRcImRlc2NcIjogXCJNYWdlbnRhMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmMDBmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDAsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjAyLFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JhbmdlUmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgyLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjAzLFxyXG5cdFx0XCJkZXNjXCI6IFwiSW5kaWFuUmVkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWY1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwNCxcclxuXHRcdFwiZGVzY1wiOiBcIkluZGlhblJlZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjVmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzNDUsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDUsXHJcblx0XHRcImRlc2NcIjogXCJIb3RQaW5rXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY1ZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsOTUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzMwLDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjA2LFxyXG5cdFx0XCJkZXNjXCI6IFwiSG90UGlua1wiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmNWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDk1LDIxNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMxNSwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIwNyxcclxuXHRcdFwiZGVzY1wiOiBcIk1lZGl1bU9yY2hpZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjVmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSw5NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMDgsXHJcblx0XHRcImRlc2NcIjogXCJEYXJrT3JhbmdlXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4NzAwXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDApXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgxLDEwMCUsNTAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjA5LFxyXG5cdFx0XCJkZXNjXCI6IFwiU2FsbW9uMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDE1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjEwLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRDb3JhbFwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODc4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjExLFxyXG5cdFx0XCJkZXNjXCI6IFwiUGFsZVZpb2xldFJlZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZjg3YWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxMzUsMTc1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjEyLFxyXG5cdFx0XCJkZXNjXCI6IFwiT3JjaGlkMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmODdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDEzNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTMsXHJcblx0XHRcImRlc2NcIjogXCJPcmNoaWQxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmY4N2ZmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTM1LDI1NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwMCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIxNCxcclxuXHRcdFwiZGVzY1wiOiBcIk9yYW5nZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmMDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDEsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTUsXHJcblx0XHRcImRlc2NcIjogXCJTYW5keUJyb3duXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZhZjVmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDk1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAsMTAwJSw2OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTYsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFNhbG1vbjFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmFmODdcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwxNzUsMTM1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMjAsMTAwJSw3NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTcsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodFBpbmsxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZhZmFmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMTc1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTgsXHJcblx0XHRcImRlc2NcIjogXCJQaW5rMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMzAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMTksXHJcblx0XHRcImRlc2NcIjogXCJQbHVtMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmYWZmZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDE3NSwyNTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgzMDAsMTAwJSw4NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjAsXHJcblx0XHRcImRlc2NcIjogXCJHb2xkMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDcwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwxMDAlLDUwJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyMSxcclxuXHRcdFwiZGVzY1wiOiBcIkxpZ2h0R29sZGVucm9kMlwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDc1ZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSw5NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDQ1LDEwMCUsNjglKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIyLFxyXG5cdFx0XCJkZXNjXCI6IFwiTGlnaHRHb2xkZW5yb2QyXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkNzg3XCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDEzNSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDQwLDEwMCUsNzYlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjIzLFxyXG5cdFx0XCJkZXNjXCI6IFwiTmF2YWpvV2hpdGUxXCIsXHJcblx0XHRcImh0bWxcIjogXCIjZmZkN2FmXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigyNTUsMjE1LDE3NSlcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDMwLDEwMCUsODQlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI0LFxyXG5cdFx0XCJkZXNjXCI6IFwiTWlzdHlSb3NlMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZDdkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDIxNSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCgwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI1LFxyXG5cdFx0XCJkZXNjXCI6IFwiVGhpc3RsZTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmQ3ZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyMTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMzAwLDEwMCUsOTIlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjI2LFxyXG5cdFx0XCJkZXNjXCI6IFwiWWVsbG93MVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmYwMFwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwwKVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woNjAsMTAwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMjcsXHJcblx0XHRcImRlc2NcIjogXCJMaWdodEdvbGRlbnJvZDFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmNWZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsOTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDY4JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyOCxcclxuXHRcdFwiZGVzY1wiOiBcIktoYWtpMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmY4N1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwxMzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDc2JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIyOSxcclxuXHRcdFwiZGVzY1wiOiBcIldoZWF0MVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZhZlwiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwxNzUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDg0JSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzMCxcclxuXHRcdFwiZGVzY1wiOiBcIkNvcm5zaWxrMVwiLFxyXG5cdFx0XCJodG1sXCI6IFwiI2ZmZmZkN1wiLFxyXG5cdFx0XCJyZ2JcIjogXCJyZ2IoMjU1LDI1NSwyMTUpXCIsXHJcblx0XHRcImhzbFwiOiBcImhzbCg2MCwxMDAlLDkyJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzMSxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXkxMDBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNmZmZmZmZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI1NSwyNTUsMjU1KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMDAlKVxcclwiXHJcblx0fSxcclxuXHR7XHJcblx0XHRcImFuc2lcIjogMjMyLFxyXG5cdFx0XCJkZXNjXCI6IFwiR3JleTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMwODA4MDhcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDgsOCw4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzJSlcXHJcIlxyXG5cdH0sXHJcblx0e1xyXG5cdFx0XCJhbnNpXCI6IDIzMyxcclxuXHRcdFwiZGVzY1wiOiBcIkdyZXk3XCIsXHJcblx0XHRcImh0bWxcIjogXCIjMTIxMjEyXCIsXHJcblx0XHRcInJnYlwiOiBcInJnYigxOCwxOCwxOClcIixcclxuXHRcdFwiaHNsXCI6IFwiaHNsKDAsMCUsNyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzQsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MTFcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMxYzFjMWNcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDI4LDI4LDI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MTVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMyNjI2MjZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDM4LDM4LDM4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzYsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MTlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMzMDMwMzBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDQ4LDQ4LDQ4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwxOCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzcsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MjNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiMzYTNhM2FcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDU4LDU4LDU4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwyMiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzgsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MjdcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM0NDQ0NDRcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDY4LDY4LDY4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwyNiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyMzksXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM0ZTRlNGVcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDc4LDc4LDc4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzMCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDAsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM1ODU4NThcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDg4LDg4LDg4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDEsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5MzlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM2MjYyNjJcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDk4LDk4LDk4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSwzNyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDIsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NDJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM2YzZjNmNcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEwOCwxMDgsMTA4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw0MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDMsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NDZcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM3Njc2NzZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDExOCwxMTgsMTE4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw0NiUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDQsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NTBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4MDgwODBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEyOCwxMjgsMTI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1MCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NTRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM4YThhOGFcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDEzOCwxMzgsMTM4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1NCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDYsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NThcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM5NDk0OTRcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE0OCwxNDgsMTQ4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw1OCUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDcsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NjJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiM5ZTllOWVcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE1OCwxNTgsMTU4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2MSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDgsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NjZcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNhOGE4YThcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE2OCwxNjgsMTY4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNDksXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NzBcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNiMmIyYjJcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE3OCwxNzgsMTc4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw2OSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTAsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NzRcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNiY2JjYmNcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE4OCwxODgsMTg4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3MyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTEsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5NzhcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNjNmM2YzZcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDE5OCwxOTgsMTk4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw3NyUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTIsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODJcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkMGQwZDBcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIwOCwyMDgsMjA4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4MSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTMsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODVcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNkYWRhZGFcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIxOCwyMTgsMjE4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4NSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTQsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5ODlcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNlNGU0ZTRcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIyOCwyMjgsMjI4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw4OSUpXFxyXCJcclxuXHR9LFxyXG5cdHtcclxuXHRcdFwiYW5zaVwiOiAyNTUsXHJcblx0XHRcImRlc2NcIjogXCJHcmV5OTNcIixcclxuXHRcdFwiaHRtbFwiOiBcIiNlZWVlZWVcIixcclxuXHRcdFwicmdiXCI6IFwicmdiKDIzOCwyMzgsMjM4KVwiLFxyXG5cdFx0XCJoc2xcIjogXCJoc2woMCwwJSw5MyUpXCJcclxuXHR9XHJcbl07XHJcbiJdfQ==\",\"filename\":\"tables.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprintf(\\\"Hello World\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLnRwcmludGYoXCJIZWxsbyBXb3JsZFwiKTtcbn1cbiJdfQ==\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"connected.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nimport { getAllServers } from \\\"util\\\";\\r\\nfunction showConnected(ns, parent, host, pre) {\\r\\n    const connectedServers = ns.scan(host);\\r\\n    ns.tprintf(`${pre}${host}`);\\r\\n    for (const serverName of connectedServers) {\\r\\n        if (serverName === parent)\\r\\n            continue;\\r\\n        showConnected(ns, host, serverName, `-${pre}`);\\r\\n    }\\r\\n}\\r\\nfunction serverHackedStatusColor(ns, s) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return 'green';\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    if (hackLv >= hackReq)\\r\\n        return 'Gold1';\\r\\n    return 'IndianRed';\\r\\n}\\r\\nfunction isHackable(ns, s) {\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    if (hackLv >= hackReq || ns.hasRootAccess(s))\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    //ns.ui.clearTerminal();\\r\\n    showConnected(ns, '', 'home', '');\\r\\n    // for (const server of getAllServers(ns)) {\\r\\n    //   ns.tprintf(`${server}`);\\r\\n    // }\\r\\n    // ns.tprintf(`${ns.ui.windowSize()}`)\\r\\n    const sortedServers = getAllServers(ns).sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b));\\r\\n    const filteredServers = sortedServers; //.filter(s => ns.getServerMaxMoney(s) > 0);\\r\\n    const hackableServerCount = filteredServers.filter(s => isHackable(ns, s)).length;\\r\\n    const truncatedServers = filteredServers.slice(0, hackableServerCount + 5);\\r\\n    const data = sortedServers.map(s => {\\r\\n        return [\\r\\n            { color: serverHackedStatusColor(ns, s), text: ` ${s}` },\\r\\n            ns.getServerRequiredHackingLevel(s).toString().padStart(6),\\r\\n            ns.getServerNumPortsRequired(s).toString().padStart(6),\\r\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\r\\n            ns.formatRam(ns.getServerMaxRam(s), 0).padStart(7),\\r\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(10)\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Servers', width: 20 },\\r\\n        { header: ' Level', width: 7 },\\r\\n        { header: ' Ports', width: 7 },\\r\\n        { header: ' Base Sec', width: 10 },\\r\\n        { header: '    Ram', width: 8 },\\r\\n        { header: '     Money', width: 11 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nvbm5lY3RlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxTQUFTLGFBQWEsQ0FBQyxFQUFNLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxHQUFXO0lBQ3RFLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2QyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7SUFFNUIsS0FBSyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRTtRQUN6QyxJQUFJLFVBQVUsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUVwQyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2hEO0FBQ0gsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsRUFBTSxFQUFFLENBQVM7SUFDaEQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sT0FBTyxDQUFDO0lBRXhDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFcEMsSUFBSSxNQUFNLElBQUksT0FBTztRQUFFLE9BQU8sT0FBTyxDQUFDO0lBRXRDLE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxFQUFNLEVBQUUsQ0FBUztJQUNuQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsNkJBQTZCLENB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LCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgUHJpbnRUYWJsZSwgQ29sb3JQcmludCwgRGVmYXVsdFN0eWxlIH0gZnJvbSBcInRhYmxlc1wiO1xyXG5pbXBvcnQgeyBnZXRBbGxTZXJ2ZXJzIH0gZnJvbSBcInV0aWxcIjtcclxuXHJcbmZ1bmN0aW9uIHNob3dDb25uZWN0ZWQobnM6IE5TLCBwYXJlbnQ6IHN0cmluZywgaG9zdDogc3RyaW5nLCBwcmU6IHN0cmluZyk6IHZvaWQge1xyXG4gIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGhvc3QpO1xyXG5cclxuICBucy50cHJpbnRmKGAke3ByZX0ke2hvc3R9YCk7XHJcblxyXG4gIGZvciAoY29uc3Qgc2VydmVyTmFtZSBvZiBjb25uZWN0ZWRTZXJ2ZXJzKSB7XHJcbiAgICBpZiAoc2VydmVyTmFtZSA9PT0gcGFyZW50KSBjb250aW51ZTtcclxuXHJcbiAgICBzaG93Q29ubmVjdGVkKG5zLCBob3N0LCBzZXJ2ZXJOYW1lLCBgLSR7cHJlfWApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VydmVySGFja2VkU3RhdHVzQ29sb3IobnM6IE5TLCBzOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gJ2dyZWVuJztcclxuXHJcbiAgY29uc3QgaGFja1JlcSA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpO1xyXG4gIGNvbnN0IGhhY2tMdiA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xyXG5cclxuICBpZiAoaGFja0x2ID49IGhhY2tSZXEpIHJldHVybiAnR29sZDEnO1xyXG5cclxuICByZXR1cm4gJ0luZGlhblJlZCc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSGFja2FibGUobnM6IE5TLCBzOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICBjb25zdCBoYWNrUmVxID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocyk7XHJcbiAgY29uc3QgaGFja0x2ID0gbnMuZ2V0SGFja2luZ0xldmVsKCk7XHJcblxyXG4gIGlmIChoYWNrTHYgPj0gaGFja1JlcSB8fCBucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAvL25zLnVpLmNsZWFyVGVybWluYWwoKTtcclxuICBzaG93Q29ubmVjdGVkKG5zLCAnJywgJ2hvbWUnLCAnJyk7XHJcblxyXG4gIC8vIGZvciAoY29uc3Qgc2VydmVyIG9mIGdldEFsbFNlcnZlcnMobnMpKSB7XHJcbiAgLy8gICBucy50cHJpbnRmKGAke3NlcnZlcn1gKTtcclxuICAvLyB9XHJcblxyXG4gIC8vIG5zLnRwcmludGYoYCR7bnMudWkud2luZG93U2l6ZSgpfWApXHJcbiAgY29uc3Qgc29ydGVkU2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpLnNvcnQoKGEsIGIpID0+IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKGEpIC0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoYikpO1xyXG4gIGNvbnN0IGZpbHRlcmVkU2VydmVycyA9IHNvcnRlZFNlcnZlcnMvLy5maWx0ZXIocyA9PiBucy5nZXRTZXJ2ZXJNYXhNb25leShzKSA+IDApO1xyXG4gIGNvbnN0IGhhY2thYmxlU2VydmVyQ291bnQgPSBmaWx0ZXJlZFNlcnZlcnMuZmlsdGVyKHMgPT4gaXNIYWNrYWJsZShucywgcykpLmxlbmd0aDtcclxuICBjb25zdCB0cnVuY2F0ZWRTZXJ2ZXJzID0gZmlsdGVyZWRTZXJ2ZXJzLnNsaWNlKDAsIGhhY2thYmxlU2VydmVyQ291bnQgKyA1KTtcclxuICBcclxuICBjb25zdCBkYXRhID0gc29ydGVkU2VydmVycy5tYXAocyA9PiB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvbG9yOiBzZXJ2ZXJIYWNrZWRTdGF0dXNDb2xvcihucywgcyksIHRleHQ6IGAgJHtzfWAgfSxcclxuICAgICAgbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwocykudG9TdHJpbmcoKS5wYWRTdGFydCg2KSxcclxuICAgICAgbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzKS50b1N0cmluZygpLnBhZFN0YXJ0KDYpLFxyXG4gICAgICBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzKS50b1N0cmluZygpLnBhZFN0YXJ0KDkpLFxyXG4gICAgICBucy5mb3JtYXRSYW0obnMuZ2V0U2VydmVyTWF4UmFtKHMpLCAwKS5wYWRTdGFydCg3KSxcclxuICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFNlcnZlck1heE1vbmV5KHMpLDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKVxyXG4gICAgXVxyXG4gIH0pO1xyXG5cclxuXHRjb25zdCBjb2x1bW5zID0gW1xyXG5cdFx0eyBoZWFkZXI6ICcgU2VydmVycycsIHdpZHRoOiAyMCB9LFxyXG5cdFx0eyBoZWFkZXI6ICcgTGV2ZWwnLCB3aWR0aDogNyB9LFxyXG4gICAgeyBoZWFkZXI6ICcgUG9ydHMnLCB3aWR0aDogNyB9LFxyXG5cdFx0eyBoZWFkZXI6ICcgQmFzZSBTZWMnLCB3aWR0aDogMTAgfSxcclxuXHRcdHsgaGVhZGVyOiAnICAgIFJhbScsIHdpZHRoOiA4IH0sXHJcblx0XHR7IGhlYWRlcjogJyAgICAgTW9uZXknLCB3aWR0aDogMTEgfVxyXG5cdF07XHJcblxyXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxufVxyXG4iXX0=\",\"filename\":\"connected.js\",\"server\":\"home\"}}],[\"break.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\r\\nfunction isHackable(ns, s, pCount) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return false;\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    const portsRequired = ns.getServerNumPortsRequired(s);\\r\\n    if (hackLv >= hackReq && portsRequired <= pCount)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nfunction crackAndNuke(ns, s) {\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\r\\n        ns.brutessh(s);\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\r\\n        ns.ftpcrack(s);\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\r\\n        ns.relaysmtp(s);\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\r\\n        ns.httpworm(s);\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\r\\n        ns.sqlinject(s);\\r\\n    ns.nuke(s);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\r\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\r\\n        if (ns.fileExists(crack, \\\"home\\\"))\\r\\n            count++;\\r\\n        return count;\\r\\n    }, 0);\\r\\n    for (const s of servers) {\\r\\n        if (isHackable(ns, s, portCrackCount)) {\\r\\n            ns.tprintf(`Cracking ${s}`);\\r\\n            crackAndNuke(ns, s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYnJlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxTQUFTLFVBQVUsQ0FBQyxFQUFNLEVBQUUsQ0FBUyxFQUFFLE1BQWM7SUFDbkQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXRDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDcEMsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxhQUFhLElBQUksTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTlELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEVBQU0sRUFBRSxDQUFTO0lBQ3JDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFNUQsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxNQUFNLFVBQVUsR0FBRyxDQUFDLGNBQWMsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN0RyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3hELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO1lBQUUsS0FBSyxFQUFFLENBQUM7UUFDMUMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFTixLQUFLLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUN2QixJQUFJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFO1lBQ3JDLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDckI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsU2VydmVycyB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5mdW5jdGlvbiBpc0hhY2thYmxlKG5zOiBOUywgczogc3RyaW5nLCBwQ291bnQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGNvbnN0IGhhY2tSZXEgPSBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzKTtcclxuICBjb25zdCBoYWNrTHYgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcclxuICBjb25zdCBwb3J0c1JlcXVpcmVkID0gbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzKTtcclxuXHJcbiAgaWYgKGhhY2tMdiA+PSBoYWNrUmVxICYmIHBvcnRzUmVxdWlyZWQgPD0gcENvdW50KSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmFja0FuZE51a2UobnM6IE5TLCBzOiBzdHJpbmcpOiB2b2lkIHtcclxuICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiLCBcImhvbWVcIikpIG5zLmJydXRlc3NoKHMpO1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwiRlRQQ3JhY2suZXhlXCIsIFwiaG9tZVwiKSkgbnMuZnRwY3JhY2socyk7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJyZWxheVNNVFAuZXhlXCIsIFwiaG9tZVwiKSkgbnMucmVsYXlzbXRwKHMpO1xyXG4gIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIsIFwiaG9tZVwiKSkgbnMuaHR0cHdvcm0ocyk7XHJcbiAgaWYgKG5zLmZpbGVFeGlzdHMoXCJTUUxJbmplY3QuZXhlXCIsIFwiaG9tZVwiKSkgbnMuc3FsaW5qZWN0KHMpO1xyXG5cclxuICBucy5udWtlKHMpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcblxyXG4gIGNvbnN0IHBvcnRDcmFja3MgPSBbXCJCcnV0ZVNTSC5leGVcIiwgXCJGVFBDcmFjay5leGVcIiwgXCJyZWxheVNNVFAuZXhlXCIsIFwiSFRUUFdvcm0uZXhlXCIsIFwiU1FMSW5qZWN0LmV4ZVwiXTtcclxuICBjb25zdCBwb3J0Q3JhY2tDb3VudCA9IHBvcnRDcmFja3MucmVkdWNlKChjb3VudCwgY3JhY2spID0+IHtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKGNyYWNrLCBcImhvbWVcIikpIGNvdW50Kys7XHJcbiAgICByZXR1cm4gY291bnQ7XHJcbiAgfSwgMCk7XHJcblxyXG4gIGZvciAoY29uc3QgcyBvZiBzZXJ2ZXJzKSB7XHJcbiAgICBpZiAoaXNIYWNrYWJsZShucywgcywgcG9ydENyYWNrQ291bnQpKSB7XHJcbiAgICAgIG5zLnRwcmludGYoYENyYWNraW5nICR7c31gKTtcclxuICAgICAgY3JhY2tBbmROdWtlKG5zLCBzKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19\",\"filename\":\"break.js\",\"server\":\"home\"}}],[\"util.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HGW_RAM = 1.75;\\r\\nexport const GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nexport const WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nexport const HOME_RESERVE = 64;\\r\\nexport function getAllServers(ns) {\\r\\n    const servers = new Set();\\r\\n    const queue = ['home'];\\r\\n    // eslint-disable-next-line no-constant-condition\\r\\n    while (true) {\\r\\n        const host = queue.pop();\\r\\n        if (host === undefined)\\r\\n            break;\\r\\n        servers.add(host);\\r\\n        const connectedServers = ns.scan(host);\\r\\n        queue.push(...connectedServers.filter(server => !servers.has(server)));\\r\\n    }\\r\\n    return Array.from(servers);\\r\\n}\\r\\n// returns growth multiplier when executing grow with the given number of threads\\r\\nexport function invGrowthAnalyze(ns, target, threads, max, min) {\\r\\n    if (ns.getServerMaxMoney(target) === ns.getServerMoneyAvailable(target))\\r\\n        return 1;\\r\\n    // if (min !== undefined && min <= 1) return 1;\\r\\n    max = max || ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1);\\r\\n    min = min || 1.000001;\\r\\n    if (Math.round(min * 100000) >= Math.round(max * 100000))\\r\\n        return min;\\r\\n    const mid = min + ((max - min) / 2);\\r\\n    // ns.tprintf(`min:${min}|mid:${mid}|max:${max}`);\\r\\n    const ga = Math.floor(ns.growthAnalyze(target, mid));\\r\\n    // ns.tprintf(`ga:${ga}`);\\r\\n    if (ga === threads)\\r\\n        return mid;\\r\\n    if (ga > threads)\\r\\n        return invGrowthAnalyze(ns, target, threads, mid, min);\\r\\n    return invGrowthAnalyze(ns, target, threads, max, mid);\\r\\n}\\r\\nexport function formatTime(time, showms = false) {\\r\\n    const ms = time % 1000;\\r\\n    const seconds = Math.floor(time / 1000) % 60;\\r\\n    const minutes = Math.floor(time / 1000 / 60) % 60;\\r\\n    const hours = Math.floor(time / 1000 / 60 / 60);\\r\\n    if (showms)\\r\\n        return `${(minutes > 0 ? minutes.toFixed(0) + ':' : '')}${seconds.toFixed(0).padStart(2, '0')}.${ms.toFixed(0).padStart(3, '0')}`;\\r\\n    return `${(hours > 0 ? hours.toFixed(0) + ':' : '')}${((minutes > 0 || hours > 0) ? minutes.toFixed(0).padStart(2, '0') + ':' : '')}${seconds.toFixed(0).padStart(2, '0')}`;\\r\\n}\\r\\nexport function getSlaves(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    return servers.filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s)).sort((a, b) => getSlaveThreads(ns, b) - getSlaveThreads(ns, a));\\r\\n}\\r\\nexport function getTotalThreads(ns, slaves, homeReserve = HOME_RESERVE) {\\r\\n    let totalThreads = slaves.reduce((count, slave) => count + Math.floor(ns.getServerMaxRam(slave) / HGW_RAM), 0);\\r\\n    if (slaves.includes('home')) {\\r\\n        totalThreads -= Math.ceil(homeReserve / HGW_RAM);\\r\\n    }\\r\\n    return totalThreads;\\r\\n}\\r\\nexport function getSlaveThreads(ns, slave, homeReserve = HOME_RESERVE) {\\r\\n    let slaveThreads = Math.floor(ns.getServerMaxRam(slave) / HGW_RAM);\\r\\n    if (slave === 'home') {\\r\\n        slaveThreads -= Math.ceil(homeReserve / HGW_RAM);\\r\\n        slaveThreads = Math.max(0, slaveThreads);\\r\\n    }\\r\\n    return slaveThreads;\\r\\n}\\r\\nexport async function doHackWeakenGrowWeaken(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\r\\n    const current = ns.getServerMoneyAvailable(target);\\r\\n    let hackThreads = 1;\\r\\n    let maxGain = 0;\\r\\n    let finalHackThreads = 0;\\r\\n    while (true) {\\r\\n        const hackPercent = ns.hackAnalyze(target) * hackThreads;\\r\\n        if (hackPercent > .9)\\r\\n            break;\\r\\n        const future = current - (current * hackPercent);\\r\\n        const growMult = current / future;\\r\\n        const growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        const gain = current - future;\\r\\n        const hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / WEAK_SEC);\\r\\n        const gwT = Math.ceil(growThreads / (WEAK_SEC / GROW_SEC));\\r\\n        const totalHWGWThreads = hackThreads + hackWeakenThreads + growThreads + gwT;\\r\\n        if (totalHWGWThreads > totalThreads)\\r\\n            break;\\r\\n        if (gain > maxGain) {\\r\\n            maxGain = gain;\\r\\n            finalHackThreads = hackThreads;\\r\\n        }\\r\\n        hackThreads++;\\r\\n    }\\r\\n    hackThreads = finalHackThreads;\\r\\n    const hackPercent = ns.hackAnalyze(target) * hackThreads;\\r\\n    const future = current - (current * hackPercent);\\r\\n    const growMult = current / future;\\r\\n    let growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n    const gain = current - future;\\r\\n    let hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / WEAK_SEC);\\r\\n    let growWeakenThreads = Math.ceil(growThreads / (WEAK_SEC / GROW_SEC));\\r\\n    const totalHWGWThreads = hackThreads + hackWeakenThreads + growThreads + growWeakenThreads;\\r\\n    const curStr = ns.formatNumber(current, 3, 1000, true);\\r\\n    const futStr = ns.formatNumber(future, 3, 1000, true);\\r\\n    const resStr = ns.formatNumber(future * growMult, 3, 1000, true);\\r\\n    const gainStr = ns.formatNumber(gain, 3, 1000, true);\\r\\n    // hack finish first, then hw, then grow, then gw\\r\\n    const hackMSBuf = weakTime - hackTime - 200;\\r\\n    const hackWeakMSBuf = 0;\\r\\n    const growMSBuf = (weakTime - growTime) + 200;\\r\\n    const growWeakMSBuf = 400;\\r\\n    ns.tprintf(`current:${curStr}|future:${futStr}|growMult:${growMult}|result:${resStr}|gain:${gainStr}|tot:${totalHWGWThreads}|${formatTime(weakTime + growWeakMSBuf)}`);\\r\\n    for (const s of slaves) {\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        const slaveHackThreads = Math.min(slaveThreads, hackThreads);\\r\\n        slaveThreads -= slaveHackThreads;\\r\\n        hackThreads -= slaveHackThreads;\\r\\n        const slaveHackWeakenThreads = Math.min(slaveThreads, hackWeakenThreads);\\r\\n        slaveThreads -= slaveHackWeakenThreads;\\r\\n        hackWeakenThreads -= slaveHackWeakenThreads;\\r\\n        const slaveGrowThreads = Math.min(slaveThreads, growThreads);\\r\\n        slaveThreads -= slaveGrowThreads;\\r\\n        growThreads -= slaveGrowThreads;\\r\\n        const slaveWeakenGrowThreads = Math.min(slaveThreads, growWeakenThreads);\\r\\n        slaveThreads -= slaveWeakenGrowThreads;\\r\\n        growWeakenThreads -= slaveWeakenGrowThreads;\\r\\n        if (slaveHackThreads > 0)\\r\\n            ns.exec('hack.js', s, slaveHackThreads, target, hackMSBuf);\\r\\n        if (slaveHackWeakenThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveHackWeakenThreads, target, hackWeakMSBuf);\\r\\n        if (slaveGrowThreads > 0)\\r\\n            ns.exec('grow.js', s, slaveGrowThreads, target, growMSBuf);\\r\\n        if (slaveWeakenGrowThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveWeakenGrowThreads, target, growWeakMSBuf);\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function doGrowWeaken(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const growMSBuf = weakTime - growTime;\\r\\n    // run 1 weaken thread for every 12.5 grow threads;\\r\\n    let weakenThreads = Math.ceil(totalThreads / (WEAK_SEC / GROW_SEC));\\r\\n    let growThreads = totalThreads - weakenThreads;\\r\\n    const availableMoney = ns.getServerMoneyAvailable(target);\\r\\n    const maxMoney = ns.getServerMaxMoney(target);\\r\\n    const growResult = invGrowthAnalyze(ns, target, growThreads) * availableMoney;\\r\\n    ns.tprintf(`Growing ${target} sec:${ns.getServerSecurityLevel(target)}|wt:${weakenThreads}|gt:${growThreads} ${ns.formatNumber(availableMoney, 3, 1000, true)} => ${ns.formatNumber(growResult, 3, 1000, true)} / ${ns.formatNumber(maxMoney, 3, 1000, true)} ${formatTime(weakTime + 200)}`);\\r\\n    for (const s of slaves) {\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        const slaveWeakenThreads = Math.min(slaveThreads, weakenThreads);\\r\\n        slaveThreads -= slaveWeakenThreads;\\r\\n        weakenThreads -= slaveWeakenThreads;\\r\\n        const slaveGrowThreads = Math.min(slaveThreads, growThreads);\\r\\n        slaveThreads -= slaveGrowThreads;\\r\\n        growThreads -= slaveGrowThreads;\\r\\n        if (slaveWeakenThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveWeakenThreads, target, 200);\\r\\n        if (slaveGrowThreads > 0)\\r\\n            ns.exec('grow.js', s, slaveGrowThreads, target, growMSBuf);\\r\\n    }\\r\\n    if (weakenThreads > 0)\\r\\n        ns.tprint(`WARNING [doGrowWeaken]: ${weakenThreads} Weaken Threads unaccounted`);\\r\\n    if (growThreads > 0)\\r\\n        ns.tprint(`WARNING [doGrowWeaken]: ${growThreads} Grow Threads unaccounted`);\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function doWeaken(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    const weakenPerRound = totalThreads * 0.05;\\r\\n    const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const currentSec = ns.getServerSecurityLevel(target);\\r\\n    const targetSec = Math.max(currentSec - weakenPerRound, ns.getServerMinSecurityLevel(target));\\r\\n    ns.tprintf(`Weakening ${target} ${currentSec.toFixed(2)} => ${targetSec} / ${ns.getServerMinSecurityLevel(target)} ${formatTime(weakTime + 200)}`);\\r\\n    let weakenThreads = Math.min(Math.ceil((currentSec - targetSec) / WEAK_SEC), totalThreads);\\r\\n    for (const s of slaves) {\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        const slaveWeakenThreads = Math.min(slaveThreads, weakenThreads);\\r\\n        slaveThreads -= slaveWeakenThreads;\\r\\n        weakenThreads -= slaveWeakenThreads;\\r\\n        if (slaveWeakenThreads > 0)\\r\\n            ns.exec('weaken.js', s, slaveWeakenThreads, target, 200);\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function waitForHGWScripts(ns, slaves) {\\r\\n    while (slaves.some(s => ns.ps(s).some(script => script.filename === 'hack.js' || script.filename === 'grow.js' || script.filename === 'weaken.js')))\\r\\n        await ns.sleep(20);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDNUIsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUMzRSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7QUFFL0IsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFNO0lBQ2xDLE1BQU0sT0FBTyxHQUFnQixJQUFJLEdBQUcsRUFBVSxDQUFDO0lBQy9DLE1BQU0sS0FBSyxHQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakMsaURBQWlEO0lBQ2pELE9BQU0sSUFBSSxFQUFFO1FBQ1YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxNQUFNO1FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRCxpRkFBaUY7QUFDakYsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQU0sRUFBRSxNQUFjLEVBQUUsT0FBZSxFQUFFLEdBQVksRUFBRSxHQUFZO0lBQ2xHLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRiwrQ0FBK0M7SUFFL0MsR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckYsR0FBRyxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUM7SUFFdEIsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUVoRSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVwQyxrREFBa0Q7SUFFbEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXJELDBCQUEwQjtJQUUxQixJQUFJLEVBQUUsS0FBSyxPQUFPO1FBQUUsT0FBTyxHQUFHLENBQUM7SUFFL0IsSUFBSSxFQUFFLEdBQUcsT0FBTztRQUFFLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXpFLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVksRUFBRSxNQUFNLEdBQUcsS0FBSztJQUNyRCxNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2xELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFaEQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxHQUFHLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUVwSSxPQUFPLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztBQUM5SyxDQUFD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SSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsR0FBRyxRQUFRLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUUzRixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtRQUN0QixJQUFJLFlBQVksR0FBRyxlQUFlLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDakUsWUFBWSxJQUFJLGtCQUFrQixDQUFDO1FBQ25DLGFBQWEsSUFBSSxrQkFBa0IsQ0FBQztRQUVwQyxJQUFJLGtCQUFrQixHQUFHLENBQUM7WUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3RGO0lBRUQsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsRUFBTSxFQUFFLE1BQWdCO0lBQzlELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxXQUFXLENBQUMsQ0FBQztRQUNqSixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEhHV19SQU0gPSAxLjc1O1xyXG5leHBvcnQgY29uc3QgR1JPV19TRUMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDEsICdvbWVnYS1uZXQnKTtcclxuZXhwb3J0IGNvbnN0IFdFQUtfU0VDID0gMC4wNTsgLy8gbnMud2Vha2VuQW5hbHl6ZSgxKTtcclxuZXhwb3J0IGNvbnN0IEhPTUVfUkVTRVJWRSA9IDY0O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbFNlcnZlcnMobnM6IE5TKTogc3RyaW5nW10ge1xyXG4gIGNvbnN0IHNlcnZlcnM6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgY29uc3QgcXVldWU6IHN0cmluZ1tdID0gWydob21lJ107XHJcblxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICB3aGlsZSh0cnVlKSB7XHJcbiAgICBjb25zdCBob3N0ID0gcXVldWUucG9wKCk7XHJcbiAgICBpZiAoaG9zdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcclxuXHJcbiAgICBzZXJ2ZXJzLmFkZChob3N0KTtcclxuICAgIGNvbnN0IGNvbm5lY3RlZFNlcnZlcnMgPSBucy5zY2FuKGhvc3QpO1xyXG4gICAgcXVldWUucHVzaCguLi5jb25uZWN0ZWRTZXJ2ZXJzLmZpbHRlcihzZXJ2ZXIgPT4gIXNlcnZlcnMuaGFzKHNlcnZlcikpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBBcnJheS5mcm9tKHNlcnZlcnMpO1xyXG59XHJcblxyXG4vLyByZXR1cm5zIGdyb3d0aCBtdWx0aXBsaWVyIHdoZW4gZXhlY3V0aW5nIGdyb3cgd2l0aCB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHRocmVhZHNcclxuZXhwb3J0IGZ1bmN0aW9uIGludkdyb3d0aEFuYWx5emUobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZWFkczogbnVtYmVyLCBtYXg/OiBudW1iZXIsIG1pbj86IG51bWJlcik6IG51bWJlciB7XHJcbiAgaWYgKG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkgPT09IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkpIHJldHVybiAxO1xyXG4gIC8vIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBtaW4gPD0gMSkgcmV0dXJuIDE7XHJcblxyXG4gIG1heCA9IG1heCB8fCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgKyAxKTtcclxuICBtaW4gPSBtaW4gfHwgMS4wMDAwMDE7XHJcbiAgXHJcbiAgaWYoTWF0aC5yb3VuZChtaW4qMTAwMDAwKSA+PSBNYXRoLnJvdW5kKG1heCoxMDAwMDApKSByZXR1cm4gbWluO1xyXG4gIFxyXG4gIGNvbnN0IG1pZCA9IG1pbiArICgobWF4IC0gbWluKSAvIDIpO1xyXG5cclxuICAvLyBucy50cHJpbnRmKGBtaW46JHttaW59fG1pZDoke21pZH18bWF4OiR7bWF4fWApO1xyXG4gIFxyXG4gIGNvbnN0IGdhID0gTWF0aC5mbG9vcihucy5ncm93dGhBbmFseXplKHRhcmdldCwgbWlkKSk7XHJcbiAgXHJcbiAgLy8gbnMudHByaW50ZihgZ2E6JHtnYX1gKTtcclxuXHJcbiAgaWYgKGdhID09PSB0aHJlYWRzKSByZXR1cm4gbWlkO1xyXG5cclxuICBpZiAoZ2EgPiB0aHJlYWRzKSByZXR1cm4gaW52R3Jvd3RoQW5hbHl6ZShucywgdGFyZ2V0LCB0aHJlYWRzLCBtaWQsIG1pbik7XHJcblxyXG4gIHJldHVybiBpbnZHcm93dGhBbmFseXplKG5zLCB0YXJnZXQsIHRocmVhZHMsIG1heCwgbWlkKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRpbWUodGltZTogbnVtYmVyLCBzaG93bXMgPSBmYWxzZSk6IHN0cmluZyB7XHJcbiAgY29uc3QgbXMgPSB0aW1lICUgMTAwMDtcclxuICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcih0aW1lIC8gMTAwMCkgJSA2MDtcclxuICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0aW1lIC8gMTAwMCAvIDYwKSAlIDYwO1xyXG4gIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0aW1lIC8gMTAwMCAvIDYwIC8gNjApO1xyXG5cclxuICBpZiAoc2hvd21zKVxyXG4gICAgcmV0dXJuIGAkeyhtaW51dGVzID4gMCA/IG1pbnV0ZXMudG9GaXhlZCgwKSArICc6JyA6ICcnKX0ke3NlY29uZHMudG9GaXhlZCgwKS5wYWRTdGFydCgyLCAnMCcpfS4ke21zLnRvRml4ZWQoMCkucGFkU3RhcnQoMywgJzAnKX1gO1xyXG4gIFxyXG4gIHJldHVybiBgJHsoaG91cnMgPiAwID8gaG91cnMudG9GaXhlZCgwKSArICc6JyA6ICcnKX0keygobWludXRlcyA+IDAgfHwgaG91cnMgPiAwKSA/IG1pbnV0ZXMudG9GaXhlZCgwKS5wYWRTdGFydCgyLCAnMCcpICsgJzonIDogJycpfSR7c2Vjb25kcy50b0ZpeGVkKDApLnBhZFN0YXJ0KDIsICcwJyl9YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNsYXZlcyhuczogTlMpIHtcclxuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcbiAgcmV0dXJuIHNlcnZlcnMuZmlsdGVyKHMgPT4gbnMuZ2V0U2VydmVyTWF4UmFtKHMpID4gMCAmJiBucy5oYXNSb290QWNjZXNzKHMpKS5zb3J0KChhLCBiKSA9PiBnZXRTbGF2ZVRocmVhZHMobnMsIGIpIC0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBhKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3RhbFRocmVhZHMobnM6IE5TLCBzbGF2ZXM6IHN0cmluZ1tdLCBob21lUmVzZXJ2ZSA9IEhPTUVfUkVTRVJWRSkge1xyXG4gIGxldCB0b3RhbFRocmVhZHMgPSBzbGF2ZXMucmVkdWNlKChjb3VudCwgc2xhdmUpID0+IGNvdW50ICsgTWF0aC5mbG9vcihucy5nZXRTZXJ2ZXJNYXhSYW0oc2xhdmUpIC8gSEdXX1JBTSksIDApO1xyXG5cclxuICBpZihzbGF2ZXMuaW5jbHVkZXMoJ2hvbWUnKSkge1xyXG4gICAgdG90YWxUaHJlYWRzIC09IE1hdGguY2VpbChob21lUmVzZXJ2ZSAvIEhHV19SQU0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRvdGFsVGhyZWFkcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNsYXZlVGhyZWFkcyhuczogTlMsIHNsYXZlOiBzdHJpbmcsIGhvbWVSZXNlcnZlID0gSE9NRV9SRVNFUlZFKSB7XHJcbiAgbGV0IHNsYXZlVGhyZWFkcyA9IE1hdGguZmxvb3IobnMuZ2V0U2VydmVyTWF4UmFtKHNsYXZlKSAvIEhHV19SQU0pO1xyXG4gIGlmIChzbGF2ZSA9PT0gJ2hvbWUnKSB7XHJcbiAgICBzbGF2ZVRocmVhZHMgLT0gTWF0aC5jZWlsKGhvbWVSZXNlcnZlIC8gSEdXX1JBTSlcclxuICAgIHNsYXZlVGhyZWFkcyA9IE1hdGgubWF4KDAsIHNsYXZlVGhyZWFkcyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2xhdmVUaHJlYWRzO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9IYWNrV2Vha2VuR3Jvd1dlYWtlbihuczogTlMsIHRhcmdldDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcclxuICBjb25zdCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XHJcblxyXG4gIGNvbnN0IHdlYWtUaW1lID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XHJcbiAgY29uc3QgZ3Jvd1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KSk7XHJcbiAgY29uc3QgaGFja1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0SGFja1RpbWUodGFyZ2V0KSk7XHJcblxyXG4gIGNvbnN0IGN1cnJlbnQgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpO1xyXG4gIGxldCBoYWNrVGhyZWFkcyA9IDE7XHJcbiAgbGV0IG1heEdhaW4gPSAwO1xyXG4gIGxldCBmaW5hbEhhY2tUaHJlYWRzID0gMDtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgY29uc3QgaGFja1BlcmNlbnQgPSBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpICogaGFja1RocmVhZHM7XHJcbiAgICBpZiAoaGFja1BlcmNlbnQgPiAuOSkgYnJlYWs7XHJcblxyXG4gICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gICAgY29uc3QgZ3Jvd011bHQgPSBjdXJyZW50IC8gZnV0dXJlO1xyXG4gICAgY29uc3QgZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIGdyb3dNdWx0KSk7XHJcbiAgICBjb25zdCBnYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuXHJcbiAgICBjb25zdCBoYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xyXG4gICAgY29uc3QgZ3dUID0gTWF0aC5jZWlsKGdyb3dUaHJlYWRzIC8gKFdFQUtfU0VDIC8gR1JPV19TRUMpKTtcclxuICAgIGNvbnN0IHRvdGFsSFdHV1RocmVhZHMgPSBoYWNrVGhyZWFkcytoYWNrV2Vha2VuVGhyZWFkcytncm93VGhyZWFkcytnd1Q7XHJcbiAgICBpZiAodG90YWxIV0dXVGhyZWFkcyA+IHRvdGFsVGhyZWFkcykgYnJlYWs7XHJcblxyXG4gICAgaWYgKGdhaW4gPiBtYXhHYWluKSB7XHJcbiAgICAgIG1heEdhaW4gPSBnYWluO1xyXG4gICAgICBmaW5hbEhhY2tUaHJlYWRzID0gaGFja1RocmVhZHM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGhhY2tUaHJlYWRzKys7XHJcbiAgfVxyXG5cclxuICBoYWNrVGhyZWFkcyA9IGZpbmFsSGFja1RocmVhZHM7XHJcbiAgY29uc3QgaGFja1BlcmNlbnQgPSBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpICogaGFja1RocmVhZHM7XHJcbiAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gIGNvbnN0IGdyb3dNdWx0ID0gY3VycmVudCAvIGZ1dHVyZTtcclxuICBsZXQgZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIGdyb3dNdWx0KSk7XHJcbiAgY29uc3QgZ2FpbiA9IGN1cnJlbnQgLSBmdXR1cmU7XHJcblxyXG4gIGxldCBoYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xyXG4gIGxldCBncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XHJcbiAgY29uc3QgdG90YWxIV0dXVGhyZWFkcyA9IGhhY2tUaHJlYWRzK2hhY2tXZWFrZW5UaHJlYWRzK2dyb3dUaHJlYWRzK2dyb3dXZWFrZW5UaHJlYWRzO1xyXG5cclxuICBjb25zdCBjdXJTdHIgPSBucy5mb3JtYXROdW1iZXIoY3VycmVudCwgMywgMTAwMCwgdHJ1ZSk7XHJcbiAgY29uc3QgZnV0U3RyID0gbnMuZm9ybWF0TnVtYmVyKGZ1dHVyZSwgMywgMTAwMCwgdHJ1ZSk7XHJcbiAgY29uc3QgcmVzU3RyID0gbnMuZm9ybWF0TnVtYmVyKGZ1dHVyZSpncm93TXVsdCwgMywgMTAwMCwgdHJ1ZSk7XHJcbiAgY29uc3QgZ2FpblN0ciA9IG5zLmZvcm1hdE51bWJlcihnYWluLCAzLCAxMDAwLCB0cnVlKTtcclxuXHJcbiAgLy8gaGFjayBmaW5pc2ggZmlyc3QsIHRoZW4gaHcsIHRoZW4gZ3JvdywgdGhlbiBnd1xyXG4gIGNvbnN0IGhhY2tNU0J1ZiA9IHdlYWtUaW1lIC0gaGFja1RpbWUgLSAyMDA7XHJcbiAgY29uc3QgaGFja1dlYWtNU0J1ZiA9IDA7XHJcbiAgY29uc3QgZ3Jvd01TQnVmID0gKHdlYWtUaW1lIC0gZ3Jvd1RpbWUpICsgMjAwO1xyXG4gIGNvbnN0IGdyb3dXZWFrTVNCdWYgPSA0MDA7XHJcblxyXG4gIG5zLnRwcmludGYoYGN1cnJlbnQ6JHtjdXJTdHJ9fGZ1dHVyZToke2Z1dFN0cn18Z3Jvd011bHQ6JHtncm93TXVsdH18cmVzdWx0OiR7cmVzU3RyfXxnYWluOiR7Z2FpblN0cn18dG90OiR7dG90YWxIV0dXVGhyZWFkc318JHtmb3JtYXRUaW1lKHdlYWtUaW1lK2dyb3dXZWFrTVNCdWYpfWApO1xyXG4gIFxyXG4gIGZvciAoY29uc3QgcyBvZiBzbGF2ZXMpIHtcclxuICAgIGxldCBzbGF2ZVRocmVhZHMgPSBnZXRTbGF2ZVRocmVhZHMobnMsIHMpO1xyXG5cclxuICAgIGNvbnN0IHNsYXZlSGFja1RocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIGhhY2tUaHJlYWRzKTtcclxuICAgIHNsYXZlVGhyZWFkcyAtPSBzbGF2ZUhhY2tUaHJlYWRzO1xyXG4gICAgaGFja1RocmVhZHMgLT0gc2xhdmVIYWNrVGhyZWFkcztcclxuXHJcbiAgICBjb25zdCBzbGF2ZUhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBoYWNrV2Vha2VuVGhyZWFkcyk7XHJcbiAgICBzbGF2ZVRocmVhZHMgLT0gc2xhdmVIYWNrV2Vha2VuVGhyZWFkcztcclxuICAgIGhhY2tXZWFrZW5UaHJlYWRzIC09IHNsYXZlSGFja1dlYWtlblRocmVhZHM7XHJcblxyXG4gICAgY29uc3Qgc2xhdmVHcm93VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgZ3Jvd1RocmVhZHMpO1xyXG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlR3Jvd1RocmVhZHM7XHJcbiAgICBncm93VGhyZWFkcyAtPSBzbGF2ZUdyb3dUaHJlYWRzO1xyXG5cclxuICAgIGNvbnN0IHNsYXZlV2Vha2VuR3Jvd1RocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIGdyb3dXZWFrZW5UaHJlYWRzKTtcclxuICAgIHNsYXZlVGhyZWFkcyAtPSBzbGF2ZVdlYWtlbkdyb3dUaHJlYWRzO1xyXG4gICAgZ3Jvd1dlYWtlblRocmVhZHMgLT0gc2xhdmVXZWFrZW5Hcm93VGhyZWFkcztcclxuXHJcbiAgICBpZiAoc2xhdmVIYWNrVGhyZWFkcyA+IDApIG5zLmV4ZWMoJ2hhY2suanMnLCBzLCBzbGF2ZUhhY2tUaHJlYWRzLCB0YXJnZXQsIGhhY2tNU0J1Zik7XHJcbiAgICBpZiAoc2xhdmVIYWNrV2Vha2VuVGhyZWFkcyA+IDApIG5zLmV4ZWMoJ3dlYWtlbi5qcycsIHMsIHNsYXZlSGFja1dlYWtlblRocmVhZHMsIHRhcmdldCwgaGFja1dlYWtNU0J1Zik7XHJcbiAgICBpZiAoc2xhdmVHcm93VGhyZWFkcyA+IDApIG5zLmV4ZWMoJ2dyb3cuanMnLCBzLCBzbGF2ZUdyb3dUaHJlYWRzLCB0YXJnZXQsIGdyb3dNU0J1Zik7XHJcbiAgICBpZiAoc2xhdmVXZWFrZW5Hcm93VGhyZWFkcyA+IDApIG5zLmV4ZWMoJ3dlYWtlbi5qcycsIHMsIHNsYXZlV2Vha2VuR3Jvd1RocmVhZHMsIHRhcmdldCwgZ3Jvd1dlYWtNU0J1Zik7XHJcbiAgfVxyXG5cclxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvR3Jvd1dlYWtlbihuczogTlMsIHRhcmdldDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcclxuICBjb25zdCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XHJcblxyXG4gIGNvbnN0IHdlYWtUaW1lID0gTWF0aC5jZWlsKG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KSk7XHJcbiAgY29uc3QgZ3Jvd1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KSk7XHJcbiAgY29uc3QgZ3Jvd01TQnVmID0gd2Vha1RpbWUgLSBncm93VGltZTtcclxuXHJcbiAgLy8gcnVuIDEgd2Vha2VuIHRocmVhZCBmb3IgZXZlcnkgMTIuNSBncm93IHRocmVhZHM7XHJcbiAgbGV0IHdlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwodG90YWxUaHJlYWRzIC8gKFdFQUtfU0VDIC8gR1JPV19TRUMpKTtcclxuICBsZXQgZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSB3ZWFrZW5UaHJlYWRzO1xyXG5cclxuICBjb25zdCBhdmFpbGFibGVNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XHJcbiAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG4gIGNvbnN0IGdyb3dSZXN1bHQgPSBpbnZHcm93dGhBbmFseXplKG5zLCB0YXJnZXQsIGdyb3dUaHJlYWRzKSAqIGF2YWlsYWJsZU1vbmV5O1xyXG5cclxuICBucy50cHJpbnRmKGBHcm93aW5nICR7dGFyZ2V0fSBzZWM6JHtucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCl9fHd0OiR7d2Vha2VuVGhyZWFkc318Z3Q6JHtncm93VGhyZWFkc30gJHtucy5mb3JtYXROdW1iZXIoYXZhaWxhYmxlTW9uZXksIDMsIDEwMDAsIHRydWUpfSA9PiAke25zLmZvcm1hdE51bWJlcihncm93UmVzdWx0LCAzLCAxMDAwLCB0cnVlKX0gLyAke25zLmZvcm1hdE51bWJlcihtYXhNb25leSwgMywgMTAwMCwgdHJ1ZSl9ICR7Zm9ybWF0VGltZSh3ZWFrVGltZSsyMDApfWApO1xyXG5cclxuICBmb3IgKGNvbnN0IHMgb2Ygc2xhdmVzKSB7XHJcbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcclxuXHJcbiAgICBjb25zdCBzbGF2ZVdlYWtlblRocmVhZHMgPSBNYXRoLm1pbihzbGF2ZVRocmVhZHMsIHdlYWtlblRocmVhZHMpO1xyXG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlV2Vha2VuVGhyZWFkcztcclxuICAgIHdlYWtlblRocmVhZHMgLT0gc2xhdmVXZWFrZW5UaHJlYWRzO1xyXG4gICAgY29uc3Qgc2xhdmVHcm93VGhyZWFkcyA9IE1hdGgubWluKHNsYXZlVGhyZWFkcywgZ3Jvd1RocmVhZHMpO1xyXG4gICAgc2xhdmVUaHJlYWRzIC09IHNsYXZlR3Jvd1RocmVhZHM7XHJcbiAgICBncm93VGhyZWFkcyAtPSBzbGF2ZUdyb3dUaHJlYWRzO1xyXG5cclxuICAgIGlmIChzbGF2ZVdlYWtlblRocmVhZHMgPiAwKSBucy5leGVjKCd3ZWFrZW4uanMnLCBzLCBzbGF2ZVdlYWtlblRocmVhZHMsIHRhcmdldCwgMjAwKTtcclxuICAgIGlmIChzbGF2ZUdyb3dUaHJlYWRzID4gMCkgbnMuZXhlYygnZ3Jvdy5qcycsIHMsIHNsYXZlR3Jvd1RocmVhZHMsIHRhcmdldCwgZ3Jvd01TQnVmKTtcclxuICB9XHJcblxyXG4gIGlmICh3ZWFrZW5UaHJlYWRzID4gMCkgbnMudHByaW50KGBXQVJOSU5HIFtkb0dyb3dXZWFrZW5dOiAke3dlYWtlblRocmVhZHN9IFdlYWtlbiBUaHJlYWRzIHVuYWNjb3VudGVkYCk7XHJcbiAgaWYgKGdyb3dUaHJlYWRzID4gMCkgbnMudHByaW50KGBXQVJOSU5HIFtkb0dyb3dXZWFrZW5dOiAke2dyb3dUaHJlYWRzfSBHcm93IFRocmVhZHMgdW5hY2NvdW50ZWRgKTtcclxuXHJcbiAgYXdhaXQgd2FpdEZvckhHV1NjcmlwdHMobnMsIHNsYXZlcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb1dlYWtlbihuczogTlMsIHRhcmdldDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcclxuICBjb25zdCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XHJcbiAgY29uc3Qgd2Vha2VuUGVyUm91bmQgPSB0b3RhbFRocmVhZHMgKiAwLjA1O1xyXG5cclxuICBjb25zdCB3ZWFrVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG5cclxuICBjb25zdCBjdXJyZW50U2VjID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIGNvbnN0IHRhcmdldFNlYyA9IE1hdGgubWF4KGN1cnJlbnRTZWMgLSB3ZWFrZW5QZXJSb3VuZCwgbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpKTtcclxuICBucy50cHJpbnRmKGBXZWFrZW5pbmcgJHt0YXJnZXR9ICR7Y3VycmVudFNlYy50b0ZpeGVkKDIpfSA9PiAke3RhcmdldFNlY30gLyAke25zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KX0gJHtmb3JtYXRUaW1lKHdlYWtUaW1lKzIwMCl9YCk7XHJcblxyXG4gIGxldCB3ZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oTWF0aC5jZWlsKChjdXJyZW50U2VjIC0gdGFyZ2V0U2VjKSAvIFdFQUtfU0VDKSwgdG90YWxUaHJlYWRzKTtcclxuXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgbGV0IHNsYXZlVGhyZWFkcyA9IGdldFNsYXZlVGhyZWFkcyhucywgcyk7XHJcblxyXG4gICAgY29uc3Qgc2xhdmVXZWFrZW5UaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCB3ZWFrZW5UaHJlYWRzKTtcclxuICAgIHNsYXZlVGhyZWFkcyAtPSBzbGF2ZVdlYWtlblRocmVhZHM7XHJcbiAgICB3ZWFrZW5UaHJlYWRzIC09IHNsYXZlV2Vha2VuVGhyZWFkcztcclxuXHJcbiAgICBpZiAoc2xhdmVXZWFrZW5UaHJlYWRzID4gMCkgbnMuZXhlYygnd2Vha2VuLmpzJywgcywgc2xhdmVXZWFrZW5UaHJlYWRzLCB0YXJnZXQsIDIwMCk7XHJcbiAgfVxyXG5cclxuICBhd2FpdCB3YWl0Rm9ySEdXU2NyaXB0cyhucywgc2xhdmVzKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JIR1dTY3JpcHRzKG5zOiBOUywgc2xhdmVzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gIHdoaWxlIChzbGF2ZXMuc29tZShzID0+IG5zLnBzKHMpLnNvbWUoc2NyaXB0ID0+IHNjcmlwdC5maWxlbmFtZSA9PT0gJ2hhY2suanMnIHx8IHNjcmlwdC5maWxlbmFtZSA9PT0gJ2dyb3cuanMnIHx8IHNjcmlwdC5maWxlbmFtZSA9PT0gJ3dlYWtlbi5qcycpKSlcclxuICAgIGF3YWl0IG5zLnNsZWVwKDIwKTtcclxufSJdfQ==\",\"filename\":\"util.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"ll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle, ColorPrint } from \\\"tables\\\";\\r\\nexport async function main(ns) {\\r\\n    const files = ns.ls(ns.getHostname());\\r\\n    // const exes = files.filter(f => f.includes('.exe'));\\r\\n    // ns.tprintf(\\\"============ EXECUTABLES =============\\\");\\r\\n    // for (const f of exes)\\r\\n    //   ns.tprintf(`${f}`);\\r\\n    // const scripts = files.filter(f => f.includes('.js'));\\r\\n    // ns.tprintf('');\\r\\n    // ns.tprintf(\\\"============== SCRIPTS ===============\\\");\\r\\n    // for (const f of scripts)\\r\\n    //   ns.tprintf(`${f}`);\\r\\n    // const misc = files.filter(f => !(f.includes('.exe') || f.includes('.js')));\\r\\n    // ns.tprintf('');\\r\\n    // ns.tprintf(\\\"=============== MISC =================\\\");\\r\\n    // for (const f of misc)\\r\\n    //   ns.tprintf(`${f}`);\\r\\n    const scripts = files.filter(f => f.includes('.js'));\\r\\n    const data = scripts.map(f => {\\r\\n        return [\\r\\n            ` ${f}`,\\r\\n            ns.formatRam(ns.getScriptRam(f)).padStart(9),\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Script', width: 20 },\\r\\n        { header: '      RAM', width: 10 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV0QyxzREFBc0Q7SUFDdEQsd0RBQXdEO0lBQ3hELHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFFeEIsd0RBQXdEO0lBQ3hELGtCQUFrQjtJQUNsQix3REFBd0Q7SUFDeEQsMkJBQTJCO0lBQzNCLHdCQUF3QjtJQUV4Qiw4RUFBOEU7SUFDOUUsa0JBQWtCO0lBQ2xCLHdEQUF3RDtJQUN4RCx3QkFBd0I7SUFDeEIsd0JBQXdCO0lBRXhCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFckQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMzQixPQUFPO1lBQ0wsSUFBSSxDQUFDLEVBQUU7WUFDUCxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzdDLENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sT0FBTyxHQUFHO1FBQ2QsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDaEMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7S0FDbkMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IFByaW50VGFibGUsIERlZmF1bHRTdHlsZSwgQ29sb3JQcmludCB9IGZyb20gXCJ0YWJsZXNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IGZpbGVzID0gbnMubHMobnMuZ2V0SG9zdG5hbWUoKSk7XHJcblxyXG4gIC8vIGNvbnN0IGV4ZXMgPSBmaWxlcy5maWx0ZXIoZiA9PiBmLmluY2x1ZGVzKCcuZXhlJykpO1xyXG4gIC8vIG5zLnRwcmludGYoXCI9PT09PT09PT09PT0gRVhFQ1VUQUJMRVMgPT09PT09PT09PT09PVwiKTtcclxuICAvLyBmb3IgKGNvbnN0IGYgb2YgZXhlcylcclxuICAvLyAgIG5zLnRwcmludGYoYCR7Zn1gKTtcclxuXHJcbiAgLy8gY29uc3Qgc2NyaXB0cyA9IGZpbGVzLmZpbHRlcihmID0+IGYuaW5jbHVkZXMoJy5qcycpKTtcclxuICAvLyBucy50cHJpbnRmKCcnKTtcclxuICAvLyBucy50cHJpbnRmKFwiPT09PT09PT09PT09PT0gU0NSSVBUUyA9PT09PT09PT09PT09PT1cIik7XHJcbiAgLy8gZm9yIChjb25zdCBmIG9mIHNjcmlwdHMpXHJcbiAgLy8gICBucy50cHJpbnRmKGAke2Z9YCk7XHJcblxyXG4gIC8vIGNvbnN0IG1pc2MgPSBmaWxlcy5maWx0ZXIoZiA9PiAhKGYuaW5jbHVkZXMoJy5leGUnKSB8fCBmLmluY2x1ZGVzKCcuanMnKSkpO1xyXG4gIC8vIG5zLnRwcmludGYoJycpO1xyXG4gIC8vIG5zLnRwcmludGYoXCI9PT09PT09PT09PT09PT0gTUlTQyA9PT09PT09PT09PT09PT09PVwiKTtcclxuICAvLyBmb3IgKGNvbnN0IGYgb2YgbWlzYylcclxuICAvLyAgIG5zLnRwcmludGYoYCR7Zn1gKTtcclxuXHJcbiAgY29uc3Qgc2NyaXB0cyA9IGZpbGVzLmZpbHRlcihmID0+IGYuaW5jbHVkZXMoJy5qcycpKTtcclxuXHJcbiAgY29uc3QgZGF0YSA9IHNjcmlwdHMubWFwKGYgPT4ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCAke2Z9YCxcclxuICAgICAgbnMuZm9ybWF0UmFtKG5zLmdldFNjcmlwdFJhbShmKSkucGFkU3RhcnQoOSksXHJcbiAgICBdXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGNvbHVtbnMgPSBbXHJcbiAgICB7IGhlYWRlcjogJyBTY3JpcHQnLCB3aWR0aDogMjAgfSxcclxuICAgIHsgaGVhZGVyOiAnICAgICAgUkFNJywgd2lkdGg6IDEwIH0sXHJcbiAgXTtcclxuXHJcbiAgUHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG59XHJcbiJdfQ==\",\"filename\":\"ll.js\",\"server\":\"home\"}}],[\"execute.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers, formatTime, doWeaken, doGrowWeaken, doHackWeakenGrowWeaken, getSlaves, getTotalThreads } from \\\"util\\\";\\r\\nimport { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\n// function calcGainPerMS(ns: NS, target: string): number {\\r\\n//   const servers = getAllServers(ns);\\r\\n//   const slaves = servers.filter(s => s !== 'home').filter(s => ns.getServerMaxRam(s) > 0 && ns.hasRootAccess(s));\\r\\n//   const totalThreads = slaves.reduce((count, slave) => count + Math.floor(ns.getServerMaxRam(slave) / HGW_RAM), 0);\\r\\n//   const weakTime = Math.ceil(ns.getWeakenTime(target));\\r\\n//   const growSec = 0.004; // ns.growthAnalyzeSecurity(5, 'omega-net');\\r\\n//   const weakSec = 0.05; // ns.weakenAnalyze(1);\\r\\n//   const current = ns.getServerMoneyAvailable(target);\\r\\n//   let hackThreads = 1;\\r\\n//   let maxGain = 0;\\r\\n//   while (true) {\\r\\n//     const hackPercent = ns.hackAnalyze(target) * hackThreads;\\r\\n//     if (hackPercent > .9) break;\\r\\n//     const future = current - (current * hackPercent);\\r\\n//     const growMult = current / future;\\r\\n//     // ns.tprintf(`${hackPercent} ${growMult}`);\\r\\n//     const growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n//     const gain = current - future;\\r\\n//     const hwT = Math.ceil(ns.hackAnalyzeSecurity(hackThreads, target) / weakSec);\\r\\n//     const gwT = Math.ceil(growThreads / (weakSec / growSec));\\r\\n//     const totalHWGWThreads = hackThreads+hwT+growThreads+gwT;\\r\\n//     if (totalHWGWThreads > totalThreads) break;\\r\\n//     if (gain > maxGain) {\\r\\n//       maxGain = gain;\\r\\n//     }\\r\\n//     hackThreads++;\\r\\n//   }\\r\\n//   return maxGain / weakTime;\\r\\n// }\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    const slaves = getSlaves(ns);\\r\\n    const totalThreads = getTotalThreads(ns, slaves);\\r\\n    ns.tprintf(`  Total Threads: ${totalThreads}`);\\r\\n    const weakenPerRound = totalThreads * 0.05;\\r\\n    const targets = servers.filter(s => ns.getServerMaxMoney(s) > 0).filter(s => {\\r\\n        const weakenTime = ns.getWeakenTime(s);\\r\\n        const securityLevel = ns.getServerSecurityLevel(s);\\r\\n        const minSecurityLevel = ns.getServerMinSecurityLevel(s);\\r\\n        const weakenRounds = Math.ceil((securityLevel - minSecurityLevel) / weakenPerRound);\\r\\n        const fullWeakenTime = weakenTime * weakenRounds;\\r\\n        return fullWeakenTime < 1000 * 60 * 60 * 2;\\r\\n    }).sort((a, b) => ns.getServerMaxMoney(a) - ns.getServerMaxMoney(b));\\r\\n    const data = targets.map(s => {\\r\\n        const weakenTime = ns.getWeakenTime(s);\\r\\n        const securityLevel = ns.getServerSecurityLevel(s);\\r\\n        const minSecurityLevel = ns.getServerMinSecurityLevel(s);\\r\\n        const weakenRounds = Math.ceil((securityLevel - minSecurityLevel) / weakenPerRound);\\r\\n        const fullWeakenTime = weakenTime * weakenRounds;\\r\\n        return [\\r\\n            ` ${s}`,\\r\\n            ns.getServerBaseSecurityLevel(s).toString().padStart(9),\\r\\n            minSecurityLevel.toString().padStart(9),\\r\\n            securityLevel.toString().padStart(9),\\r\\n            formatTime(weakenTime).padStart(12),\\r\\n            // weakenRounds.toString().padStart(7),\\r\\n            formatTime(fullWeakenTime).padStart(12),\\r\\n            //weakenTime.toString(),\\r\\n            ns.formatNumber(ns.getServerMoneyAvailable(s), 3, 1000, true).padStart(10),\\r\\n            ns.formatNumber(ns.getServerMaxMoney(s), 3, 1000, true).padStart(10),\\r\\n            // ns.formatNumber(calcGainPerMS(ns, s), 3, 1000, true).padStart(10),\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: ' Servers', width: 20 },\\r\\n        { header: ' Base Sec', width: 10 },\\r\\n        { header: '  Min Sec', width: 10 },\\r\\n        { header: '      Sec', width: 10 },\\r\\n        { header: ' Weaken Time', width: 13 },\\r\\n        // { header: ' Rounds', width: 8 },\\r\\n        { header: ' Full Weaken', width: 13 },\\r\\n        { header: '     Money', width: 11 },\\r\\n        { header: ' Max Money', width: 11 },\\r\\n        // { header: '   Gain/ms', width: 11 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n    if (ns.args.length > 0 && ns.args[0] === 'PEEK') {\\r\\n        return;\\r\\n    }\\r\\n    // Weaken always reduces security by 0.05 per thread\\r\\n    // copy hgw scripts to slave machines\\r\\n    for (const s of slaves) {\\r\\n        if (s === 'home')\\r\\n            continue;\\r\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n    }\\r\\n    let target = 'phantasy';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    // fully weaken the target\\r\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        await doWeaken(ns, target);\\r\\n    }\\r\\n    ns.tprintf(`${target} fully weakened`);\\r\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n        await doGrowWeaken(ns, target);\\r\\n    ns.tprintf(`${target} fully grown`);\\r\\n    while (true) {\\r\\n        await doHackWeakenGrowWeaken(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3SCxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUQsMkRBQTJEO0FBQzNELHVDQUF1QztBQUN2QyxvSEFBb0g7QUFDcEgsc0hBQXNIO0FBRXRILDBEQUEwRDtBQUUxRCx3RUFBd0U7QUFDeEUsa0RBQWtEO0FBRWxELHdEQUF3RDtBQUN4RCx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQixnRUFBZ0U7QUFDaEUsbUNBQW1DO0FBQ25DLHdEQUF3RDtBQUN4RCx5Q0FBeUM7QUFDekMsbURBQW1EO0FBQ25ELHlFQUF5RTtBQUN6RSxxQ0FBcUM7QUFFckMsb0ZBQW9GO0FBQ3BGLGdFQUFnRTtBQUNoRSxnRUFBZ0U7QUFDaEUsa0RBQWtEO0FBRWxELDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsUUFBUTtBQUVSLHFCQUFxQjtBQUNyQixNQUFNO0FBRU4sK0JBQStCO0FBQy9CLElBQUk7QUFFSixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVqRCxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBRS9DLE1BQU0sY0FBYyxHQUFHLFlB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LE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMvRSxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDNUI7SUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXZDLE9BQU0sRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7UUFDckUsTUFBTSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWpDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLGNBQWMsQ0FBQyxDQUFDO0lBRXBDLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDMUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMsIGZvcm1hdFRpbWUsIGRvV2Vha2VuLCBkb0dyb3dXZWFrZW4sIGRvSGFja1dlYWtlbkdyb3dXZWFrZW4sIGdldFNsYXZlcywgZ2V0VG90YWxUaHJlYWRzIH0gZnJvbSBcInV0aWxcIjtcclxuaW1wb3J0IHsgUHJpbnRUYWJsZSwgQ29sb3JQcmludCwgRGVmYXVsdFN0eWxlIH0gZnJvbSBcInRhYmxlc1wiO1xyXG5cclxuLy8gZnVuY3Rpb24gY2FsY0dhaW5QZXJNUyhuczogTlMsIHRhcmdldDogc3RyaW5nKTogbnVtYmVyIHtcclxuLy8gICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcbi8vICAgY29uc3Qgc2xhdmVzID0gc2VydmVycy5maWx0ZXIocyA9PiBzICE9PSAnaG9tZScpLmZpbHRlcihzID0+IG5zLmdldFNlcnZlck1heFJhbShzKSA+IDAgJiYgbnMuaGFzUm9vdEFjY2VzcyhzKSk7XHJcbi8vICAgY29uc3QgdG90YWxUaHJlYWRzID0gc2xhdmVzLnJlZHVjZSgoY291bnQsIHNsYXZlKSA9PiBjb3VudCArIE1hdGguZmxvb3IobnMuZ2V0U2VydmVyTWF4UmFtKHNsYXZlKSAvIEhHV19SQU0pLCAwKTtcclxuXHJcbi8vICAgY29uc3Qgd2Vha1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuXHJcbi8vICAgY29uc3QgZ3Jvd1NlYyA9IDAuMDA0OyAvLyBucy5ncm93dGhBbmFseXplU2VjdXJpdHkoNSwgJ29tZWdhLW5ldCcpO1xyXG4vLyAgIGNvbnN0IHdlYWtTZWMgPSAwLjA1OyAvLyBucy53ZWFrZW5BbmFseXplKDEpO1xyXG5cclxuLy8gICBjb25zdCBjdXJyZW50ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcclxuLy8gICBsZXQgaGFja1RocmVhZHMgPSAxO1xyXG4vLyAgIGxldCBtYXhHYWluID0gMDtcclxuLy8gICB3aGlsZSAodHJ1ZSkge1xyXG4vLyAgICAgY29uc3QgaGFja1BlcmNlbnQgPSBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpICogaGFja1RocmVhZHM7XHJcbi8vICAgICBpZiAoaGFja1BlcmNlbnQgPiAuOSkgYnJlYWs7XHJcbi8vICAgICBjb25zdCBmdXR1cmUgPSBjdXJyZW50IC0gKGN1cnJlbnQgKiBoYWNrUGVyY2VudCk7XHJcbi8vICAgICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XHJcbi8vICAgICAvLyBucy50cHJpbnRmKGAke2hhY2tQZXJjZW50fSAke2dyb3dNdWx0fWApO1xyXG4vLyAgICAgY29uc3QgZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIGdyb3dNdWx0KSk7XHJcbi8vICAgICBjb25zdCBnYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuXHJcbi8vICAgICBjb25zdCBod1QgPSBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVTZWN1cml0eShoYWNrVGhyZWFkcywgdGFyZ2V0KSAvIHdlYWtTZWMpO1xyXG4vLyAgICAgY29uc3QgZ3dUID0gTWF0aC5jZWlsKGdyb3dUaHJlYWRzIC8gKHdlYWtTZWMgLyBncm93U2VjKSk7XHJcbi8vICAgICBjb25zdCB0b3RhbEhXR1dUaHJlYWRzID0gaGFja1RocmVhZHMraHdUK2dyb3dUaHJlYWRzK2d3VDtcclxuLy8gICAgIGlmICh0b3RhbEhXR1dUaHJlYWRzID4gdG90YWxUaHJlYWRzKSBicmVhaztcclxuXHJcbi8vICAgICBpZiAoZ2FpbiA+IG1heEdhaW4pIHtcclxuLy8gICAgICAgbWF4R2FpbiA9IGdhaW47XHJcbi8vICAgICB9XHJcbiAgICBcclxuLy8gICAgIGhhY2tUaHJlYWRzKys7XHJcbi8vICAgfVxyXG5cclxuLy8gICByZXR1cm4gbWF4R2FpbiAvIHdlYWtUaW1lO1xyXG4vLyB9XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcbiAgY29uc3Qgc2xhdmVzID0gZ2V0U2xhdmVzKG5zKTtcclxuICBjb25zdCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XHJcblxyXG4gIG5zLnRwcmludGYoYCAgVG90YWwgVGhyZWFkczogJHt0b3RhbFRocmVhZHN9YCk7XHJcblxyXG4gIGNvbnN0IHdlYWtlblBlclJvdW5kID0gdG90YWxUaHJlYWRzICogMC4wNTtcclxuXHJcbiAgY29uc3QgdGFyZ2V0cyA9IHNlcnZlcnMuZmlsdGVyKHMgPT4gbnMuZ2V0U2VydmVyTWF4TW9uZXkocykgPiAwKS5maWx0ZXIocyA9PiB7XHJcbiAgICBjb25zdCB3ZWFrZW5UaW1lID0gbnMuZ2V0V2Vha2VuVGltZShzKTtcclxuICAgIGNvbnN0IHNlY3VyaXR5TGV2ZWwgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHMpO1xyXG4gICAgY29uc3QgbWluU2VjdXJpdHlMZXZlbCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwocyk7XHJcbiAgICBjb25zdCB3ZWFrZW5Sb3VuZHMgPSBNYXRoLmNlaWwoKHNlY3VyaXR5TGV2ZWwgLSBtaW5TZWN1cml0eUxldmVsKSAvIHdlYWtlblBlclJvdW5kKTtcclxuICAgIGNvbnN0IGZ1bGxXZWFrZW5UaW1lID0gd2Vha2VuVGltZSAqIHdlYWtlblJvdW5kcztcclxuXHJcbiAgICByZXR1cm4gZnVsbFdlYWtlblRpbWUgPCAxMDAwICogNjAgKiA2MCAqIDI7XHJcbiAgfSkuc29ydCgoYSwgYikgPT4gbnMuZ2V0U2VydmVyTWF4TW9uZXkoYSkgLSBucy5nZXRTZXJ2ZXJNYXhNb25leShiKSk7XHJcblxyXG4gIGNvbnN0IGRhdGEgPSB0YXJnZXRzLm1hcChzID0+IHtcclxuICAgIGNvbnN0IHdlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHMpO1xyXG4gICAgY29uc3Qgc2VjdXJpdHlMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwocyk7XHJcbiAgICBjb25zdCBtaW5TZWN1cml0eUxldmVsID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzKTtcclxuICAgIGNvbnN0IHdlYWtlblJvdW5kcyA9IE1hdGguY2VpbCgoc2VjdXJpdHlMZXZlbCAtIG1pblNlY3VyaXR5TGV2ZWwpIC8gd2Vha2VuUGVyUm91bmQpO1xyXG4gICAgY29uc3QgZnVsbFdlYWtlblRpbWUgPSB3ZWFrZW5UaW1lICogd2Vha2VuUm91bmRzO1xyXG5cclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAgJHtzfWAsXHJcbiAgICAgIG5zLmdldFNlcnZlckJhc2VTZWN1cml0eUxldmVsKHMpLnRvU3RyaW5nKCkucGFkU3RhcnQoOSksXHJcbiAgICAgIG1pblNlY3VyaXR5TGV2ZWwudG9TdHJpbmcoKS5wYWRTdGFydCg5KSxcclxuICAgICAgc2VjdXJpdHlMZXZlbC50b1N0cmluZygpLnBhZFN0YXJ0KDkpLFxyXG4gICAgICBmb3JtYXRUaW1lKHdlYWtlblRpbWUpLnBhZFN0YXJ0KDEyKSxcclxuICAgICAgLy8gd2Vha2VuUm91bmRzLnRvU3RyaW5nKCkucGFkU3RhcnQoNyksXHJcbiAgICAgIGZvcm1hdFRpbWUoZnVsbFdlYWtlblRpbWUpLnBhZFN0YXJ0KDEyKSxcclxuICAgICAgLy93ZWFrZW5UaW1lLnRvU3RyaW5nKCksXHJcbiAgICAgIG5zLmZvcm1hdE51bWJlcihucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzKSwgMywgMTAwMCwgdHJ1ZSkucGFkU3RhcnQoMTApLFxyXG4gICAgICBucy5mb3JtYXROdW1iZXIobnMuZ2V0U2VydmVyTWF4TW9uZXkocyksIDMsIDEwMDAsIHRydWUpLnBhZFN0YXJ0KDEwKSxcclxuICAgICAgLy8gbnMuZm9ybWF0TnVtYmVyKGNhbGNHYWluUGVyTVMobnMsIHMpLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCksXHJcbiAgICBdXHJcbiAgfSk7XHJcblxyXG5cdGNvbnN0IGNvbHVtbnMgPSBbXHJcblx0XHR7IGhlYWRlcjogJyBTZXJ2ZXJzJywgd2lkdGg6IDIwIH0sXHJcblx0XHR7IGhlYWRlcjogJyBCYXNlIFNlYycsIHdpZHRoOiAxMCB9LFxyXG4gICAgeyBoZWFkZXI6ICcgIE1pbiBTZWMnLCB3aWR0aDogMTAgfSxcclxuICAgIHsgaGVhZGVyOiAnICAgICAgU2VjJywgd2lkdGg6IDEwIH0sXHJcbiAgICB7IGhlYWRlcjogJyBXZWFrZW4gVGltZScsIHdpZHRoOiAxMyB9LFxyXG4gICAgLy8geyBoZWFkZXI6ICcgUm91bmRzJywgd2lkdGg6IDggfSxcclxuICAgIHsgaGVhZGVyOiAnIEZ1bGwgV2Vha2VuJywgd2lkdGg6IDEzIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgICAgTW9uZXknLCB3aWR0aDogMTEgfSxcclxuXHRcdHsgaGVhZGVyOiAnIE1heCBNb25leScsIHdpZHRoOiAxMSB9LFxyXG4gICAgLy8geyBoZWFkZXI6ICcgICBHYWluL21zJywgd2lkdGg6IDExIH0sXHJcblx0XTtcclxuXHJcblx0UHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG5cclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIG5zLmFyZ3NbMF0gPT09ICdQRUVLJykge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gV2Vha2VuIGFsd2F5cyByZWR1Y2VzIHNlY3VyaXR5IGJ5IDAuMDUgcGVyIHRocmVhZFxyXG5cclxuICAvLyBjb3B5IGhndyBzY3JpcHRzIHRvIHNsYXZlIG1hY2hpbmVzXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICBucy5zY3AoWydoYWNrLmpzJywgJ2dyb3cuanMnLCAnd2Vha2VuLmpzJ10sIHMpO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhcmdldCA9ICdwaGFudGFzeSc7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gJ3N0cmluZycpIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIC8vIGZ1bGx5IHdlYWtlbiB0aGUgdGFyZ2V0XHJcbiAgd2hpbGUgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KSkge1xyXG4gICAgYXdhaXQgZG9XZWFrZW4obnMsIHRhcmdldCk7XHJcbiAgfVxyXG5cclxuICBucy50cHJpbnRmKGAke3RhcmdldH0gZnVsbHkgd2Vha2VuZWRgKTtcclxuXHJcbiAgd2hpbGUobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KSA8IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkpXHJcbiAgICBhd2FpdCBkb0dyb3dXZWFrZW4obnMsIHRhcmdldCk7XHJcblxyXG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fSBmdWxseSBncm93bmApO1xyXG5cclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgYXdhaXQgZG9IYWNrV2Vha2VuR3Jvd1dlYWtlbihucywgdGFyZ2V0KTtcclxuICB9XHJcbn1cclxuIl19\",\"filename\":\"execute.js\",\"server\":\"home\"}}],[\"ka.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = getAllServers(ns);\\r\\n    for (const s of servers) {\\r\\n        const scripts = ns.ps(s);\\r\\n        for (const script of scripts) {\\r\\n            // ns.tprintf(`killing ${s}:${script.filename}`)\\r\\n            if (script.filename !== 'ka.js')\\r\\n                ns.kill(script.pid);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQyxLQUFJLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUN0QixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzVCLGdEQUFnRDtZQUNoRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssT0FBTztnQkFDN0IsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QWxsU2VydmVycyB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucyk7XHJcblxyXG4gIGZvcihjb25zdCBzIG9mIHNlcnZlcnMpIHtcclxuICAgIGNvbnN0IHNjcmlwdHMgPSBucy5wcyhzKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHNjcmlwdCBvZiBzY3JpcHRzKSB7XHJcbiAgICAgIC8vIG5zLnRwcmludGYoYGtpbGxpbmcgJHtzfToke3NjcmlwdC5maWxlbmFtZX1gKVxyXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lICE9PSAna2EuanMnKVxyXG4gICAgICAgIG5zLmtpbGwoc2NyaXB0LnBpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==\",\"filename\":\"ka.js\",\"server\":\"home\"}}],[\"pserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nexport async function main(ns) {\\r\\n    const ramsizes = [];\\r\\n    for (let i = 0; i < 21; i++) {\\r\\n        ramsizes.push(Math.pow(2, i));\\r\\n    }\\r\\n    let maxSize = 0;\\r\\n    const data = ramsizes.map(sz => {\\r\\n        if (ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') && sz > maxSize)\\r\\n            maxSize = sz;\\r\\n        return [\\r\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: ns.formatRam(sz).padStart(9) },\\r\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: ns.formatNumber(ns.getPurchasedServerCost(sz), 3, 1000, true).padStart(11) },\\r\\n            { color: ns.getPurchasedServerCost(sz) <= ns.getServerMoneyAvailable('home') ? 'green' : 'white', text: Math.log2(sz).toString() },\\r\\n        ];\\r\\n    });\\r\\n    const columns = [\\r\\n        { header: '      RAM', width: 10 },\\r\\n        { header: '       Cost', width: 12 },\\r\\n        { header: '       pow', width: 12 }\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n    if (ns.args.length > 0) {\\r\\n        while (ns.getPurchasedServerCost(maxSize) <= ns.getServerMoneyAvailable('home') && ns.getPurchasedServers().length < 25 && maxSize === Math.pow(2, 20)) {\\r\\n            const purchasedServers = ns.getPurchasedServers().sort((a, b) => {\\r\\n                const aval = Number(a.split('-')[1]);\\r\\n                const bval = Number(b.split('-')[1]);\\r\\n                return aval - bval;\\r\\n            });\\r\\n            let newServerNumber = 1;\\r\\n            if (purchasedServers.length > 0)\\r\\n                newServerNumber = Number(purchasedServers[purchasedServers.length - 1].split('-')[1]) + 1;\\r\\n            ns.tprintf(`Purchasing Server PS-${newServerNumber} with ${ns.formatRam(maxSize)} RAM`);\\r\\n            ns.purchaseServer(`PS-${newServerNumber.toString().padStart(2, '0')}`, maxSize);\\r\\n        }\\r\\n    }\\r\\n    //   if (ns.args.length > 0) {\\r\\n    //     const purchasedServers = ns.getPurchasedServers().sort((a, b) => {\\r\\n    //       const aval = Number(a.split('-')[1]);\\r\\n    //       const bval = Number(b.split('-')[1]);\\r\\n    //       return aval - bval;\\r\\n    //     });\\r\\n    //     let newServerNumber = 1;\\r\\n    //     if (purchasedServers.length > 0)\\r\\n    //       newServerNumber = Number(purchasedServers[purchasedServers.length-1].split('-')[1])+1;\\r\\n    //     ns.tprintf(`Purchasing Server PS-${newServerNumber} with ${ns.formatRam(maxSize)} RAM`);\\r\\n    //     ns.purchaseServer(`PS-${newServerNumber.toString().padStart(2, '0')}`, maxSize);\\r\\n    // }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztJQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM5QjtJQUVELElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNoQixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQzdCLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsT0FBTztZQUNyRixPQUFPLEdBQUcsRUFBRSxDQUFDO1FBRWYsT0FBTztZQUNMLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0SSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0s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dCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgUHJpbnRUYWJsZSwgQ29sb3JQcmludCwgRGVmYXVsdFN0eWxlIH0gZnJvbSBcInRhYmxlc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgcmFtc2l6ZXM6IG51bWJlcltdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMTsgaSsrKSB7XHJcbiAgICByYW1zaXplcy5wdXNoKE1hdGgucG93KDIsIGkpKVxyXG4gIH1cclxuXHJcbiAgbGV0IG1heFNpemUgPSAwO1xyXG4gIGNvbnN0IGRhdGEgPSByYW1zaXplcy5tYXAoc3ogPT4ge1xyXG4gICAgaWYgKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3Qoc3opIDw9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgJiYgc3ogPiBtYXhTaXplKVxyXG4gICAgICBtYXhTaXplID0gc3o7XHJcblxyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyBjb2xvcjogbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeikgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA/ICdncmVlbicgOiAnd2hpdGUnLCB0ZXh0OiBucy5mb3JtYXRSYW0oc3opLnBhZFN0YXJ0KDkpIH0sXHJcbiAgICAgIHsgY29sb3I6IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3Qoc3opIDw9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJykgPyAnZ3JlZW4nIDogJ3doaXRlJywgdGV4dDogbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3Qoc3opLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMSkgfSxcclxuICAgICAgeyBjb2xvcjogbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChzeikgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSA/ICdncmVlbicgOiAnd2hpdGUnLCB0ZXh0OiBNYXRoLmxvZzIoc3opLnRvU3RyaW5nKCkgfSxcclxuICAgIF1cclxuICB9KTtcclxuXHJcblx0Y29uc3QgY29sdW1ucyA9IFtcclxuXHRcdHsgaGVhZGVyOiAnICAgICAgUkFNJywgd2lkdGg6IDEwIH0sXHJcblx0XHR7IGhlYWRlcjogJyAgICAgICBDb3N0Jywgd2lkdGg6IDEyIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgICAgICBwb3cnLCB3aWR0aDogMTIgfVxyXG5cdF07XHJcblxyXG5cdFByaW50VGFibGUobnMsIGRhdGEsIGNvbHVtbnMsIERlZmF1bHRTdHlsZSgpLCBDb2xvclByaW50KTtcclxuXHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgd2hpbGUgKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QobWF4U2l6ZSkgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKSAmJiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkubGVuZ3RoIDwgMjUgJiYgbWF4U2l6ZSA9PT0gTWF0aC5wb3coMiwgMjApKSB7XHJcbiAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGF2YWwgPSBOdW1iZXIoYS5zcGxpdCgnLScpWzFdKTtcclxuICAgICAgICBjb25zdCBidmFsID0gTnVtYmVyKGIuc3BsaXQoJy0nKVsxXSk7XHJcbiAgICAgICAgcmV0dXJuIGF2YWwgLSBidmFsO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGxldCBuZXdTZXJ2ZXJOdW1iZXIgPSAxO1xyXG4gICAgICBpZiAocHVyY2hhc2VkU2VydmVycy5sZW5ndGggPiAwKVxyXG4gICAgICAgIG5ld1NlcnZlck51bWJlciA9IE51bWJlcihwdXJjaGFzZWRTZXJ2ZXJzW3B1cmNoYXNlZFNlcnZlcnMubGVuZ3RoLTFdLnNwbGl0KCctJylbMV0pKzE7XHJcblxyXG4gICAgICBucy50cHJpbnRmKGBQdXJjaGFzaW5nIFNlcnZlciBQUy0ke25ld1NlcnZlck51bWJlcn0gd2l0aCAke25zLmZvcm1hdFJhbShtYXhTaXplKX0gUkFNYCk7XHJcbiAgICAgIG5zLnB1cmNoYXNlU2VydmVyKGBQUy0ke25ld1NlcnZlck51bWJlci50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9YCwgbWF4U2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyAgIGlmIChucy5hcmdzLmxlbmd0aCA+IDApIHtcclxuICAvLyAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgLy8gICAgICAgY29uc3QgYXZhbCA9IE51bWJlcihhLnNwbGl0KCctJylbMV0pO1xyXG4gIC8vICAgICAgIGNvbnN0IGJ2YWwgPSBOdW1iZXIoYi5zcGxpdCgnLScpWzFdKTtcclxuICAvLyAgICAgICByZXR1cm4gYXZhbCAtIGJ2YWw7XHJcbiAgLy8gICAgIH0pO1xyXG5cclxuICAvLyAgICAgbGV0IG5ld1NlcnZlck51bWJlciA9IDE7XHJcbiAgLy8gICAgIGlmIChwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aCA+IDApXHJcbiAgLy8gICAgICAgbmV3U2VydmVyTnVtYmVyID0gTnVtYmVyKHB1cmNoYXNlZFNlcnZlcnNbcHVyY2hhc2VkU2VydmVycy5sZW5ndGgtMV0uc3BsaXQoJy0nKVsxXSkrMTtcclxuXHJcbiAgLy8gICAgIG5zLnRwcmludGYoYFB1cmNoYXNpbmcgU2VydmVyIFBTLSR7bmV3U2VydmVyTnVtYmVyfSB3aXRoICR7bnMuZm9ybWF0UmFtKG1heFNpemUpfSBSQU1gKTtcclxuICAvLyAgICAgbnMucHVyY2hhc2VTZXJ2ZXIoYFBTLSR7bmV3U2VydmVyTnVtYmVyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gLCBtYXhTaXplKTtcclxuICAvLyB9XHJcbn0iXX0=\",\"filename\":\"pserver.js\",\"server\":\"home\"}}],[\"super-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, waitForHGWScripts } from \\\"util\\\";\\r\\n// TODO:\\r\\n// [x] Use Home RAM, leaving 32GB free for other execution\\r\\n// [x] Instead of W / GW / HWGW progression, start directly on HWGW and account for increased Grow and Weaken need\\r\\n// [x] Implement multiple batches in a single cycle when there are surplus threads\\r\\n// [ ] Re-check hackable servers every round\\r\\n// [x] Incorporate formulas if available\\r\\n// [ ] Purchase new servers?\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 10;\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers; // This script autocompletes the list of servers.\\r\\n}\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction getScriptCalls(batches) {\\r\\n    const scripts = [];\\r\\n    for (const batch of batches) {\\r\\n        if (batch.growThreads > 0) {\\r\\n            scripts.push({\\r\\n                script: \\\"grow.js\\\",\\r\\n                threads: batch.growThreads,\\r\\n                offset: batch.growMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.growWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.growWeakenThreads,\\r\\n                offset: batch.growWeakenMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"hack.js\\\",\\r\\n                threads: batch.hackThreads,\\r\\n                offset: batch.hackMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.hackWeakenThreads,\\r\\n                offset: batch.hackWeakenMsBuf\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return scripts.sort((a, b) => b.threads - a.threads);\\r\\n}\\r\\nasync function cycle(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    let totalThreads = getTotalThreads(ns, slaves);\\r\\n    const batches = [];\\r\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\r\\n    const weakenTime = Math.ceil(ns.getWeakenTime(target));\\r\\n    const growTime = Math.ceil(ns.getGrowTime(target));\\r\\n    const hackTime = Math.ceil(ns.getHackTime(target));\\r\\n    // first batch is always GW if the server is not already at min security / max money\\r\\n    // find out how many threads are required to grow to max\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\r\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\r\\n        const batch = new HackBatch();\\r\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        const growMult = ns.getServerMaxMoney(target) / (ns.getServerMoneyAvailable(target) + 1);\\r\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n            growSecIncrease = GROW_SEC * totalThreads;\\r\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n        }\\r\\n        const batchMSOffset = baseMSOffset;\\r\\n        batch.weakenTime = weakenTime;\\r\\n        batch.growTime = growTime;\\r\\n        batch.hackTime = hackTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        batches.push(batch);\\r\\n        totalThreads -= batch.totalThreads();\\r\\n    }\\r\\n    while (totalThreads > 0) {\\r\\n        // from now on assume we are at minimum security, maximum money available\\r\\n        const mockTarget = ns.getServer(target);\\r\\n        mockTarget.hackDifficulty = ns.getServerMinSecurityLevel(target);\\r\\n        mockTarget.moneyAvailable = ns.getServerMaxMoney(target);\\r\\n        mockTarget.moneyMax = ns.getServerMaxMoney(target);\\r\\n        const batch = new HackBatch();\\r\\n        const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n        batch.weakenTime = weakenTime;\\r\\n        batch.growTime = growTime;\\r\\n        batch.hackTime = hackTime;\\r\\n        batch.hackMSBuf = batchMSOffset - batch.hackTime - MS_BETWEEN_OPERATIONS;\\r\\n        batch.hackWeakenMsBuf = batchMSOffset - batch.weakenTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        // start with hack 50%\\r\\n        batch.hackThreads = Math.ceil(.8 / ns.formulas.hacking.hackPercent(mockTarget, ns.getPlayer()));\\r\\n        let missedOnce = false;\\r\\n        while (true) {\\r\\n            if (batch.hackThreads <= 0) {\\r\\n                totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n            const hackPercent = ns.formulas.hacking.hackPercent(mockTarget, ns.getPlayer()) * batch.hackThreads;\\r\\n            const current = mockTarget.moneyAvailable;\\r\\n            const future = current - (current * hackPercent);\\r\\n            mockTarget.moneyAvailable = future;\\r\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(mockTarget, ns.getPlayer(), ns.getServerMaxMoney(target)) * 1.2);\\r\\n            mockTarget.moneyAvailable = mockTarget.moneyMax;\\r\\n            batch.gain = current - future;\\r\\n            batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, target) / WEAK_SEC);\\r\\n            batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\r\\n            if (batch.totalThreads() <= totalThreads) {\\r\\n                totalThreads -= batch.totalThreads();\\r\\n                batches.push(batch);\\r\\n                if (missedOnce)\\r\\n                    totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n            batch.hackThreads = Math.floor(batch.hackThreads * 0.75);\\r\\n            missedOnce = true;\\r\\n        }\\r\\n        // duplicate batch until there is no space left\\r\\n        const batchThreads = batch.totalThreads();\\r\\n        const additionalBatches = Math.floor(totalThreads / batchThreads);\\r\\n        for (let i = 0; i < additionalBatches; ++i) {\\r\\n            const newBatch = new HackBatch;\\r\\n            Object.assign(newBatch, batch);\\r\\n            const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n            newBatch.hackMSBuf = batchMSOffset - newBatch.hackTime - MS_BETWEEN_OPERATIONS;\\r\\n            newBatch.hackWeakenMsBuf = batchMSOffset - newBatch.weakenTime;\\r\\n            newBatch.growMSBuf = batchMSOffset - newBatch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n            newBatch.growWeakenMSBuf = batchMSOffset - newBatch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n            batches.push(newBatch);\\r\\n            totalThreads -= newBatch.totalThreads();\\r\\n        }\\r\\n    }\\r\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\r\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n    ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\r\\n    // ns.tprintf(`${target}: First Batch | ht:${batches[0].hackThreads} | hwt:${batches[0].hackWeakenThreads} | gt:${batches[0].growThreads} | gwt:${batches[0].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Second Batch | ht:${batches[1].hackThreads} | hwt:${batches[1].hackWeakenThreads} | gt:${batches[1].growThreads} | gwt:${batches[1].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Last Batch | ht:${batches[batches.length-1].hackThreads} | hwt:${batches[batches.length-1].hackWeakenThreads} | gt:${batches[batches.length-1].growThreads} | gwt:${batches[batches.length-1].growWeakenThreads}`)\\r\\n    const scripts = getScriptCalls(batches);\\r\\n    let script = scripts.shift();\\r\\n    for (const s of slaves) {\\r\\n        if (script === undefined)\\r\\n            break;\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        while (slaveThreads > 0) {\\r\\n            if (script === undefined)\\r\\n                break;\\r\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\r\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\r\\n            slaveThreads -= scriptThreads;\\r\\n            script.threads -= scriptThreads;\\r\\n            if (script.threads === 0)\\r\\n                script = scripts.shift();\\r\\n        }\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    const slaves = getSlaves(ns);\\r\\n    // copy hgw scripts to slave machines\\r\\n    for (const s of slaves) {\\r\\n        if (s === 'home')\\r\\n            continue;\\r\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n    }\\r\\n    let target = 'nectar-net';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    while (true) {\\r\\n        await cycle(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXBlci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbEcsUUFBUTtBQUNSLDBEQUEwRDtBQUMxRCxrSEFBa0g7QUFDbEgsa0ZBQWtGO0FBQ2xGLDRDQUE0QztBQUM1Qyx3Q0FBd0M7QUFDeEMsNEJBQTRCO0FBRTVCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUNwRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyx1QkFBdUI7QUFDOUMsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFFakMsb0pBQW9KO0FBQ3BKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsaURBQWlEO0FBQ3hFLENBQUM7QUFzQkQsTUFBTSxTQUFTO0lBQ2IsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFFdEIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUVULFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUks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QUN0QixJQUFJLENBQUMsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNoRDtJQUVELElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQztJQUMxQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlFLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3pCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBmb3JtYXRUaW1lLCBnZXRTbGF2ZXMsIGdldFNsYXZlVGhyZWFkcywgZ2V0VG90YWxUaHJlYWRzLCB3YWl0Rm9ySEdXU2NyaXB0cyB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG4vLyBUT0RPOlxyXG4vLyBbeF0gVXNlIEhvbWUgUkFNLCBsZWF2aW5nIDMyR0IgZnJlZSBmb3Igb3RoZXIgZXhlY3V0aW9uXHJcbi8vIFt4XSBJbnN0ZWFkIG9mIFcgLyBHVyAvIEhXR1cgcHJvZ3Jlc3Npb24sIHN0YXJ0IGRpcmVjdGx5IG9uIEhXR1cgYW5kIGFjY291bnQgZm9yIGluY3JlYXNlZCBHcm93IGFuZCBXZWFrZW4gbmVlZFxyXG4vLyBbeF0gSW1wbGVtZW50IG11bHRpcGxlIGJhdGNoZXMgaW4gYSBzaW5nbGUgY3ljbGUgd2hlbiB0aGVyZSBhcmUgc3VycGx1cyB0aHJlYWRzXHJcbi8vIFsgXSBSZS1jaGVjayBoYWNrYWJsZSBzZXJ2ZXJzIGV2ZXJ5IHJvdW5kXHJcbi8vIFt4XSBJbmNvcnBvcmF0ZSBmb3JtdWxhcyBpZiBhdmFpbGFibGVcclxuLy8gWyBdIFB1cmNoYXNlIG5ldyBzZXJ2ZXJzP1xyXG5cclxuY29uc3QgR1JPV19TRUMgPSAwLjAwNDsgLy8gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KDEsICdvbWVnYS1uZXQnKTtcclxuY29uc3QgV0VBS19TRUMgPSAwLjA1OyAvLyBucy53ZWFrZW5BbmFseXplKDEpO1xyXG5jb25zdCBNU19CRVRXRUVOX09QRVJBVElPTlMgPSAxMDtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZShkYXRhOiBhbnksIGFyZ3M6IGFueSk6IHN0cmluZ1tdIHtcclxuICByZXR1cm4gZGF0YS5zZXJ2ZXJzOyAvLyBUaGlzIHNjcmlwdCBhdXRvY29tcGxldGVzIHRoZSBsaXN0IG9mIHNlcnZlcnMuXHJcbn1cclxuXHJcbmludGVyZmFjZSBJSGFja0JhdGNoIHtcclxuICBncm93VGhyZWFkczogbnVtYmVyO1xyXG4gIGdyb3dXZWFrZW5UaHJlYWRzOiBudW1iZXI7XHJcbiAgaGFja1RocmVhZHM6IG51bWJlcjtcclxuICBoYWNrV2Vha2VuVGhyZWFkczogbnVtYmVyO1xyXG5cclxuICBoYWNrVGltZTogbnVtYmVyO1xyXG4gIGdyb3dUaW1lOiBudW1iZXI7XHJcbiAgd2Vha2VuVGltZTogbnVtYmVyO1xyXG5cclxuICBncm93TVNCdWY6IG51bWJlcjtcclxuICBncm93V2Vha2VuTVNCdWY6IG51bWJlcjtcclxuICBoYWNrTVNCdWY6IG51bWJlcjtcclxuICBoYWNrV2Vha2VuTXNCdWY6IG51bWJlcjtcclxuXHJcbiAgZ2FpbjogbnVtYmVyO1xyXG5cclxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBIYWNrQmF0Y2ggaW1wbGVtZW50cyBJSGFja0JhdGNoIHtcclxuICBncm93VGhyZWFkcyA9IDA7XHJcbiAgZ3Jvd1dlYWtlblRocmVhZHMgPSAwO1xyXG4gIGhhY2tUaHJlYWRzID0gMDtcclxuICBoYWNrV2Vha2VuVGhyZWFkcyA9IDA7XHJcblxyXG4gIGhhY2tUaW1lID0gMDtcclxuICBncm93VGltZSA9IDA7XHJcbiAgd2Vha2VuVGltZSA9IDA7XHJcblxyXG4gIGdyb3dNU0J1ZiA9IDA7XHJcbiAgZ3Jvd1dlYWtlbk1TQnVmID0gMDtcclxuICBoYWNrTVNCdWYgPSAwO1xyXG4gIGhhY2tXZWFrZW5Nc0J1ZiA9IDA7XHJcblxyXG4gIGdhaW4gPSAwO1xyXG5cclxuICB0b3RhbFRocmVhZHMoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdyb3dUaHJlYWRzICsgdGhpcy5ncm93V2Vha2VuVGhyZWFkcyArIHRoaXMuaGFja1RocmVhZHMgKyB0aGlzLmhhY2tXZWFrZW5UaHJlYWRzO1xyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIElTY3JpcHRDYWxsIHtcclxuICBzY3JpcHQ6IHN0cmluZztcclxuICB0aHJlYWRzOiBudW1iZXI7XHJcbiAgb2Zmc2V0OiBudW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFNjcmlwdENhbGxzKGJhdGNoZXM6IElIYWNrQmF0Y2hbXSk6IElTY3JpcHRDYWxsW10ge1xyXG4gIGNvbnN0IHNjcmlwdHM6IElTY3JpcHRDYWxsW10gPSBbXTtcclxuICBmb3IgKGNvbnN0IGJhdGNoIG9mIGJhdGNoZXMpIHtcclxuICAgIGlmIChiYXRjaC5ncm93VGhyZWFkcyA+IDApIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBzY3JpcHQ6IFwiZ3Jvdy5qc1wiLFxyXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dUaHJlYWRzLFxyXG4gICAgICAgIG9mZnNldDogYmF0Y2guZ3Jvd01TQnVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcIndlYWtlbi5qc1wiLFxyXG4gICAgICAgIHRocmVhZHM6IGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzLFxyXG4gICAgICAgIG9mZnNldDogYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJhdGNoLmhhY2tUaHJlYWRzKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcImhhY2suanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5oYWNrVGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmhhY2tNU0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcykge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmhhY2tXZWFrZW5Nc0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNjcmlwdHMuc29ydCgoYSwgYikgPT4gYi50aHJlYWRzIC0gYS50aHJlYWRzKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY3ljbGUobnM6IE5TLCB0YXJnZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHNsYXZlcyA9IGdldFNsYXZlcyhucyk7XHJcbiAgbGV0IHRvdGFsVGhyZWFkcyA9IGdldFRvdGFsVGhyZWFkcyhucywgc2xhdmVzKTtcclxuXHJcbiAgY29uc3QgYmF0Y2hlczogSUhhY2tCYXRjaFtdID0gW107XHJcblxyXG4gIGNvbnN0IGJhc2VNU09mZnNldCA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG4gIGNvbnN0IHdlYWtlblRpbWUgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBncm93VGltZSA9IE1hdGguY2VpbChucy5nZXRHcm93VGltZSh0YXJnZXQpKTtcclxuICBjb25zdCBoYWNrVGltZSA9IE1hdGguY2VpbChucy5nZXRIYWNrVGltZSh0YXJnZXQpKTtcclxuXHJcbiAgLy8gZmlyc3QgYmF0Y2ggaXMgYWx3YXlzIEdXIGlmIHRoZSBzZXJ2ZXIgaXMgbm90IGFscmVhZHkgYXQgbWluIHNlY3VyaXR5IC8gbWF4IG1vbmV5XHJcbiAgLy8gZmluZCBvdXQgaG93IG1hbnkgdGhyZWFkcyBhcmUgcmVxdWlyZWQgdG8gZ3JvdyB0byBtYXhcclxuICBpZiAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpID4gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpIHx8XHJcbiAgICAgIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKVxyXG4gIHtcclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmFzZVdlYWtlbiA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSAtIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgY29uc3QgZ3Jvd011bHQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcclxuICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkpO1xyXG4gICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0O1xyXG4gICAgYmF0Y2gud2Vha2VuVGltZSA9IHdlYWtlblRpbWU7XHJcbiAgICBiYXRjaC5ncm93VGltZSA9IGdyb3dUaW1lO1xyXG4gICAgYmF0Y2guaGFja1RpbWUgPSBoYWNrVGltZTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICB0b3RhbFRocmVhZHMgLT0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgfVxyXG5cclxuICB3aGlsZSAodG90YWxUaHJlYWRzID4gMCApIHtcclxuICAgIC8vIGZyb20gbm93IG9uIGFzc3VtZSB3ZSBhcmUgYXQgbWluaW11bSBzZWN1cml0eSwgbWF4aW11bSBtb25leSBhdmFpbGFibGVcclxuICAgIGNvbnN0IG1vY2tUYXJnZXQgPSBucy5nZXRTZXJ2ZXIodGFyZ2V0KTtcclxuICAgIG1vY2tUYXJnZXQuaGFja0RpZmZpY3VsdHkgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcbiAgICBtb2NrVGFyZ2V0Lm1vbmV5QXZhaWxhYmxlID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuICAgIG1vY2tUYXJnZXQubW9uZXlNYXggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmF0Y2hNU09mZnNldCA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpO1xyXG4gICAgXHJcbiAgICBiYXRjaC53ZWFrZW5UaW1lID0gd2Vha2VuVGltZTtcclxuICAgIGJhdGNoLmdyb3dUaW1lID0gZ3Jvd1RpbWU7XHJcbiAgICBiYXRjaC5oYWNrVGltZSA9IGhhY2tUaW1lO1xyXG5cclxuICAgIGJhdGNoLmhhY2tNU0J1ZiA9ICBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2guaGFja1RpbWUgLSBNU19CRVRXRUVOX09QRVJBVElPTlM7XHJcbiAgICBiYXRjaC5oYWNrV2Vha2VuTXNCdWYgPSBiYXRjaE1TT2Zmc2V0IC0gYmF0Y2gud2Vha2VuVGltZTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIC8vIHN0YXJ0IHdpdGggaGFjayA1MCVcclxuICAgIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKC44IC8gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChtb2NrVGFyZ2V0LCBucy5nZXRQbGF5ZXIoKSkpO1xyXG5cclxuICAgIGxldCBtaXNzZWRPbmNlID0gZmFsc2U7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMgPD0gMCkge1xyXG4gICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChtb2NrVGFyZ2V0LCBucy5nZXRQbGF5ZXIoKSkgKiBiYXRjaC5oYWNrVGhyZWFkcztcclxuICAgICAgY29uc3QgY3VycmVudDogbnVtYmVyID0gbW9ja1RhcmdldC5tb25leUF2YWlsYWJsZTtcclxuICAgICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gICAgICBtb2NrVGFyZ2V0Lm1vbmV5QXZhaWxhYmxlID0gZnV0dXJlO1xyXG4gICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5mb3JtdWxhcy5oYWNraW5nLmdyb3dUaHJlYWRzKG1vY2tUYXJnZXQsIG5zLmdldFBsYXllcigpLCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKSAqIDEuMik7XHJcbiAgICAgIG1vY2tUYXJnZXQubW9uZXlBdmFpbGFibGUgPSBtb2NrVGFyZ2V0Lm1vbmV5TWF4O1xyXG4gICAgICBiYXRjaC5nYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuICAgIFxyXG4gICAgICBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGJhdGNoLmhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xyXG4gICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChiYXRjaC5ncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XHJcblxyXG4gICAgICBpZiAoYmF0Y2gudG90YWxUaHJlYWRzKCkgPD0gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgdG90YWxUaHJlYWRzIC09IGJhdGNoLnRvdGFsVGhyZWFkcygpO1xyXG4gICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKG1pc3NlZE9uY2UpIFxyXG4gICAgICAgICAgdG90YWxUaHJlYWRzID0gMDtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5mbG9vcihiYXRjaC5oYWNrVGhyZWFkcyAqIDAuNzUpO1xyXG4gICAgICBtaXNzZWRPbmNlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkdXBsaWNhdGUgYmF0Y2ggdW50aWwgdGhlcmUgaXMgbm8gc3BhY2UgbGVmdFxyXG4gICAgY29uc3QgYmF0Y2hUaHJlYWRzID0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgICBjb25zdCBhZGRpdGlvbmFsQmF0Y2hlcyA9IE1hdGguZmxvb3IodG90YWxUaHJlYWRzIC8gYmF0Y2hUaHJlYWRzKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkaXRpb25hbEJhdGNoZXM7ICsraSkge1xyXG4gICAgICBjb25zdCBuZXdCYXRjaCA9IG5ldyBIYWNrQmF0Y2g7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24obmV3QmF0Y2gsIGJhdGNoKTtcclxuXHJcbiAgICAgIGNvbnN0IGJhdGNoTVNPZmZzZXQgPSBiYXNlTVNPZmZzZXQgKyAoYmF0Y2hlcy5sZW5ndGggKiBNU19CRVRXRUVOX09QRVJBVElPTlMgKiA0KTtcclxuICAgICAgbmV3QmF0Y2guaGFja01TQnVmID0gIGJhdGNoTVNPZmZzZXQgLSBuZXdCYXRjaC5oYWNrVGltZSAtIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgICAgbmV3QmF0Y2guaGFja1dlYWtlbk1zQnVmID0gYmF0Y2hNU09mZnNldCAtIG5ld0JhdGNoLndlYWtlblRpbWU7XHJcbiAgICAgIG5ld0JhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBuZXdCYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgICAgbmV3QmF0Y2guZ3Jvd1dlYWtlbk1TQnVmID0gYmF0Y2hNU09mZnNldCAtIG5ld0JhdGNoLndlYWtlblRpbWUgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XHJcbiAgICAgIFxyXG4gICAgICBiYXRjaGVzLnB1c2gobmV3QmF0Y2gpO1xyXG4gICAgICB0b3RhbFRocmVhZHMgLT0gbmV3QmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjeWNsZVRocmVhZHMgPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLnRvdGFsVGhyZWFkcygpLCAwKTtcclxuICBjb25zdCBjeWNsZUdhaW4gPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLmdhaW4sIDApO1xyXG4gIGNvbnN0IGN5Y2xlVGltZSA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogJHtiYXRjaGVzLmxlbmd0aH0gQmF0Y2hlcyB8ICR7Y3ljbGVUaHJlYWRzfSBUaHJlYWRzIHwgJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluLCAzLCAxMDAwLCB0cnVlKX0gR2FpbiB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcclxuICAvLyBucy50cHJpbnRmKGAke3RhcmdldH06IEZpcnN0IEJhdGNoIHwgaHQ6JHtiYXRjaGVzWzBdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbMF0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzWzBdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbMF0uZ3Jvd1dlYWtlblRocmVhZHN9YClcclxuICAvLyBucy50cHJpbnRmKGAke3RhcmdldH06IFNlY29uZCBCYXRjaCB8IGh0OiR7YmF0Y2hlc1sxXS5oYWNrVGhyZWFkc30gfCBod3Q6JHtiYXRjaGVzWzFdLmhhY2tXZWFrZW5UaHJlYWRzfSB8IGd0OiR7YmF0Y2hlc1sxXS5ncm93VGhyZWFkc30gfCBnd3Q6JHtiYXRjaGVzWzFdLmdyb3dXZWFrZW5UaHJlYWRzfWApXHJcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBMYXN0IEJhdGNoIHwgaHQ6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uZ3Jvd1dlYWtlblRocmVhZHN9YClcclxuXHJcbiAgY29uc3Qgc2NyaXB0cyA9IGdldFNjcmlwdENhbGxzKGJhdGNoZXMpO1xyXG4gIGxldCBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHNjcmlwdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcclxuXHJcbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcclxuICAgIHdoaWxlIChzbGF2ZVRocmVhZHMgPiAwKSB7XHJcbiAgICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcblxyXG4gICAgICBjb25zdCBzY3JpcHRUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBzY3JpcHQudGhyZWFkcyk7XHJcbiAgICAgIG5zLmV4ZWMoc2NyaXB0LnNjcmlwdCwgcywge3RlbXBvcmFyeTogdHJ1ZSwgdGhyZWFkczogc2NyaXB0VGhyZWFkc30sIHRhcmdldCwgc2NyaXB0Lm9mZnNldCk7XHJcbiAgICAgIHNsYXZlVGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xyXG4gICAgICBzY3JpcHQudGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xyXG5cclxuICAgICAgaWYgKHNjcmlwdC50aHJlYWRzID09PSAwKVxyXG4gICAgICAgIHNjcmlwdCA9IHNjcmlwdHMuc2hpZnQoKTsgICAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpOyAgXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG5cclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG5cclxuICAvLyBjb3B5IGhndyBzY3JpcHRzIHRvIHNsYXZlIG1hY2hpbmVzXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICBucy5zY3AoWydoYWNrLmpzJywgJ2dyb3cuanMnLCAnd2Vha2VuLmpzJ10sIHMpO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhcmdldCA9ICduZWN0YXItbmV0JztcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGF3YWl0IGN5Y2xlKG5zLCB0YXJnZXQpO1xyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"super-hack.js\",\"server\":\"home\"}}],[\"simple-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getSlaves, getSlaveThreads, getTotalThreads, waitForHGWScripts } from \\\"util\\\";\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 10;\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers; // This script autocompletes the list of servers.\\r\\n}\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction getScriptCalls(batches) {\\r\\n    const scripts = [];\\r\\n    for (const batch of batches) {\\r\\n        if (batch.growThreads > 0) {\\r\\n            scripts.push({\\r\\n                script: \\\"grow.js\\\",\\r\\n                threads: batch.growThreads,\\r\\n                offset: batch.growMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.growWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.growWeakenThreads,\\r\\n                offset: batch.growWeakenMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"hack.js\\\",\\r\\n                threads: batch.hackThreads,\\r\\n                offset: batch.hackMSBuf\\r\\n            });\\r\\n        }\\r\\n        if (batch.hackWeakenThreads) {\\r\\n            scripts.push({\\r\\n                script: \\\"weaken.js\\\",\\r\\n                threads: batch.hackWeakenThreads,\\r\\n                offset: batch.hackWeakenMsBuf\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return scripts.sort((a, b) => b.threads - a.threads);\\r\\n}\\r\\nasync function cycle(ns, target) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    let totalThreads = getTotalThreads(ns, slaves);\\r\\n    const batches = [];\\r\\n    const baseMSOffset = Math.ceil(ns.getWeakenTime(target));\\r\\n    // first batch is always GW if the server is not already at min security / max money\\r\\n    // find out how many threads are required to grow to max\\r\\n    if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target) ||\\r\\n        ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\r\\n        const batch = new HackBatch();\\r\\n        const baseWeaken = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target);\\r\\n        const growMult = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target);\\r\\n        batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult));\\r\\n        let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n        batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n        if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n            growSecIncrease = GROW_SEC * totalThreads;\\r\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n            batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n        }\\r\\n        const batchMSOffset = baseMSOffset;\\r\\n        batch.weakenTime = Math.ceil(ns.getWeakenTime(target));\\r\\n        batch.growTime = Math.ceil(ns.getGrowTime(target));\\r\\n        batch.hackTime = Math.ceil(ns.getHackTime(target));\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        batches.push(batch);\\r\\n        totalThreads = 0;\\r\\n    }\\r\\n    while (totalThreads > 0) {\\r\\n        // if (batches.length > 5) break;\\r\\n        // from now on assume we are at minimum security, maximum money available\\r\\n        const batch = new HackBatch();\\r\\n        const batchMSOffset = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4);\\r\\n        batch.hackTime = ns.getHackTime(target);\\r\\n        batch.growTime = ns.getGrowTime(target);\\r\\n        batch.weakenTime = ns.getWeakenTime(target);\\r\\n        batch.hackMSBuf = batchMSOffset - batch.hackTime - MS_BETWEEN_OPERATIONS;\\r\\n        batch.hackWeakenMsBuf = batchMSOffset - batch.weakenTime;\\r\\n        batch.growMSBuf = batchMSOffset - batch.growTime + MS_BETWEEN_OPERATIONS;\\r\\n        batch.growWeakenMSBuf = batchMSOffset - batch.weakenTime + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        // start with hack 50%\\r\\n        batch.hackThreads = Math.ceil(.3 / ns.hackAnalyze(target));\\r\\n        while (true) {\\r\\n            if (batch.hackThreads <= 0) {\\r\\n                totalThreads = 0;\\r\\n                break;\\r\\n            }\\r\\n            const hackPercent = ns.hackAnalyze(target) * batch.hackThreads;\\r\\n            const current = ns.getServerMaxMoney(target);\\r\\n            const future = current - (current * hackPercent);\\r\\n            const growMult = current / future;\\r\\n            batch.growThreads = Math.ceil(ns.growthAnalyze(target, growMult) * 1.3);\\r\\n            batch.gain = current - future;\\r\\n            batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, target) / WEAK_SEC);\\r\\n            batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\r\\n            if (batch.totalThreads() <= totalThreads) {\\r\\n                totalThreads -= batch.totalThreads();\\r\\n                batches.push(batch);\\r\\n                break;\\r\\n            }\\r\\n            batch.hackThreads--;\\r\\n        }\\r\\n    }\\r\\n    // if we're doing a lot of batches, cancel the last 2 and re-assing the threads to grow/weaken to prep for the next cycle\\r\\n    if (batches.length > 20) {\\r\\n        let trashThreads = 0;\\r\\n        const lastBatch = batches.pop();\\r\\n        trashThreads += lastBatch ? lastBatch.totalThreads() : 0;\\r\\n        trashThreads += batches[batches.length - 1].totalThreads();\\r\\n        const growSecIncrease = GROW_SEC * trashThreads;\\r\\n        batches[batches.length - 1].growWeakenThreads = Math.ceil(growSecIncrease / WEAK_SEC) * 2;\\r\\n        batches[batches.length - 1].growThreads = trashThreads - batches[batches.length - 1].growWeakenThreads;\\r\\n        batches[batches.length - 1].hackThreads = 0;\\r\\n        batches[batches.length - 1].hackWeakenThreads = 0;\\r\\n    }\\r\\n    const cycleThreads = batches.reduce((count, batch) => count + batch.totalThreads(), 0);\\r\\n    const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n    const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n    ns.tprintf(`${target}: ${batches.length} Batches | ${cycleThreads} Threads | ${ns.formatNumber(cycleGain, 3, 1000, true)} Gain | ${formatTime(baseMSOffset)}/${formatTime(cycleTime)} | Gain ${ns.formatNumber(cycleGain / (cycleTime / 1000), 3, 1000, true)}/s`);\\r\\n    // ns.tprintf(`${target}: Batch 1 | ht:${batches[0].hackThreads} | hwt:${batches[0].hackWeakenThreads} | gt:${batches[0].growThreads} | gwt:${batches[0].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Batch 2 | ht:${batches[1].hackThreads} | hwt:${batches[1].hackWeakenThreads} | gt:${batches[1].growThreads} | gwt:${batches[1].growWeakenThreads}`)\\r\\n    // ns.tprintf(`${target}: Batch N | ht:${batches[batches.length-1].hackThreads} | hwt:${batches[batches.length-1].hackWeakenThreads} | gt:${batches[batches.length-1].growThreads} | gwt:${batches[batches.length-1].growWeakenThreads}`)\\r\\n    const scripts = getScriptCalls(batches);\\r\\n    let script = scripts.shift();\\r\\n    for (const s of slaves) {\\r\\n        if (script === undefined)\\r\\n            break;\\r\\n        let slaveThreads = getSlaveThreads(ns, s);\\r\\n        while (slaveThreads > 0) {\\r\\n            if (script === undefined)\\r\\n                break;\\r\\n            const scriptThreads = Math.min(slaveThreads, script.threads);\\r\\n            ns.exec(script.script, s, { temporary: true, threads: scriptThreads }, target, script.offset);\\r\\n            slaveThreads -= scriptThreads;\\r\\n            script.threads -= scriptThreads;\\r\\n            if (script.threads === 0)\\r\\n                script = scripts.shift();\\r\\n        }\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    const slaves = getSlaves(ns);\\r\\n    // copy hgw scripts to slave machines\\r\\n    for (const s of slaves) {\\r\\n        if (s === 'home')\\r\\n            continue;\\r\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n    }\\r\\n    let target = 'nectar-net';\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        target = ns.args[0];\\r\\n    while (true) {\\r\\n        await cycle(ns, target);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2ltcGxlLWhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsRyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyw0Q0FBNEM7QUFDcEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0FBQzlDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBRWpDLG9KQUFvSjtBQUNwSixNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFTO0lBQy9DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlEQUFpRDtBQUN4RSxDQUFDO0FBc0JELE1BQU0sU0FBUztJQUNiLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBRXRCLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVmLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLElBQUksR0FBRyxDQUFDLENBQUM7SUFFVCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUMvRixDQUFDO0NBQ0Y7QUFRRCxTQUFTLGNBQWMsQ0FBQyxPQUFxQjtJQUMzQyxNQUFNLE9BQU8sR0FBa0IsRUFBRSxDQUFDO0lBQ2xDLEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFO1FBQzNCLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUU7WUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxNQUFNLEVBQUUsU0FBUztnQkFDakIsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUMxQixNQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVM7YUFDeEIsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixPQUFPLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtnQkFDaEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxlQUFlO2FBQzlCLENBQUMsQ0FBQTtTQUNIO1FBRUQsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDMUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxTQUFTO2FBQ3hCLENBQUMsQ0FBQTtTQUNIO1FBRUQsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxNQUFNLEVBQUUsV0FBVztnQkFDbkIsT0FBTyxFQUFFLEtBQUssQ0FBQyxpQkFBaUI7Z0JBQ2hDLE1BQU0sRUFBRSxLQUFLLENBQUMsZUFBZTthQUM5QixDQUFDLENBQUE7U0FDSDtLQUNGO0lBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsRUFBTSxFQUFFLE1BQWM7SUFDekMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksWUFBWSxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFL0MsTUFBTSxPQUFPLEdBQWlCLEVBQUUsQ0FBQztJQUVqQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUV6RCxvRkFBb0Y7SUFDcEYsd0RBQXdEO0lBQ3hELElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUM7UUFDeEUsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFDckU7UUFDRSxNQUFNLEtBQUssR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDM0YsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRixLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLGVBQWUsR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUNuRCxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUUvRSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVksRUFBRTtZQUM5RCxlQUFlLEdBQUcsUUFBUSxHQUFHLFlBQVksQ0FBQztZQUMxQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztZQUMvRSxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7U0FDNUQ7UUFFRCxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbkMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN2RCxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ25ELEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLFNBQVMsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUN6RSxLQUFLLENBQUMsZUFBZSxHQUFHLGFBQWEsR0FBRyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFdkYsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixZQUFZLEdBQUcsQ0FBQyxDQUFDO0tBQ2xCO0lBRUQsT0FBTyxZQUFZLEdBQUcsQ0FBQyxFQUFHO1FBQ3hCLGlDQUFpQztRQUNqQyx5RUFBeUU7UUFDekUsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUM5QixNQUFNLGFBQWEsR0FBRyxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ2pGLEtBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLEtBQUssQ0FBQyxTQUFTLEdBQUksYUFBYSxHQUFHLEtBQUssQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUM7UUFDMUUsS0FBSyxDQUFDLGVBQWUsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUN6RCxLQUFLLENBQUMsU0FBUyxHQUFHLGFBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3pFLEtBQUssQ0FBQyxlQUFlLEdBQUcsYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV2RixzQkFBc0I7UUFDdEIsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFM0QsT0FBTyxJQUFJLEVBQUU7WUFDWCxJQUFJLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxFQUFFO2dCQUMxQixZQUFZLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixNQUFNO2FBQ1A7WUFFRCxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDL0QsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLE1BQU0sTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsQ0FBQztZQUNqRCxNQUFNLFFBQVEsR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ2xDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN4RSxLQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFFOUIsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDbEcsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRS9FLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxJQUFJLFlBQVksRUFBRTtnQkFDeEMsWUFBWSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDcEIsTUFBTTthQUNQO1lBRUQsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCx5SEFBeUg7SUFDekgsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtRQUN2QixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDckIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLFlBQVksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELFlBQVksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUzRCxNQUFNLGVBQWUsR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxRixPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQ3ZHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkYsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sU0FBUyxHQUFHLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1RyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxLQUFLLE9BQU8sQ0FBQyxNQUFNLGNBQWMsWUFBWSxjQUFjLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuUSw2S0FBNks7SUFDN0ssNktBQTZLO0lBQzdLLHlPQUF5TztJQUV6TyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdCLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1FBQ3RCLElBQUksTUFBTSxLQUFLLFNBQVM7WUFBRSxNQUFNO1FBRWhDLElBQUksWUFBWSxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxZQUFZLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksTUFBTSxLQUFLLFNBQVM7Z0JBQUUsTUFBTTtZQUVoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0QsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUYsWUFBWSxJQUFJLGFBQWEsQ0FBQztZQUM5QixNQUFNLENBQUMsT0FBTyxJQUFJLGFBQWEsQ0FBQztZQUVoQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssQ0FBQztnQkFDdEIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjtLQUNGO0lBRUQsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFN0IscUNBQXFDO0lBQ3JDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1FBQ3RCLElBQUksQ0FBQyxLQUFLLE1BQU07WUFBRSxTQUFTO1FBQzNCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDO0lBQzFCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUUsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDekI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGZvcm1hdFRpbWUsIGdldFNsYXZlcywgZ2V0U2xhdmVUaHJlYWRzLCBnZXRUb3RhbFRocmVhZHMsIHdhaXRGb3JIR1dTY3JpcHRzIH0gZnJvbSBcInV0aWxcIjtcclxuXHJcbmNvbnN0IEdST1dfU0VDID0gMC4wMDQ7IC8vIG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eSgxLCAnb21lZ2EtbmV0Jyk7XHJcbmNvbnN0IFdFQUtfU0VDID0gMC4wNTsgLy8gbnMud2Vha2VuQW5hbHl6ZSgxKTtcclxuY29uc3QgTVNfQkVUV0VFTl9PUEVSQVRJT05TID0gMTA7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YTogYW55LCBhcmdzOiBhbnkpOiBzdHJpbmdbXSB7XHJcbiAgcmV0dXJuIGRhdGEuc2VydmVyczsgLy8gVGhpcyBzY3JpcHQgYXV0b2NvbXBsZXRlcyB0aGUgbGlzdCBvZiBzZXJ2ZXJzLlxyXG59XHJcblxyXG5pbnRlcmZhY2UgSUhhY2tCYXRjaCB7XHJcbiAgZ3Jvd1RocmVhZHM6IG51bWJlcjtcclxuICBncm93V2Vha2VuVGhyZWFkczogbnVtYmVyO1xyXG4gIGhhY2tUaHJlYWRzOiBudW1iZXI7XHJcbiAgaGFja1dlYWtlblRocmVhZHM6IG51bWJlcjtcclxuXHJcbiAgaGFja1RpbWU6IG51bWJlcjtcclxuICBncm93VGltZTogbnVtYmVyO1xyXG4gIHdlYWtlblRpbWU6IG51bWJlcjtcclxuXHJcbiAgZ3Jvd01TQnVmOiBudW1iZXI7XHJcbiAgZ3Jvd1dlYWtlbk1TQnVmOiBudW1iZXI7XHJcbiAgaGFja01TQnVmOiBudW1iZXI7XHJcbiAgaGFja1dlYWtlbk1zQnVmOiBudW1iZXI7XHJcblxyXG4gIGdhaW46IG51bWJlcjtcclxuXHJcbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlcjtcclxufVxyXG5cclxuY2xhc3MgSGFja0JhdGNoIGltcGxlbWVudHMgSUhhY2tCYXRjaCB7XHJcbiAgZ3Jvd1RocmVhZHMgPSAwO1xyXG4gIGdyb3dXZWFrZW5UaHJlYWRzID0gMDtcclxuICBoYWNrVGhyZWFkcyA9IDA7XHJcbiAgaGFja1dlYWtlblRocmVhZHMgPSAwO1xyXG5cclxuICBoYWNrVGltZSA9IDA7XHJcbiAgZ3Jvd1RpbWUgPSAwO1xyXG4gIHdlYWtlblRpbWUgPSAwO1xyXG5cclxuICBncm93TVNCdWYgPSAwO1xyXG4gIGdyb3dXZWFrZW5NU0J1ZiA9IDA7XHJcbiAgaGFja01TQnVmID0gMDtcclxuICBoYWNrV2Vha2VuTXNCdWYgPSAwO1xyXG5cclxuICBnYWluID0gMDtcclxuXHJcbiAgdG90YWxUaHJlYWRzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5ncm93VGhyZWFkcyArIHRoaXMuZ3Jvd1dlYWtlblRocmVhZHMgKyB0aGlzLmhhY2tUaHJlYWRzICsgdGhpcy5oYWNrV2Vha2VuVGhyZWFkcztcclxuICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBJU2NyaXB0Q2FsbCB7XHJcbiAgc2NyaXB0OiBzdHJpbmc7XHJcbiAgdGhyZWFkczogbnVtYmVyO1xyXG4gIG9mZnNldDogbnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTY3JpcHRDYWxscyhiYXRjaGVzOiBJSGFja0JhdGNoW10pOiBJU2NyaXB0Q2FsbFtdIHtcclxuICBjb25zdCBzY3JpcHRzOiBJU2NyaXB0Q2FsbFtdID0gW107XHJcbiAgZm9yIChjb25zdCBiYXRjaCBvZiBiYXRjaGVzKSB7XHJcbiAgICBpZiAoYmF0Y2guZ3Jvd1RocmVhZHMgPiAwKSB7XHJcbiAgICAgIHNjcmlwdHMucHVzaCh7XHJcbiAgICAgICAgc2NyaXB0OiBcImdyb3cuanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5ncm93VGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dNU0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXRjaC5ncm93V2Vha2VuVGhyZWFkcykge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJ3ZWFrZW4uanNcIixcclxuICAgICAgICB0aHJlYWRzOiBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyxcclxuICAgICAgICBvZmZzZXQ6IGJhdGNoLmdyb3dXZWFrZW5NU0J1ZlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChiYXRjaC5oYWNrVGhyZWFkcykge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIHNjcmlwdDogXCJoYWNrLmpzXCIsXHJcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1RocmVhZHMsXHJcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5oYWNrTVNCdWZcclxuICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmF0Y2guaGFja1dlYWtlblRocmVhZHMpIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBzY3JpcHQ6IFwid2Vha2VuLmpzXCIsXHJcbiAgICAgICAgdGhyZWFkczogYmF0Y2guaGFja1dlYWtlblRocmVhZHMsXHJcbiAgICAgICAgb2Zmc2V0OiBiYXRjaC5oYWNrV2Vha2VuTXNCdWZcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzY3JpcHRzLnNvcnQoKGEsIGIpID0+IGIudGhyZWFkcyAtIGEudGhyZWFkcyk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG4gIGxldCB0b3RhbFRocmVhZHMgPSBnZXRUb3RhbFRocmVhZHMobnMsIHNsYXZlcyk7XHJcblxyXG4gIGNvbnN0IGJhdGNoZXM6IElIYWNrQmF0Y2hbXSA9IFtdO1xyXG5cclxuICBjb25zdCBiYXNlTVNPZmZzZXQgPSBNYXRoLmNlaWwobnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpKTtcclxuXHJcbiAgLy8gZmlyc3QgYmF0Y2ggaXMgYWx3YXlzIEdXIGlmIHRoZSBzZXJ2ZXIgaXMgbm90IGFscmVhZHkgYXQgbWluIHNlY3VyaXR5IC8gbWF4IG1vbmV5XHJcbiAgLy8gZmluZCBvdXQgaG93IG1hbnkgdGhyZWFkcyBhcmUgcmVxdWlyZWQgdG8gZ3JvdyB0byBtYXhcclxuICBpZiAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpID4gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpIHx8XHJcbiAgICAgIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpKVxyXG4gIHtcclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmFzZVdlYWtlbiA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSAtIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgY29uc3QgZ3Jvd011bHQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpIC8gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcclxuICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkpO1xyXG4gICAgbGV0IGdyb3dTZWNJbmNyZWFzZSA9IEdST1dfU0VDICogYmF0Y2guZ3Jvd1RocmVhZHM7XHJcbiAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XHJcblxyXG4gICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiB0b3RhbFRocmVhZHM7XHJcbiAgICAgIGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChncm93U2VjSW5jcmVhc2UgKyBiYXNlV2Vha2VuKSAvIFdFQUtfU0VDKTtcclxuICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXRjaE1TT2Zmc2V0ID0gYmFzZU1TT2Zmc2V0O1xyXG4gICAgYmF0Y2gud2Vha2VuVGltZSA9IE1hdGguY2VpbChucy5nZXRXZWFrZW5UaW1lKHRhcmdldCkpO1xyXG4gICAgYmF0Y2guZ3Jvd1RpbWUgPSBNYXRoLmNlaWwobnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KSk7XHJcbiAgICBiYXRjaC5oYWNrVGltZSA9IE1hdGguY2VpbChucy5nZXRIYWNrVGltZSh0YXJnZXQpKTtcclxuICAgIGJhdGNoLmdyb3dNU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5ncm93VGltZSArIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmdyb3dXZWFrZW5NU0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG5cclxuICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICB0b3RhbFRocmVhZHMgPSAwO1xyXG4gIH1cclxuXHJcbiAgd2hpbGUgKHRvdGFsVGhyZWFkcyA+IDAgKSB7XHJcbiAgICAvLyBpZiAoYmF0Y2hlcy5sZW5ndGggPiA1KSBicmVhaztcclxuICAgIC8vIGZyb20gbm93IG9uIGFzc3VtZSB3ZSBhcmUgYXQgbWluaW11bSBzZWN1cml0eSwgbWF4aW11bSBtb25leSBhdmFpbGFibGVcclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEhhY2tCYXRjaCgpO1xyXG4gICAgY29uc3QgYmF0Y2hNU09mZnNldCA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpXHJcbiAgICBiYXRjaC5oYWNrVGltZSA9IG5zLmdldEhhY2tUaW1lKHRhcmdldCk7XHJcbiAgICBiYXRjaC5ncm93VGltZSA9IG5zLmdldEdyb3dUaW1lKHRhcmdldCk7XHJcbiAgICBiYXRjaC53ZWFrZW5UaW1lID0gbnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpO1xyXG4gICAgYmF0Y2guaGFja01TQnVmID0gIGJhdGNoTVNPZmZzZXQgLSBiYXRjaC5oYWNrVGltZSAtIE1TX0JFVFdFRU5fT1BFUkFUSU9OUztcclxuICAgIGJhdGNoLmhhY2tXZWFrZW5Nc0J1ZiA9IGJhdGNoTVNPZmZzZXQgLSBiYXRjaC53ZWFrZW5UaW1lO1xyXG4gICAgYmF0Y2guZ3Jvd01TQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLmdyb3dUaW1lICsgTVNfQkVUV0VFTl9PUEVSQVRJT05TO1xyXG4gICAgYmF0Y2guZ3Jvd1dlYWtlbk1TQnVmID0gYmF0Y2hNU09mZnNldCAtIGJhdGNoLndlYWtlblRpbWUgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XHJcblxyXG4gICAgLy8gc3RhcnQgd2l0aCBoYWNrIDUwJVxyXG4gICAgYmF0Y2guaGFja1RocmVhZHMgPSBNYXRoLmNlaWwoLjMgLyBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpKTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICBpZiAoYmF0Y2guaGFja1RocmVhZHMgPD0gMCkge1xyXG4gICAgICAgIHRvdGFsVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gbnMuaGFja0FuYWx5emUodGFyZ2V0KSAqIGJhdGNoLmhhY2tUaHJlYWRzO1xyXG4gICAgICBjb25zdCBjdXJyZW50ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuICAgICAgY29uc3QgZnV0dXJlID0gY3VycmVudCAtIChjdXJyZW50ICogaGFja1BlcmNlbnQpO1xyXG4gICAgICBjb25zdCBncm93TXVsdCA9IGN1cnJlbnQgLyBmdXR1cmU7XHJcbiAgICAgIGJhdGNoLmdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUodGFyZ2V0LCBncm93TXVsdCkgKiAxLjMpO1xyXG4gICAgICBiYXRjaC5nYWluID0gY3VycmVudCAtIGZ1dHVyZTtcclxuICAgIFxyXG4gICAgICBiYXRjaC5oYWNrV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KGJhdGNoLmhhY2tUaHJlYWRzLCB0YXJnZXQpIC8gV0VBS19TRUMpO1xyXG4gICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChiYXRjaC5ncm93VGhyZWFkcyAvIChXRUFLX1NFQyAvIEdST1dfU0VDKSk7XHJcblxyXG4gICAgICBpZiAoYmF0Y2gudG90YWxUaHJlYWRzKCkgPD0gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgdG90YWxUaHJlYWRzIC09IGJhdGNoLnRvdGFsVGhyZWFkcygpO1xyXG4gICAgICAgIGJhdGNoZXMucHVzaChiYXRjaCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJhdGNoLmhhY2tUaHJlYWRzLS07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBpZiB3ZSdyZSBkb2luZyBhIGxvdCBvZiBiYXRjaGVzLCBjYW5jZWwgdGhlIGxhc3QgMiBhbmQgcmUtYXNzaW5nIHRoZSB0aHJlYWRzIHRvIGdyb3cvd2Vha2VuIHRvIHByZXAgZm9yIHRoZSBuZXh0IGN5Y2xlXHJcbiAgaWYgKGJhdGNoZXMubGVuZ3RoID4gMjApIHtcclxuICAgIGxldCB0cmFzaFRocmVhZHMgPSAwO1xyXG4gICAgY29uc3QgbGFzdEJhdGNoID0gYmF0Y2hlcy5wb3AoKTtcclxuICAgIHRyYXNoVGhyZWFkcyArPSBsYXN0QmF0Y2ggPyBsYXN0QmF0Y2gudG90YWxUaHJlYWRzKCkgOiAwO1xyXG4gICAgdHJhc2hUaHJlYWRzICs9IGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS50b3RhbFRocmVhZHMoKTtcclxuXHJcbiAgICBjb25zdCBncm93U2VjSW5jcmVhc2UgPSBHUk9XX1NFQyAqIHRyYXNoVGhyZWFkcztcclxuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChncm93U2VjSW5jcmVhc2UgLyBXRUFLX1NFQykgKiAyO1xyXG4gICAgYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmdyb3dUaHJlYWRzID0gdHJhc2hUaHJlYWRzIC0gYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmdyb3dXZWFrZW5UaHJlYWRzO1xyXG4gICAgYmF0Y2hlc1tiYXRjaGVzLmxlbmd0aCAtIDFdLmhhY2tUaHJlYWRzID0gMDtcclxuICAgIGJhdGNoZXNbYmF0Y2hlcy5sZW5ndGggLSAxXS5oYWNrV2Vha2VuVGhyZWFkcyA9IDA7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjeWNsZVRocmVhZHMgPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLnRvdGFsVGhyZWFkcygpLCAwKTtcclxuICBjb25zdCBjeWNsZUdhaW4gPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLmdhaW4sIDApO1xyXG4gIGNvbnN0IGN5Y2xlVGltZSA9IGJhc2VNU09mZnNldCArIChiYXRjaGVzLmxlbmd0aCAqIE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDQpICsgKE1TX0JFVFdFRU5fT1BFUkFUSU9OUyAqIDIpO1xyXG4gIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogJHtiYXRjaGVzLmxlbmd0aH0gQmF0Y2hlcyB8ICR7Y3ljbGVUaHJlYWRzfSBUaHJlYWRzIHwgJHtucy5mb3JtYXROdW1iZXIoY3ljbGVHYWluLCAzLCAxMDAwLCB0cnVlKX0gR2FpbiB8ICR7Zm9ybWF0VGltZShiYXNlTVNPZmZzZXQpfS8ke2Zvcm1hdFRpbWUoY3ljbGVUaW1lKX0gfCBHYWluICR7bnMuZm9ybWF0TnVtYmVyKGN5Y2xlR2FpbiAvIChjeWNsZVRpbWUgLyAxMDAwKSwgMywgMTAwMCwgdHJ1ZSl9L3NgKTtcclxuICAvLyBucy50cHJpbnRmKGAke3RhcmdldH06IEJhdGNoIDEgfCBodDoke2JhdGNoZXNbMF0uaGFja1RocmVhZHN9IHwgaHd0OiR7YmF0Y2hlc1swXS5oYWNrV2Vha2VuVGhyZWFkc30gfCBndDoke2JhdGNoZXNbMF0uZ3Jvd1RocmVhZHN9IHwgZ3d0OiR7YmF0Y2hlc1swXS5ncm93V2Vha2VuVGhyZWFkc31gKVxyXG4gIC8vIG5zLnRwcmludGYoYCR7dGFyZ2V0fTogQmF0Y2ggMiB8IGh0OiR7YmF0Y2hlc1sxXS5oYWNrVGhyZWFkc30gfCBod3Q6JHtiYXRjaGVzWzFdLmhhY2tXZWFrZW5UaHJlYWRzfSB8IGd0OiR7YmF0Y2hlc1sxXS5ncm93VGhyZWFkc30gfCBnd3Q6JHtiYXRjaGVzWzFdLmdyb3dXZWFrZW5UaHJlYWRzfWApXHJcbiAgLy8gbnMudHByaW50ZihgJHt0YXJnZXR9OiBCYXRjaCBOIHwgaHQ6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmhhY2tUaHJlYWRzfSB8IGh3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uaGFja1dlYWtlblRocmVhZHN9IHwgZ3Q6JHtiYXRjaGVzW2JhdGNoZXMubGVuZ3RoLTFdLmdyb3dUaHJlYWRzfSB8IGd3dDoke2JhdGNoZXNbYmF0Y2hlcy5sZW5ndGgtMV0uZ3Jvd1dlYWtlblRocmVhZHN9YClcclxuXHJcbiAgY29uc3Qgc2NyaXB0cyA9IGdldFNjcmlwdENhbGxzKGJhdGNoZXMpO1xyXG4gIGxldCBzY3JpcHQgPSBzY3JpcHRzLnNoaWZ0KCk7XHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHNjcmlwdCA9PT0gdW5kZWZpbmVkKSBicmVhaztcclxuXHJcbiAgICBsZXQgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcclxuICAgIHdoaWxlIChzbGF2ZVRocmVhZHMgPiAwKSB7XHJcbiAgICAgIGlmIChzY3JpcHQgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcblxyXG4gICAgICBjb25zdCBzY3JpcHRUaHJlYWRzID0gTWF0aC5taW4oc2xhdmVUaHJlYWRzLCBzY3JpcHQudGhyZWFkcyk7XHJcbiAgICAgIG5zLmV4ZWMoc2NyaXB0LnNjcmlwdCwgcywge3RlbXBvcmFyeTogdHJ1ZSwgdGhyZWFkczogc2NyaXB0VGhyZWFkc30sIHRhcmdldCwgc2NyaXB0Lm9mZnNldCk7XHJcbiAgICAgIHNsYXZlVGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xyXG4gICAgICBzY3JpcHQudGhyZWFkcyAtPSBzY3JpcHRUaHJlYWRzO1xyXG5cclxuICAgICAgaWYgKHNjcmlwdC50aHJlYWRzID09PSAwKVxyXG4gICAgICAgIHNjcmlwdCA9IHNjcmlwdHMuc2hpZnQoKTsgICAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGF3YWl0IHdhaXRGb3JIR1dTY3JpcHRzKG5zLCBzbGF2ZXMpOyAgXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xyXG5cclxuICBjb25zdCBzbGF2ZXMgPSBnZXRTbGF2ZXMobnMpO1xyXG5cclxuICAvLyBjb3B5IGhndyBzY3JpcHRzIHRvIHNsYXZlIG1hY2hpbmVzXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICBucy5zY3AoWydoYWNrLmpzJywgJ2dyb3cuanMnLCAnd2Vha2VuLmpzJ10sIHMpO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhcmdldCA9ICduZWN0YXItbmV0JztcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSAnc3RyaW5nJykgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGF3YWl0IGN5Y2xlKG5zLCB0YXJnZXQpO1xyXG4gIH1cclxufVxyXG4iXX0=\",\"filename\":\"simple-hack.js\",\"server\":\"home\"}}],[\"exp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getSlaves, waitForHGWScripts, doGrowWeaken, getSlaveThreads, doWeaken } from \\\"./util\\\";\\r\\nasync function allRun(ns, slaves, script, target, ms) {\\r\\n    ns.disableLog('ALL');\\r\\n    for (const s of slaves) {\\r\\n        const slaveThreads = getSlaveThreads(ns, s);\\r\\n        ns.exec(script, s, slaveThreads, target, ms);\\r\\n    }\\r\\n    await waitForHGWScripts(ns, slaves);\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const slaves = getSlaves(ns);\\r\\n    for (const s of slaves) {\\r\\n        if (s === 'home')\\r\\n            continue;\\r\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], s);\\r\\n    }\\r\\n    //const target = 'n00dles';\\r\\n    const target = 'foodnstuff';\\r\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n        await doWeaken(ns, target);\\r\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n        await doGrowWeaken(ns, target);\\r\\n    while (true)\\r\\n        await allRun(ns, slaves, 'grow.js', target, 0);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQVcsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXhHLEtBQUssVUFBVSxNQUFNLENBQUMsRUFBTSxFQUFFLE1BQWdCLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxFQUFVO0lBQ3hGLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLEVBQUU7UUFDdEIsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM5QztJQUVELE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtRQUN0QixJQUFJLENBQUMsS0FBSyxNQUFNO1lBQUUsU0FBUztRQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNoRDtJQUVELDJCQUEyQjtJQUMzQixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUM7SUFDNUIsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQztRQUM3RSxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFN0IsT0FBTSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUNyRSxNQUFNLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFakMsT0FBTyxJQUFJO1FBQ1QsTUFBTSxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgSEdXX1JBTSwgZ2V0U2xhdmVzLCB3YWl0Rm9ySEdXU2NyaXB0cywgZG9Hcm93V2Vha2VuLCBnZXRTbGF2ZVRocmVhZHMsIGRvV2Vha2VuIH0gZnJvbSBcIi4vdXRpbFwiO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gYWxsUnVuKG5zOiBOUywgc2xhdmVzOiBzdHJpbmdbXSwgc2NyaXB0OiBzdHJpbmcsIHRhcmdldDogc3RyaW5nLCBtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgXHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgY29uc3Qgc2xhdmVUaHJlYWRzID0gZ2V0U2xhdmVUaHJlYWRzKG5zLCBzKTtcclxuICAgIG5zLmV4ZWMoc2NyaXB0LCBzLCBzbGF2ZVRocmVhZHMsIHRhcmdldCwgbXMpO1xyXG4gIH1cclxuXHJcbiAgYXdhaXQgd2FpdEZvckhHV1NjcmlwdHMobnMsIHNsYXZlcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHNsYXZlcyA9IGdldFNsYXZlcyhucyk7XHJcbiAgZm9yIChjb25zdCBzIG9mIHNsYXZlcykge1xyXG4gICAgaWYgKHMgPT09ICdob21lJykgY29udGludWU7XHJcbiAgICBucy5zY3AoWydoYWNrLmpzJywgJ2dyb3cuanMnLCAnd2Vha2VuLmpzJ10sIHMpO1xyXG4gIH1cclxuXHJcbiAgLy9jb25zdCB0YXJnZXQgPSAnbjAwZGxlcyc7XHJcbiAgY29uc3QgdGFyZ2V0ID0gJ2Zvb2Ruc3R1ZmYnO1xyXG4gIHdoaWxlIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCkpXHJcbiAgICBhd2FpdCBkb1dlYWtlbihucywgdGFyZ2V0KTtcclxuICBcclxuICB3aGlsZShucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSlcclxuICAgIGF3YWl0IGRvR3Jvd1dlYWtlbihucywgdGFyZ2V0KTtcclxuXHJcbiAgd2hpbGUgKHRydWUpXHJcbiAgICBhd2FpdCBhbGxSdW4obnMsIHNsYXZlcywgJ2dyb3cuanMnLCB0YXJnZXQsIDApO1xyXG59XHJcbiJdfQ==\",\"filename\":\"exp.js\",\"server\":\"home\"}}],[\"kh.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"util\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog('ALL');\\r\\n    const servers = getAllServers(ns);\\r\\n    const hackPIDs = [];\\r\\n    const growPIDs = [];\\r\\n    const weakenPIDs = [];\\r\\n    for (const s of servers) {\\r\\n        const scripts = ns.ps(s);\\r\\n        for (const script of scripts) {\\r\\n            if (script.filename === 'simple-hack.js' || script.filename === 'super-hack.js') {\\r\\n                ns.kill(script.pid);\\r\\n                ns.tprintf(`Killed Hack Controller`);\\r\\n            }\\r\\n            if (script.filename === 'hack.js')\\r\\n                hackPIDs.push(script.pid);\\r\\n            if (script.filename === 'grow.js')\\r\\n                growPIDs.push(script.pid);\\r\\n            if (script.filename === 'weaken.js')\\r\\n                weakenPIDs.push(script.pid);\\r\\n        }\\r\\n    }\\r\\n    hackPIDs.map(pid => ns.kill(pid));\\r\\n    ns.tprintf(`Killed ${hackPIDs.length} Hack Scripts`);\\r\\n    await ns.sleep(1000);\\r\\n    growPIDs.map(pid => ns.kill(pid));\\r\\n    ns.tprintf(`Killed ${growPIDs.length} Grow Scripts`);\\r\\n    await ns.sleep(1000);\\r\\n    weakenPIDs.map(pid => ns.kill(pid));\\r\\n    ns.tprintf(`Killed ${weakenPIDs.length} Weaken Scripts`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxDLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztJQUM5QixNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDOUIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO0lBRWhDLEtBQUksTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssZUFBZSxFQUFFO2dCQUMvRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQ3RDO1lBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVM7Z0JBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTO2dCQUMvQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU1QixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssV0FBVztnQkFDakMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7S0FDRjtJQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFFBQVEsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVyQixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFRLENBQUMsTUFBTSxlQUFlLENBQUMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBVSxDQUFDLE1BQU0saUJBQWlCLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMgfSBmcm9tIFwidXRpbFwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XHJcbiAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xyXG5cclxuICBjb25zdCBoYWNrUElEczogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCBncm93UElEczogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCB3ZWFrZW5QSURzOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICBmb3IoY29uc3QgcyBvZiBzZXJ2ZXJzKSB7XHJcbiAgICBjb25zdCBzY3JpcHRzID0gbnMucHMocyk7XHJcblxyXG4gICAgZm9yIChjb25zdCBzY3JpcHQgb2Ygc2NyaXB0cykge1xyXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lID09PSAnc2ltcGxlLWhhY2suanMnIHx8IHNjcmlwdC5maWxlbmFtZSA9PT0gJ3N1cGVyLWhhY2suanMnKSB7XHJcbiAgICAgICAgbnMua2lsbChzY3JpcHQucGlkKTtcclxuICAgICAgICBucy50cHJpbnRmKGBLaWxsZWQgSGFjayBDb250cm9sbGVyYCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzY3JpcHQuZmlsZW5hbWUgPT09ICdoYWNrLmpzJylcclxuICAgICAgICBoYWNrUElEcy5wdXNoKHNjcmlwdC5waWQpO1xyXG5cclxuICAgICAgaWYgKHNjcmlwdC5maWxlbmFtZSA9PT0gJ2dyb3cuanMnKVxyXG4gICAgICAgIGdyb3dQSURzLnB1c2goc2NyaXB0LnBpZCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoc2NyaXB0LmZpbGVuYW1lID09PSAnd2Vha2VuLmpzJylcclxuICAgICAgICB3ZWFrZW5QSURzLnB1c2goc2NyaXB0LnBpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGhhY2tQSURzLm1hcChwaWQgPT4gbnMua2lsbChwaWQpKTtcclxuICBucy50cHJpbnRmKGBLaWxsZWQgJHtoYWNrUElEcy5sZW5ndGh9IEhhY2sgU2NyaXB0c2ApO1xyXG4gIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xyXG5cclxuICBncm93UElEcy5tYXAocGlkID0+IG5zLmtpbGwocGlkKSk7XHJcbiAgbnMudHByaW50ZihgS2lsbGVkICR7Z3Jvd1BJRHMubGVuZ3RofSBHcm93IFNjcmlwdHNgKTtcclxuICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuXHJcbiAgd2Vha2VuUElEcy5tYXAocGlkID0+IG5zLmtpbGwocGlkKSk7XHJcbiAgbnMudHByaW50ZihgS2lsbGVkICR7d2Vha2VuUElEcy5sZW5ndGh9IFdlYWtlbiBTY3JpcHRzYCk7XHJcbn1cclxuIl19\",\"filename\":\"kh.js\",\"server\":\"home\"}}],[\"eval.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatTime, getAllServers, getSlaves, getTotalThreads } from \\\"./util\\\";\\r\\nimport { PrintTable, ColorPrint, DefaultStyle } from \\\"tables\\\";\\r\\nconst GROW_SEC = 0.004; // ns.growthAnalyzeSecurity(1, 'omega-net');\\r\\nconst WEAK_SEC = 0.05; // ns.weakenAnalyze(1);\\r\\nconst MS_BETWEEN_OPERATIONS = 100;\\r\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\\r\\nexport function autocomplete(data, args) {\\r\\n    return data.servers; // This script autocompletes the list of servers.\\r\\n}\\r\\nclass HackBatch {\\r\\n    growThreads = 0;\\r\\n    growWeakenThreads = 0;\\r\\n    hackThreads = 0;\\r\\n    hackWeakenThreads = 0;\\r\\n    hackTime = 0;\\r\\n    growTime = 0;\\r\\n    weakenTime = 0;\\r\\n    growMSBuf = 0;\\r\\n    growWeakenMSBuf = 0;\\r\\n    hackMSBuf = 0;\\r\\n    hackWeakenMsBuf = 0;\\r\\n    gain = 0;\\r\\n    totalThreads() {\\r\\n        return this.growThreads + this.growWeakenThreads + this.hackThreads + this.hackWeakenThreads;\\r\\n    }\\r\\n}\\r\\nfunction cycle(ns, server) {\\r\\n    try {\\r\\n        const slaves = getSlaves(ns);\\r\\n        let totalThreads = getTotalThreads(ns, slaves);\\r\\n        server.baseDifficulty = server.baseDifficulty || ns.getServerBaseSecurityLevel(server.hostname);\\r\\n        server.minDifficulty = server.minDifficulty || ns.getServerMinSecurityLevel(server.hostname);\\r\\n        server.hackDifficulty = server.hackDifficulty || ns.getServerSecurityLevel(server.hostname);\\r\\n        server.moneyAvailable = server.moneyAvailable || ns.getServerMoneyAvailable(server.hostname);\\r\\n        server.moneyMax = server.moneyMax || ns.getServerMaxMoney(server.hostname);\\r\\n        const batches = [];\\r\\n        const baseMSOffset = Math.ceil(ns.formulas.hacking.weakenTime(server, ns.getPlayer()));\\r\\n        // first batch is always GW if the server is not already at min security / max money\\r\\n        // find out how many threads are required to grow to max\\r\\n        if (server.hackDifficulty > server.baseDifficulty || server.moneyAvailable < server.moneyMax) {\\r\\n            const batch = new HackBatch();\\r\\n            const baseWeaken = server.hackDifficulty - server.minDifficulty;\\r\\n            batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax));\\r\\n            let growSecIncrease = GROW_SEC * batch.growThreads;\\r\\n            batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n            if (batch.growWeakenThreads + batch.growThreads > totalThreads) {\\r\\n                growSecIncrease = GROW_SEC * totalThreads;\\r\\n                batch.growWeakenThreads = Math.ceil((growSecIncrease + baseWeaken) / WEAK_SEC);\\r\\n                batch.growThreads = totalThreads - batch.growWeakenThreads;\\r\\n            }\\r\\n            batches.push(batch);\\r\\n            totalThreads -= batch.totalThreads();\\r\\n        }\\r\\n        let missedOnce = false;\\r\\n        while (totalThreads > 0) {\\r\\n            // from now on assume we are at minimum security, maximum money available\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            server.moneyAvailable = server.moneyMax;\\r\\n            const batch = new HackBatch();\\r\\n            batch.hackThreads = Math.ceil(.8 / ns.formulas.hacking.hackPercent(server, ns.getPlayer()));\\r\\n            while (true) {\\r\\n                if (batch.hackThreads <= 0) {\\r\\n                    totalThreads = 0;\\r\\n                    break;\\r\\n                }\\r\\n                const hackPercent = ns.formulas.hacking.hackPercent(server, ns.getPlayer()) * batch.hackThreads;\\r\\n                const current = server.moneyAvailable;\\r\\n                const future = current - (current * hackPercent);\\r\\n                server.moneyAvailable = future;\\r\\n                batch.growThreads = Math.ceil(ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax) * 1.5);\\r\\n                server.moneyAvailable = server.moneyMax;\\r\\n                batch.gain = current - future;\\r\\n                batch.hackWeakenThreads = Math.ceil(ns.hackAnalyzeSecurity(batch.hackThreads, server.hostname) / WEAK_SEC);\\r\\n                batch.growWeakenThreads = Math.ceil(batch.growThreads / (WEAK_SEC / GROW_SEC));\\r\\n                if (batch.totalThreads() <= totalThreads) {\\r\\n                    totalThreads -= batch.totalThreads();\\r\\n                    batches.push(batch);\\r\\n                    if (missedOnce)\\r\\n                        totalThreads = 0;\\r\\n                    break;\\r\\n                }\\r\\n                batch.hackThreads = Math.floor(batch.hackThreads * 0.75);\\r\\n                missedOnce = true;\\r\\n            }\\r\\n            // duplicate batch until there is no space left\\r\\n            const batchThreads = batch.totalThreads();\\r\\n            const additionalBatches = Math.floor(totalThreads / batchThreads);\\r\\n            for (let i = 0; i < additionalBatches; ++i) {\\r\\n                const newBatch = new HackBatch;\\r\\n                Object.assign(newBatch, batch);\\r\\n                batches.push(newBatch);\\r\\n                totalThreads -= newBatch.totalThreads();\\r\\n            }\\r\\n        }\\r\\n        const cycleTime = baseMSOffset + (batches.length * MS_BETWEEN_OPERATIONS * 4) + (MS_BETWEEN_OPERATIONS * 2);\\r\\n        const cycleGain = batches.reduce((count, batch) => count + batch.gain, 0);\\r\\n        return {\\r\\n            target: server.hostname,\\r\\n            start: baseMSOffset,\\r\\n            time: cycleTime,\\r\\n            gain: cycleGain,\\r\\n            rate: cycleGain / (cycleTime / 100)\\r\\n        };\\r\\n    }\\r\\n    catch (e) {\\r\\n        return {\\r\\n            target: server.hostname,\\r\\n            start: 1,\\r\\n            time: 1,\\r\\n            gain: 0,\\r\\n            rate: 0\\r\\n        };\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let servers = getAllServers(ns).map(s => ns.getServer(s)).filter(s => ns.getServerMaxMoney(s.hostname) > 0 && ns.getServerMoneyAvailable(s.hostname) > 0 && s.hostname !== 'home' && !s.purchasedByPlayer);\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === 'string')\\r\\n        servers = servers.filter(s => s.hostname === ns.args[0]);\\r\\n    const data = servers.map(s => {\\r\\n        const firstCycle = cycle(ns, s);\\r\\n        const nextCycle = cycle(ns, s);\\r\\n        const finalInfo = Object.assign({}, firstCycle);\\r\\n        const totalCycleCount = 5;\\r\\n        for (let i = 1; i < totalCycleCount; i++) {\\r\\n            finalInfo.gain += nextCycle.gain;\\r\\n            finalInfo.time += nextCycle.time;\\r\\n        }\\r\\n        finalInfo.rate = finalInfo.gain / (finalInfo.time / 100);\\r\\n        return [\\r\\n            ` ${s.hostname}`,\\r\\n            (finalInfo.rate / 100000).toFixed(0).padStart(8),\\r\\n            `${ns.formatNumber(finalInfo.rate, 3, 1000, true)}/s`.padStart(12),\\r\\n            formatTime(firstCycle.start).padStart(12),\\r\\n            formatTime(firstCycle.time).padStart(12),\\r\\n            formatTime(nextCycle.time).padStart(12),\\r\\n            formatTime(finalInfo.time).padStart(12),\\r\\n            `${ns.getServerSecurityLevel(s.hostname).toFixed(0).padStart(2)}/${ns.getServerMinSecurityLevel(s.hostname).toFixed(0).padStart(2)}`.padStart(9),\\r\\n            ns.formatPercent(ns.getServerMoneyAvailable(s.hostname) / ns.getServerMaxMoney(s.hostname)).padStart(8)\\r\\n        ];\\r\\n    }).sort((a, b) => Number(b[1]) - Number(a[1]));\\r\\n    const columns = [\\r\\n        { header: ' Servers', width: 20 },\\r\\n        { header: '    Rate', width: 9 },\\r\\n        { header: '        Rate', width: 13 },\\r\\n        { header: '  Initial Tm', width: 13 },\\r\\n        { header: ' First Cycle', width: 13 },\\r\\n        { header: '  Next Cycle', width: 13 },\\r\\n        { header: '  Total Time', width: 13 },\\r\\n        { header: ' Security', width: 10 },\\r\\n        { header: '  Money', width: 9 },\\r\\n        // { header: 'LOG Money', width: 10 },\\r\\n        // { header: '    Value', width: 10 },\\r\\n    ];\\r\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ldmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDL0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLDRDQUE0QztBQUNwRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyx1QkFBdUI7QUFDOUMsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUM7QUFFbEMsb0pBQW9KO0FBQ3BKLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsaURBQWlEO0FBQ3hFLENBQUM7QUFzQkQsTUFBTSxTQUFTO0lBQ2IsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFDdEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFFdEIsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUVULFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQy9GLENBQUM7Q0FDRjtBQVVELFNBQVMsS0FBSyxDQUFDLEVBQU0sRUFBRSxNQUFjO0lBQ25DLElBQUk7UUFDRixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsSUFBSSxZQUFZLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUvQyxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRyxNQUFNLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU1RixNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzRSxNQUFNLE9BQU8sR0FBaUIsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXZGLG9GQUFvRjtRQUNwRix3REFBd0Q7UUFDeEQsSUFBSSxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQzVGLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7WUFDOUIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ2hFLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN4RyxJQUFJLGVBQWUsR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUNuRCxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztZQUUvRSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVksRUFBRTtnQkFDOUQsZUFBZSxHQUFHLFFBQVEsR0FBRyxZQUFZLENBQUM7Z0JBQzFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO2dCQUMvRSxLQUFLLENBQUMsV0FBVyxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7YUFDNUQ7WUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLFlBQVksSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdEM7UUFFRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkIsT0FBTyxZQUFZLEdBQUcsQ0FBQyxFQUFHO1lBQ3hCLHlFQUF5RTtZQUN6RSxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDN0MsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBRXhDLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7WUFDOUIsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFNUYsT0FBTyxJQUFJLEVBQUU7Z0JBQ1gsSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsRUFBRTtvQkFDMUIsWUFBWSxHQUFHLENBQUMsQ0FBQztvQkFDakIsTUFBTTtpQkFDUDtnQkFFRCxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7Z0JBQ2hHLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7Z0JBQ3RDLE1BQU0sTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsQ0FBQztnQkFDakQsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7Z0JBQy9CLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQzlHLE1BQU0sQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztnQkFDeEMsS0FBSyxDQUFDLElBQUksR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO2dCQUU5QixLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7Z0JBQzNHLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFFL0UsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLElBQUksWUFBWSxFQUFFO29CQUN4QyxZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUVwQixJQUFJLFVBQVU7d0JBQUUsWUFBWSxHQUFHLENBQUMsQ0FBQztvQkFDakMsTUFBTTtpQkFDUDtnQkFFRCxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQztnQkFDekQsVUFBVSxHQUFHLElBQUksQ0FBQzthQUNuQjtZQUVELCtDQUErQztZQUMvQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDMUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQztZQUNsRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQzFDLE1BQU0sUUFBUSxHQUFHLElBQUksU0FBUyxDQUFDO2dCQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDdkIsWUFBWSxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUN6QztTQUNGO1FBRUQsTUFBTSxTQUFTLEdBQUcsWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVHLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUxRSxPQUFPO1lBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1lBQ3ZCLEtBQUssRUFBRSxZQUFZO1lBQ25CLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLFNBQVM7WUFDZixJQUFJLEVBQUUsU0FBUyxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztTQUNwQyxDQUFBO0tBQ0Y7SUFBQyxPQUFNLENBQUMsRUFBRTtRQUNULE9BQU87WUFDTCxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVE7WUFDdkIsS0FBSyxFQUFFLENBQUM7WUFDUixJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksRUFBRSxDQUFDO1lBQ1AsSUFBSSxFQUFFLENBQUM7U0FDUixDQUFBO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFM00sSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5ILE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDM0IsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sU0FBUyxHQUFnQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3RCxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDakMsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDO1NBQ2xDO1FBRUQsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUV6RCxPQUFPO1lBQ0wsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ2hCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM5QyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNsRSxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDekMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ3hDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUN2QyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDdkMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNoSixFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDeEcsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRCxNQUFNLE9BQU8sR0FBRztRQUNmLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1FBQ2hDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ25DLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2xDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1FBQy9CLHNDQUFzQztRQUN0QyxzQ0FBc0M7S0FDeEMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMsIFNlcnZlciB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZm9ybWF0VGltZSwgZ2V0QWxsU2VydmVycywgZ2V0U2xhdmVzLCBnZXRUb3RhbFRocmVhZHMgfSBmcm9tIFwiLi91dGlsXCI7XHJcbmltcG9ydCB7IFByaW50VGFibGUsIENvbG9yUHJpbnQsIERlZmF1bHRTdHlsZSB9IGZyb20gXCJ0YWJsZXNcIjtcclxuXHJcbmNvbnN0IEdST1dfU0VDID0gMC4wMDQ7IC8vIG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eSgxLCAnb21lZ2EtbmV0Jyk7XHJcbmNvbnN0IFdFQUtfU0VDID0gMC4wNTsgLy8gbnMud2Vha2VuQW5hbHl6ZSgxKTtcclxuY29uc3QgTVNfQkVUV0VFTl9PUEVSQVRJT05TID0gMTAwO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG5leHBvcnQgZnVuY3Rpb24gYXV0b2NvbXBsZXRlKGRhdGE6IGFueSwgYXJnczogYW55KTogc3RyaW5nW10ge1xyXG4gIHJldHVybiBkYXRhLnNlcnZlcnM7IC8vIFRoaXMgc2NyaXB0IGF1dG9jb21wbGV0ZXMgdGhlIGxpc3Qgb2Ygc2VydmVycy5cclxufVxyXG5cclxuaW50ZXJmYWNlIElIYWNrQmF0Y2gge1xyXG4gIGdyb3dUaHJlYWRzOiBudW1iZXI7XHJcbiAgZ3Jvd1dlYWtlblRocmVhZHM6IG51bWJlcjtcclxuICBoYWNrVGhyZWFkczogbnVtYmVyO1xyXG4gIGhhY2tXZWFrZW5UaHJlYWRzOiBudW1iZXI7XHJcblxyXG4gIGhhY2tUaW1lOiBudW1iZXI7XHJcbiAgZ3Jvd1RpbWU6IG51bWJlcjtcclxuICB3ZWFrZW5UaW1lOiBudW1iZXI7XHJcblxyXG4gIGdyb3dNU0J1ZjogbnVtYmVyO1xyXG4gIGdyb3dXZWFrZW5NU0J1ZjogbnVtYmVyO1xyXG4gIGhhY2tNU0J1ZjogbnVtYmVyO1xyXG4gIGhhY2tXZWFrZW5Nc0J1ZjogbnVtYmVyO1xyXG5cclxuICBnYWluOiBudW1iZXI7XHJcblxyXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXI7XHJcbn1cclxuXHJcbmNsYXNzIEhhY2tCYXRjaCBpbXBsZW1lbnRzIElIYWNrQmF0Y2gge1xyXG4gIGdyb3dUaHJlYWRzID0gMDtcclxuICBncm93V2Vha2VuVGhyZWFkcyA9IDA7XHJcbiAgaGFja1RocmVhZHMgPSAwO1xyXG4gIGhhY2tXZWFrZW5UaHJlYWRzID0gMDtcclxuXHJcbiAgaGFja1RpbWUgPSAwO1xyXG4gIGdyb3dUaW1lID0gMDtcclxuICB3ZWFrZW5UaW1lID0gMDtcclxuXHJcbiAgZ3Jvd01TQnVmID0gMDtcclxuICBncm93V2Vha2VuTVNCdWYgPSAwO1xyXG4gIGhhY2tNU0J1ZiA9IDA7XHJcbiAgaGFja1dlYWtlbk1zQnVmID0gMDtcclxuXHJcbiAgZ2FpbiA9IDA7XHJcblxyXG4gIHRvdGFsVGhyZWFkcygpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ3Jvd1RocmVhZHMgKyB0aGlzLmdyb3dXZWFrZW5UaHJlYWRzICsgdGhpcy5oYWNrVGhyZWFkcyArIHRoaXMuaGFja1dlYWtlblRocmVhZHM7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgSUN5Y2xlU3RhdHMge1xyXG4gIHRhcmdldDogc3RyaW5nO1xyXG4gIHN0YXJ0OiBudW1iZXI7XHJcbiAgZ2FpbjogbnVtYmVyO1xyXG4gIHRpbWU6IG51bWJlcjtcclxuICByYXRlOiBudW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGN5Y2xlKG5zOiBOUywgc2VydmVyOiBTZXJ2ZXIpOiBJQ3ljbGVTdGF0cyB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHNsYXZlcyA9IGdldFNsYXZlcyhucyk7XHJcbiAgICBsZXQgdG90YWxUaHJlYWRzID0gZ2V0VG90YWxUaHJlYWRzKG5zLCBzbGF2ZXMpO1xyXG5cclxuICAgIHNlcnZlci5iYXNlRGlmZmljdWx0eSA9IHNlcnZlci5iYXNlRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJCYXNlU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgc2VydmVyLm1pbkRpZmZpY3VsdHkgPSBzZXJ2ZXIubWluRGlmZmljdWx0eSB8fCBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlci5ob3N0bmFtZSk7XHJcbiAgICBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgPSBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgfHwgbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIuaG9zdG5hbWUpO1xyXG5cclxuICAgIHNlcnZlci5tb25leUF2YWlsYWJsZSA9IHNlcnZlci5tb25leUF2YWlsYWJsZSB8fCBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgc2VydmVyLm1vbmV5TWF4ID0gc2VydmVyLm1vbmV5TWF4IHx8IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlci5ob3N0bmFtZSk7XHJcblxyXG4gICAgY29uc3QgYmF0Y2hlczogSUhhY2tCYXRjaFtdID0gW107XHJcbiAgICBjb25zdCBiYXNlTVNPZmZzZXQgPSBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy53ZWFrZW5UaW1lKHNlcnZlciwgbnMuZ2V0UGxheWVyKCkpKTtcclxuXHJcbiAgICAvLyBmaXJzdCBiYXRjaCBpcyBhbHdheXMgR1cgaWYgdGhlIHNlcnZlciBpcyBub3QgYWxyZWFkeSBhdCBtaW4gc2VjdXJpdHkgLyBtYXggbW9uZXlcclxuICAgIC8vIGZpbmQgb3V0IGhvdyBtYW55IHRocmVhZHMgYXJlIHJlcXVpcmVkIHRvIGdyb3cgdG8gbWF4XHJcbiAgICBpZiAoc2VydmVyLmhhY2tEaWZmaWN1bHR5ID4gc2VydmVyLmJhc2VEaWZmaWN1bHR5IHx8IHNlcnZlci5tb25leUF2YWlsYWJsZSA8IHNlcnZlci5tb25leU1heCkge1xyXG4gICAgICBjb25zdCBiYXRjaCA9IG5ldyBIYWNrQmF0Y2goKTtcclxuICAgICAgY29uc3QgYmFzZVdlYWtlbiA9IHNlcnZlci5oYWNrRGlmZmljdWx0eSAtIHNlcnZlci5taW5EaWZmaWN1bHR5O1xyXG4gICAgICBiYXRjaC5ncm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5mb3JtdWxhcy5oYWNraW5nLmdyb3dUaHJlYWRzKHNlcnZlciwgbnMuZ2V0UGxheWVyKCksIHNlcnZlci5tb25leU1heCkpO1xyXG4gICAgICBsZXQgZ3Jvd1NlY0luY3JlYXNlID0gR1JPV19TRUMgKiBiYXRjaC5ncm93VGhyZWFkcztcclxuICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKGdyb3dTZWNJbmNyZWFzZSArIGJhc2VXZWFrZW4pIC8gV0VBS19TRUMpO1xyXG5cclxuICAgICAgaWYgKGJhdGNoLmdyb3dXZWFrZW5UaHJlYWRzICsgYmF0Y2guZ3Jvd1RocmVhZHMgPiB0b3RhbFRocmVhZHMpIHtcclxuICAgICAgICBncm93U2VjSW5jcmVhc2UgPSBHUk9XX1NFQyAqIHRvdGFsVGhyZWFkcztcclxuICAgICAgICBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbCgoZ3Jvd1NlY0luY3JlYXNlICsgYmFzZVdlYWtlbikgLyBXRUFLX1NFQyk7XHJcbiAgICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSB0b3RhbFRocmVhZHMgLSBiYXRjaC5ncm93V2Vha2VuVGhyZWFkcztcclxuICAgICAgfVxyXG5cclxuICAgICAgYmF0Y2hlcy5wdXNoKGJhdGNoKTtcclxuICAgICAgdG90YWxUaHJlYWRzIC09IGJhdGNoLnRvdGFsVGhyZWFkcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtaXNzZWRPbmNlID0gZmFsc2U7XHJcbiAgICB3aGlsZSAodG90YWxUaHJlYWRzID4gMCApIHtcclxuICAgICAgLy8gZnJvbSBub3cgb24gYXNzdW1lIHdlIGFyZSBhdCBtaW5pbXVtIHNlY3VyaXR5LCBtYXhpbXVtIG1vbmV5IGF2YWlsYWJsZVxyXG4gICAgICBzZXJ2ZXIuaGFja0RpZmZpY3VsdHkgPSBzZXJ2ZXIubWluRGlmZmljdWx0eTtcclxuICAgICAgc2VydmVyLm1vbmV5QXZhaWxhYmxlID0gc2VydmVyLm1vbmV5TWF4O1xyXG5cclxuICAgICAgY29uc3QgYmF0Y2ggPSBuZXcgSGFja0JhdGNoKCk7XHJcbiAgICAgIGJhdGNoLmhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKC44IC8gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChzZXJ2ZXIsIG5zLmdldFBsYXllcigpKSk7XHJcblxyXG4gICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGlmIChiYXRjaC5oYWNrVGhyZWFkcyA8PSAwKSB7XHJcbiAgICAgICAgICB0b3RhbFRocmVhZHMgPSAwO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBoYWNrUGVyY2VudCA9IG5zLmZvcm11bGFzLmhhY2tpbmcuaGFja1BlcmNlbnQoc2VydmVyLCBucy5nZXRQbGF5ZXIoKSkgKiBiYXRjaC5oYWNrVGhyZWFkcztcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gc2VydmVyLm1vbmV5QXZhaWxhYmxlO1xyXG4gICAgICAgIGNvbnN0IGZ1dHVyZSA9IGN1cnJlbnQgLSAoY3VycmVudCAqIGhhY2tQZXJjZW50KTtcclxuICAgICAgICBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBmdXR1cmU7XHJcbiAgICAgICAgYmF0Y2guZ3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhzZXJ2ZXIsIG5zLmdldFBsYXllcigpLCBzZXJ2ZXIubW9uZXlNYXgpICogMS41KTtcclxuICAgICAgICBzZXJ2ZXIubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXIubW9uZXlNYXg7XHJcbiAgICAgICAgYmF0Y2guZ2FpbiA9IGN1cnJlbnQgLSBmdXR1cmU7XHJcbiAgICAgIFxyXG4gICAgICAgIGJhdGNoLmhhY2tXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKG5zLmhhY2tBbmFseXplU2VjdXJpdHkoYmF0Y2guaGFja1RocmVhZHMsIHNlcnZlci5ob3N0bmFtZSkgLyBXRUFLX1NFQyk7XHJcbiAgICAgICAgYmF0Y2guZ3Jvd1dlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoYmF0Y2guZ3Jvd1RocmVhZHMgLyAoV0VBS19TRUMgLyBHUk9XX1NFQykpO1xyXG5cclxuICAgICAgICBpZiAoYmF0Y2gudG90YWxUaHJlYWRzKCkgPD0gdG90YWxUaHJlYWRzKSB7XHJcbiAgICAgICAgICB0b3RhbFRocmVhZHMgLT0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgICAgICAgICBiYXRjaGVzLnB1c2goYmF0Y2gpO1xyXG5cclxuICAgICAgICAgIGlmIChtaXNzZWRPbmNlKSB0b3RhbFRocmVhZHMgPSAwO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBiYXRjaC5oYWNrVGhyZWFkcyA9IE1hdGguZmxvb3IoYmF0Y2guaGFja1RocmVhZHMgKiAwLjc1KTtcclxuICAgICAgICBtaXNzZWRPbmNlID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZHVwbGljYXRlIGJhdGNoIHVudGlsIHRoZXJlIGlzIG5vIHNwYWNlIGxlZnRcclxuICAgICAgY29uc3QgYmF0Y2hUaHJlYWRzID0gYmF0Y2gudG90YWxUaHJlYWRzKCk7XHJcbiAgICAgIGNvbnN0IGFkZGl0aW9uYWxCYXRjaGVzID0gTWF0aC5mbG9vcih0b3RhbFRocmVhZHMgLyBiYXRjaFRocmVhZHMpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZGl0aW9uYWxCYXRjaGVzOyArK2kpIHtcclxuICAgICAgICBjb25zdCBuZXdCYXRjaCA9IG5ldyBIYWNrQmF0Y2g7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihuZXdCYXRjaCwgYmF0Y2gpO1xyXG4gICAgICAgIGJhdGNoZXMucHVzaChuZXdCYXRjaCk7XHJcbiAgICAgICAgdG90YWxUaHJlYWRzIC09IG5ld0JhdGNoLnRvdGFsVGhyZWFkcygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3ljbGVUaW1lID0gYmFzZU1TT2Zmc2V0ICsgKGJhdGNoZXMubGVuZ3RoICogTVNfQkVUV0VFTl9PUEVSQVRJT05TICogNCkgKyAoTVNfQkVUV0VFTl9PUEVSQVRJT05TICogMik7XHJcbiAgICBjb25zdCBjeWNsZUdhaW4gPSBiYXRjaGVzLnJlZHVjZSgoY291bnQsIGJhdGNoKSA9PiBjb3VudCArIGJhdGNoLmdhaW4sIDApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRhcmdldDogc2VydmVyLmhvc3RuYW1lLFxyXG4gICAgICBzdGFydDogYmFzZU1TT2Zmc2V0LFxyXG4gICAgICB0aW1lOiBjeWNsZVRpbWUsXHJcbiAgICAgIGdhaW46IGN5Y2xlR2FpbixcclxuICAgICAgcmF0ZTogY3ljbGVHYWluIC8gKGN5Y2xlVGltZSAvIDEwMClcclxuICAgIH1cclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRhcmdldDogc2VydmVyLmhvc3RuYW1lLFxyXG4gICAgICBzdGFydDogMSxcclxuICAgICAgdGltZTogMSxcclxuICAgICAgZ2FpbjogMCxcclxuICAgICAgcmF0ZTogMFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgbGV0IHNlcnZlcnMgPSBnZXRBbGxTZXJ2ZXJzKG5zKS5tYXAocyA9PiBucy5nZXRTZXJ2ZXIocykpLmZpbHRlcihzID0+IG5zLmdldFNlcnZlck1heE1vbmV5KHMuaG9zdG5hbWUpID4gMCAmJiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzLmhvc3RuYW1lKSA+IDAgJiYgcy5ob3N0bmFtZSAhPT0gJ2hvbWUnICYmICFzLnB1cmNoYXNlZEJ5UGxheWVyKTtcclxuXHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gJ3N0cmluZycpIHNlcnZlcnMgPSBzZXJ2ZXJzLmZpbHRlcihzID0+IHMuaG9zdG5hbWUgPT09IG5zLmFyZ3NbMF0pO1xyXG5cclxuICBjb25zdCBkYXRhID0gc2VydmVycy5tYXAocyA9PiB7XHJcbiAgICBjb25zdCBmaXJzdEN5Y2xlID0gY3ljbGUobnMsIHMpO1xyXG4gICAgY29uc3QgbmV4dEN5Y2xlID0gY3ljbGUobnMsIHMpO1xyXG4gICAgY29uc3QgZmluYWxJbmZvOiBJQ3ljbGVTdGF0cyA9IE9iamVjdC5hc3NpZ24oe30sIGZpcnN0Q3ljbGUpO1xyXG4gICAgY29uc3QgdG90YWxDeWNsZUNvdW50ID0gNTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdG90YWxDeWNsZUNvdW50OyBpKyspIHtcclxuICAgICAgZmluYWxJbmZvLmdhaW4gKz0gbmV4dEN5Y2xlLmdhaW47XHJcbiAgICAgIGZpbmFsSW5mby50aW1lICs9IG5leHRDeWNsZS50aW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmFsSW5mby5yYXRlID0gZmluYWxJbmZvLmdhaW4gLyAoZmluYWxJbmZvLnRpbWUgLyAxMDApO1xyXG5cclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAgJHtzLmhvc3RuYW1lfWAsXHJcbiAgICAgIChmaW5hbEluZm8ucmF0ZS8xMDAwMDApLnRvRml4ZWQoMCkucGFkU3RhcnQoOCksXHJcbiAgICAgIGAke25zLmZvcm1hdE51bWJlcihmaW5hbEluZm8ucmF0ZSwgMywgMTAwMCwgdHJ1ZSl9L3NgLnBhZFN0YXJ0KDEyKSxcclxuICAgICAgZm9ybWF0VGltZShmaXJzdEN5Y2xlLnN0YXJ0KS5wYWRTdGFydCgxMiksXHJcbiAgICAgIGZvcm1hdFRpbWUoZmlyc3RDeWNsZS50aW1lKS5wYWRTdGFydCgxMiksXHJcbiAgICAgIGZvcm1hdFRpbWUobmV4dEN5Y2xlLnRpbWUpLnBhZFN0YXJ0KDEyKSxcclxuICAgICAgZm9ybWF0VGltZShmaW5hbEluZm8udGltZSkucGFkU3RhcnQoMTIpLFxyXG4gICAgICBgJHtucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHMuaG9zdG5hbWUpLnRvRml4ZWQoMCkucGFkU3RhcnQoMil9LyR7bnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzLmhvc3RuYW1lKS50b0ZpeGVkKDApLnBhZFN0YXJ0KDIpfWAucGFkU3RhcnQoOSksXHJcbiAgICAgIG5zLmZvcm1hdFBlcmNlbnQobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUocy5ob3N0bmFtZSkgLyBucy5nZXRTZXJ2ZXJNYXhNb25leShzLmhvc3RuYW1lKSkucGFkU3RhcnQoOClcclxuICAgIF1cclxuICB9KS5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYlsxXSkgLSBOdW1iZXIoYVsxXSkpO1xyXG5cclxuXHRjb25zdCBjb2x1bW5zID0gW1xyXG5cdFx0eyBoZWFkZXI6ICcgU2VydmVycycsIHdpZHRoOiAyMCB9LFxyXG5cdFx0eyBoZWFkZXI6ICcgICAgUmF0ZScsIHdpZHRoOiA5IH0sXHJcblx0XHR7IGhlYWRlcjogJyAgICAgICAgUmF0ZScsIHdpZHRoOiAxMyB9LFxyXG4gICAgeyBoZWFkZXI6ICcgIEluaXRpYWwgVG0nLCB3aWR0aDogMTMgfSxcclxuICAgIHsgaGVhZGVyOiAnIEZpcnN0IEN5Y2xlJywgd2lkdGg6IDEzIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgTmV4dCBDeWNsZScsIHdpZHRoOiAxMyB9LFxyXG4gICAgeyBoZWFkZXI6ICcgIFRvdGFsIFRpbWUnLCB3aWR0aDogMTMgfSxcclxuICAgIHsgaGVhZGVyOiAnIFNlY3VyaXR5Jywgd2lkdGg6IDEwIH0sXHJcbiAgICB7IGhlYWRlcjogJyAgTW9uZXknLCB3aWR0aDogOSB9LFxyXG4gICAgLy8geyBoZWFkZXI6ICdMT0cgTW9uZXknLCB3aWR0aDogMTAgfSxcclxuICAgIC8vIHsgaGVhZGVyOiAnICAgIFZhbHVlJywgd2lkdGg6IDEwIH0sXHJcblx0XTtcclxuXHJcblx0UHJpbnRUYWJsZShucywgZGF0YSwgY29sdW1ucywgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG59XHJcbiJdfQ==\",\"filename\":\"eval.js\",\"server\":\"home\"}}],[\"rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const targetFavor = ns.formulas.reputation.calculateFavorToRep(150);\\r\\n    const currentRep = 81;\\r\\n    const currentFavor = ns.formulas.reputation.calculateFavorToRep(currentRep);\\r\\n    const favorNeeded = targetFavor - currentFavor;\\r\\n    ns.tprintf(`Total favor needed for 150 rep: ${ns.formatNumber(targetFavor, 0, 1000)}`);\\r\\n    ns.tprintf(`Total favor accumulated: ${ns.formatNumber(currentFavor, 3, 1000)} (based on ${currentRep} rep)`);\\r\\n    ns.tprintf(`Favor needed this round to get to 150 rep: ${ns.formatNumber(favorNeeded, 3, 1000)}`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JlcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1RSxNQUFNLFdBQVcsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkYsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLFVBQVUsT0FBTyxDQUFDLENBQUM7SUFDOUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4Q0FBOEMsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCB0YXJnZXRGYXZvciA9IG5zLmZvcm11bGFzLnJlcHV0YXRpb24uY2FsY3VsYXRlRmF2b3JUb1JlcCgxNTApO1xyXG4gIGNvbnN0IGN1cnJlbnRSZXAgPSA4MTtcclxuICBjb25zdCBjdXJyZW50RmF2b3IgPSBucy5mb3JtdWxhcy5yZXB1dGF0aW9uLmNhbGN1bGF0ZUZhdm9yVG9SZXAoY3VycmVudFJlcCk7XHJcbiAgY29uc3QgZmF2b3JOZWVkZWQgPSB0YXJnZXRGYXZvciAtIGN1cnJlbnRGYXZvcjtcclxuICBucy50cHJpbnRmKGBUb3RhbCBmYXZvciBuZWVkZWQgZm9yIDE1MCByZXA6ICR7bnMuZm9ybWF0TnVtYmVyKHRhcmdldEZhdm9yLCAwLCAxMDAwKX1gKTtcclxuICBucy50cHJpbnRmKGBUb3RhbCBmYXZvciBhY2N1bXVsYXRlZDogJHtucy5mb3JtYXROdW1iZXIoY3VycmVudEZhdm9yLCAzLCAxMDAwKX0gKGJhc2VkIG9uICR7Y3VycmVudFJlcH0gcmVwKWApO1xyXG4gIG5zLnRwcmludGYoYEZhdm9yIG5lZWRlZCB0aGlzIHJvdW5kIHRvIGdldCB0byAxNTAgcmVwOiAke25zLmZvcm1hdE51bWJlcihmYXZvck5lZWRlZCwgMywgMTAwMCl9YCk7XHJcbn1cclxuIl19\",\"filename\":\"rep.js\",\"server\":\"home\"}}],[\"hud.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    /*\\r\\n        Original script by: u/I_hate_you_wasTaken, (https://www.reddit.com/r/Bitburner/comments/10urhbn/custom_overview_stats_but_better/)\\r\\n        \\r\\n        UPDATE 2/25/2023:\\r\\n  \\r\\n        After the v2.2.2 release was released on 2/21/2023, the findPlayer() method used in the original script for 'globalThis.webpackJsonp.push()' and payload_id, stopped working.\\r\\n        \\r\\n        I refactored the script to use ns.getPlayer() and ns.gang.getGangInformation() as well as other methods to build out the previous and some new data fot the HUD.\\r\\n        \\r\\n        The HUD now also shows the following:\\r\\n            • City\\r\\n            • Location\\r\\n            • Faction\\r\\n            • Gang Respect\\r\\n            • Gang Income\\r\\n            • Scripts Income $/sec\\r\\n            • Script Experience XP/sec\\r\\n            • Karma\\r\\n            • Kills\\r\\n  \\r\\n        This hs been tested on v2.2.2 (d3f9554a), and it is working/stable.\\r\\n        - u/DukeNukemDad\\r\\n    */\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    // ns.clearLog();\\r\\n    // ns.tail();\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const doc = eval('document');\\r\\n    const removeByClassName = (sel) => doc.querySelectorAll(sel).forEach(el => el.remove());\\r\\n    const colorByClassName = (sel, col) => doc.querySelectorAll(sel).forEach(el => { el.style.color = col; el.style.fontSize = '0.75rem'; });\\r\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\r\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\r\\n    var theme = ns.ui.getTheme();\\r\\n    while (true) {\\r\\n        try {\\r\\n            let player = ns.getPlayer();\\r\\n            var playerCity = player.city; // city\\r\\n            var playerLocation = player.location; // location\\r\\n            var playerKills = player.numPeopleKilled; // numPeopleKilled\\r\\n            var playerKarma = ns.heart.break();\\r\\n            let purchased_servers = ns.getPurchasedServers(); // get every bought server if exists, else just create our blank array and add home to it.\\r\\n            purchased_servers.push(\\\"home\\\"); // add home to the array.\\r\\n            // End paramaters, begin CSS: \\r\\n            removeByClassName('.HUD_el');\\r\\n            theme = ns.ui.getTheme();\\r\\n            removeByClassName('.HUD_sep');\\r\\n            hook0.insertAdjacentHTML('beforebegin', `<hr class=\\\"HUD_sep HUD_el\\\">`);\\r\\n            hook1.insertAdjacentHTML('beforebegin', `<hr class=\\\"HUD_sep HUD_el\\\">`);\\r\\n            // playerCity\\r\\n            hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_C HUD_el\\\" title=\\\"The name of the City you are currently in.\\\">City </element><br class=\\\"HUD_el\\\">`);\\r\\n            colorByClassName(\\\".HUD_GN_C\\\", theme['cha']);\\r\\n            hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_C HUD_el\\\">${playerCity + '<br class=\\\"HUD_el\\\">'}</element>`);\\r\\n            colorByClassName(\\\".HUD_GN_C\\\", theme['cha']);\\r\\n            // playerLocation\\r\\n            hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_L HUD_el\\\" title=\\\"Your current location inside the city.\\\">Location </element><br class=\\\"HUD_el\\\">`);\\r\\n            colorByClassName(\\\".HUD_GN_L\\\", theme['cha']);\\r\\n            hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_GN_L HUD_el\\\">${playerLocation + '<br class=\\\"HUD_el\\\">'}</element>`);\\r\\n            colorByClassName(\\\".HUD_GN_L\\\", theme['cha']);\\r\\n            // playerKarma\\r\\n            hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Karma_H HUD_el\\\" title=\\\"Your karma.\\\"><br>Karma &nbsp;&nbsp;&nbsp;</element>`);\\r\\n            colorByClassName(\\\".HUD_Karma_H\\\", theme['hp']);\\r\\n            hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Karma HUD_el\\\"><br>${playerKarma}</element>`);\\r\\n            colorByClassName(\\\".HUD_Karma\\\", theme['hp']);\\r\\n            removeByClassName('.HUD_Kills_H');\\r\\n            // playerKills\\r\\n            hook0.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Kills_H HUD_el\\\" title=\\\"Your kill count, increases every successful homicide.\\\"><br>Kills &nbsp;&nbsp;&nbsp;</element>`);\\r\\n            colorByClassName(\\\".HUD_Kills_H\\\", theme['hp']);\\r\\n            removeByClassName('.HUD_Kills');\\r\\n            hook1.insertAdjacentHTML('beforeend', `<element class=\\\"HUD_Kills HUD_el\\\"><br>${playerKills}</element>`);\\r\\n            colorByClassName(\\\".HUD_Kills\\\", theme['hp']);\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\r\\n        }\\r\\n        ns.atExit(function () { removeByClassName('.HUD_el'); });\\r\\n        await ns.sleep(200);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2h1ZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUMzQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXNCRTtJQUVGLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFFYixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxNQUFNLENBQUMsOEVBQThFLENBQUMsQ0FBQztRQUMxRixFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87S0FDVjtJQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QixNQUFNLGlCQUFpQixHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDeEYsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVB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QUFnQixDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUM3QyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUMvQixLQUFLLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLHlDQUF5QyxXQUFXLFlBQVksQ0FBQyxDQUFBO1lBQ3ZHLGdCQUFnQixDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtTQUM5QztRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUVELEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3hELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN2QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHBhcmFtIHtOU30gbnMgKiovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XHJcbiAgLypcclxuICAgICAgT3JpZ2luYWwgc2NyaXB0IGJ5OiB1L0lfaGF0ZV95b3Vfd2FzVGFrZW4sIChodHRwczovL3d3dy5yZWRkaXQuY29tL3IvQml0YnVybmVyL2NvbW1lbnRzLzEwdXJoYm4vY3VzdG9tX292ZXJ2aWV3X3N0YXRzX2J1dF9iZXR0ZXIvKVxyXG4gICAgICBcclxuICAgICAgVVBEQVRFIDIvMjUvMjAyMzogXHJcblxyXG4gICAgICBBZnRlciB0aGUgdjIuMi4yIHJlbGVhc2Ugd2FzIHJlbGVhc2VkIG9uIDIvMjEvMjAyMywgdGhlIGZpbmRQbGF5ZXIoKSBtZXRob2QgdXNlZCBpbiB0aGUgb3JpZ2luYWwgc2NyaXB0IGZvciAnZ2xvYmFsVGhpcy53ZWJwYWNrSnNvbnAucHVzaCgpJyBhbmQgcGF5bG9hZF9pZCwgc3RvcHBlZCB3b3JraW5nLlxyXG4gICAgICBcclxuICAgICAgSSByZWZhY3RvcmVkIHRoZSBzY3JpcHQgdG8gdXNlIG5zLmdldFBsYXllcigpIGFuZCBucy5nYW5nLmdldEdhbmdJbmZvcm1hdGlvbigpIGFzIHdlbGwgYXMgb3RoZXIgbWV0aG9kcyB0byBidWlsZCBvdXQgdGhlIHByZXZpb3VzIGFuZCBzb21lIG5ldyBkYXRhIGZvdCB0aGUgSFVELiBcclxuICAgICAgXHJcbiAgICAgIFRoZSBIVUQgbm93IGFsc28gc2hvd3MgdGhlIGZvbGxvd2luZzogICAgXHJcbiAgICAgICAgICDigKIgQ2l0eVxyXG4gICAgICAgICAg4oCiIExvY2F0aW9uXHJcbiAgICAgICAgICDigKIgRmFjdGlvblxyXG4gICAgICAgICAg4oCiIEdhbmcgUmVzcGVjdFxyXG4gICAgICAgICAg4oCiIEdhbmcgSW5jb21lXHJcbiAgICAgICAgICDigKIgU2NyaXB0cyBJbmNvbWUgJC9zZWNcclxuICAgICAgICAgIOKAoiBTY3JpcHQgRXhwZXJpZW5jZSBYUC9zZWNcclxuICAgICAgICAgIOKAoiBLYXJtYVxyXG4gICAgICAgICAg4oCiIEtpbGxzXHJcblxyXG4gICAgICBUaGlzIGhzIGJlZW4gdGVzdGVkIG9uIHYyLjIuMiAoZDNmOTU1NGEpLCBhbmQgaXQgaXMgd29ya2luZy9zdGFibGUuICAgIFxyXG4gICAgICAtIHUvRHVrZU51a2VtRGFkICAgIFxyXG4gICovXHJcblxyXG4gIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcbiAgLy8gbnMuY2xlYXJMb2coKTtcclxuICAvLyBucy50YWlsKCk7XHJcblxyXG4gIGNvbnN0IGFyZ3MgPSBucy5mbGFncyhbW1wiaGVscFwiLCBmYWxzZV1dKTtcclxuICBpZiAoYXJncy5oZWxwKSB7XHJcbiAgICAgIG5zLnRwcmludChcIlRoaXMgc2NyaXB0IHdpbGwgZW5oYW5jZSB5b3VyIEhVRCAoSGVhZHMgdXAgRGlzcGxheSkgd2l0aCBjdXN0b20gc3RhdGlzdGljcy5cIik7XHJcbiAgICAgIG5zLnRwcmludChgVXNhZ2U6IHJ1biAke25zLmdldFNjcmlwdE5hbWUoKX1gKTtcclxuICAgICAgbnMudHByaW50KFwiRXhhbXBsZTpcIik7XHJcbiAgICAgIG5zLnRwcmludChgPiBydW4gJHtucy5nZXRTY3JpcHROYW1lKCl9YCk7XHJcbiAgICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IGRvYyA9IGV2YWwoJ2RvY3VtZW50Jyk7XHJcbiAgY29uc3QgcmVtb3ZlQnlDbGFzc05hbWUgPSAoc2VsKSA9PiBkb2MucXVlcnlTZWxlY3RvckFsbChzZWwpLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlKCkpO1xyXG4gIGNvbnN0IGNvbG9yQnlDbGFzc05hbWUgPSAoc2VsLCBjb2wpID0+IGRvYy5xdWVyeVNlbGVjdG9yQWxsKHNlbCkuZm9yRWFjaChlbCA9PiB7ZWwuc3R5bGUuY29sb3IgPSBjb2w7IGVsLnN0eWxlLmZvbnRTaXplID0gJzAuNzVyZW0nfSk7XHJcbiAgY29uc3QgaG9vazAgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ292ZXJ2aWV3LWV4dHJhLWhvb2stMCcpO1xyXG4gIGNvbnN0IGhvb2sxID0gZG9jLmdldEVsZW1lbnRCeUlkKCdvdmVydmlldy1leHRyYS1ob29rLTEnKTtcclxuXHJcbiAgdmFyIHRoZW1lID0gbnMudWkuZ2V0VGhlbWUoKVxyXG5cclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICAgbGV0IHBsYXllciA9IG5zLmdldFBsYXllcigpO1xyXG5cclxuICAgICAgICAgIHZhciBwbGF5ZXJDaXR5ID0gcGxheWVyLmNpdHk7IC8vIGNpdHlcclxuICAgICAgICAgIHZhciBwbGF5ZXJMb2NhdGlvbiA9IHBsYXllci5sb2NhdGlvbjsgLy8gbG9jYXRpb25cclxuICAgICAgICAgIHZhciBwbGF5ZXJLaWxscyA9IHBsYXllci5udW1QZW9wbGVLaWxsZWQ7IC8vIG51bVBlb3BsZUtpbGxlZFxyXG4gICAgICAgICAgdmFyIHBsYXllckthcm1hID0gbnMuaGVhcnQuYnJlYWsoKTtcclxuXHJcbiAgICAgICAgICBsZXQgcHVyY2hhc2VkX3NlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCk7IC8vIGdldCBldmVyeSBib3VnaHQgc2VydmVyIGlmIGV4aXN0cywgZWxzZSBqdXN0IGNyZWF0ZSBvdXIgYmxhbmsgYXJyYXkgYW5kIGFkZCBob21lIHRvIGl0LlxyXG4gICAgICAgICAgcHVyY2hhc2VkX3NlcnZlcnMucHVzaChcImhvbWVcIik7IC8vIGFkZCBob21lIHRvIHRoZSBhcnJheS5cclxuXHJcbiAgICAgICAgICAvLyBFbmQgcGFyYW1hdGVycywgYmVnaW4gQ1NTOiBcclxuXHJcbiAgICAgICAgICByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9lbCcpO1xyXG4gICAgICAgICAgdGhlbWUgPSBucy51aS5nZXRUaGVtZSgpO1xyXG4gICAgICAgICAgcmVtb3ZlQnlDbGFzc05hbWUoJy5IVURfc2VwJyk7XHJcblxyXG4gICAgICAgICAgaG9vazAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmViZWdpbicsIGA8aHIgY2xhc3M9XCJIVURfc2VwIEhVRF9lbFwiPmApO1xyXG4gICAgICAgICAgaG9vazEuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmViZWdpbicsIGA8aHIgY2xhc3M9XCJIVURfc2VwIEhVRF9lbFwiPmApO1xyXG5cclxuICAgICAgICAgIC8vIHBsYXllckNpdHlcclxuICAgICAgICAgIGhvb2swLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxlbGVtZW50IGNsYXNzPVwiSFVEX0dOX0MgSFVEX2VsXCIgdGl0bGU9XCJUaGUgbmFtZSBvZiB0aGUgQ2l0eSB5b3UgYXJlIGN1cnJlbnRseSBpbi5cIj5DaXR5IDwvZWxlbWVudD48YnIgY2xhc3M9XCJIVURfZWxcIj5gKVxyXG4gICAgICAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfR05fQ1wiLCB0aGVtZVsnY2hhJ10pXHJcbiAgICAgICAgICBob29rMS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9HTl9DIEhVRF9lbFwiPiR7cGxheWVyQ2l0eSArICc8YnIgY2xhc3M9XCJIVURfZWxcIj4nfTwvZWxlbWVudD5gKVxyXG4gICAgICAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfR05fQ1wiLCB0aGVtZVsnY2hhJ10pXHJcblxyXG4gICAgICAgICAgLy8gcGxheWVyTG9jYXRpb25cclxuICAgICAgICAgIGhvb2swLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxlbGVtZW50IGNsYXNzPVwiSFVEX0dOX0wgSFVEX2VsXCIgdGl0bGU9XCJZb3VyIGN1cnJlbnQgbG9jYXRpb24gaW5zaWRlIHRoZSBjaXR5LlwiPkxvY2F0aW9uIDwvZWxlbWVudD48YnIgY2xhc3M9XCJIVURfZWxcIj5gKVxyXG4gICAgICAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfR05fTFwiLCB0aGVtZVsnY2hhJ10pXHJcbiAgICAgICAgICBob29rMS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9HTl9MIEhVRF9lbFwiPiR7cGxheWVyTG9jYXRpb24gKyAnPGJyIGNsYXNzPVwiSFVEX2VsXCI+J308L2VsZW1lbnQ+YClcclxuICAgICAgICAgIGNvbG9yQnlDbGFzc05hbWUoXCIuSFVEX0dOX0xcIiwgdGhlbWVbJ2NoYSddKVxyXG5cclxuICAgICAgICAgIC8vIHBsYXllckthcm1hXHJcbiAgICAgICAgICBob29rMC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGA8ZWxlbWVudCBjbGFzcz1cIkhVRF9LYXJtYV9IIEhVRF9lbFwiIHRpdGxlPVwiWW91ciBrYXJtYS5cIj48YnI+S2FybWEgJm5ic3A7Jm5ic3A7Jm5ic3A7PC9lbGVtZW50PmApXHJcbiAgICAgICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LYXJtYV9IXCIsIHRoZW1lWydocCddKVxyXG4gICAgICAgICAgaG9vazEuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfS2FybWEgSFVEX2VsXCI+PGJyPiR7cGxheWVyS2FybWF9PC9lbGVtZW50PmApXHJcbiAgICAgICAgICBjb2xvckJ5Q2xhc3NOYW1lKFwiLkhVRF9LYXJtYVwiLCB0aGVtZVsnaHAnXSlcclxuXHJcbiAgICAgICAgICByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9LaWxsc19IJylcclxuXHJcbiAgICAgICAgICAvLyBwbGF5ZXJLaWxsc1xyXG4gICAgICAgICAgaG9vazAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgPGVsZW1lbnQgY2xhc3M9XCJIVURfS2lsbHNfSCBIVURfZWxcIiB0aXRsZT1cIllvdXIga2lsbCBjb3VudCwgaW5jcmVhc2VzIGV2ZXJ5IHN1Y2Nlc3NmdWwgaG9taWNpZGUuXCI+PGJyPktpbGxzICZuYnNwOyZuYnNwOyZuYnNwOzwvZWxlbWVudD5gKVxyXG4gICAgICAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfS2lsbHNfSFwiLCB0aGVtZVsnaHAnXSlcclxuICAgICAgICAgIHJlbW92ZUJ5Q2xhc3NOYW1lKCcuSFVEX0tpbGxzJylcclxuICAgICAgICAgIGhvb2sxLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYDxlbGVtZW50IGNsYXNzPVwiSFVEX0tpbGxzIEhVRF9lbFwiPjxicj4ke3BsYXllcktpbGxzfTwvZWxlbWVudD5gKVxyXG4gICAgICAgICAgY29sb3JCeUNsYXNzTmFtZShcIi5IVURfS2lsbHNcIiwgdGhlbWVbJ2hwJ10pXHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgbnMucHJpbnQoXCJFUlJPUjogVXBkYXRlIFNraXBwZWQ6IFwiICsgU3RyaW5nKGVycikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBucy5hdEV4aXQoZnVuY3Rpb24gKCkgeyByZW1vdmVCeUNsYXNzTmFtZSgnLkhVRF9lbCcpOyB9KVxyXG4gICAgICBhd2FpdCBucy5zbGVlcCgyMDApO1xyXG4gIH1cclxufSJdfQ==\",\"filename\":\"hud.js\",\"server\":\"home\"}}],[\"cct.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"./util\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const server of getAllServers(ns)) {\\r\\n        const contracts = ns.ls(server, '.cct');\\r\\n        for (const contract of contracts) {\\r\\n            const type = ns.codingcontract.getContractType(contract, server);\\r\\n            const data = ns.codingcontract.getData(contract, server);\\r\\n            ns.tprintf(`${server}: ${contract} | ${type}`);\\r\\n            solve(type, data, server, contract, ns);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function solve(type, data, server, contract, ns) {\\r\\n    let solution = 'none';\\r\\n    switch (type) {\\r\\n        case \\\"Algorithmic Stock Trader I\\\":\\r\\n            solution = maxProfit([1, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader II\\\":\\r\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader III\\\":\\r\\n            solution = maxProfit([2, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader IV\\\":\\r\\n            solution = maxProfit(data);\\r\\n            break;\\r\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n            solution = solveTriangleSum(data, ns);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid I\\\":\\r\\n            solution = uniquePathsI(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid II\\\":\\r\\n            solution = uniquePathsII(data);\\r\\n            break;\\r\\n        case \\\"Generate IP Addresses\\\":\\r\\n            solution = generateIps(data);\\r\\n            break;\\r\\n        case \\\"Find Largest Prime Factor\\\":\\r\\n            solution = factor3(data);\\r\\n            break;\\r\\n        case \\\"Spiralize Matrix\\\":\\r\\n            solution = spiral(data);\\r\\n            break;\\r\\n        case \\\"Merge Overlapping Intervals\\\":\\r\\n            solution = mergeOverlap(data);\\r\\n            break;\\r\\n        case \\\"Find All Valid Math Expressions\\\":\\r\\n            solution = solveFindAllValidMathExpressions(data);\\r\\n            break;\\r\\n        case \\\"Subarray with Maximum Sum\\\":\\r\\n            solution = solverLargestSubset(ns, data);\\r\\n            break;\\r\\n        case \\\"Sanitize Parentheses in Expression\\\":\\r\\n            solution = SanitizeParensSolver(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game\\\":\\r\\n            solution = solverArrayJumpingGame(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum\\\":\\r\\n            solution = solverWaysToSum(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum II\\\":\\r\\n            solution = solveWaysToSumII(data);\\r\\n            break;\\r\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\r\\n            solution = HammingEncode(data);\\r\\n            break;\\r\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\r\\n            solution = HammingDecode(data);\\r\\n            break;\\r\\n        case \\\"Shortest Path in a Grid\\\":\\r\\n            solution = ShortestPathInAGrid(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game II\\\":\\r\\n            solution = solverArrayJumpingGameII(data);\\r\\n            break;\\r\\n        case \\\"Compression II: LZ Decompression\\\":\\r\\n            solution = comprLZDecode(data);\\r\\n            break;\\r\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\r\\n            solution = coloringGraph(data);\\r\\n            break;\\r\\n        case \\\"Compression III: LZ Compression\\\":\\r\\n            solution = comprLZEncode(data);\\r\\n            break;\\r\\n        case \\\"Compression I: RLE Compression\\\":\\r\\n            solution = RLEencode(data);\\r\\n            break;\\r\\n        case \\\"Encryption I: Caesar Cipher\\\":\\r\\n            solution = caesarCipher(data);\\r\\n            break;\\r\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\r\\n            solution = vignereCipher(data);\\r\\n            break;\\r\\n    }\\r\\n    if (solution == 'none') {\\r\\n        ns.tprint('ERROR: NO SOLVER FOR ' + contract + ' ' + solution);\\r\\n        return '';\\r\\n    }\\r\\n    var ret = ns.codingcontract.attempt(solution, contract, server, { returnReward: true });\\r\\n    if (ret == false) {\\r\\n        ns.tprint('FAILED TO SOLVE: ' + contract + ' type: ' + type + ' data: ' + data + ' attempted solution: ' + solution);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`Contract solved successfully! Reward: ${ret}`);\\r\\n    }\\r\\n    return ret;\\r\\n}\\r\\nfunction vignereCipher(data) {\\r\\n    const cipher = [...data[0]]\\r\\n        .map((a, i) => {\\r\\n        return a === \\\" \\\"\\r\\n            ? a\\r\\n            : String.fromCharCode(((a.charCodeAt(0) - 2 * 65 + data[1].charCodeAt(i % data[1].length)) % 26) + 65);\\r\\n    })\\r\\n        .join(\\\"\\\");\\r\\n    return cipher;\\r\\n}\\r\\nfunction caesarCipher(data) {\\r\\n    const cipher = [...data[0]]\\r\\n        .map((a) => (a === \\\" \\\" ? a : String.fromCharCode(((a.charCodeAt(0) - 65 - data[1] + 26) % 26) + 65)))\\r\\n        .join(\\\"\\\");\\r\\n    return cipher;\\r\\n}\\r\\nfunction solverArrayJumpingGameII(arrayData) {\\r\\n    let n = arrayData.length;\\r\\n    let reach = 0;\\r\\n    let jumps = 0;\\r\\n    let lastJump = -1;\\r\\n    while (reach < n - 1) {\\r\\n        let jumpedFrom = -1;\\r\\n        for (let i = reach; i > lastJump; i--) {\\r\\n            if (i + arrayData[i] > reach) {\\r\\n                reach = i + arrayData[i];\\r\\n                jumpedFrom = i;\\r\\n            }\\r\\n        }\\r\\n        if (jumpedFrom === -1) {\\r\\n            jumps = 0;\\r\\n            break;\\r\\n        }\\r\\n        lastJump = jumpedFrom;\\r\\n        jumps++;\\r\\n    }\\r\\n    return jumps;\\r\\n}\\r\\nfunction ShortestPathInAGrid(data) {\\r\\n    let H = data.length, W = data[0].length;\\r\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\r\\n    dist[0][0] = 0;\\r\\n    let queue = [[0, 0]];\\r\\n    while (queue.length > 0) {\\r\\n        let [i, j] = queue.shift();\\r\\n        let d = dist[i][j];\\r\\n        if (i > 0 && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1) {\\r\\n            dist[i - 1][j] = d + 1;\\r\\n            queue.push([i - 1, j]);\\r\\n        }\\r\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1) {\\r\\n            dist[i + 1][j] = d + 1;\\r\\n            queue.push([i + 1, j]);\\r\\n        }\\r\\n        if (j > 0 && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1) {\\r\\n            dist[i][j - 1] = d + 1;\\r\\n            queue.push([i, j - 1]);\\r\\n        }\\r\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1) {\\r\\n            dist[i][j + 1] = d + 1;\\r\\n            queue.push([i, j + 1]);\\r\\n        }\\r\\n    }\\r\\n    let path = \\\"\\\";\\r\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\r\\n        let i = H - 1, j = W - 1;\\r\\n        while (i !== 0 || j !== 0) {\\r\\n            let d = dist[i][j];\\r\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\r\\n            if (i > 0 && dist[i - 1][j] < d) {\\r\\n                d = dist[i - 1][j];\\r\\n                new_i = i - 1;\\r\\n                new_j = j;\\r\\n                dir = \\\"D\\\";\\r\\n            }\\r\\n            if (i < H - 1 && dist[i + 1][j] < d) {\\r\\n                d = dist[i + 1][j];\\r\\n                new_i = i + 1;\\r\\n                new_j = j;\\r\\n                dir = \\\"U\\\";\\r\\n            }\\r\\n            if (j > 0 && dist[i][j - 1] < d) {\\r\\n                d = dist[i][j - 1];\\r\\n                new_i = i;\\r\\n                new_j = j - 1;\\r\\n                dir = \\\"R\\\";\\r\\n            }\\r\\n            if (j < W - 1 && dist[i][j + 1] < d) {\\r\\n                d = dist[i][j + 1];\\r\\n                new_i = i;\\r\\n                new_j = j + 1;\\r\\n                dir = \\\"L\\\";\\r\\n            }\\r\\n            i = new_i;\\r\\n            j = new_j;\\r\\n            path = dir + path;\\r\\n        }\\r\\n    }\\r\\n    return path;\\r\\n}\\r\\n/**\\r\\n *\\r\\n * @param {number[][]} input [targetNumber,[available numbers]]\\r\\n * @returns\\r\\n */\\r\\nfunction solveWaysToSumII(input) {\\r\\n    /**\\r\\n     *\\r\\n     * @param {number} target\\r\\n     * @param {number[]} nums\\r\\n     * @returns\\r\\n     */\\r\\n    let n = input[0];\\r\\n    let nums = input[1];\\r\\n    let table = new Array(n + 1);\\r\\n    for (let i = 0; i < n + 1; i++) {\\r\\n        table[i] = 0;\\r\\n    }\\r\\n    table[0] = 1;\\r\\n    for (let i of nums) {\\r\\n        if (i > n) {\\r\\n            continue;\\r\\n        }\\r\\n        for (let j = i; j <= n; j++) {\\r\\n            table[j] += table[j - i];\\r\\n        }\\r\\n        console.log(table);\\r\\n    }\\r\\n    return table[n];\\r\\n}\\r\\n//ALGORITHMIC STOCK TRADER\\r\\nfunction maxProfit(arrayData) {\\r\\n    let i, j, k;\\r\\n    let maxTrades = arrayData[0];\\r\\n    let stockPrices = arrayData[1];\\r\\n    let tempStr = \\\"[0\\\";\\r\\n    for (i = 0; i < stockPrices.length; i++) {\\r\\n        tempStr += \\\",0\\\";\\r\\n    }\\r\\n    tempStr += \\\"]\\\";\\r\\n    let tempArr = \\\"[\\\" + tempStr;\\r\\n    for (i = 0; i < maxTrades - 1; i++) {\\r\\n        tempArr += \\\",\\\" + tempStr;\\r\\n    }\\r\\n    tempArr += \\\"]\\\";\\r\\n    let highestProfit = JSON.parse(tempArr);\\r\\n    for (i = 0; i < maxTrades; i++) {\\r\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\r\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && j > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\r\\n}\\r\\n//SMALLEST TRIANGLE SUM\\r\\nfunction solveTriangleSum(arrayData, ns) {\\r\\n    let triangle = arrayData;\\r\\n    let nextArray;\\r\\n    let previousArray = triangle[0];\\r\\n    for (let i = 1; i < triangle.length; i++) {\\r\\n        nextArray = [];\\r\\n        for (let j = 0; j < triangle[i].length; j++) {\\r\\n            if (j == 0) {\\r\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\r\\n            }\\r\\n            else if (j == triangle[i].length - 1) {\\r\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\r\\n            }\\r\\n            else {\\r\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\r\\n            }\\r\\n        }\\r\\n        previousArray = nextArray;\\r\\n    }\\r\\n    return Math.min.apply(null, nextArray);\\r\\n}\\r\\n//UNIQUE PATHS IN A GRID\\r\\nfunction uniquePathsI(grid) {\\r\\n    const rightMoves = grid[0] - 1;\\r\\n    const downMoves = grid[1] - 1;\\r\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\r\\n}\\r\\nfunction factorial(n) {\\r\\n    return factorialDivision(n, 1);\\r\\n}\\r\\nfunction factorialDivision(n, d) {\\r\\n    if (n == 0 || n == 1 || n == d)\\r\\n        return 1;\\r\\n    return factorialDivision(n - 1, d) * n;\\r\\n}\\r\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\r\\n    const rightMoves = grid[0].length - 1;\\r\\n    const downMoves = grid.length - 1;\\r\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\r\\n    for (let i = 0; i < grid.length; i++) {\\r\\n        for (let j = 0; j < grid[i].length; j++) {\\r\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\r\\n                const newArray = [];\\r\\n                for (let k = i; k < grid.length; k++) {\\r\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\r\\n                }\\r\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\r\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\r\\n                totalPossiblePaths -= removedPaths;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return totalPossiblePaths;\\r\\n}\\r\\n//GENERATE IP ADDRESSES\\r\\nfunction generateIps(num) {\\r\\n    num = num.toString();\\r\\n    const length = num.length;\\r\\n    const ips = [];\\r\\n    for (let i = 1; i < length - 2; i++) {\\r\\n        for (let j = i + 1; j < length - 1; j++) {\\r\\n            for (let k = j + 1; k < length; k++) {\\r\\n                const ip = [\\r\\n                    num.slice(0, i),\\r\\n                    num.slice(i, j),\\r\\n                    num.slice(j, k),\\r\\n                    num.slice(k, num.length)\\r\\n                ];\\r\\n                let isValid = true;\\r\\n                ip.forEach(seg => {\\r\\n                    isValid = isValid && isValidIpSegment(seg);\\r\\n                });\\r\\n                if (isValid)\\r\\n                    ips.push(ip.join(\\\".\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return ips.toString();\\r\\n}\\r\\nfunction isValidIpSegment(segment) {\\r\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\r\\n        return false;\\r\\n    segment = Number(segment);\\r\\n    if (segment < 0 || segment > 255)\\r\\n        return false;\\r\\n    return true;\\r\\n}\\r\\n//GREATEST FACTOR\\r\\nfunction factor3(n) {\\r\\n    // Returns all the prime factors of a positive integer\\r\\n    let factors = [];\\r\\n    let d = 2;\\r\\n    while (n > 1) {\\r\\n        while (n % d == 0) {\\r\\n            factors.push(d);\\r\\n            n /= d;\\r\\n        }\\r\\n        d = d + 1;\\r\\n        if (d * d > n) {\\r\\n            if (n > 1)\\r\\n                factors.push(n);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    if (factors.length > 0)\\r\\n        return factors.pop();\\r\\n    return '';\\r\\n}\\r\\n//SPIRALIZE Matrix\\r\\nfunction spiral(arr, accum = []) {\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.shift());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.pop().reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, 0).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    return spiral(arr, accum);\\r\\n}\\r\\nfunction column(arr, index) {\\r\\n    const res = [];\\r\\n    for (let i = 0; i < arr.length; i++) {\\r\\n        const elm = arr[i].splice(index, 1)[0];\\r\\n        if (elm) {\\r\\n            res.push(elm);\\r\\n        }\\r\\n    }\\r\\n    return res;\\r\\n}\\r\\n// Merge Overlapping Intervals\\r\\nfunction mergeOverlap(intervals) {\\r\\n    intervals.sort(([minA], [minB]) => minA - minB);\\r\\n    for (let i = 0; i < intervals.length; i++) {\\r\\n        for (let j = i + 1; j < intervals.length; j++) {\\r\\n            const [min, max] = intervals[i];\\r\\n            const [laterMin, laterMax] = intervals[j];\\r\\n            if (laterMin <= max) {\\r\\n                const newMax = laterMax > max ? laterMax : max;\\r\\n                const newInterval = [min, newMax];\\r\\n                intervals[i] = newInterval;\\r\\n                intervals.splice(j, 1);\\r\\n                j = i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return intervals;\\r\\n}\\r\\nfunction SanitizeParensSolver(data) {\\r\\n    var left = 0;\\r\\n    var right = 0;\\r\\n    var res = [];\\r\\n    for (var i = 0; i < data.length; ++i) {\\r\\n        if (data[i] === '(') {\\r\\n            ++left;\\r\\n        }\\r\\n        else if (data[i] === ')') {\\r\\n            left > 0 ? --left : ++right;\\r\\n        }\\r\\n    }\\r\\n    function dfs(pair, index, left, right, s, solution, res) {\\r\\n        if (s.length === index) {\\r\\n            if (left === 0 && right === 0 && pair === 0) {\\r\\n                for (var i = 0; i < res.length; i++) {\\r\\n                    if (res[i] === solution) {\\r\\n                        return;\\r\\n                    }\\r\\n                }\\r\\n                res.push(solution);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        if (s[index] === '(') {\\r\\n            if (left > 0) {\\r\\n                dfs(pair, index + 1, left - 1, right, s, solution, res);\\r\\n            }\\r\\n            dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\r\\n        }\\r\\n        else if (s[index] === ')') {\\r\\n            if (right > 0)\\r\\n                dfs(pair, index + 1, left, right - 1, s, solution, res);\\r\\n            if (pair > 0)\\r\\n                dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\r\\n        }\\r\\n        else {\\r\\n            dfs(pair, index + 1, left, right, s, solution + s[index], res);\\r\\n        }\\r\\n    }\\r\\n    dfs(0, 0, left, right, data, '', res);\\r\\n    return res;\\r\\n}\\r\\nfunction solverArrayJumpingGame(arrayData) {\\r\\n    if (arrayData[0] == 0)\\r\\n        return '0';\\r\\n    let arrayJump = [1];\\r\\n    for (let n = 0; n < arrayData.length; n++) {\\r\\n        if (arrayJump[n]) {\\r\\n            for (let p = n; p <= Math.min(n + arrayData[n], arrayData.length - 1); p++) { // fixed off-by-one error\\r\\n                arrayJump[p] = 1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return 0 + Boolean(arrayJump[arrayData.length - 1]); // thanks /u/Kalumniatoris\\r\\n}\\r\\nfunction solverWaysToSum(arrayData) {\\r\\n    var ways = [];\\r\\n    ways[0] = 1;\\r\\n    for (var a = 1; a <= arrayData; a++) {\\r\\n        ways[a] = 0;\\r\\n    }\\r\\n    for (var i = 1; i <= arrayData - 1; i++) {\\r\\n        for (var j = i; j <= arrayData; j++) {\\r\\n            ways[j] += ways[j - i];\\r\\n        }\\r\\n    }\\r\\n    return ways[arrayData];\\r\\n}\\r\\nfunction solverWaysToExpress(ns, arrayData) {\\r\\n    let i, j, k;\\r\\n    let operatorList = [\\\"\\\", \\\"+\\\", \\\"-\\\", \\\"*\\\"];\\r\\n    let validExpressions = [];\\r\\n    let tempPermutations = Math.pow(4, (arrayData[0].length - 1));\\r\\n    for (i = 0; i < tempPermutations; i++) {\\r\\n        let arraySummands = [];\\r\\n        let candidateExpression = arrayData[0].substr(0, 1);\\r\\n        arraySummands[0] = parseInt(arrayData[0].substr(0, 1));\\r\\n        for (j = 1; j < arrayData[0].length; j++) {\\r\\n            candidateExpression += operatorList[(i >> ((j - 1) * 2)) % 4] + arrayData[0].substr(j, 1);\\r\\n            let rollingOperator = operatorList[(i >> ((j - 1) * 2)) % 4];\\r\\n            let rollingOperand = parseInt(arrayData[0].substr(j, 1));\\r\\n            switch (rollingOperator) {\\r\\n                case \\\"\\\":\\r\\n                    rollingOperand = rollingOperand * (arraySummands[arraySummands.length - 1] / Math.abs(arraySummands[arraySummands.length - 1]));\\r\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * 10 + rollingOperand;\\r\\n                    break;\\r\\n                case \\\"+\\\":\\r\\n                    arraySummands[arraySummands.length] = rollingOperand;\\r\\n                    break;\\r\\n                case \\\"-\\\":\\r\\n                    arraySummands[arraySummands.length] = 0 - rollingOperand;\\r\\n                    break;\\r\\n                case \\\"*\\\":\\r\\n                    while (j < arrayData[0].length - 1 && ((i >> (j * 2)) % 4) === 0) {\\r\\n                        j += 1;\\r\\n                        candidateExpression += arrayData[0].substr(j, 1);\\r\\n                        rollingOperand = rollingOperand * 10 + parseInt(arrayData[0].substr(j, 1));\\r\\n                    }\\r\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * rollingOperand;\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n        let rollingTotal = arraySummands.reduce(function (a, b) { return a + b; });\\r\\n        if (arrayData[1] === rollingTotal) {\\r\\n            validExpressions[validExpressions.length] = candidateExpression;\\r\\n        }\\r\\n    }\\r\\n    return JSON.stringify(validExpressions);\\r\\n}\\r\\nfunction solveFindAllValidMathExpressions(arrayData) {\\r\\n    const num = arrayData[0];\\r\\n    const target = arrayData[1];\\r\\n    function helper(res, path, num, target, pos, evaluated, multed) {\\r\\n        if (pos === num.length) {\\r\\n            if (target === evaluated) {\\r\\n                res.push(path);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        for (let i = pos; i < num.length; ++i) {\\r\\n            if (i != pos && num[pos] == \\\"0\\\") {\\r\\n                break;\\r\\n            }\\r\\n            const cur = parseInt(num.substring(pos, i + 1));\\r\\n            if (pos === 0) {\\r\\n                helper(res, path + cur, num, target, i + 1, cur, cur);\\r\\n            }\\r\\n            else {\\r\\n                helper(res, path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur);\\r\\n                helper(res, path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur);\\r\\n                helper(res, path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    const result = [];\\r\\n    helper(result, \\\"\\\", num, target, 0, 0, 0);\\r\\n    return result;\\r\\n}\\r\\nfunction solverLargestSubset(ns, arrayData) {\\r\\n    let highestSubset = arrayData[0];\\r\\n    for (let i = 0; i < arrayData.length; i++) {\\r\\n        for (let j = i; j < arrayData.length; j++) {\\r\\n            let tempSubset = 0;\\r\\n            for (let k = i; k <= j; k++) {\\r\\n                tempSubset += arrayData[k];\\r\\n            }\\r\\n            if (highestSubset < tempSubset) {\\r\\n                highestSubset = tempSubset;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestSubset;\\r\\n}\\r\\nexport function HammingSumOfParity(_lengthOfDBits) {\\r\\n    return (_lengthOfDBits < 3 || _lengthOfDBits == 0)\\r\\n        ? ((_lengthOfDBits == 0) ? 0 : _lengthOfDBits + 1)\\r\\n        // the Math.log2-math will only work, if the length is greater egqual 3 otherwise it's \\\"kinda broken\\\" :D\\r\\n        : ((Math.ceil(Math.log2(_lengthOfDBits * 2))) <= Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits)))))\\r\\n            ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\r\\n            : Math.ceil(Math.log2(_lengthOfDBits));\\r\\n}\\r\\nexport function HammingEncode(value) {\\r\\n    let _dataBits = value.toString(2); // change value into string of binary bits\\r\\n    let _sum_parity = HammingSumOfParity(_dataBits.length); // get the sum of needed parity bits\\r\\n    let _data = _dataBits.split(\\\"\\\"); // create new array with the given data bits\\r\\n    let _build = []; // init new array for building\\r\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\r\\n    // count specified data in the array, for later use\\r\\n    _build.push(\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)); // pre-build the \\\"pre-build\\\"\\r\\n    for (let i = 2; i < _sum_parity; i++) { // add new paritybits and the corresponding data bits\\r\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\r\\n    }\\r\\n    // \\\"pre\\\"-build my array, now the \\\"calculation\\\"... get the paritybits working\\r\\n    for (let index of _build.reduce(function (a, e, i) { if (e == \\\"x\\\")\\r\\n        a.push(i); return a; }, [])) {\\r\\n        let _tempcount = index + 1; // set the \\\"stepsize\\\"\\r\\n        let _temparray = []; // temporary array to store the corresponding bits\\r\\n        let _tempdata = [..._build]; // copy the \\\"build\\\"\\r\\n        while (_tempdata[index] !== undefined) { // as long as there are bits, do \\\"cut\\\"\\r\\n            let _temp = _tempdata.splice(index, _tempcount * 2); // get x*2 bits, then\\r\\n            _temparray.push(..._temp.splice(0, _tempcount)); // .. cut them and keep first half\\r\\n        }\\r\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\r\\n        _build[index] = ((count(_temparray, \\\"1\\\")) % 2.).toString(); // simple count and remainder of 2 with \\\"toString\\\" to store it\\r\\n    }\\r\\n    _build.unshift(((count(_build, \\\"1\\\")) % 2.).toString()); // adding first index, which is done as last element\\r\\n    return _build.join(\\\"\\\"); // return a string again\\r\\n}\\r\\nexport function HammingDecode(_data) {\\r\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\r\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\r\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\r\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\r\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\r\\n    _testArray.push((_overallParity == (count(_build, \\\"1\\\") % 2).toString()) ? true : false); // checking the \\\"overall\\\" parity\\r\\n    for (var i = 0; i < _sum_parity; i++) {\\r\\n        let _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\r\\n        let _tempStep = _tempIndex + 1; // set the stepsize\\r\\n        let _tempData = [..._build]; // \\\"copy\\\" the build-data\\r\\n        let _tempArray = []; // init empty array for \\\"testing\\\"\\r\\n        while (_tempData[_tempIndex] != undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\r\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\r\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\r\\n        }\\r\\n        let _tempParity = _tempArray.shift(); // and cut the first index for checking with the rest of the data\\r\\n        _testArray.push(((_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString())) ? true : false); // is the _tempParity the calculated data?\\r\\n    }\\r\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\r\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\r\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2);\\r\\n    }\\r\\n    _build.unshift(_overallParity);\\r\\n    // fix the actual hammingcode if there is an error\\r\\n    if (_fixIndex > 0 && _testArray[0] == false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\r\\n        _build[_fixIndex] = (_build[_fixIndex] == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == false) { // otherwise, if the the overall_parity is only wrong, fix that one\\r\\n        _overallParity = (_overallParity == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\r\\n    }\\r\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\r\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How?\\r\\n    }\\r\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\r\\n    for (var j = _sum_parity; j >= 0; j--) { // start from the last parity down the starting one\\r\\n        _build.splice(Math.pow(2, j), 1);\\r\\n    }\\r\\n    _build.splice(0, 1);\\r\\n    return parseInt(_build.join(\\\"\\\"), 2);\\r\\n}\\r\\n// decompress LZ-compressed string, or return null if input is invalid\\r\\nfunction comprLZDecode(compr) {\\r\\n    let plain = \\\"\\\";\\r\\n    for (let i = 0; i < compr.length;) {\\r\\n        const literal_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (literal_length < 0 || literal_length > 9 || i + 1 + literal_length > compr.length) {\\r\\n            return null;\\r\\n        }\\r\\n        plain += compr.substring(i + 1, i + 1 + literal_length);\\r\\n        i += 1 + literal_length;\\r\\n        if (i >= compr.length) {\\r\\n            break;\\r\\n        }\\r\\n        const backref_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (backref_length < 0 || backref_length > 9) {\\r\\n            return null;\\r\\n        }\\r\\n        else if (backref_length === 0) {\\r\\n            ++i;\\r\\n        }\\r\\n        else {\\r\\n            if (i + 1 >= compr.length) {\\r\\n                return null;\\r\\n            }\\r\\n            const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\r\\n            if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) || backref_offset > plain.length) {\\r\\n                return null;\\r\\n            }\\r\\n            for (let j = 0; j < backref_length; ++j) {\\r\\n                plain += plain[plain.length - backref_offset];\\r\\n            }\\r\\n            i += 2;\\r\\n        }\\r\\n    }\\r\\n    return plain;\\r\\n}\\r\\nfunction coloringGraph(data) {\\r\\n    //Helper function to get neighbourhood of a vertex\\r\\n    function neighbourhood(vertex) {\\r\\n        const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\r\\n        const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\r\\n        return adjLeft.concat(adjRight);\\r\\n    }\\r\\n    //Verify that there is no solution by attempting to create a proper 2-coloring.\\r\\n    const coloring = Array(data[0]).fill(undefined);\\r\\n    while (coloring.some((val) => val === undefined)) {\\r\\n        //Color a vertex in the graph\\r\\n        const initialVertex = coloring.findIndex((val) => val === undefined);\\r\\n        coloring[initialVertex] = 0;\\r\\n        const frontier = [initialVertex];\\r\\n        //Propogate the coloring throughout the component containing v greedily\\r\\n        while (frontier.length > 0) {\\r\\n            const v = frontier.pop() || 0;\\r\\n            const neighbors = neighbourhood(v);\\r\\n            //For each vertex u adjacent to v\\r\\n            for (const id in neighbors) {\\r\\n                const u = neighbors[id];\\r\\n                //Set the color of u to the opposite of v's color if it is new,\\r\\n                //then add u to the frontier to continue the algorithm.\\r\\n                if (coloring[u] === undefined) {\\r\\n                    if (coloring[v] === 0)\\r\\n                        coloring[u] = 1;\\r\\n                    else\\r\\n                        coloring[u] = 0;\\r\\n                    frontier.push(u);\\r\\n                }\\r\\n                //Assert u,v do not have the same color\\r\\n                else if (coloring[u] === coloring[v]) {\\r\\n                    //If u,v do have the same color, no proper 2-coloring exists, meaning\\r\\n                    //the player was correct to say there is no proper 2-coloring of the graph.\\r\\n                    return \\\"[]\\\";\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return coloring;\\r\\n}\\r\\n// compress plaintest string\\r\\nexport function comprLZEncode(plain) {\\r\\n    // for state[i][j]:\\r\\n    //      if i is 0, we're adding a literal of length j\\r\\n    //      else, we're adding a backreference of offset i and length j\\r\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\r\\n    let new_state = Array.from(Array(10), () => Array(10));\\r\\n    function set(state, i, j, str) {\\r\\n        const current = state[i][j];\\r\\n        if (current == null || str.length < current.length) {\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n        else if (str.length === current.length && Math.random() < 0.5) {\\r\\n            // if two strings are the same length, pick randomly so that\\r\\n            // we generate more possible inputs to Compression II\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n    }\\r\\n    // initial state is a literal of length 1\\r\\n    cur_state[0][1] = \\\"\\\";\\r\\n    for (let i = 1; i < plain.length; ++i) {\\r\\n        for (const row of new_state) {\\r\\n            row.fill(null);\\r\\n        }\\r\\n        const c = plain[i];\\r\\n        // handle literals\\r\\n        for (let length = 1; length <= 9; ++length) {\\r\\n            const string = cur_state[0][length];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            if (length < 9) {\\r\\n                // extend current literal\\r\\n                set(new_state, 0, length + 1, string);\\r\\n            }\\r\\n            else {\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\r\\n            }\\r\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\r\\n                if (plain[i - offset] === c) {\\r\\n                    // start new backreference\\r\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // handle backreferences\\r\\n        for (let offset = 1; offset <= 9; ++offset) {\\r\\n            for (let length = 1; length <= 9; ++length) {\\r\\n                const string = cur_state[offset][length];\\r\\n                if (string == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                if (plain[i - offset] === c) {\\r\\n                    if (length < 9) {\\r\\n                        // extend current backreference\\r\\n                        set(new_state, offset, length + 1, string);\\r\\n                    }\\r\\n                    else {\\r\\n                        // start new backreference\\r\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\r\\n                // end current backreference and start new backreference\\r\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\r\\n                    if (plain[i - new_offset] === c) {\\r\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const tmp_state = new_state;\\r\\n        new_state = cur_state;\\r\\n        cur_state = tmp_state;\\r\\n    }\\r\\n    let result = null;\\r\\n    for (let len = 1; len <= 9; ++len) {\\r\\n        let string = cur_state[0][len];\\r\\n        if (string == null) {\\r\\n            continue;\\r\\n        }\\r\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\r\\n        if (result == null || string.length < result.length) {\\r\\n            result = string;\\r\\n        }\\r\\n        else if (string.length == result.length && Math.random() < 0.5) {\\r\\n            result = string;\\r\\n        }\\r\\n    }\\r\\n    for (let offset = 1; offset <= 9; ++offset) {\\r\\n        for (let len = 1; len <= 9; ++len) {\\r\\n            let string = cur_state[offset][len];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            string += String(len) + \\\"\\\" + String(offset);\\r\\n            if (result == null || string.length < result.length) {\\r\\n                result = string;\\r\\n            }\\r\\n            else if (string.length == result.length && Math.random() < 0.5) {\\r\\n                result = string;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return result ?? \\\"\\\";\\r\\n}\\r\\nfunction RLEencode(data) {\\r\\n    let chars = Array.from(data);\\r\\n    let answer = '';\\r\\n    let current = undefined;\\r\\n    let count = 0;\\r\\n    while (chars.length > 0) {\\r\\n        let char = chars.shift();\\r\\n        switch (current) {\\r\\n            case undefined:\\r\\n                current = char;\\r\\n                count = 1;\\r\\n                break;\\r\\n            case char:\\r\\n                if (count == 9) {\\r\\n                    answer = `${answer}${count}${current}`;\\r\\n                    count = 0;\\r\\n                }\\r\\n                count++;\\r\\n                break;\\r\\n            default:\\r\\n                answer = `${answer}${count}${current}`;\\r\\n                current = char;\\r\\n                count = 1;\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n    answer = `${answer}${count}${current}`;\\r\\n    return answer;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDM0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDdEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6RCxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxLQUFLLFFBQVEsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekM7S0FDRjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFO0lBQ3BELElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQztJQUV0QixRQUFRLElBQUksRUFBRTtRQUNiLEtBQUssNEJBQTRCO1lBQ2hDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNO1FBQ1AsS0FBSyw2QkFBNkI7WUFDakMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxD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LENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUNoSCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUNwSCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ2hILElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO0tBQ3BIO0lBRUQsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2QsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFbkIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO2FBQUU7WUFDN0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7YUFBRTtZQUNqRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO2FBQUU7WUFDN0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7YUFBRTtZQUVqRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNsQjtLQUNEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMs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Q0FBQztJQUN4QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3hCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixRQUFRLE9BQU8sRUFBRTtZQUNoQixLQUFLLFNBQVM7Z0JBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLE1BQU07WUFDUCxLQUFLLElBQUk7Z0JBQ1IsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO29CQUNmLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsT0FBTyxFQUFFLENBQUM7b0JBQ3ZDLEtBQUssR0FBRyxDQUFDLENBQUM7aUJBQ1Y7Z0JBQ0QsS0FBSyxFQUFFLENBQUM7Z0JBQ1IsTUFBTTtZQUNQO2dCQUNDLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ2YsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDVixNQUFNO1NBQ1A7S0FDRDtJQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFDdkMsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMgfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xyXG4gIGZvciAoY29uc3Qgc2VydmVyIG9mIGdldEFsbFNlcnZlcnMobnMpKSB7XHJcbiAgICBjb25zdCBjb250cmFjdHMgPSBucy5scyhzZXJ2ZXIsICcuY2N0Jyk7XHJcbiAgICBmb3IgKGNvbnN0IGNvbnRyYWN0IG9mIGNvbnRyYWN0cykge1xyXG4gICAgICBjb25zdCB0eXBlID0gbnMuY29kaW5nY29udHJhY3QuZ2V0Q29udHJhY3RUeXBlKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICBjb25zdCBkYXRhID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgbnMudHByaW50ZihgJHtzZXJ2ZXJ9OiAke2NvbnRyYWN0fSB8ICR7dHlwZX1gKTtcclxuICAgICAgc29sdmUodHlwZSwgZGF0YSwgc2VydmVyLCBjb250cmFjdCwgbnMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc29sdmUodHlwZSwgZGF0YSwgc2VydmVyLCBjb250cmFjdCwgbnMpIHtcclxuXHRsZXQgc29sdXRpb24gPSAnbm9uZSc7XHJcblxyXG5cdHN3aXRjaCAodHlwZSkge1xyXG5cdFx0Y2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gbWF4UHJvZml0KFsxLCBkYXRhXSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJSVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IG1heFByb2ZpdChbTWF0aC5jZWlsKGRhdGEubGVuZ3RoIC8gMiksIGRhdGFdKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElJSVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IG1heFByb2ZpdChbMiwgZGF0YV0pO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJBbGdvcml0aG1pYyBTdG9jayBUcmFkZXIgSVZcIjpcclxuXHRcdFx0c29sdXRpb24gPSBtYXhQcm9maXQoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIk1pbmltdW0gUGF0aCBTdW0gaW4gYSBUcmlhbmdsZVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlVHJpYW5nbGVTdW0oZGF0YSwgbnMpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJVbmlxdWUgUGF0aHMgaW4gYSBHcmlkIElcIjpcclxuXHRcdFx0c29sdXRpb24gPSB1bmlxdWVQYXRoc0koZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlVuaXF1ZSBQYXRocyBpbiBhIEdyaWQgSUlcIjpcclxuXHRcdFx0c29sdXRpb24gPSB1bmlxdWVQYXRoc0lJKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJHZW5lcmF0ZSBJUCBBZGRyZXNzZXNcIjpcclxuXHRcdFx0c29sdXRpb24gPSBnZW5lcmF0ZUlwcyhkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiRmluZCBMYXJnZXN0IFByaW1lIEZhY3RvclwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IGZhY3RvcjMoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlNwaXJhbGl6ZSBNYXRyaXhcIjpcclxuXHRcdFx0c29sdXRpb24gPSBzcGlyYWwoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIk1lcmdlIE92ZXJsYXBwaW5nIEludGVydmFsc1wiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IG1lcmdlT3ZlcmxhcChkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiRmluZCBBbGwgVmFsaWQgTWF0aCBFeHByZXNzaW9uc1wiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlRmluZEFsbFZhbGlkTWF0aEV4cHJlc3Npb25zKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJTdWJhcnJheSB3aXRoIE1heGltdW0gU3VtXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gc29sdmVyTGFyZ2VzdFN1YnNldChucywgZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIlNhbml0aXplIFBhcmVudGhlc2VzIGluIEV4cHJlc3Npb25cIjpcclxuXHRcdFx0c29sdXRpb24gPSBTYW5pdGl6ZVBhcmVuc1NvbHZlcihkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQXJyYXkgSnVtcGluZyBHYW1lXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gc29sdmVyQXJyYXlKdW1waW5nR2FtZShkYXRhKVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlcldheXNUb1N1bShkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiVG90YWwgV2F5cyB0byBTdW0gSUlcIjpcclxuXHRcdFx0c29sdXRpb24gPSBzb2x2ZVdheXNUb1N1bUlJKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJIYW1taW5nQ29kZXM6IEludGVnZXIgdG8gRW5jb2RlZCBCaW5hcnlcIjpcclxuXHRcdFx0c29sdXRpb24gPSBIYW1taW5nRW5jb2RlKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJIYW1taW5nQ29kZXM6IEVuY29kZWQgQmluYXJ5IHRvIEludGVnZXJcIjpcclxuXHRcdFx0c29sdXRpb24gPSBIYW1taW5nRGVjb2RlKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJTaG9ydGVzdCBQYXRoIGluIGEgR3JpZFwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IFNob3J0ZXN0UGF0aEluQUdyaWQoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkFycmF5IEp1bXBpbmcgR2FtZSBJSVwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IHNvbHZlckFycmF5SnVtcGluZ0dhbWVJSShkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQ29tcHJlc3Npb24gSUk6IExaIERlY29tcHJlc3Npb25cIjpcclxuXHRcdFx0c29sdXRpb24gPSBjb21wckxaRGVjb2RlKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJQcm9wZXIgMi1Db2xvcmluZyBvZiBhIEdyYXBoXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gY29sb3JpbmdHcmFwaChkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiQ29tcHJlc3Npb24gSUlJOiBMWiBDb21wcmVzc2lvblwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IGNvbXByTFpFbmNvZGUoZGF0YSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcIkNvbXByZXNzaW9uIEk6IFJMRSBDb21wcmVzc2lvblwiOlxyXG5cdFx0XHRzb2x1dGlvbiA9IFJMRWVuY29kZShkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIFwiRW5jcnlwdGlvbiBJOiBDYWVzYXIgQ2lwaGVyXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gY2Flc2FyQ2lwaGVyKGRhdGEpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgXCJFbmNyeXB0aW9uIElJOiBWaWdlbsOocmUgQ2lwaGVyXCI6XHJcblx0XHRcdHNvbHV0aW9uID0gdmlnbmVyZUNpcGhlcihkYXRhKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0fVxyXG5cclxuXHRpZiAoc29sdXRpb24gPT0gJ25vbmUnKSB7XHJcblx0XHRucy50cHJpbnQoJ0VSUk9SOiBOTyBTT0xWRVIgRk9SICcgKyBjb250cmFjdCArICcgJyArIHNvbHV0aW9uKTtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdHZhciByZXQgPSBucy5jb2Rpbmdjb250cmFjdC5hdHRlbXB0KHNvbHV0aW9uLCBjb250cmFjdCwgc2VydmVyLCB7IHJldHVyblJld2FyZDogdHJ1ZSB9KTtcclxuXHRpZiAocmV0ID09IGZhbHNlKSB7XHJcblx0XHRucy50cHJpbnQoJ0ZBSUxFRCBUTyBTT0xWRTogJyArIGNvbnRyYWN0ICsgJyB0eXBlOiAnICsgdHlwZSArICcgZGF0YTogJyArIGRhdGEgKyAnIGF0dGVtcHRlZCBzb2x1dGlvbjogJyArIHNvbHV0aW9uKTtcclxuXHR9IGVsc2Uge1xyXG4gICAgbnMudHByaW50KGBDb250cmFjdCBzb2x2ZWQgc3VjY2Vzc2Z1bGx5ISBSZXdhcmQ6ICR7cmV0fWApXHJcbiAgfVxyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB2aWduZXJlQ2lwaGVyKGRhdGEpIHtcclxuXHRjb25zdCBjaXBoZXIgPSBbLi4uZGF0YVswXV1cclxuXHRcdC5tYXAoKGEsIGkpID0+IHtcclxuXHRcdFx0cmV0dXJuIGEgPT09IFwiIFwiXHJcblx0XHRcdFx0PyBhXHJcblx0XHRcdFx0OiBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYS5jaGFyQ29kZUF0KDApIC0gMiAqIDY1ICsgZGF0YVsxXS5jaGFyQ29kZUF0KGkgJSBkYXRhWzFdLmxlbmd0aCkpICUgMjYpICsgNjUpO1xyXG5cdFx0fSlcclxuXHRcdC5qb2luKFwiXCIpO1xyXG5cdHJldHVybiBjaXBoZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhZXNhckNpcGhlcihkYXRhKSB7XHJcblx0Y29uc3QgY2lwaGVyID0gWy4uLmRhdGFbMF1dXHJcblx0XHQubWFwKChhKSA9PiAoYSA9PT0gXCIgXCIgPyBhIDogU3RyaW5nLmZyb21DaGFyQ29kZSgoKGEuY2hhckNvZGVBdCgwKSAtIDY1IC0gZGF0YVsxXSArIDI2KSAlIDI2KSArIDY1KSkpXHJcblx0XHQuam9pbihcIlwiKTtcclxuXHRyZXR1cm4gY2lwaGVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb2x2ZXJBcnJheUp1bXBpbmdHYW1lSUkoYXJyYXlEYXRhKSB7XHJcblx0bGV0IG4gPSBhcnJheURhdGEubGVuZ3RoO1xyXG5cdGxldCByZWFjaCA9IDA7XHJcblx0bGV0IGp1bXBzID0gMDtcclxuXHRsZXQgbGFzdEp1bXAgPSAtMTtcclxuXHR3aGlsZSAocmVhY2ggPCBuIC0gMSkge1xyXG5cdFx0bGV0IGp1bXBlZEZyb20gPSAtMTtcclxuXHRcdGZvciAobGV0IGkgPSByZWFjaDsgaSA+IGxhc3RKdW1wOyBpLS0pIHtcclxuXHRcdFx0aWYgKGkgKyBhcnJheURhdGFbaV0gPiByZWFjaCkge1xyXG5cdFx0XHRcdHJlYWNoID0gaSArIGFycmF5RGF0YVtpXTtcclxuXHRcdFx0XHRqdW1wZWRGcm9tID0gaTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKGp1bXBlZEZyb20gPT09IC0xKSB7XHJcblx0XHRcdGp1bXBzID0gMDtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0XHRsYXN0SnVtcCA9IGp1bXBlZEZyb207XHJcblx0XHRqdW1wcysrO1xyXG5cdH1cclxuXHRyZXR1cm4ganVtcHNcclxufVxyXG5cclxuZnVuY3Rpb24gU2hvcnRlc3RQYXRoSW5BR3JpZChkYXRhKSB7XHJcblx0bGV0IEggPSBkYXRhLmxlbmd0aCwgVyA9IGRhdGFbMF0ubGVuZ3RoO1xyXG5cdGxldCBkaXN0ID0gQXJyYXkuZnJvbShBcnJheShIKSwgKCkgPT4gQXJyYXkoVykuZmlsbChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpKTtcclxuXHRkaXN0WzBdWzBdID0gMDtcclxuXHJcblx0bGV0IHF1ZXVlID0gW1swLCAwXV07XHJcblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuXHRcdGxldCBbaSwgal0gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0bGV0IGQgPSBkaXN0W2ldW2pdO1xyXG5cclxuXHRcdGlmIChpID4gMCAmJiBkICsgMSA8IGRpc3RbaSAtIDFdW2pdICYmIGRhdGFbaSAtIDFdW2pdICE9PSAxKSB7IGRpc3RbaSAtIDFdW2pdID0gZCArIDE7IHF1ZXVlLnB1c2goW2kgLSAxLCBqXSk7IH1cclxuXHRcdGlmIChpIDwgSCAtIDEgJiYgZCArIDEgPCBkaXN0W2kgKyAxXVtqXSAmJiBkYXRhW2kgKyAxXVtqXSAhPT0gMSkgeyBkaXN0W2kgKyAxXVtqXSA9IGQgKyAxOyBxdWV1ZS5wdXNoKFtpICsgMSwgal0pOyB9XHJcblx0XHRpZiAoaiA+IDAgJiYgZCArIDEgPCBkaXN0W2ldW2ogLSAxXSAmJiBkYXRhW2ldW2ogLSAxXSAhPT0gMSkgeyBkaXN0W2ldW2ogLSAxXSA9IGQgKyAxOyBxdWV1ZS5wdXNoKFtpLCBqIC0gMV0pOyB9XHJcblx0XHRpZiAoaiA8IFcgLSAxICYmIGQgKyAxIDwgZGlzdFtpXVtqICsgMV0gJiYgZGF0YVtpXVtqICsgMV0gIT09IDEpIHsgZGlzdFtpXVtqICsgMV0gPSBkICsgMTsgcXVldWUucHVzaChbaSwgaiArIDFdKTsgfVxyXG5cdH1cclxuXHJcblx0bGV0IHBhdGggPSBcIlwiO1xyXG5cdGlmIChOdW1iZXIuaXNGaW5pdGUoZGlzdFtIIC0gMV1bVyAtIDFdKSkge1xyXG5cdFx0bGV0IGkgPSBIIC0gMSwgaiA9IFcgLSAxO1xyXG5cdFx0d2hpbGUgKGkgIT09IDAgfHwgaiAhPT0gMCkge1xyXG5cdFx0XHRsZXQgZCA9IGRpc3RbaV1bal07XHJcblxyXG5cdFx0XHRsZXQgbmV3X2kgPSAwLCBuZXdfaiA9IDAsIGRpciA9IFwiXCI7XHJcblx0XHRcdGlmIChpID4gMCAmJiBkaXN0W2kgLSAxXVtqXSA8IGQpIHsgZCA9IGRpc3RbaSAtIDFdW2pdOyBuZXdfaSA9IGkgLSAxOyBuZXdfaiA9IGo7IGRpciA9IFwiRFwiOyB9XHJcblx0XHRcdGlmIChpIDwgSCAtIDEgJiYgZGlzdFtpICsgMV1bal0gPCBkKSB7IGQgPSBkaXN0W2kgKyAxXVtqXTsgbmV3X2kgPSBpICsgMTsgbmV3X2ogPSBqOyBkaXIgPSBcIlVcIjsgfVxyXG5cdFx0XHRpZiAoaiA+IDAgJiYgZGlzdFtpXVtqIC0gMV0gPCBkKSB7IGQgPSBkaXN0W2ldW2ogLSAxXTsgbmV3X2kgPSBpOyBuZXdfaiA9IGogLSAxOyBkaXIgPSBcIlJcIjsgfVxyXG5cdFx0XHRpZiAoaiA8IFcgLSAxICYmIGRpc3RbaV1baiArIDFdIDwgZCkgeyBkID0gZGlzdFtpXVtqICsgMV07IG5ld19pID0gaTsgbmV3X2ogPSBqICsgMTsgZGlyID0gXCJMXCI7IH1cclxuXHJcblx0XHRcdGkgPSBuZXdfaTsgaiA9IG5ld19qO1xyXG5cdFx0XHRwYXRoID0gZGlyICsgcGF0aDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBwYXRoO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJbXVtdfSBpbnB1dCBbdGFyZ2V0TnVtYmVyLFthdmFpbGFibGUgbnVtYmVyc11dXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBzb2x2ZVdheXNUb1N1bUlJKGlucHV0KSB7XHJcblx0LyoqXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0XHJcblx0ICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xyXG5cdCAqIEByZXR1cm5zXHJcblx0ICovXHJcblx0bGV0IG4gPSBpbnB1dFswXTtcclxuXHRsZXQgbnVtcyA9IGlucHV0WzFdO1xyXG5cdGxldCB0YWJsZSA9IG5ldyBBcnJheShuICsgMSk7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuICsgMTsgaSsrKSB7XHJcblx0XHR0YWJsZVtpXSA9IDA7XHJcblx0fVxyXG5cdHRhYmxlWzBdID0gMTtcclxuXHJcblx0Zm9yIChsZXQgaSBvZiBudW1zKSB7XHJcblx0XHRpZiAoaSA+IG4pIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRmb3IgKGxldCBqID0gaTsgaiA8PSBuOyBqKyspIHtcclxuXHRcdFx0dGFibGVbal0gKz0gdGFibGVbaiAtIGldO1xyXG5cdFx0fVxyXG5cdFx0Y29uc29sZS5sb2codGFibGUpO1xyXG5cdH1cclxuXHRyZXR1cm4gdGFibGVbbl07XHJcbn1cclxuXHJcbi8vQUxHT1JJVEhNSUMgU1RPQ0sgVFJBREVSXHJcbmZ1bmN0aW9uIG1heFByb2ZpdChhcnJheURhdGEpIHtcclxuXHRsZXQgaSwgaiwgaztcclxuXHJcblx0bGV0IG1heFRyYWRlcyA9IGFycmF5RGF0YVswXTtcclxuXHRsZXQgc3RvY2tQcmljZXMgPSBhcnJheURhdGFbMV07XHJcblxyXG5cdGxldCB0ZW1wU3RyID0gXCJbMFwiO1xyXG5cdGZvciAoaSA9IDA7IGkgPCBzdG9ja1ByaWNlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0dGVtcFN0ciArPSBcIiwwXCI7XHJcblx0fVxyXG5cdHRlbXBTdHIgKz0gXCJdXCI7XHJcblx0bGV0IHRlbXBBcnIgPSBcIltcIiArIHRlbXBTdHI7XHJcblx0Zm9yIChpID0gMDsgaSA8IG1heFRyYWRlcyAtIDE7IGkrKykge1xyXG5cdFx0dGVtcEFyciArPSBcIixcIiArIHRlbXBTdHI7XHJcblx0fVxyXG5cdHRlbXBBcnIgKz0gXCJdXCI7XHJcblxyXG5cdGxldCBoaWdoZXN0UHJvZml0ID0gSlNPTi5wYXJzZSh0ZW1wQXJyKTtcclxuXHJcblx0Zm9yIChpID0gMDsgaSA8IG1heFRyYWRlczsgaSsrKSB7XHJcblx0XHRmb3IgKGogPSAwOyBqIDwgc3RvY2tQcmljZXMubGVuZ3RoOyBqKyspIHsgLy8gQnV5IC8gU3RhcnRcclxuXHRcdFx0Zm9yIChrID0gajsgayA8IHN0b2NrUHJpY2VzLmxlbmd0aDsgaysrKSB7IC8vIFNlbGwgLyBFbmRcclxuXHRcdFx0XHRpZiAoaSA+IDAgJiYgaiA+IDAgJiYgayA+IDApIHtcclxuXHRcdFx0XHRcdGhpZ2hlc3RQcm9maXRbaV1ba10gPSBNYXRoLm1heChoaWdoZXN0UHJvZml0W2ldW2tdLCBoaWdoZXN0UHJvZml0W2kgLSAxXVtrXSwgaGlnaGVzdFByb2ZpdFtpXVtrIC0gMV0sIGhpZ2hlc3RQcm9maXRbaSAtIDFdW2ogLSAxXSArIHN0b2NrUHJpY2VzW2tdIC0gc3RvY2tQcmljZXNbal0pO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoaSA+IDAgJiYgaiA+IDApIHtcclxuXHRcdFx0XHRcdGhpZ2hlc3RQcm9maXRbaV1ba10gPSBNYXRoLm1heChoaWdoZXN0UHJvZml0W2ldW2tdLCBoaWdoZXN0UHJvZml0W2kgLSAxXVtrXSwgaGlnaGVzdFByb2ZpdFtpIC0gMV1baiAtIDFdICsgc3RvY2tQcmljZXNba10gLSBzdG9ja1ByaWNlc1tqXSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChpID4gMCAmJiBrID4gMCkge1xyXG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIGhpZ2hlc3RQcm9maXRbaSAtIDFdW2tdLCBoaWdoZXN0UHJvZml0W2ldW2sgLSAxXSwgc3RvY2tQcmljZXNba10gLSBzdG9ja1ByaWNlc1tqXSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChqID4gMCAmJiBrID4gMCkge1xyXG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIGhpZ2hlc3RQcm9maXRbaV1bayAtIDFdLCBzdG9ja1ByaWNlc1trXSAtIHN0b2NrUHJpY2VzW2pdKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aGlnaGVzdFByb2ZpdFtpXVtrXSA9IE1hdGgubWF4KGhpZ2hlc3RQcm9maXRbaV1ba10sIHN0b2NrUHJpY2VzW2tdIC0gc3RvY2tQcmljZXNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gaGlnaGVzdFByb2ZpdFttYXhUcmFkZXMgLSAxXVtzdG9ja1ByaWNlcy5sZW5ndGggLSAxXTtcclxufVxyXG5cclxuLy9TTUFMTEVTVCBUUklBTkdMRSBTVU1cclxuZnVuY3Rpb24gc29sdmVUcmlhbmdsZVN1bShhcnJheURhdGEsIG5zKSB7XHJcblx0bGV0IHRyaWFuZ2xlID0gYXJyYXlEYXRhO1xyXG5cdGxldCBuZXh0QXJyYXk7XHJcblx0bGV0IHByZXZpb3VzQXJyYXkgPSB0cmlhbmdsZVswXTtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCB0cmlhbmdsZS5sZW5ndGg7IGkrKykge1xyXG5cdFx0bmV4dEFycmF5ID0gW107XHJcblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IHRyaWFuZ2xlW2ldLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdGlmIChqID09IDApIHtcclxuXHRcdFx0XHRuZXh0QXJyYXkucHVzaChwcmV2aW91c0FycmF5W2pdICsgdHJpYW5nbGVbaV1bal0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGogPT0gdHJpYW5nbGVbaV0ubGVuZ3RoIC0gMSkge1xyXG5cdFx0XHRcdG5leHRBcnJheS5wdXNoKHByZXZpb3VzQXJyYXlbaiAtIDFdICsgdHJpYW5nbGVbaV1bal0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG5leHRBcnJheS5wdXNoKE1hdGgubWluKHByZXZpb3VzQXJyYXlbal0sIHByZXZpb3VzQXJyYXlbaiAtIDFdKSArIHRyaWFuZ2xlW2ldW2pdKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwcmV2aW91c0FycmF5ID0gbmV4dEFycmF5O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIG5leHRBcnJheSk7XHJcbn1cclxuXHJcbi8vVU5JUVVFIFBBVEhTIElOIEEgR1JJRFxyXG5mdW5jdGlvbiB1bmlxdWVQYXRoc0koZ3JpZCkge1xyXG5cdGNvbnN0IHJpZ2h0TW92ZXMgPSBncmlkWzBdIC0gMTtcclxuXHRjb25zdCBkb3duTW92ZXMgPSBncmlkWzFdIC0gMTtcclxuXHJcblx0cmV0dXJuIE1hdGgucm91bmQoZmFjdG9yaWFsRGl2aXNpb24ocmlnaHRNb3ZlcyArIGRvd25Nb3ZlcywgcmlnaHRNb3ZlcykgLyAoZmFjdG9yaWFsKGRvd25Nb3ZlcykpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmFjdG9yaWFsKG4pIHtcclxuXHRyZXR1cm4gZmFjdG9yaWFsRGl2aXNpb24obiwgMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhY3RvcmlhbERpdmlzaW9uKG4sIGQpIHtcclxuXHRpZiAobiA9PSAwIHx8IG4gPT0gMSB8fCBuID09IGQpXHJcblx0XHRyZXR1cm4gMTtcclxuXHRyZXR1cm4gZmFjdG9yaWFsRGl2aXNpb24obiAtIDEsIGQpICogbjtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5pcXVlUGF0aHNJSShncmlkLCBpZ25vcmVGaXJzdCA9IGZhbHNlLCBpZ25vcmVMYXN0ID0gZmFsc2UpIHtcclxuXHRjb25zdCByaWdodE1vdmVzID0gZ3JpZFswXS5sZW5ndGggLSAxO1xyXG5cdGNvbnN0IGRvd25Nb3ZlcyA9IGdyaWQubGVuZ3RoIC0gMTtcclxuXHJcblx0bGV0IHRvdGFsUG9zc2libGVQYXRocyA9IE1hdGgucm91bmQoZmFjdG9yaWFsRGl2aXNpb24ocmlnaHRNb3ZlcyArIGRvd25Nb3ZlcywgcmlnaHRNb3ZlcykgLyAoZmFjdG9yaWFsKGRvd25Nb3ZlcykpKTtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBncmlkLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGdyaWRbaV0ubGVuZ3RoOyBqKyspIHtcclxuXHJcblx0XHRcdGlmIChncmlkW2ldW2pdID09IDEgJiYgKCFpZ25vcmVGaXJzdCB8fCAoaSAhPSAwIHx8IGogIT0gMCkpICYmICghaWdub3JlTGFzdCB8fCAoaSAhPSBncmlkLmxlbmd0aCAtIDEgfHwgaiAhPSBncmlkW2ldLmxlbmd0aCAtIDEpKSkge1xyXG5cdFx0XHRcdGNvbnN0IG5ld0FycmF5ID0gW107XHJcblx0XHRcdFx0Zm9yIChsZXQgayA9IGk7IGsgPCBncmlkLmxlbmd0aDsgaysrKSB7XHJcblx0XHRcdFx0XHRuZXdBcnJheS5wdXNoKGdyaWRba10uc2xpY2UoaiwgZ3JpZFtpXS5sZW5ndGgpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGxldCByZW1vdmVkUGF0aHMgPSB1bmlxdWVQYXRoc0lJKG5ld0FycmF5LCB0cnVlLCBpZ25vcmVMYXN0KTtcclxuXHRcdFx0XHRyZW1vdmVkUGF0aHMgKj0gdW5pcXVlUGF0aHNJKFtpICsgMSwgaiArIDFdKTtcclxuXHJcblx0XHRcdFx0dG90YWxQb3NzaWJsZVBhdGhzIC09IHJlbW92ZWRQYXRocztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB0b3RhbFBvc3NpYmxlUGF0aHM7XHJcbn1cclxuXHJcbi8vR0VORVJBVEUgSVAgQUREUkVTU0VTXHJcbmZ1bmN0aW9uIGdlbmVyYXRlSXBzKG51bSkge1xyXG5cdG51bSA9IG51bS50b1N0cmluZygpO1xyXG5cdGNvbnN0IGxlbmd0aCA9IG51bS5sZW5ndGg7XHJcblx0Y29uc3QgaXBzID0gW107XHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGggLSAyOyBpKyspIHtcclxuXHRcdGZvciAobGV0IGogPSBpICsgMTsgaiA8IGxlbmd0aCAtIDE7IGorKykge1xyXG5cdFx0XHRmb3IgKGxldCBrID0gaiArIDE7IGsgPCBsZW5ndGg7IGsrKykge1xyXG5cdFx0XHRcdGNvbnN0IGlwID0gW1xyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKDAsIGkpLFxyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGksIGopLFxyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGosIGspLFxyXG5cdFx0XHRcdFx0bnVtLnNsaWNlKGssIG51bS5sZW5ndGgpXHJcblx0XHRcdFx0XTtcclxuXHRcdFx0XHRsZXQgaXNWYWxpZCA9IHRydWU7XHJcblx0XHRcdFx0aXAuZm9yRWFjaChzZWcgPT4ge1xyXG5cdFx0XHRcdFx0aXNWYWxpZCA9IGlzVmFsaWQgJiYgaXNWYWxpZElwU2VnbWVudChzZWcpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGlmIChpc1ZhbGlkKSBpcHMucHVzaChpcC5qb2luKFwiLlwiKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGlwcy50b1N0cmluZygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkSXBTZWdtZW50KHNlZ21lbnQpIHtcclxuXHRpZiAoc2VnbWVudFswXSA9PSBcIjBcIiAmJiBzZWdtZW50ICE9IFwiMFwiKSByZXR1cm4gZmFsc2U7XHJcblx0c2VnbWVudCA9IE51bWJlcihzZWdtZW50KTtcclxuXHRpZiAoc2VnbWVudCA8IDAgfHwgc2VnbWVudCA+IDI1NSkgcmV0dXJuIGZhbHNlO1xyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vL0dSRUFURVNUIEZBQ1RPUlxyXG5mdW5jdGlvbiBmYWN0b3IzKG4pIHtcclxuXHQvLyBSZXR1cm5zIGFsbCB0aGUgcHJpbWUgZmFjdG9ycyBvZiBhIHBvc2l0aXZlIGludGVnZXJcclxuXHRsZXQgZmFjdG9ycyA9IFtdO1xyXG5cdGxldCBkID0gMlxyXG5cdHdoaWxlIChuID4gMSkge1xyXG5cdFx0d2hpbGUgKG4gJSBkID09IDApIHtcclxuXHRcdFx0ZmFjdG9ycy5wdXNoKGQpO1xyXG5cdFx0XHRuIC89IGQ7XHJcblx0XHR9XHJcblx0XHRkID0gZCArIDFcclxuXHRcdGlmIChkICogZCA+IG4pIHtcclxuXHRcdFx0aWYgKG4gPiAxKSBmYWN0b3JzLnB1c2gobik7XHJcblx0XHRcdGJyZWFrXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoZmFjdG9ycy5sZW5ndGggPiAwKSByZXR1cm4gZmFjdG9ycy5wb3AoKTtcclxuXHRyZXR1cm4gJyc7XHJcbn1cclxuXHJcbi8vU1BJUkFMSVpFIE1hdHJpeFxyXG5mdW5jdGlvbiBzcGlyYWwoYXJyLCBhY2N1bSA9IFtdKSB7XHJcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV0dXJuIGFjY3VtO1xyXG5cdH1cclxuXHRhY2N1bSA9IGFjY3VtLmNvbmNhdChhcnIuc2hpZnQoKSk7XHJcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV0dXJuIGFjY3VtO1xyXG5cdH1cclxuXHRhY2N1bSA9IGFjY3VtLmNvbmNhdChjb2x1bW4oYXJyLCBhcnJbMF0ubGVuZ3RoIC0gMSkpO1xyXG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybiBhY2N1bTtcclxuXHR9XHJcblx0YWNjdW0gPSBhY2N1bS5jb25jYXQoYXJyLnBvcCgpLnJldmVyc2UoKSk7XHJcblx0aWYgKGFyci5sZW5ndGggPT09IDAgfHwgYXJyWzBdLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV0dXJuIGFjY3VtO1xyXG5cdH1cclxuXHRhY2N1bSA9IGFjY3VtLmNvbmNhdChjb2x1bW4oYXJyLCAwKS5yZXZlcnNlKCkpO1xyXG5cdGlmIChhcnIubGVuZ3RoID09PSAwIHx8IGFyclswXS5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybiBhY2N1bTtcclxuXHR9XHJcblx0cmV0dXJuIHNwaXJhbChhcnIsIGFjY3VtKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29sdW1uKGFyciwgaW5kZXgpIHtcclxuXHRjb25zdCByZXMgPSBbXTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG5cdFx0Y29uc3QgZWxtID0gYXJyW2ldLnNwbGljZShpbmRleCwgMSlbMF07XHJcblx0XHRpZiAoZWxtKSB7XHJcblx0XHRcdHJlcy5wdXNoKGVsbSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXM7XHJcbn1cclxuXHJcbi8vIE1lcmdlIE92ZXJsYXBwaW5nIEludGVydmFsc1xyXG5mdW5jdGlvbiBtZXJnZU92ZXJsYXAoaW50ZXJ2YWxzKSB7XHJcblx0aW50ZXJ2YWxzLnNvcnQoKFttaW5BXSwgW21pbkJdKSA9PiBtaW5BIC0gbWluQik7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlcnZhbHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdGZvciAobGV0IGogPSBpICsgMTsgaiA8IGludGVydmFscy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRjb25zdCBbbWluLCBtYXhdID0gaW50ZXJ2YWxzW2ldO1xyXG5cdFx0XHRjb25zdCBbbGF0ZXJNaW4sIGxhdGVyTWF4XSA9IGludGVydmFsc1tqXTtcclxuXHRcdFx0aWYgKGxhdGVyTWluIDw9IG1heCkge1xyXG5cdFx0XHRcdGNvbnN0IG5ld01heCA9IGxhdGVyTWF4ID4gbWF4ID8gbGF0ZXJNYXggOiBtYXg7XHJcblx0XHRcdFx0Y29uc3QgbmV3SW50ZXJ2YWwgPSBbbWluLCBuZXdNYXhdO1xyXG5cdFx0XHRcdGludGVydmFsc1tpXSA9IG5ld0ludGVydmFsO1xyXG5cdFx0XHRcdGludGVydmFscy5zcGxpY2UoaiwgMSk7XHJcblx0XHRcdFx0aiA9IGk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGludGVydmFscztcclxufVxyXG5cclxuZnVuY3Rpb24gU2FuaXRpemVQYXJlbnNTb2x2ZXIoZGF0YSkge1xyXG5cdHZhciBsZWZ0ID0gMFxyXG5cdHZhciByaWdodCA9IDBcclxuXHR2YXIgcmVzID0gW11cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcclxuXHRcdGlmIChkYXRhW2ldID09PSAnKCcpIHtcclxuXHRcdFx0KytsZWZ0XHJcblx0XHR9IGVsc2UgaWYgKGRhdGFbaV0gPT09ICcpJykge1xyXG5cdFx0XHRsZWZ0ID4gMCA/IC0tbGVmdCA6ICsrcmlnaHRcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRmcyhwYWlyLCBpbmRleCwgbGVmdCwgcmlnaHQsIHMsIHNvbHV0aW9uLCByZXMpIHtcclxuXHRcdGlmIChzLmxlbmd0aCA9PT0gaW5kZXgpIHtcclxuXHRcdFx0aWYgKGxlZnQgPT09IDAgJiYgcmlnaHQgPT09IDAgJiYgcGFpciA9PT0gMCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRpZiAocmVzW2ldID09PSBzb2x1dGlvbikge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmVzLnB1c2goc29sdXRpb24pXHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuXHJcblx0XHR9XHJcblx0XHRpZiAoc1tpbmRleF0gPT09ICcoJykge1xyXG5cdFx0XHRpZiAobGVmdCA+IDApIHtcclxuXHRcdFx0XHRkZnMocGFpciwgaW5kZXggKyAxLCBsZWZ0IC0gMSwgcmlnaHQsIHMsIHNvbHV0aW9uLCByZXMpXHJcblx0XHRcdH1cclxuXHRcdFx0ZGZzKHBhaXIgKyAxLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0LCBzLCBzb2x1dGlvbiArIHNbaW5kZXhdLCByZXMpXHJcblx0XHR9IGVsc2UgaWYgKHNbaW5kZXhdID09PSAnKScpIHtcclxuXHRcdFx0aWYgKHJpZ2h0ID4gMCkgZGZzKHBhaXIsIGluZGV4ICsgMSwgbGVmdCwgcmlnaHQgLSAxLCBzLCBzb2x1dGlvbiwgcmVzKVxyXG5cdFx0XHRpZiAocGFpciA+IDApIGRmcyhwYWlyIC0gMSwgaW5kZXggKyAxLCBsZWZ0LCByaWdodCwgcywgc29sdXRpb24gKyBzW2luZGV4XSwgcmVzKVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGZzKHBhaXIsIGluZGV4ICsgMSwgbGVmdCwgcmlnaHQsIHMsIHNvbHV0aW9uICsgc1tpbmRleF0sIHJlcylcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGRmcygwLCAwLCBsZWZ0LCByaWdodCwgZGF0YSwgJycsIHJlcylcclxuXHRyZXR1cm4gcmVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlckFycmF5SnVtcGluZ0dhbWUoYXJyYXlEYXRhKSB7XHJcblx0aWYgKGFycmF5RGF0YVswXSA9PSAwKSByZXR1cm4gJzAnO1xyXG5cdGxldCBhcnJheUp1bXAgPSBbMV07XHJcblxyXG5cdGZvciAobGV0IG4gPSAwOyBuIDwgYXJyYXlEYXRhLmxlbmd0aDsgbisrKSB7XHJcblx0XHRpZiAoYXJyYXlKdW1wW25dKSB7XHJcblx0XHRcdGZvciAobGV0IHAgPSBuOyBwIDw9IE1hdGgubWluKG4gKyBhcnJheURhdGFbbl0sIGFycmF5RGF0YS5sZW5ndGggLSAxKTsgcCsrKSB7IC8vIGZpeGVkIG9mZi1ieS1vbmUgZXJyb3JcclxuXHRcdFx0XHRhcnJheUp1bXBbcF0gPSAxO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gMCArIEJvb2xlYW4oYXJyYXlKdW1wW2FycmF5RGF0YS5sZW5ndGggLSAxXSk7IC8vIHRoYW5rcyAvdS9LYWx1bW5pYXRvcmlzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlcldheXNUb1N1bShhcnJheURhdGEpIHtcclxuXHR2YXIgd2F5cyA9IFtdO1xyXG5cdHdheXNbMF0gPSAxO1xyXG5cclxuXHRmb3IgKHZhciBhID0gMTsgYSA8PSBhcnJheURhdGE7IGErKykge1xyXG5cdFx0d2F5c1thXSA9IDA7XHJcblx0fVxyXG5cclxuXHRmb3IgKHZhciBpID0gMTsgaSA8PSBhcnJheURhdGEgLSAxOyBpKyspIHtcclxuXHRcdGZvciAodmFyIGogPSBpOyBqIDw9IGFycmF5RGF0YTsgaisrKSB7XHJcblx0XHRcdHdheXNbal0gKz0gd2F5c1tqIC0gaV07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gd2F5c1thcnJheURhdGFdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb2x2ZXJXYXlzVG9FeHByZXNzKG5zLCBhcnJheURhdGEpIHtcclxuXHRsZXQgaSwgaiwgaztcclxuXHJcblx0bGV0IG9wZXJhdG9yTGlzdCA9IFtcIlwiLCBcIitcIiwgXCItXCIsIFwiKlwiXTtcclxuXHRsZXQgdmFsaWRFeHByZXNzaW9ucyA9IFtdO1xyXG5cclxuXHRsZXQgdGVtcFBlcm11dGF0aW9ucyA9IE1hdGgucG93KDQsIChhcnJheURhdGFbMF0ubGVuZ3RoIC0gMSkpO1xyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDwgdGVtcFBlcm11dGF0aW9uczsgaSsrKSB7XHJcblx0XHRsZXQgYXJyYXlTdW1tYW5kcyA9IFtdO1xyXG5cdFx0bGV0IGNhbmRpZGF0ZUV4cHJlc3Npb24gPSBhcnJheURhdGFbMF0uc3Vic3RyKDAsIDEpO1xyXG5cdFx0YXJyYXlTdW1tYW5kc1swXSA9IHBhcnNlSW50KGFycmF5RGF0YVswXS5zdWJzdHIoMCwgMSkpO1xyXG5cclxuXHRcdGZvciAoaiA9IDE7IGogPCBhcnJheURhdGFbMF0ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0Y2FuZGlkYXRlRXhwcmVzc2lvbiArPSBvcGVyYXRvckxpc3RbKGkgPj4gKChqIC0gMSkgKiAyKSkgJSA0XSArIGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSk7XHJcblxyXG5cdFx0XHRsZXQgcm9sbGluZ09wZXJhdG9yID0gb3BlcmF0b3JMaXN0WyhpID4+ICgoaiAtIDEpICogMikpICUgNF07XHJcblx0XHRcdGxldCByb2xsaW5nT3BlcmFuZCA9IHBhcnNlSW50KGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSkpO1xyXG5cclxuXHRcdFx0c3dpdGNoIChyb2xsaW5nT3BlcmF0b3IpIHtcclxuXHRcdFx0XHRjYXNlIFwiXCI6XHJcblx0XHRcdFx0XHRyb2xsaW5nT3BlcmFuZCA9IHJvbGxpbmdPcGVyYW5kICogKGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSAvIE1hdGguYWJzKGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGggLSAxXSkpO1xyXG5cdFx0XHRcdFx0YXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdID0gYXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdICogMTAgKyByb2xsaW5nT3BlcmFuZDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCIrXCI6XHJcblx0XHRcdFx0XHRhcnJheVN1bW1hbmRzW2FycmF5U3VtbWFuZHMubGVuZ3RoXSA9IHJvbGxpbmdPcGVyYW5kO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIi1cIjpcclxuXHRcdFx0XHRcdGFycmF5U3VtbWFuZHNbYXJyYXlTdW1tYW5kcy5sZW5ndGhdID0gMCAtIHJvbGxpbmdPcGVyYW5kO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIipcIjpcclxuXHRcdFx0XHRcdHdoaWxlIChqIDwgYXJyYXlEYXRhWzBdLmxlbmd0aCAtIDEgJiYgKChpID4+IChqICogMikpICUgNCkgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0aiArPSAxO1xyXG5cdFx0XHRcdFx0XHRjYW5kaWRhdGVFeHByZXNzaW9uICs9IGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSk7XHJcblx0XHRcdFx0XHRcdHJvbGxpbmdPcGVyYW5kID0gcm9sbGluZ09wZXJhbmQgKiAxMCArIHBhcnNlSW50KGFycmF5RGF0YVswXS5zdWJzdHIoaiwgMSkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdID0gYXJyYXlTdW1tYW5kc1thcnJheVN1bW1hbmRzLmxlbmd0aCAtIDFdICogcm9sbGluZ09wZXJhbmQ7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCByb2xsaW5nVG90YWwgPSBhcnJheVN1bW1hbmRzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSArIGI7IH0pO1xyXG5cclxuXHRcdGlmIChhcnJheURhdGFbMV0gPT09IHJvbGxpbmdUb3RhbCkge1xyXG5cdFx0XHR2YWxpZEV4cHJlc3Npb25zW3ZhbGlkRXhwcmVzc2lvbnMubGVuZ3RoXSA9IGNhbmRpZGF0ZUV4cHJlc3Npb247XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsaWRFeHByZXNzaW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlRmluZEFsbFZhbGlkTWF0aEV4cHJlc3Npb25zKGFycmF5RGF0YSkge1xyXG4gIGNvbnN0IG51bSA9IGFycmF5RGF0YVswXTtcclxuICBjb25zdCB0YXJnZXQgPSBhcnJheURhdGFbMV07XHJcblxyXG4gIGZ1bmN0aW9uIGhlbHBlcihyZXMsIHBhdGgsIG51bSwgdGFyZ2V0LCBwb3MsIGV2YWx1YXRlZCwgbXVsdGVkKSB7XHJcbiAgICAgIGlmIChwb3MgPT09IG51bS5sZW5ndGgpIHtcclxuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGV2YWx1YXRlZCkge1xyXG4gICAgICAgICAgICAgIHJlcy5wdXNoKHBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgbnVtLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpZiAoaSAhPSBwb3MgJiYgbnVtW3Bvc10gPT0gXCIwXCIpIHtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGN1ciA9IHBhcnNlSW50KG51bS5zdWJzdHJpbmcocG9zLCBpICsgMSkpO1xyXG5cclxuICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcclxuICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGN1ciwgY3VyKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaGVscGVyKHJlcywgcGF0aCArIFwiK1wiICsgY3VyLCBudW0sIHRhcmdldCwgaSArIDEsIGV2YWx1YXRlZCArIGN1ciwgY3VyKTtcclxuICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgXCItXCIgKyBjdXIsIG51bSwgdGFyZ2V0LCBpICsgMSwgZXZhbHVhdGVkIC0gY3VyLCAtY3VyKTtcclxuICAgICAgICAgICAgICBoZWxwZXIocmVzLCBwYXRoICsgXCIqXCIgKyBjdXIsIG51bSwgdGFyZ2V0LCBpICsgMSwgZXZhbHVhdGVkIC0gbXVsdGVkICsgbXVsdGVkICogY3VyLCBtdWx0ZWQgKiBjdXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBbXTtcclxuICBoZWxwZXIocmVzdWx0LCBcIlwiLCBudW0sIHRhcmdldCwgMCwgMCwgMCk7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvbHZlckxhcmdlc3RTdWJzZXQobnMsIGFycmF5RGF0YSkge1xyXG5cdGxldCBoaWdoZXN0U3Vic2V0ID0gYXJyYXlEYXRhWzBdO1xyXG5cclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5RGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdGZvciAobGV0IGogPSBpOyBqIDwgYXJyYXlEYXRhLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdGxldCB0ZW1wU3Vic2V0ID0gMDtcclxuXHRcdFx0Zm9yIChsZXQgayA9IGk7IGsgPD0gajsgaysrKSB7XHJcblx0XHRcdFx0dGVtcFN1YnNldCArPSBhcnJheURhdGFba107XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChoaWdoZXN0U3Vic2V0IDwgdGVtcFN1YnNldCkge1xyXG5cdFx0XHRcdGhpZ2hlc3RTdWJzZXQgPSB0ZW1wU3Vic2V0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gaGlnaGVzdFN1YnNldDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEhhbW1pbmdTdW1PZlBhcml0eShfbGVuZ3RoT2ZEQml0cykgeyAvLyB3aWxsIGNhbGN1bGF0ZSB0aGUgbmVlZGVkIGFtb3VudCBvZiBwYXJpdHlCaXRzICd3aXRob3V0JyB0aGUgXCJvdmVyYWxsXCItUGFyaXR5XHJcblx0cmV0dXJuIChfbGVuZ3RoT2ZEQml0cyA8IDMgfHwgX2xlbmd0aE9mREJpdHMgPT0gMClcclxuXHRcdD8gKChfbGVuZ3RoT2ZEQml0cyA9PSAwKSA/IDAgOiBfbGVuZ3RoT2ZEQml0cyArIDEpXHJcblx0XHQvLyB0aGUgTWF0aC5sb2cyLW1hdGggd2lsbCBvbmx5IHdvcmssIGlmIHRoZSBsZW5ndGggaXMgZ3JlYXRlciBlZ3F1YWwgMyBvdGhlcndpc2UgaXQncyBcImtpbmRhIGJyb2tlblwiIDpEXHJcblx0XHQ6ICgoTWF0aC5jZWlsKE1hdGgubG9nMihfbGVuZ3RoT2ZEQml0cyAqIDIpKSkgPD0gTWF0aC5jZWlsKE1hdGgubG9nMigxICsgX2xlbmd0aE9mREJpdHMgKyBNYXRoLmNlaWwoTWF0aC5sb2cyKF9sZW5ndGhPZkRCaXRzKSkpKSlcclxuXHRcdFx0PyBNYXRoLmNlaWwoTWF0aC5sb2cyKF9sZW5ndGhPZkRCaXRzKSArIDEpXHJcblx0XHRcdDogTWF0aC5jZWlsKE1hdGgubG9nMihfbGVuZ3RoT2ZEQml0cykpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBIYW1taW5nRW5jb2RlKHZhbHVlKSB7XHJcblx0bGV0IF9kYXRhQml0cyA9IHZhbHVlLnRvU3RyaW5nKDIpOyAvLyBjaGFuZ2UgdmFsdWUgaW50byBzdHJpbmcgb2YgYmluYXJ5IGJpdHNcclxuXHRsZXQgX3N1bV9wYXJpdHkgPSBIYW1taW5nU3VtT2ZQYXJpdHkoX2RhdGFCaXRzLmxlbmd0aCk7IC8vIGdldCB0aGUgc3VtIG9mIG5lZWRlZCBwYXJpdHkgYml0c1xyXG5cdGxldCBfZGF0YSA9IF9kYXRhQml0cy5zcGxpdChcIlwiKTsgLy8gY3JlYXRlIG5ldyBhcnJheSB3aXRoIHRoZSBnaXZlbiBkYXRhIGJpdHNcclxuXHRsZXQgX2J1aWxkID0gW107IC8vIGluaXQgbmV3IGFycmF5IGZvciBidWlsZGluZ1xyXG5cdGxldCBjb3VudCA9IChhcnIsIHZhbCkgPT4gYXJyLnJlZHVjZSgoYSwgdikgPT4gKHYgPT09IHZhbCA/IGEgKyAxIDogYSksIDApO1xyXG5cdC8vIGNvdW50IHNwZWNpZmllZCBkYXRhIGluIHRoZSBhcnJheSwgZm9yIGxhdGVyIHVzZVxyXG5cclxuXHRfYnVpbGQucHVzaChcInhcIiwgXCJ4XCIsIC4uLl9kYXRhLnNwbGljZSgwLCAxKSk7IC8vIHByZS1idWlsZCB0aGUgXCJwcmUtYnVpbGRcIlxyXG5cclxuXHRmb3IgKGxldCBpID0gMjsgaSA8IF9zdW1fcGFyaXR5OyBpKyspIHsgLy8gYWRkIG5ldyBwYXJpdHliaXRzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIGJpdHNcclxuXHRcdF9idWlsZC5wdXNoKFwieFwiLCAuLi5fZGF0YS5zcGxpY2UoMCwgTWF0aC5wb3coMiwgaSkgLSAxKSlcclxuXHR9XHJcblx0Ly8gXCJwcmVcIi1idWlsZCBteSBhcnJheSwgbm93IHRoZSBcImNhbGN1bGF0aW9uXCIuLi4gZ2V0IHRoZSBwYXJpdHliaXRzIHdvcmtpbmdcclxuXHRmb3IgKGxldCBpbmRleCBvZiBfYnVpbGQucmVkdWNlKGZ1bmN0aW9uIChhLCBlLCBpKSB7IGlmIChlID09IFwieFwiKSBhLnB1c2goaSk7IHJldHVybiBhOyB9LCBbXSkpIHtcclxuXHRcdGxldCBfdGVtcGNvdW50ID0gaW5kZXggKyAxOyAvLyBzZXQgdGhlIFwic3RlcHNpemVcIlxyXG5cdFx0bGV0IF90ZW1wYXJyYXkgPSBbXTsgLy8gdGVtcG9yYXJ5IGFycmF5IHRvIHN0b3JlIHRoZSBjb3JyZXNwb25kaW5nIGJpdHNcclxuXHRcdGxldCBfdGVtcGRhdGEgPSBbLi4uX2J1aWxkXTsgLy8gY29weSB0aGUgXCJidWlsZFwiXHJcblx0XHR3aGlsZSAoX3RlbXBkYXRhW2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7IC8vIGFzIGxvbmcgYXMgdGhlcmUgYXJlIGJpdHMsIGRvIFwiY3V0XCJcclxuXHRcdFx0bGV0IF90ZW1wID0gX3RlbXBkYXRhLnNwbGljZShpbmRleCwgX3RlbXBjb3VudCAqIDIpOyAvLyBnZXQgeCoyIGJpdHMsIHRoZW5cclxuXHRcdFx0X3RlbXBhcnJheS5wdXNoKC4uLl90ZW1wLnNwbGljZSgwLCBfdGVtcGNvdW50KSk7IC8vIC4uIGN1dCB0aGVtIGFuZCBrZWVwIGZpcnN0IGhhbGZcclxuXHRcdH1cclxuXHRcdF90ZW1wYXJyYXkuc3BsaWNlKDAsIDEpOyAvLyByZW1vdmUgZmlyc3QgYml0LCB3aGljaCBpcyB0aGUgcGFyaXR5IG9uZVxyXG5cdFx0X2J1aWxkW2luZGV4XSA9ICgoY291bnQoX3RlbXBhcnJheSwgXCIxXCIpKSAlIDIuKS50b1N0cmluZygpIC8vIHNpbXBsZSBjb3VudCBhbmQgcmVtYWluZGVyIG9mIDIgd2l0aCBcInRvU3RyaW5nXCIgdG8gc3RvcmUgaXRcclxuXHR9XHJcblx0X2J1aWxkLnVuc2hpZnQoKChjb3VudChfYnVpbGQsIFwiMVwiKSkgJSAyLikudG9TdHJpbmcoKSkgLy8gYWRkaW5nIGZpcnN0IGluZGV4LCB3aGljaCBpcyBkb25lIGFzIGxhc3QgZWxlbWVudFxyXG5cdHJldHVybiBfYnVpbGQuam9pbihcIlwiKSAvLyByZXR1cm4gYSBzdHJpbmcgYWdhaW5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEhhbW1pbmdEZWNvZGUoX2RhdGEpIHtcclxuXHRsZXQgX2J1aWxkID0gX2RhdGEuc3BsaXQoXCJcIik7IC8vIHllLCBhbiBhcnJheSBhZ2FpblxyXG5cdGxldCBfdGVzdEFycmF5ID0gW107ICAvL2ZvciB0aGUgXCJ0ZXN0c1wiLiBpZiBhbnkgaXMgZmFsc2UsIGl0IGlzIGJlZW4gYWx0ZXJlZCBkYXRhLCB3aWxsIGNoZWNrIGFuZCBmaXggaXQgbGF0ZXJcclxuXHRsZXQgX3N1bV9wYXJpdHkgPSBNYXRoLmNlaWwoTWF0aC5sb2cyKF9kYXRhLmxlbmd0aCkpOyAvLyBleGNsdWRpbmcgZmlyc3QgYml0XHJcblx0bGV0IGNvdW50ID0gKGFyciwgdmFsKSA9PiBhcnIucmVkdWNlKChhLCB2KSA9PiAodiA9PT0gdmFsID8gYSArIDEgOiBhKSwgMCk7IC8vIGNvdW50Li4uLiBhZ2FpbiA7KVxyXG5cdGxldCBfb3ZlcmFsbFBhcml0eSA9IF9idWlsZC5zcGxpY2UoMCwgMSkuam9pbihcIlwiKTsgLy8gcmVtb3ZlIGZpcnN0IGluZGV4LCBmb3IgY2hlY2tpbmcgYW5kIHRvIHVzZSB0aGUgX2J1aWxkIHByb3Blcmx5IGxhdGVyXHJcblx0X3Rlc3RBcnJheS5wdXNoKChfb3ZlcmFsbFBhcml0eSA9PSAoY291bnQoX2J1aWxkLCBcIjFcIikgJSAyKS50b1N0cmluZygpKSA/IHRydWUgOiBmYWxzZSk7IC8vIGNoZWNraW5nIHRoZSBcIm92ZXJhbGxcIiBwYXJpdHlcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IF9zdW1fcGFyaXR5OyBpKyspIHtcclxuXHRcdGxldCBfdGVtcEluZGV4ID0gTWF0aC5wb3coMiwgaSkgLSAxIC8vIGdldCB0aGUgcGFyaXR5Qml0cyBJbmRleFxyXG5cdFx0bGV0IF90ZW1wU3RlcCA9IF90ZW1wSW5kZXggKyAxIC8vIHNldCB0aGUgc3RlcHNpemVcclxuXHRcdGxldCBfdGVtcERhdGEgPSBbLi4uX2J1aWxkXSAvLyBcImNvcHlcIiB0aGUgYnVpbGQtZGF0YVxyXG5cdFx0bGV0IF90ZW1wQXJyYXkgPSBbXSAvLyBpbml0IGVtcHR5IGFycmF5IGZvciBcInRlc3RpbmdcIlxyXG5cdFx0d2hpbGUgKF90ZW1wRGF0YVtfdGVtcEluZGV4XSAhPSB1bmRlZmluZWQpIHsgLy8gZXh0cmFjdCBmcm9tIHRoZSBjb3BpZWQgZGF0YSB1bnRpbCB0aGUgXCJzdGFydGluZ1wiIGluZGV4IGlzIHVuZGVmaW5lZFxyXG5cdFx0XHR2YXIgX3RlbXAgPSBbLi4uX3RlbXBEYXRhLnNwbGljZShfdGVtcEluZGV4LCBfdGVtcFN0ZXAgKiAyKV0gLy8gZXh0cmFjdCAyKnN0ZXBzaXplXHJcblx0XHRcdF90ZW1wQXJyYXkucHVzaCguLi5fdGVtcC5zcGxpY2UoMCwgX3RlbXBTdGVwKSkgIC8vIGFuZCBjdXQgYWdhaW4gZm9yIGtlZXBpbmcgZmlyc3QgaGFsZlxyXG5cdFx0fVxyXG5cdFx0bGV0IF90ZW1wUGFyaXR5ID0gX3RlbXBBcnJheS5zaGlmdCgpIC8vIGFuZCBjdXQgdGhlIGZpcnN0IGluZGV4IGZvciBjaGVja2luZyB3aXRoIHRoZSByZXN0IG9mIHRoZSBkYXRhXHJcblx0XHRfdGVzdEFycmF5LnB1c2goKChfdGVtcFBhcml0eSA9PSAoY291bnQoX3RlbXBBcnJheSwgXCIxXCIpICUgMikudG9TdHJpbmcoKSkpID8gdHJ1ZSA6IGZhbHNlKSAvLyBpcyB0aGUgX3RlbXBQYXJpdHkgdGhlIGNhbGN1bGF0ZWQgZGF0YT9cclxuXHR9XHJcblx0bGV0IF9maXhJbmRleCA9IDA7IC8vIGluaXQgdGhlIFwiZml4aW5nXCIgaW5kZXggYW1kIHN0YXJ0IHdpdGggLTEsIGJjIHdlIGFscmVhZHkgcmVtb3ZlZCB0aGUgZmlyc3QgYml0XHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBfc3VtX3Bhcml0eSArIDE7IGkrKykge1xyXG5cdFx0X2ZpeEluZGV4ICs9IChfdGVzdEFycmF5W2ldKSA/IDAgOiAoTWF0aC5wb3coMiwgaSkgLyAyKVxyXG5cdH1cclxuXHRfYnVpbGQudW5zaGlmdChfb3ZlcmFsbFBhcml0eSlcclxuXHQvLyBmaXggdGhlIGFjdHVhbCBoYW1taW5nY29kZSBpZiB0aGVyZSBpcyBhbiBlcnJvclxyXG5cdGlmIChfZml4SW5kZXggPiAwICYmIF90ZXN0QXJyYXlbMF0gPT0gZmFsc2UpIHsgIC8vIGlmIHRoZSBvdmVyYWxsIGlzIGZhbHNlIGFuZCB0aGUgc3VtIG9mIGNhbGN1bGF0ZWQgdmFsdWVzIGlzIGdyZWF0ZXIgZXF1YWwgMCwgZml4IHRoZSBjb3JyZXNwb25kaW5nIGhhbW1pbmctYml0XHJcblx0XHRfYnVpbGRbX2ZpeEluZGV4XSA9IChfYnVpbGRbX2ZpeEluZGV4XSA9PSBcIjBcIikgPyBcIjFcIiA6IFwiMFwiXHJcblx0fVxyXG5cdGVsc2UgaWYgKF90ZXN0QXJyYXlbMF0gPT0gZmFsc2UpIHsgLy8gb3RoZXJ3aXNlLCBpZiB0aGUgdGhlIG92ZXJhbGxfcGFyaXR5IGlzIG9ubHkgd3JvbmcsIGZpeCB0aGF0IG9uZVxyXG5cdFx0X292ZXJhbGxQYXJpdHkgPSAoX292ZXJhbGxQYXJpdHkgPT0gXCIwXCIpID8gXCIxXCIgOiBcIjBcIlxyXG5cdH1cclxuXHRlbHNlIGlmIChfdGVzdEFycmF5WzBdID09IHRydWUgJiYgX3Rlc3RBcnJheS5zb21lKCh0cnV0aCkgPT4gdHJ1dGggPT0gZmFsc2UpKSB7XHJcblx0XHRyZXR1cm4gMCAvLyB1aG0sIHRoZXJlJ3Mgc29tZSBzdHJhbmdlIGdvaW5nIG9uLi4uIDIgYml0cyBhcmUgYWx0ZXJlZD8gSG93P1xyXG5cdH1cclxuXHQvLyBvb2YuLiBoYWxmd2F5IHRocm91Z2guLi4gd2UgZml4ZWQgdGhlIGFsdGVyZWQgYml0LCBub3cgXCJleHRyYWN0XCIgdGhlIHBhcml0eSBmcm9tIHRoZSBidWlsZCBhbmQgcGFyc2UgdGhlIGJpbmFyeSBkYXRhXHJcblx0Zm9yICh2YXIgaiA9IF9zdW1fcGFyaXR5OyBqID49IDA7IGotLSkgeyAvLyBzdGFydCBmcm9tIHRoZSBsYXN0IHBhcml0eSBkb3duIHRoZSBzdGFydGluZyBvbmVcclxuXHRcdF9idWlsZC5zcGxpY2UoTWF0aC5wb3coMiwgaiksIDEpXHJcblx0fVxyXG5cdF9idWlsZC5zcGxpY2UoMCwgMSlcclxuXHRyZXR1cm4gcGFyc2VJbnQoX2J1aWxkLmpvaW4oXCJcIiksIDIpXHJcbn1cclxuXHJcblxyXG4vLyBkZWNvbXByZXNzIExaLWNvbXByZXNzZWQgc3RyaW5nLCBvciByZXR1cm4gbnVsbCBpZiBpbnB1dCBpcyBpbnZhbGlkXHJcbmZ1bmN0aW9uIGNvbXByTFpEZWNvZGUoY29tcHIpIHtcclxuXHRsZXQgcGxhaW4gPSBcIlwiO1xyXG5cclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbXByLmxlbmd0aDspIHtcclxuXHRcdGNvbnN0IGxpdGVyYWxfbGVuZ3RoID0gY29tcHIuY2hhckNvZGVBdChpKSAtIDB4MzA7XHJcblxyXG5cdFx0aWYgKGxpdGVyYWxfbGVuZ3RoIDwgMCB8fCBsaXRlcmFsX2xlbmd0aCA+IDkgfHwgaSArIDEgKyBsaXRlcmFsX2xlbmd0aCA+IGNvbXByLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwbGFpbiArPSBjb21wci5zdWJzdHJpbmcoaSArIDEsIGkgKyAxICsgbGl0ZXJhbF9sZW5ndGgpO1xyXG5cdFx0aSArPSAxICsgbGl0ZXJhbF9sZW5ndGg7XHJcblxyXG5cdFx0aWYgKGkgPj0gY29tcHIubGVuZ3RoKSB7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgYmFja3JlZl9sZW5ndGggPSBjb21wci5jaGFyQ29kZUF0KGkpIC0gMHgzMDtcclxuXHJcblx0XHRpZiAoYmFja3JlZl9sZW5ndGggPCAwIHx8IGJhY2tyZWZfbGVuZ3RoID4gOSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH0gZWxzZSBpZiAoYmFja3JlZl9sZW5ndGggPT09IDApIHtcclxuXHRcdFx0KytpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWYgKGkgKyAxID49IGNvbXByLmxlbmd0aCkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBiYWNrcmVmX29mZnNldCA9IGNvbXByLmNoYXJDb2RlQXQoaSArIDEpIC0gMHgzMDtcclxuXHRcdFx0aWYgKChiYWNrcmVmX2xlbmd0aCA+IDAgJiYgKGJhY2tyZWZfb2Zmc2V0IDwgMSB8fCBiYWNrcmVmX29mZnNldCA+IDkpKSB8fCBiYWNrcmVmX29mZnNldCA+IHBsYWluLmxlbmd0aCkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGJhY2tyZWZfbGVuZ3RoOyArK2opIHtcclxuXHRcdFx0XHRwbGFpbiArPSBwbGFpbltwbGFpbi5sZW5ndGggLSBiYWNrcmVmX29mZnNldF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGkgKz0gMjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBwbGFpbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY29sb3JpbmdHcmFwaChkYXRhKSB7XHJcblx0Ly9IZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IG5laWdoYm91cmhvb2Qgb2YgYSB2ZXJ0ZXhcclxuXHRmdW5jdGlvbiBuZWlnaGJvdXJob29kKHZlcnRleCkge1xyXG5cdFx0Y29uc3QgYWRqTGVmdCA9IGRhdGFbMV0uZmlsdGVyKChbYSwgX10pID0+IGEgPT0gdmVydGV4KS5tYXAoKFtfLCBiXSkgPT4gYik7XHJcblx0XHRjb25zdCBhZGpSaWdodCA9IGRhdGFbMV0uZmlsdGVyKChbXywgYl0pID0+IGIgPT0gdmVydGV4KS5tYXAoKFthLCBfXSkgPT4gYSk7XHJcblx0XHRyZXR1cm4gYWRqTGVmdC5jb25jYXQoYWRqUmlnaHQpO1xyXG5cdH1cclxuXHJcblx0Ly9WZXJpZnkgdGhhdCB0aGVyZSBpcyBubyBzb2x1dGlvbiBieSBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBhIHByb3BlciAyLWNvbG9yaW5nLlxyXG5cdGNvbnN0IGNvbG9yaW5nID0gQXJyYXkoZGF0YVswXSkuZmlsbCh1bmRlZmluZWQpO1xyXG5cdHdoaWxlIChjb2xvcmluZy5zb21lKCh2YWwpID0+IHZhbCA9PT0gdW5kZWZpbmVkKSkge1xyXG5cdFx0Ly9Db2xvciBhIHZlcnRleCBpbiB0aGUgZ3JhcGhcclxuXHRcdGNvbnN0IGluaXRpYWxWZXJ0ZXggPSBjb2xvcmluZy5maW5kSW5kZXgoKHZhbCkgPT4gdmFsID09PSB1bmRlZmluZWQpO1xyXG5cdFx0Y29sb3JpbmdbaW5pdGlhbFZlcnRleF0gPSAwO1xyXG5cdFx0Y29uc3QgZnJvbnRpZXIgPSBbaW5pdGlhbFZlcnRleF07XHJcblxyXG5cdFx0Ly9Qcm9wb2dhdGUgdGhlIGNvbG9yaW5nIHRocm91Z2hvdXQgdGhlIGNvbXBvbmVudCBjb250YWluaW5nIHYgZ3JlZWRpbHlcclxuXHRcdHdoaWxlIChmcm9udGllci5sZW5ndGggPiAwKSB7XHJcblx0XHRcdGNvbnN0IHYgPSBmcm9udGllci5wb3AoKSB8fCAwO1xyXG5cdFx0XHRjb25zdCBuZWlnaGJvcnMgPSBuZWlnaGJvdXJob29kKHYpO1xyXG5cclxuXHRcdFx0Ly9Gb3IgZWFjaCB2ZXJ0ZXggdSBhZGphY2VudCB0byB2XHJcblx0XHRcdGZvciAoY29uc3QgaWQgaW4gbmVpZ2hib3JzKSB7XHJcblx0XHRcdFx0Y29uc3QgdSA9IG5laWdoYm9yc1tpZF07XHJcblxyXG5cdFx0XHRcdC8vU2V0IHRoZSBjb2xvciBvZiB1IHRvIHRoZSBvcHBvc2l0ZSBvZiB2J3MgY29sb3IgaWYgaXQgaXMgbmV3LFxyXG5cdFx0XHRcdC8vdGhlbiBhZGQgdSB0byB0aGUgZnJvbnRpZXIgdG8gY29udGludWUgdGhlIGFsZ29yaXRobS5cclxuXHRcdFx0XHRpZiAoY29sb3JpbmdbdV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0aWYgKGNvbG9yaW5nW3ZdID09PSAwKSBjb2xvcmluZ1t1XSA9IDE7XHJcblx0XHRcdFx0XHRlbHNlIGNvbG9yaW5nW3VdID0gMDtcclxuXHJcblx0XHRcdFx0XHRmcm9udGllci5wdXNoKHUpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly9Bc3NlcnQgdSx2IGRvIG5vdCBoYXZlIHRoZSBzYW1lIGNvbG9yXHJcblx0XHRcdFx0ZWxzZSBpZiAoY29sb3JpbmdbdV0gPT09IGNvbG9yaW5nW3ZdKSB7XHJcblx0XHRcdFx0XHQvL0lmIHUsdiBkbyBoYXZlIHRoZSBzYW1lIGNvbG9yLCBubyBwcm9wZXIgMi1jb2xvcmluZyBleGlzdHMsIG1lYW5pbmdcclxuXHRcdFx0XHRcdC8vdGhlIHBsYXllciB3YXMgY29ycmVjdCB0byBzYXkgdGhlcmUgaXMgbm8gcHJvcGVyIDItY29sb3Jpbmcgb2YgdGhlIGdyYXBoLlxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiW11cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGNvbG9yaW5nO1xyXG59XHJcblxyXG4vLyBjb21wcmVzcyBwbGFpbnRlc3Qgc3RyaW5nXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wckxaRW5jb2RlKHBsYWluKSB7XHJcblx0Ly8gZm9yIHN0YXRlW2ldW2pdOlxyXG5cdC8vICAgICAgaWYgaSBpcyAwLCB3ZSdyZSBhZGRpbmcgYSBsaXRlcmFsIG9mIGxlbmd0aCBqXHJcblx0Ly8gICAgICBlbHNlLCB3ZSdyZSBhZGRpbmcgYSBiYWNrcmVmZXJlbmNlIG9mIG9mZnNldCBpIGFuZCBsZW5ndGggalxyXG5cdGxldCBjdXJfc3RhdGUgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApLmZpbGwobnVsbCkpO1xyXG5cdGxldCBuZXdfc3RhdGUgPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApKTtcclxuXHJcblx0ZnVuY3Rpb24gc2V0KHN0YXRlLCBpLCBqLCBzdHIpIHtcclxuXHRcdGNvbnN0IGN1cnJlbnQgPSBzdGF0ZVtpXVtqXTtcclxuXHRcdGlmIChjdXJyZW50ID09IG51bGwgfHwgc3RyLmxlbmd0aCA8IGN1cnJlbnQubGVuZ3RoKSB7XHJcblx0XHRcdHN0YXRlW2ldW2pdID0gc3RyO1xyXG5cdFx0fSBlbHNlIGlmIChzdHIubGVuZ3RoID09PSBjdXJyZW50Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XHJcblx0XHRcdC8vIGlmIHR3byBzdHJpbmdzIGFyZSB0aGUgc2FtZSBsZW5ndGgsIHBpY2sgcmFuZG9tbHkgc28gdGhhdFxyXG5cdFx0XHQvLyB3ZSBnZW5lcmF0ZSBtb3JlIHBvc3NpYmxlIGlucHV0cyB0byBDb21wcmVzc2lvbiBJSVxyXG5cdFx0XHRzdGF0ZVtpXVtqXSA9IHN0cjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIGluaXRpYWwgc3RhdGUgaXMgYSBsaXRlcmFsIG9mIGxlbmd0aCAxXHJcblx0Y3VyX3N0YXRlWzBdWzFdID0gXCJcIjtcclxuXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBwbGFpbi5sZW5ndGg7ICsraSkge1xyXG5cdFx0Zm9yIChjb25zdCByb3cgb2YgbmV3X3N0YXRlKSB7XHJcblx0XHRcdHJvdy5maWxsKG51bGwpO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgYyA9IHBsYWluW2ldO1xyXG5cclxuXHRcdC8vIGhhbmRsZSBsaXRlcmFsc1xyXG5cdFx0Zm9yIChsZXQgbGVuZ3RoID0gMTsgbGVuZ3RoIDw9IDk7ICsrbGVuZ3RoKSB7XHJcblx0XHRcdGNvbnN0IHN0cmluZyA9IGN1cl9zdGF0ZVswXVtsZW5ndGhdO1xyXG5cdFx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGxlbmd0aCA8IDkpIHtcclxuXHRcdFx0XHQvLyBleHRlbmQgY3VycmVudCBsaXRlcmFsXHJcblx0XHRcdFx0c2V0KG5ld19zdGF0ZSwgMCwgbGVuZ3RoICsgMSwgc3RyaW5nKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBzdGFydCBuZXcgbGl0ZXJhbFxyXG5cdFx0XHRcdHNldChuZXdfc3RhdGUsIDAsIDEsIHN0cmluZyArIFwiOVwiICsgcGxhaW4uc3Vic3RyaW5nKGkgLSA5LCBpKSArIFwiMFwiKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yIChsZXQgb2Zmc2V0ID0gMTsgb2Zmc2V0IDw9IE1hdGgubWluKDksIGkpOyArK29mZnNldCkge1xyXG5cdFx0XHRcdGlmIChwbGFpbltpIC0gb2Zmc2V0XSA9PT0gYykge1xyXG5cdFx0XHRcdFx0Ly8gc3RhcnQgbmV3IGJhY2tyZWZlcmVuY2VcclxuXHRcdFx0XHRcdHNldChuZXdfc3RhdGUsIG9mZnNldCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBwbGFpbi5zdWJzdHJpbmcoaSAtIGxlbmd0aCwgaSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGhhbmRsZSBiYWNrcmVmZXJlbmNlc1xyXG5cdFx0Zm9yIChsZXQgb2Zmc2V0ID0gMTsgb2Zmc2V0IDw9IDk7ICsrb2Zmc2V0KSB7XHJcblx0XHRcdGZvciAobGV0IGxlbmd0aCA9IDE7IGxlbmd0aCA8PSA5OyArK2xlbmd0aCkge1xyXG5cdFx0XHRcdGNvbnN0IHN0cmluZyA9IGN1cl9zdGF0ZVtvZmZzZXRdW2xlbmd0aF07XHJcblx0XHRcdFx0aWYgKHN0cmluZyA9PSBudWxsKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChwbGFpbltpIC0gb2Zmc2V0XSA9PT0gYykge1xyXG5cdFx0XHRcdFx0aWYgKGxlbmd0aCA8IDkpIHtcclxuXHRcdFx0XHRcdFx0Ly8gZXh0ZW5kIGN1cnJlbnQgYmFja3JlZmVyZW5jZVxyXG5cdFx0XHRcdFx0XHRzZXQobmV3X3N0YXRlLCBvZmZzZXQsIGxlbmd0aCArIDEsIHN0cmluZyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQvLyBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxyXG5cdFx0XHRcdFx0XHRzZXQobmV3X3N0YXRlLCBvZmZzZXQsIDEsIHN0cmluZyArIFwiOVwiICsgU3RyaW5nKG9mZnNldCkgKyBcIjBcIik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBzdGFydCBuZXcgbGl0ZXJhbFxyXG5cdFx0XHRcdHNldChuZXdfc3RhdGUsIDAsIDEsIHN0cmluZyArIFN0cmluZyhsZW5ndGgpICsgU3RyaW5nKG9mZnNldCkpO1xyXG5cclxuXHRcdFx0XHQvLyBlbmQgY3VycmVudCBiYWNrcmVmZXJlbmNlIGFuZCBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxyXG5cdFx0XHRcdGZvciAobGV0IG5ld19vZmZzZXQgPSAxOyBuZXdfb2Zmc2V0IDw9IE1hdGgubWluKDksIGkpOyArK25ld19vZmZzZXQpIHtcclxuXHRcdFx0XHRcdGlmIChwbGFpbltpIC0gbmV3X29mZnNldF0gPT09IGMpIHtcclxuXHRcdFx0XHRcdFx0c2V0KG5ld19zdGF0ZSwgbmV3X29mZnNldCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBTdHJpbmcob2Zmc2V0KSArIFwiMFwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB0bXBfc3RhdGUgPSBuZXdfc3RhdGU7XHJcblx0XHRuZXdfc3RhdGUgPSBjdXJfc3RhdGU7XHJcblx0XHRjdXJfc3RhdGUgPSB0bXBfc3RhdGU7XHJcblx0fVxyXG5cclxuXHRsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcblx0Zm9yIChsZXQgbGVuID0gMTsgbGVuIDw9IDk7ICsrbGVuKSB7XHJcblx0XHRsZXQgc3RyaW5nID0gY3VyX3N0YXRlWzBdW2xlbl07XHJcblx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0c3RyaW5nICs9IFN0cmluZyhsZW4pICsgcGxhaW4uc3Vic3RyaW5nKHBsYWluLmxlbmd0aCAtIGxlbiwgcGxhaW4ubGVuZ3RoKTtcclxuXHRcdGlmIChyZXN1bHQgPT0gbnVsbCB8fCBzdHJpbmcubGVuZ3RoIDwgcmVzdWx0Lmxlbmd0aCkge1xyXG5cdFx0XHRyZXN1bHQgPSBzdHJpbmc7XHJcblx0XHR9IGVsc2UgaWYgKHN0cmluZy5sZW5ndGggPT0gcmVzdWx0Lmxlbmd0aCAmJiBNYXRoLnJhbmRvbSgpIDwgMC41KSB7XHJcblx0XHRcdHJlc3VsdCA9IHN0cmluZztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZvciAobGV0IG9mZnNldCA9IDE7IG9mZnNldCA8PSA5OyArK29mZnNldCkge1xyXG5cdFx0Zm9yIChsZXQgbGVuID0gMTsgbGVuIDw9IDk7ICsrbGVuKSB7XHJcblx0XHRcdGxldCBzdHJpbmcgPSBjdXJfc3RhdGVbb2Zmc2V0XVtsZW5dO1xyXG5cdFx0XHRpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RyaW5nICs9IFN0cmluZyhsZW4pICsgXCJcIiArIFN0cmluZyhvZmZzZXQpO1xyXG5cdFx0XHRpZiAocmVzdWx0ID09IG51bGwgfHwgc3RyaW5nLmxlbmd0aCA8IHJlc3VsdC5sZW5ndGgpIHtcclxuXHRcdFx0XHRyZXN1bHQgPSBzdHJpbmc7XHJcblx0XHRcdH0gZWxzZSBpZiAoc3RyaW5nLmxlbmd0aCA9PSByZXN1bHQubGVuZ3RoICYmIE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcclxuXHRcdFx0XHRyZXN1bHQgPSBzdHJpbmc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiByZXN1bHQgPz8gXCJcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gUkxFZW5jb2RlKGRhdGEpIHtcclxuXHRsZXQgY2hhcnMgPSBBcnJheS5mcm9tKGRhdGEpO1xyXG5cdGxldCBhbnN3ZXIgPSAnJztcclxuXHRsZXQgY3VycmVudCA9IHVuZGVmaW5lZDtcclxuXHRsZXQgY291bnQgPSAwO1xyXG5cdHdoaWxlIChjaGFycy5sZW5ndGggPiAwKSB7XHJcblx0XHRsZXQgY2hhciA9IGNoYXJzLnNoaWZ0KCk7XHJcblx0XHRzd2l0Y2ggKGN1cnJlbnQpIHtcclxuXHRcdFx0Y2FzZSB1bmRlZmluZWQ6XHJcblx0XHRcdFx0Y3VycmVudCA9IGNoYXI7XHJcblx0XHRcdFx0Y291bnQgPSAxO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIGNoYXI6XHJcblx0XHRcdFx0aWYgKGNvdW50ID09IDkpIHtcclxuXHRcdFx0XHRcdGFuc3dlciA9IGAke2Fuc3dlcn0ke2NvdW50fSR7Y3VycmVudH1gO1xyXG5cdFx0XHRcdFx0Y291bnQgPSAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdGFuc3dlciA9IGAke2Fuc3dlcn0ke2NvdW50fSR7Y3VycmVudH1gO1xyXG5cdFx0XHRcdGN1cnJlbnQgPSBjaGFyO1xyXG5cdFx0XHRcdGNvdW50ID0gMTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblx0YW5zd2VyID0gYCR7YW5zd2VyfSR7Y291bnR9JHtjdXJyZW50fWA7XHJcblx0cmV0dXJuIGFuc3dlcjtcclxufVxyXG4iXX0=\",\"filename\":\"cct.js\",\"server\":\"home\"}}],[\"augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint, DefaultStyle, PrintTable } from \\\"./tables\\\";\\r\\nconst ALL_FACTIONS = [\\r\\n    \\\"Illuminati\\\",\\r\\n    \\\"Daedalus\\\",\\r\\n    \\\"The Covenant\\\",\\r\\n    \\\"ECorp\\\",\\r\\n    \\\"MegaCorp\\\",\\r\\n    \\\"Bachman & Associates\\\",\\r\\n    \\\"Blade Industries\\\",\\r\\n    \\\"NWO\\\",\\r\\n    \\\"Clarke Incorporated\\\",\\r\\n    \\\"OmniTek Incorporated\\\",\\r\\n    \\\"Four Sigma\\\",\\r\\n    \\\"KuaiGong International\\\",\\r\\n    \\\"Fulcrum Secret Technologies\\\",\\r\\n    \\\"BitRunners\\\",\\r\\n    \\\"The Black Hand\\\",\\r\\n    \\\"NiteSec\\\",\\r\\n    \\\"Aevum\\\",\\r\\n    \\\"Chongqing\\\",\\r\\n    \\\"Ishima\\\",\\r\\n    \\\"New Tokyo\\\",\\r\\n    \\\"Sector-12\\\",\\r\\n    \\\"Volhaven\\\",\\r\\n    \\\"Speakers for the Dead\\\",\\r\\n    \\\"The Dark Army\\\",\\r\\n    \\\"The Syndicate\\\",\\r\\n    \\\"Silhouette\\\",\\r\\n    \\\"Tetrads\\\",\\r\\n    \\\"Slum Snakes\\\",\\r\\n    \\\"Netburners\\\",\\r\\n    \\\"Tian Di Hui\\\",\\r\\n    \\\"CyberSec\\\",\\r\\n    \\\"Bladeburners\\\",\\r\\n    \\\"Church of the Machine God\\\",\\r\\n];\\r\\nclass Aug {\\r\\n    name;\\r\\n    faction;\\r\\n    installed;\\r\\n    purchased;\\r\\n    price;\\r\\n    requiredRep;\\r\\n    purchasable;\\r\\n    affordable;\\r\\n    preqreqs;\\r\\n    multipliers;\\r\\n    isHack;\\r\\n    constructor(ns, name, faction) {\\r\\n        this.name = name;\\r\\n        this.faction = faction;\\r\\n        this.installed = ns.singularity.getOwnedAugmentations(false).includes(name);\\r\\n        this.purchased = ns.singularity.getOwnedAugmentations(true).includes(name);\\r\\n        this.price = ns.singularity.getAugmentationBasePrice(name);\\r\\n        this.requiredRep = ns.singularity.getAugmentationRepReq(name);\\r\\n        try {\\r\\n            this.purchasable = this.requiredRep <= ns.singularity.getFactionRep(ns.getPlayer().factions.filter(f => f === faction)[0]);\\r\\n        }\\r\\n        catch (e) {\\r\\n            this.purchasable = false;\\r\\n        }\\r\\n        this.affordable = this.price <= ns.getServerMoneyAvailable('home');\\r\\n        this.preqreqs = ns.singularity.getAugmentationPrereq(name);\\r\\n        this.multipliers = ns.singularity.getAugmentationStats(name);\\r\\n        // remove already purchased prereqs and sort them in descending price order\\r\\n        this.preqreqs.filter(a => !ns.singularity.getOwnedAugmentations(true).includes(a)).sort((a, b) => ns.singularity.getAugmentationBasePrice(b) - ns.singularity.getAugmentationBasePrice(a));\\r\\n        this.isHack = (this.multipliers.hacking > 1 ||\\r\\n            this.multipliers.hacking_exp > 1 ||\\r\\n            this.multipliers.hacking_chance > 1 ||\\r\\n            this.multipliers.hacking_speed > 1 ||\\r\\n            this.multipliers.hacking_money > 1 ||\\r\\n            this.multipliers.hacking_grow > 1);\\r\\n    }\\r\\n    canBuy() {\\r\\n        if (this.purchased)\\r\\n            return false;\\r\\n        return (this.purchasable && this.affordable);\\r\\n    }\\r\\n    augColor() {\\r\\n        if (this.purchased)\\r\\n            return 'green';\\r\\n        if (this.purchasable && this.affordable)\\r\\n            return 'Gold1';\\r\\n        return 'white';\\r\\n    }\\r\\n    tableData(ns) {\\r\\n        return [\\r\\n            { color: this.augColor(), text: ` ${this.name}` },\\r\\n            { color: this.augColor(), text: ` ${this.faction}` },\\r\\n            { color: this.augColor(), text: `${this.installed ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.purchased ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.price, 1, 1000, true).padStart(8) },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.requiredRep, 3, 1000, true).padStart(10) },\\r\\n            { color: this.augColor(), text: `${this.purchasable ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.affordable ? 'YES' : 'NO'}`.padStart(4) },\\r\\n            { color: this.augColor(), text: `${this.preqreqs.length}`.padStart(4) }\\r\\n        ];\\r\\n    }\\r\\n    static tableCols() {\\r\\n        return [\\r\\n            { header: ' Augmentations', width: 56 },\\r\\n            { header: ' Faction', width: 29 },\\r\\n            { header: ' INS', width: 5 },\\r\\n            { header: ' HAS', width: 5 },\\r\\n            { header: '   Price', width: 9 },\\r\\n            { header: '       Rep', width: 11 },\\r\\n            { header: ' PUR', width: 5 },\\r\\n            { header: ' AFF', width: 5 },\\r\\n            { header: ' PRE', width: 5 },\\r\\n        ];\\r\\n    }\\r\\n    shortTableData(ns) {\\r\\n        return [\\r\\n            { color: this.augColor(), text: ` ${this.name}` },\\r\\n            { color: this.augColor(), text: ` ${this.faction}` },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.price, 1, 1000, true).padStart(8) },\\r\\n            { color: this.augColor(), text: ns.formatNumber(this.requiredRep, 3, 1000, true).padStart(10) },\\r\\n            { color: this.augColor(), text: `${this.preqreqs.length}`.padStart(4) }\\r\\n        ];\\r\\n    }\\r\\n    static shortTableCols() {\\r\\n        return [\\r\\n            { header: ' Augmentations', width: 56 },\\r\\n            { header: ' Faction', width: 29 },\\r\\n            { header: '   Price', width: 9 },\\r\\n            { header: '       Rep', width: 11 },\\r\\n            { header: ' PRE', width: 5 },\\r\\n        ];\\r\\n    }\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    // const lvl11SrcFileCheck = ns.singularity.getOwnedSourceFiles().filter(s => s.n === 11);\\r\\n    // const lvl11SrcFileLevel = lvl11SrcFileCheck.length > 0 ? lvl11SrcFileCheck[0].lvl : 0;\\r\\n    // const augPriceMultiplier = 1.9 * [1, 0.96, 0.94, 0.93][lvl11SrcFileLevel];\\r\\n    const augPriceMultiplier = 1.9;\\r\\n    const nfgPriceMultiplier = 1.14;\\r\\n    let augs = [];\\r\\n    for (const faction of ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))) {\\r\\n        const factionAugs = ns.singularity.getAugmentationsFromFaction(faction);\\r\\n        for (const aug of factionAugs) {\\r\\n            //if (!augs.some(a => a.name === aug))\\r\\n            augs.push(new Aug(ns, aug, faction));\\r\\n        }\\r\\n    }\\r\\n    //augs = augs.filter(a => a.canBuy()).sort((a, b) => b.price - a.price);\\r\\n    augs = augs.sort((a, b) => b.price - a.price);\\r\\n    augs = augs.filter(a => a.isHack);\\r\\n    augs = augs.filter(a => a.name !== \\\"NeuroFlux Governor\\\");\\r\\n    // shift prereqs higher in the list if they're in the list. If they're not in the list, remove the aug with prereqs\\r\\n    for (let i = 0; i < augs.length; ++i) {\\r\\n        const aug = augs[i];\\r\\n        if (aug.preqreqs.length > 0) {\\r\\n            let foundPrereq = false;\\r\\n            let movedPrereq = false;\\r\\n            for (let j = 0; j < aug.preqreqs.length; ++j) {\\r\\n                const prereq = aug.preqreqs[j];\\r\\n                const prereqIndex = augs.findIndex(a => a.name === prereq);\\r\\n                if (prereqIndex === -1)\\r\\n                    break;\\r\\n                foundPrereq = true;\\r\\n                if (prereqIndex < i)\\r\\n                    continue;\\r\\n                augs.splice(i, 0, augs.splice(prereqIndex, 1)[0]);\\r\\n                movedPrereq = true;\\r\\n                break;\\r\\n            }\\r\\n            if (!foundPrereq) {\\r\\n                augs.splice(i, 1);\\r\\n                --i;\\r\\n                continue;\\r\\n            }\\r\\n            if (movedPrereq) {\\r\\n                --i;\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    PrintTable(ns, augs.map(a => a.shortTableData(ns)), Aug.shortTableCols(), DefaultStyle(), ColorPrint);\\r\\n    const mult = augs.find(a => a.name === \\\"HemoRecirculator\\\")?.multipliers;\\r\\n    if (mult) {\\r\\n        ns.tprintf(`${JSON.stringify(mult)}`);\\r\\n    }\\r\\n    // buy in order from most to least expensive, buying prereqs first\\r\\n    let cash = ns.getServerMoneyAvailable('home');\\r\\n    while (augs.length > 0) {\\r\\n        const aug = augs.shift();\\r\\n        if (aug)\\r\\n            ns.singularity.purchaseAugmentation(aug.faction, aug.name);\\r\\n    }\\r\\n    while (ns.singularity.purchaseAugmentation(ALL_FACTIONS.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))[0], \\\"NeuroFlux Governor\\\"))\\r\\n        ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hdWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVoRSxNQUFNLFlBQVksR0FBRztJQUNuQixZQUFZO0lBQ1osVUFBVTtJQUNWLGNBQWM7SUFDZCxPQUFPO0lBQ1AsVUFBVTtJQUNWLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsS0FBSztJQUNMLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLHdCQUF3QjtJQUN4Qiw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7SUFDVCxhQUFhO0lBQ2IsWUFBWTtJQUNaLGFBQWE7SUFDYixVQUFVO0lBQ1YsY0FBYztJQUNkLDJCQUEyQjtDQUM1QixDQUFDO0FBb0JGLE1BQU0sR0FBRztJQUNQLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixTQUFTLENBQVU7SUFDbkIsU0FBUyxDQUFVO0lBQ25CLEtBQUssQ0FBUztJQUNkLFdBQVcsQ0FBUztJQUNwQixXQUFXLENBQVU7SUFDckIsVUFBVSxDQUFVO0lBQ3BCLFFBQVEsQ0FBVztJQUNuQixXQUFXLENBQWM7SUFDekIsTUFBTSxDQUFVO0lBRWhCLFlBQVksRUFBTSxFQUFFLElBQVksRUFBRSxPQUFlO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FB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RUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEQsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUEsQ0FBQyxDQUFBLEtBQUssQ0FBQSxDQUFDLENBQUEsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzVFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBLENBQUMsQ0FBQSxLQUFLLENBQUEsQ0FBQyxDQUFBLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM1RSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4RixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMvRixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQSxDQUFDLENBQUEsS0FBSyxDQUFBLENBQUMsQ0FBQSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUEsQ0FBQyxDQUFB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LENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFdEcsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssa0JBQWtCLENBQUMsRUFBRSxXQUFXLENBQUM7SUFDeEUsSUFBSSxJQUFJLEVBQUU7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdkM7SUFFRCxrRUFBa0U7SUFDbEUsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXpCLElBQUksR0FBRztZQUNMLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUQ7SUFFRCxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsb0JBQW9CLENBQUM7UUFBQyxDQUFDO0FBQ3ZLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNdWx0aXBsaWVycywgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IENvbG9yUHJpbnQsIERlZmF1bHRTdHlsZSwgUHJpbnRUYWJsZSB9IGZyb20gXCIuL3RhYmxlc1wiO1xyXG5cclxuY29uc3QgQUxMX0ZBQ1RJT05TID0gW1xyXG4gIFwiSWxsdW1pbmF0aVwiLFxyXG4gIFwiRGFlZGFsdXNcIixcclxuICBcIlRoZSBDb3ZlbmFudFwiLFxyXG4gIFwiRUNvcnBcIixcclxuICBcIk1lZ2FDb3JwXCIsXHJcbiAgXCJCYWNobWFuICYgQXNzb2NpYXRlc1wiLFxyXG4gIFwiQmxhZGUgSW5kdXN0cmllc1wiLFxyXG4gIFwiTldPXCIsXHJcbiAgXCJDbGFya2UgSW5jb3Jwb3JhdGVkXCIsXHJcbiAgXCJPbW5pVGVrIEluY29ycG9yYXRlZFwiLFxyXG4gIFwiRm91ciBTaWdtYVwiLFxyXG4gIFwiS3VhaUdvbmcgSW50ZXJuYXRpb25hbFwiLFxyXG4gIFwiRnVsY3J1bSBTZWNyZXQgVGVjaG5vbG9naWVzXCIsXHJcbiAgXCJCaXRSdW5uZXJzXCIsXHJcbiAgXCJUaGUgQmxhY2sgSGFuZFwiLFxyXG4gIFwiTml0ZVNlY1wiLFxyXG4gIFwiQWV2dW1cIixcclxuICBcIkNob25ncWluZ1wiLFxyXG4gIFwiSXNoaW1hXCIsXHJcbiAgXCJOZXcgVG9reW9cIixcclxuICBcIlNlY3Rvci0xMlwiLFxyXG4gIFwiVm9saGF2ZW5cIixcclxuICBcIlNwZWFrZXJzIGZvciB0aGUgRGVhZFwiLFxyXG4gIFwiVGhlIERhcmsgQXJteVwiLFxyXG4gIFwiVGhlIFN5bmRpY2F0ZVwiLFxyXG4gIFwiU2lsaG91ZXR0ZVwiLFxyXG4gIFwiVGV0cmFkc1wiLFxyXG4gIFwiU2x1bSBTbmFrZXNcIixcclxuICBcIk5ldGJ1cm5lcnNcIixcclxuICBcIlRpYW4gRGkgSHVpXCIsXHJcbiAgXCJDeWJlclNlY1wiLFxyXG4gIFwiQmxhZGVidXJuZXJzXCIsXHJcbiAgXCJDaHVyY2ggb2YgdGhlIE1hY2hpbmUgR29kXCIsXHJcbl07XHJcblxyXG5pbnRlcmZhY2UgSUF1ZyB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGZhY3Rpb246IHN0cmluZztcclxuICBpbnN0YWxsZWQ6IGJvb2xlYW47XHJcbiAgcHVyY2hhc2VkOiBib29sZWFuO1xyXG4gIHByaWNlOiBudW1iZXI7XHJcbiAgcmVxdWlyZWRSZXA6IG51bWJlcjtcclxuICBwdXJjaGFzYWJsZTogYm9vbGVhbjtcclxuICBhZmZvcmRhYmxlOiBib29sZWFuO1xyXG4gIHByZXFyZXFzOiBzdHJpbmdbXTtcclxuICBtdWx0aXBsaWVyczogTXVsdGlwbGllcnM7XHJcbiAgaXNIYWNrOiBib29sZWFuO1xyXG5cclxuICB0YWJsZURhdGEobnM6IE5TKTogeyBjb2xvcjogc3RyaW5nOyB0ZXh0OiBzdHJpbmc7IH1bXTtcclxuICBzaG9ydFRhYmxlRGF0YShuczogTlMpOiB7IGNvbG9yOiBzdHJpbmc7IHRleHQ6IHN0cmluZzsgfVtdO1xyXG4gIGNhbkJ1eSgpOiBib29sZWFuO1xyXG59XHJcblxyXG5jbGFzcyBBdWcgaW1wbGVtZW50cyBJQXVne1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBmYWN0aW9uOiBzdHJpbmc7XHJcbiAgaW5zdGFsbGVkOiBib29sZWFuO1xyXG4gIHB1cmNoYXNlZDogYm9vbGVhbjtcclxuICBwcmljZTogbnVtYmVyO1xyXG4gIHJlcXVpcmVkUmVwOiBudW1iZXI7XHJcbiAgcHVyY2hhc2FibGU6IGJvb2xlYW47XHJcbiAgYWZmb3JkYWJsZTogYm9vbGVhbjtcclxuICBwcmVxcmVxczogc3RyaW5nW107XHJcbiAgbXVsdGlwbGllcnM6IE11bHRpcGxpZXJzO1xyXG4gIGlzSGFjazogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IobnM6IE5TLCBuYW1lOiBzdHJpbmcsIGZhY3Rpb246IHN0cmluZykge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuZmFjdGlvbiA9IGZhY3Rpb247XHJcbiAgICB0aGlzLmluc3RhbGxlZCA9IG5zLnNpbmd1bGFyaXR5LmdldE93bmVkQXVnbWVudGF0aW9ucyhmYWxzZSkuaW5jbHVkZXMobmFtZSk7XHJcbiAgICB0aGlzLnB1cmNoYXNlZCA9IG5zLnNpbmd1bGFyaXR5LmdldE93bmVkQXVnbWVudGF0aW9ucyh0cnVlKS5pbmNsdWRlcyhuYW1lKTtcclxuICAgIHRoaXMucHJpY2UgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25CYXNlUHJpY2UobmFtZSk7XHJcbiAgICB0aGlzLnJlcXVpcmVkUmVwID0gbnMuc2luZ3VsYXJpdHkuZ2V0QXVnbWVudGF0aW9uUmVwUmVxKG5hbWUpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5wdXJjaGFzYWJsZSA9IHRoaXMucmVxdWlyZWRSZXAgPD0gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChucy5nZXRQbGF5ZXIoKS5mYWN0aW9ucy5maWx0ZXIoZiA9PiBmID09PSBmYWN0aW9uKVswXSk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHRoaXMucHVyY2hhc2FibGUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMuYWZmb3JkYWJsZSA9IHRoaXMucHJpY2UgPD0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoJ2hvbWUnKTtcclxuICAgIHRoaXMucHJlcXJlcXMgPSBucy5zaW5ndWxhcml0eS5nZXRBdWdtZW50YXRpb25QcmVyZXEobmFtZSk7XHJcbiAgICB0aGlzLm11bHRpcGxpZXJzID0gbnMuc2luZ3VsYXJpdHkuZ2V0QXVnbWVudGF0aW9uU3RhdHMobmFtZSk7XHJcblxyXG4gICAgLy8gcmVtb3ZlIGFscmVhZHkgcHVyY2hhc2VkIHByZXJlcXMgYW5kIHNvcnQgdGhlbSBpbiBkZXNjZW5kaW5nIHByaWNlIG9yZGVyXHJcbiAgICB0aGlzLnByZXFyZXFzLmZpbHRlcihhID0+ICFucy5zaW5ndWxhcml0eS5nZXRPd25lZEF1Z21lbnRhdGlvbnModHJ1ZSkuaW5jbHVkZXMoYSkpLnNvcnQoKGEsIGIpID0+IG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShiKSAtIG5zLnNpbmd1bGFyaXR5LmdldEF1Z21lbnRhdGlvbkJhc2VQcmljZShhKSk7XHJcblxyXG4gICAgdGhpcy5pc0hhY2sgPSAoXHJcbiAgICAgIHRoaXMubXVsdGlwbGllcnMuaGFja2luZyA+IDEgfHxcclxuICAgICAgdGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2V4cCA+IDEgfHxcclxuICAgICAgdGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX2NoYW5jZSA+IDEgfHxcclxuICAgICAgdGhpcy5tdWx0aXBsaWVycy5oYWNraW5nX3NwZWVkID4gMSB8fFxyXG4gICAgICB0aGlzLm11bHRpcGxpZXJzLmhhY2tpbmdfbW9uZXkgPiAxIHx8XHJcbiAgICAgIHRoaXMubXVsdGlwbGllcnMuaGFja2luZ19ncm93ID4gMVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNhbkJ1eSgpOiBib29sZWFuIHtcclxuICAgIGlmICh0aGlzLnB1cmNoYXNlZCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuICh0aGlzLnB1cmNoYXNhYmxlICYmIHRoaXMuYWZmb3JkYWJsZSk7XHJcbiAgfVxyXG5cclxuICBhdWdDb2xvcigpIHtcclxuICAgIGlmICh0aGlzLnB1cmNoYXNlZCkgcmV0dXJuICdncmVlbic7XHJcbiAgICBpZiAodGhpcy5wdXJjaGFzYWJsZSAmJiB0aGlzLmFmZm9yZGFibGUpIHJldHVybiAnR29sZDEnO1xyXG4gICAgcmV0dXJuICd3aGl0ZSc7XHJcbiAgfVxyXG5cclxuICB0YWJsZURhdGEobnM6IE5TKTogeyBjb2xvcjogc3RyaW5nOyB0ZXh0OiBzdHJpbmc7IH1bXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLm5hbWV9YCB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLmZhY3Rpb259YCB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMuaW5zdGFsbGVkPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMucHVyY2hhc2VkPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnByaWNlLCAxLCAxMDAwLCB0cnVlKS5wYWRTdGFydCg4KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnJlcXVpcmVkUmVwLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCkgfSxcclxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLnB1cmNoYXNhYmxlPydZRVMnOidOTyd9YC5wYWRTdGFydCg0KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAke3RoaXMuYWZmb3JkYWJsZT8nWUVTJzonTk8nfWAucGFkU3RhcnQoNCkgfSxcclxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLnByZXFyZXFzLmxlbmd0aH1gLnBhZFN0YXJ0KDQpIH1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHRhYmxlQ29scygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHsgaGVhZGVyOiAnIEF1Z21lbnRhdGlvbnMnLCB3aWR0aDogNTYgfSxcclxuICAgICAgeyBoZWFkZXI6ICcgRmFjdGlvbicsIHdpZHRoOiAyOSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyBJTlMnLCB3aWR0aDogNSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyBIQVMnLCB3aWR0aDogNSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyAgIFByaWNlJywgd2lkdGg6IDkgfSxcclxuICAgICAgeyBoZWFkZXI6ICcgICAgICAgUmVwJywgd2lkdGg6IDExIH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIFBVUicsIHdpZHRoOiA1IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIEFGRicsIHdpZHRoOiA1IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnIFBSRScsIHdpZHRoOiA1IH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc2hvcnRUYWJsZURhdGEobnM6IE5TKTogeyBjb2xvcjogc3RyaW5nOyB0ZXh0OiBzdHJpbmc7IH1bXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLm5hbWV9YCB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IGAgJHt0aGlzLmZhY3Rpb259YCB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnByaWNlLCAxLCAxMDAwLCB0cnVlKS5wYWRTdGFydCg4KSB9LFxyXG4gICAgICB7IGNvbG9yOiB0aGlzLmF1Z0NvbG9yKCksIHRleHQ6IG5zLmZvcm1hdE51bWJlcih0aGlzLnJlcXVpcmVkUmVwLCAzLCAxMDAwLCB0cnVlKS5wYWRTdGFydCgxMCkgfSxcclxuICAgICAgeyBjb2xvcjogdGhpcy5hdWdDb2xvcigpLCB0ZXh0OiBgJHt0aGlzLnByZXFyZXFzLmxlbmd0aH1gLnBhZFN0YXJ0KDQpIH1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHNob3J0VGFibGVDb2xzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyBoZWFkZXI6ICcgQXVnbWVudGF0aW9ucycsIHdpZHRoOiA1NiB9LFxyXG4gICAgICB7IGhlYWRlcjogJyBGYWN0aW9uJywgd2lkdGg6IDI5IH0sXHJcbiAgICAgIHsgaGVhZGVyOiAnICAgUHJpY2UnLCB3aWR0aDogOSB9LFxyXG4gICAgICB7IGhlYWRlcjogJyAgICAgICBSZXAnLCB3aWR0aDogMTEgfSxcclxuICAgICAgeyBoZWFkZXI6ICcgUFJFJywgd2lkdGg6IDUgfSxcclxuICAgIF07XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcbiAgLy8gY29uc3QgbHZsMTFTcmNGaWxlQ2hlY2sgPSBucy5zaW5ndWxhcml0eS5nZXRPd25lZFNvdXJjZUZpbGVzKCkuZmlsdGVyKHMgPT4gcy5uID09PSAxMSk7XHJcbiAgLy8gY29uc3QgbHZsMTFTcmNGaWxlTGV2ZWwgPSBsdmwxMVNyY0ZpbGVDaGVjay5sZW5ndGggPiAwID8gbHZsMTFTcmNGaWxlQ2hlY2tbMF0ubHZsIDogMDtcclxuICAvLyBjb25zdCBhdWdQcmljZU11bHRpcGxpZXIgPSAxLjkgKiBbMSwgMC45NiwgMC45NCwgMC45M11bbHZsMTFTcmNGaWxlTGV2ZWxdO1xyXG5cclxuICBjb25zdCBhdWdQcmljZU11bHRpcGxpZXIgPSAxLjk7XHJcbiAgY29uc3QgbmZnUHJpY2VNdWx0aXBsaWVyID0gMS4xNDtcclxuICBsZXQgYXVnczogSUF1Z1tdID0gW107XHJcbiAgZm9yIChjb25zdCBmYWN0aW9uIG9mIEFMTF9GQUNUSU9OUy5zb3J0KChhLCBiKSA9PiBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKGIpIC0gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChhKSkpIHtcclxuICAgIGNvbnN0IGZhY3Rpb25BdWdzID0gbnMuc2luZ3VsYXJpdHkuZ2V0QXVnbWVudGF0aW9uc0Zyb21GYWN0aW9uKGZhY3Rpb24pO1xyXG4gICAgZm9yIChjb25zdCBhdWcgb2YgZmFjdGlvbkF1Z3MpIHtcclxuICAgICAgLy9pZiAoIWF1Z3Muc29tZShhID0+IGEubmFtZSA9PT0gYXVnKSlcclxuICAgICAgICBhdWdzLnB1c2gobmV3IEF1ZyhucywgYXVnLCBmYWN0aW9uKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL2F1Z3MgPSBhdWdzLmZpbHRlcihhID0+IGEuY2FuQnV5KCkpLnNvcnQoKGEsIGIpID0+IGIucHJpY2UgLSBhLnByaWNlKTtcclxuICBhdWdzID0gYXVncy5zb3J0KChhLCBiKSA9PiBiLnByaWNlIC0gYS5wcmljZSk7XHJcblxyXG4gIGF1Z3MgPSBhdWdzLmZpbHRlcihhID0+IGEuaXNIYWNrKTtcclxuICBhdWdzID0gYXVncy5maWx0ZXIoYSA9PiBhLm5hbWUgIT09IFwiTmV1cm9GbHV4IEdvdmVybm9yXCIpO1xyXG5cclxuICAvLyBzaGlmdCBwcmVyZXFzIGhpZ2hlciBpbiB0aGUgbGlzdCBpZiB0aGV5J3JlIGluIHRoZSBsaXN0LiBJZiB0aGV5J3JlIG5vdCBpbiB0aGUgbGlzdCwgcmVtb3ZlIHRoZSBhdWcgd2l0aCBwcmVyZXFzXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdWdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBjb25zdCBhdWcgPSBhdWdzW2ldO1xyXG4gICAgaWYgKGF1Zy5wcmVxcmVxcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxldCBmb3VuZFByZXJlcSA9IGZhbHNlO1xyXG4gICAgICBsZXQgbW92ZWRQcmVyZXEgPSBmYWxzZTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhdWcucHJlcXJlcXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBjb25zdCBwcmVyZXEgPSBhdWcucHJlcXJlcXNbal07XHJcbiAgICAgICAgY29uc3QgcHJlcmVxSW5kZXggPSBhdWdzLmZpbmRJbmRleChhID0+IGEubmFtZSA9PT0gcHJlcmVxKTtcclxuXHJcbiAgICAgICAgaWYgKHByZXJlcUluZGV4ID09PSAtMSkgYnJlYWs7XHJcbiAgICAgICAgZm91bmRQcmVyZXEgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAocHJlcmVxSW5kZXggPCBpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgYXVncy5zcGxpY2UoaSwgMCwgYXVncy5zcGxpY2UocHJlcmVxSW5kZXgsIDEpWzBdKTtcclxuICAgICAgICBtb3ZlZFByZXJlcSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKCFmb3VuZFByZXJlcSkge1xyXG4gICAgICAgIGF1Z3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIC0taTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYobW92ZWRQcmVyZXEpIHtcclxuICAgICAgICAtLWk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIFByaW50VGFibGUobnMsIGF1Z3MubWFwKGEgPT4gYS5zaG9ydFRhYmxlRGF0YShucykpLCBBdWcuc2hvcnRUYWJsZUNvbHMoKSwgRGVmYXVsdFN0eWxlKCksIENvbG9yUHJpbnQpO1xyXG4gIFxyXG4gIGNvbnN0IG11bHQgPSBhdWdzLmZpbmQoYSA9PiBhLm5hbWUgPT09IFwiSGVtb1JlY2lyY3VsYXRvclwiKT8ubXVsdGlwbGllcnM7XHJcbiAgaWYgKG11bHQpIHtcclxuICAgIG5zLnRwcmludGYoYCR7SlNPTi5zdHJpbmdpZnkobXVsdCl9YCk7XHJcbiAgfVxyXG5cclxuICAvLyBidXkgaW4gb3JkZXIgZnJvbSBtb3N0IHRvIGxlYXN0IGV4cGVuc2l2ZSwgYnV5aW5nIHByZXJlcXMgZmlyc3RcclxuICBsZXQgY2FzaCA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJyk7XHJcbiAgd2hpbGUgKGF1Z3MubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgYXVnID0gYXVncy5zaGlmdCgpO1xyXG4gICAgXHJcbiAgICBpZiAoYXVnKVxyXG4gICAgICBucy5zaW5ndWxhcml0eS5wdXJjaGFzZUF1Z21lbnRhdGlvbihhdWcuZmFjdGlvbiwgYXVnLm5hbWUpO1xyXG4gIH1cclxuXHJcbiAgd2hpbGUgKG5zLnNpbmd1bGFyaXR5LnB1cmNoYXNlQXVnbWVudGF0aW9uKEFMTF9GQUNUSU9OUy5zb3J0KChhLCBiKSA9PiBucy5zaW5ndWxhcml0eS5nZXRGYWN0aW9uUmVwKGIpIC0gbnMuc2luZ3VsYXJpdHkuZ2V0RmFjdGlvblJlcChhKSlbMF0sIFwiTmV1cm9GbHV4IEdvdmVybm9yXCIpKTtcclxufVxyXG4iXX0=\",\"filename\":\"augs.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function isHackable(ns, s, pCount) {\\r\\n    if (ns.hasRootAccess(s))\\r\\n        return false;\\r\\n    const hackReq = ns.getServerRequiredHackingLevel(s);\\r\\n    const hackLv = ns.getHackingLevel();\\r\\n    const portsRequired = ns.getServerNumPortsRequired(s);\\r\\n    if (hackLv >= hackReq && portsRequired <= pCount)\\r\\n        return true;\\r\\n    return false;\\r\\n}\\r\\nfunction crackAndNuke(ns, s) {\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\r\\n        ns.brutessh(s);\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\r\\n        ns.ftpcrack(s);\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\r\\n        ns.relaysmtp(s);\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\r\\n        ns.httpworm(s);\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\r\\n        ns.sqlinject(s);\\r\\n    ns.nuke(s);\\r\\n}\\r\\nfunction getConnectedPaths(ns, current = 'home', path = [], paths = {}) {\\r\\n    paths[current] = [...path, current];\\r\\n    let parent = '';\\r\\n    if (path.length > 0)\\r\\n        parent = path[path.length - 1];\\r\\n    for (const connected of ns.scan(current)) {\\r\\n        if (connected === parent)\\r\\n            continue;\\r\\n        getConnectedPaths(ns, connected, paths[current], paths);\\r\\n    }\\r\\n    return paths;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    // ns.tprintf(`${getConnectedPaths(ns)['The-Cave']}`);\\r\\n    const paths = getConnectedPaths(ns);\\r\\n    const portCracks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\r\\n    const portCrackCount = portCracks.reduce((count, crack) => {\\r\\n        if (ns.fileExists(crack, \\\"home\\\"))\\r\\n            count++;\\r\\n        return count;\\r\\n    }, 0);\\r\\n    for (const target of ['CSEC', 'avmnite-02h', 'I.I.I.I', 'run4theh111z', 'The-Cave']) {\\r\\n        if (ns.getServer(target).backdoorInstalled)\\r\\n            continue;\\r\\n        if (!ns.hasRootAccess(target) && isHackable(ns, target, portCrackCount)) {\\r\\n            crackAndNuke(ns, target);\\r\\n        }\\r\\n        if (ns.hasRootAccess(target)) {\\r\\n            for (const s of getConnectedPaths(ns)[target]) {\\r\\n                ns.singularity.connect(s);\\r\\n            }\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    }\\r\\n    ns.singularity.connect('home');\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsVUFBVSxDQUFDLEVBQU0sRUFBRSxDQUFTLEVBQUUsTUFBYztJQUNuRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFdEMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNwQyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEQsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxNQUFNO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFOUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsRUFBTSxFQUFFLENBQVM7SUFDckMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1RCxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsRUFBTSxFQUFFLFVBQWtCLE1BQU0sRUFBRSxPQUFpQixFQUFFLEVBQUUsUUFBa0MsRUFBRTtJQUNwSCxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVwQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFcEQsS0FBSyxNQUFNLFNBQVMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3hDLElBQUksU0FBUyxLQUFLLE1BQU07WUFBRSxTQUFTO1FBQ25DLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixzREFBc0Q7SUFDdEQsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFcEMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEcsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN4RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztZQUFFLEtBQUssRUFBRSxDQUFDO1FBQzFDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRU4sS0FBSyxNQUFNLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsRUFBRTtRQUNuRixJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCO1lBQUUsU0FBUztRQUVyRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsRUFBRTtZQUN2RSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzFCO1FBRUQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzVCLEtBQUssTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzdDLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNCO1lBQ0QsTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3hDO0tBQ0Y7SUFFRCxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5cbmZ1bmN0aW9uIGlzSGFja2FibGUobnM6IE5TLCBzOiBzdHJpbmcsIHBDb3VudDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGlmIChucy5oYXNSb290QWNjZXNzKHMpKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgaGFja1JlcSA9IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHMpO1xuICBjb25zdCBoYWNrTHYgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcbiAgY29uc3QgcG9ydHNSZXF1aXJlZCA9IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQocyk7XG5cbiAgaWYgKGhhY2tMdiA+PSBoYWNrUmVxICYmIHBvcnRzUmVxdWlyZWQgPD0gcENvdW50KSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNyYWNrQW5kTnVrZShuczogTlMsIHM6IHN0cmluZyk6IHZvaWQge1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiLCBcImhvbWVcIikpIG5zLmJydXRlc3NoKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcIkZUUENyYWNrLmV4ZVwiLCBcImhvbWVcIikpIG5zLmZ0cGNyYWNrKHMpO1xuICBpZiAobnMuZmlsZUV4aXN0cyhcInJlbGF5U01UUC5leGVcIiwgXCJob21lXCIpKSBucy5yZWxheXNtdHAocyk7XG4gIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIsIFwiaG9tZVwiKSkgbnMuaHR0cHdvcm0ocyk7XG4gIGlmIChucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiLCBcImhvbWVcIikpIG5zLnNxbGluamVjdChzKTtcblxuICBucy5udWtlKHMpO1xufVxuXG5mdW5jdGlvbiBnZXRDb25uZWN0ZWRQYXRocyhuczogTlMsIGN1cnJlbnQ6IHN0cmluZyA9ICdob21lJywgcGF0aDogc3RyaW5nW10gPSBbXSwgcGF0aHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHt9KSB7XG4gIHBhdGhzW2N1cnJlbnRdID0gWy4uLnBhdGgsIGN1cnJlbnRdO1xuICBcbiAgbGV0IHBhcmVudCA9ICcnO1xuICBpZiAocGF0aC5sZW5ndGggPiAwKSBwYXJlbnQgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIFxuICBmb3IgKGNvbnN0IGNvbm5lY3RlZCBvZiBucy5zY2FuKGN1cnJlbnQpKSB7XG4gICAgaWYgKGNvbm5lY3RlZCA9PT0gcGFyZW50KSBjb250aW51ZTtcbiAgICBnZXRDb25uZWN0ZWRQYXRocyhucywgY29ubmVjdGVkLCBwYXRoc1tjdXJyZW50XSwgcGF0aHMpO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gbnMudHByaW50ZihgJHtnZXRDb25uZWN0ZWRQYXRocyhucylbJ1RoZS1DYXZlJ119YCk7XG4gIGNvbnN0IHBhdGhzID0gZ2V0Q29ubmVjdGVkUGF0aHMobnMpO1xuXG4gIGNvbnN0IHBvcnRDcmFja3MgPSBbXCJCcnV0ZVNTSC5leGVcIiwgXCJGVFBDcmFjay5leGVcIiwgXCJyZWxheVNNVFAuZXhlXCIsIFwiSFRUUFdvcm0uZXhlXCIsIFwiU1FMSW5qZWN0LmV4ZVwiXTtcbiAgY29uc3QgcG9ydENyYWNrQ291bnQgPSBwb3J0Q3JhY2tzLnJlZHVjZSgoY291bnQsIGNyYWNrKSA9PiB7XG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoY3JhY2ssIFwiaG9tZVwiKSkgY291bnQrKztcbiAgICByZXR1cm4gY291bnQ7XG4gIH0sIDApO1xuXG4gIGZvciAoY29uc3QgdGFyZ2V0IG9mIFsnQ1NFQycsICdhdm1uaXRlLTAyaCcsICdJLkkuSS5JJywgJ3J1bjR0aGVoMTExeicsICdUaGUtQ2F2ZSddKSB7XG4gICAgaWYgKG5zLmdldFNlcnZlcih0YXJnZXQpLmJhY2tkb29ySW5zdGFsbGVkKSBjb250aW51ZTtcblxuICAgIGlmICghbnMuaGFzUm9vdEFjY2Vzcyh0YXJnZXQpICYmIGlzSGFja2FibGUobnMsIHRhcmdldCwgcG9ydENyYWNrQ291bnQpKSB7XG4gICAgICBjcmFja0FuZE51a2UobnMsIHRhcmdldCk7XG4gICAgfVxuXG4gICAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3ModGFyZ2V0KSkge1xuICAgICAgZm9yIChjb25zdCBzIG9mIGdldENvbm5lY3RlZFBhdGhzKG5zKVt0YXJnZXRdKSB7XG4gICAgICAgIG5zLnNpbmd1bGFyaXR5LmNvbm5lY3Qocyk7XG4gICAgICB9XG4gICAgICBhd2FpdCBucy5zaW5ndWxhcml0eS5pbnN0YWxsQmFja2Rvb3IoKTtcbiAgICB9XG4gIH1cblxuICBucy5zaW5ndWxhcml0eS5jb25uZWN0KCdob21lJyk7XG59XG4iXX0=\",\"filename\":\"test.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"PS-01\",\"PS-02\",\"PS-03\",\"PS-04\",\"PS-05\",\"PS-06\",\"PS-07\",\"PS-08\",\"PS-09\",\"PS-10\",\"PS-11\",\"PS-12\",\"PS-13\",\"PS-14\",\"PS-15\",\"PS-16\",\"PS-17\",\"PS-18\",\"PS-19\",\"PS-20\",\"PS-21\",\"PS-22\",\"PS-23\",\"PS-24\",\"PS-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"super-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9172279145.133429,\"onlineMoneyMade\":13950568829952750,\"onlineRunningTime\":6269.809999999995,\"ramUsage\":9.05,\"server\":\"home\",\"scriptKey\":\"super-hack.js*[\\\"megacorp\\\"]\",\"title\":\"super-hack.js megacorp\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"99.9.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32767957982.25,\"moneyMax\":122879842433.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1347,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"5.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":34.8,\"minDifficulty\":33,\"moneyAvailable\":32030666984.50226,\"moneyMax\":149302299006.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1277,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"25.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":20562508821.75,\"moneyMax\":77109408081.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1089,\"serverGrowth\":68,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"6.6.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"blade\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"blade\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":14810268083.25,\"moneyMax\":55538505312.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":945,\"serverGrowth\":69,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"37.6.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22756528380,\"moneyMax\":85336981425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1132,\"serverGrowth\":86,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"46.7.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":65223856158.75,\"moneyMax\":65223856158.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":66,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"83.6.6.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"omnitek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"omnitek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":15492512355.75,\"moneyMax\":58096921334.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1066,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"40.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":11540560766.25,\"moneyMax\":43277102873.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1055,\"serverGrowth\":84,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"68.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":21679435400.25,\"moneyMax\":81297882750.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1217,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"73.7.2.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"fulcrumtech\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"fulcrumtech\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1343038833.75,\"moneyMax\":5036395626.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":984,\"serverGrowth\":84,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"90.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1510,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"38.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":856612890.75,\"moneyMax\":3212298340.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":86,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"29.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":601087820.25,\"moneyMax\":2254079325.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":63,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"82.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":557230937.25,\"moneyMax\":2089616014.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"31.5.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"helios\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"helios\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":512743050,\"moneyMax\":1922786437.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":70,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"50.1.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"vitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"vitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":532996926,\"moneyMax\":1998738472.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":63,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"46.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":721694884.5,\"moneyMax\":2706355816.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":86,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-240693.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"2FE127YXEjOk06490NE2rgxof933sfh439QW2RBK2RT0975UrvLu0z09wFTv6I6l643062516q6Q\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"33.5.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":835094952,\"moneyMax\":3131606070,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":87,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"61.5.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"titan-labs\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"titan-labs\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":637725219.75,\"moneyMax\":2391469574.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":61,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"72.6.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"microdyne\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"microdyne\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":392396770.5,\"moneyMax\":1471487889.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":80,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"70.0.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":664673888.25,\"moneyMax\":2492527080.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"68.3.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":580723153.5,\"moneyMax\":2177711825.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":76,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"91.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":869864157,\"moneyMax\":3261990588.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":898,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"12.9.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"omnia\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"omnia\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":722716766.25,\"moneyMax\":2710187873.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":69,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"68.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":813536346,\"moneyMax\":3050761297.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":71,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"60.2.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":745079703.75,\"moneyMax\":2794048889.0625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"97.8.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"solaris\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"solaris\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":547978677.75,\"moneyMax\":2054920041.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":77,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"82.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1132270898.25,\"moneyMax\":4246015868.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":57,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"30.6.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1228904290.5,\"moneyMax\":4608391089.375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":90,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"47.7.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":852148884.75,\"moneyMax\":3195558317.8125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"70.9.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1006150443.75,\"moneyMax\":3773064164.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":71,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"78.4.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":772116891.75,\"moneyMax\":2895438344.0625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":77,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"46.2.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":584274803.25,\"moneyMax\":2191030512.1875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":689,\"serverGrowth\":55,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"8.3.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":472405766.25,\"moneyMax\":1771521623.4375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":519,\"serverGrowth\":49,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"58.8.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":456140716.5,\"moneyMax\":1710527686.875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":567,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"84.5.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":204354560.25,\"moneyMax\":766329600.9375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":436,\"serverGrowth\":33,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"96.4.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":160279425,\"moneyMax\":601047843.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":38,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"76.5.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"zb-institute\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":808352079.75,\"moneyMax\":3031320299.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":763,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"47.2.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":191942426.25,\"moneyMax\":719784098.4375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":462,\"serverGrowth\":50,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"23.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":408359639.25,\"moneyMax\":1531348647.1875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":582,\"serverGrowth\":68,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"44.2.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":246596454,\"moneyMax\":924736702.5,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":404,\"serverGrowth\":37,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"63.3.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":12.366,\"minDifficulty\":12,\"moneyAvailable\":478921570.3125,\"moneyMax\":478921570.3125,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":325,\"serverGrowth\":45,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"61.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":168049932.75,\"moneyMax\":630187247.8125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":366,\"serverGrowth\":51,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"36.0.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":393,\"serverGrowth\":64,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"14.9.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":61125904.5,\"moneyMax\":229222141.875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":267,\"serverGrowth\":49,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"12.7.3.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":52500,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"11.1.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"15.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"74.2.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"70.7.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-51704.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()())(()()))()(((\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"28.8.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"7.0.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"39.0.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"60.1.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"17.7.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"49.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"12.5.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"20.0.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":45553584,\"moneyMax\":170825940,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":212,\"serverGrowth\":38,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"84.8.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":40728659.25,\"moneyMax\":152732472.1875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":235,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"22.1.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"31.5.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":491,\"serverGrowth\":25,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"74.0.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1062,\"serverGrowth\":60,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"41.9.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":701,\"serverGrowth\":46,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"36.2.1.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":545,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"19.2.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"59.0.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":202,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"72.2.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"79.4.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"70.3.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"64.3.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"74.8.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-01\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-01\",\"httpPortOpen\":false,\"ip\":\"85.7.6.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-01\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-01\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-01\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-02\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-02\",\"httpPortOpen\":false,\"ip\":\"57.5.5.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-02\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-02\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-02\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-03\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-03\",\"httpPortOpen\":false,\"ip\":\"81.2.8.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-03\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-03\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-03\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-04\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-04\",\"httpPortOpen\":false,\"ip\":\"96.2.1.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-04\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-04\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-04\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-05\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-05\",\"httpPortOpen\":false,\"ip\":\"96.0.3.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-05\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-05\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-05\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-06\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-06\",\"httpPortOpen\":false,\"ip\":\"7.5.6.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-06\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-06\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-06\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-07\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-07\",\"httpPortOpen\":false,\"ip\":\"81.3.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-07\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-07\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-07\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-08\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-08\",\"httpPortOpen\":false,\"ip\":\"94.1.2.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-08\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-08\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-08\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-09\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-09\",\"httpPortOpen\":false,\"ip\":\"97.0.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-09\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-09\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-09\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-10\",\"httpPortOpen\":false,\"ip\":\"39.9.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-10\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-11\",\"httpPortOpen\":false,\"ip\":\"97.3.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-11\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-12\",\"httpPortOpen\":false,\"ip\":\"48.9.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-12\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-13\",\"httpPortOpen\":false,\"ip\":\"15.4.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-13\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-14\",\"httpPortOpen\":false,\"ip\":\"55.4.2.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-14\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-14\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-15\",\"httpPortOpen\":false,\"ip\":\"40.5.8.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-15\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-15\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-16\",\"httpPortOpen\":false,\"ip\":\"57.9.5.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-16\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-16\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-17\",\"httpPortOpen\":false,\"ip\":\"32.1.0.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-17\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-17\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-18\",\"httpPortOpen\":false,\"ip\":\"77.9.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-18\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-18\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-19\",\"httpPortOpen\":false,\"ip\":\"10.3.8.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-19\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-19\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-20\",\"httpPortOpen\":false,\"ip\":\"36.9.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-20\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-20\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-21\",\"httpPortOpen\":false,\"ip\":\"57.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-21\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-21\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-22\",\"httpPortOpen\":false,\"ip\":\"23.7.4.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-22\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-22\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-23\",\"httpPortOpen\":false,\"ip\":\"4.3.7.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-23\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-23\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-24\",\"httpPortOpen\":false,\"ip\":\"67.3.8.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-24\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-24\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"PS-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"PS-25\",\"httpPortOpen\":false,\"ip\":\"63.3.6.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.hack(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmhhY2sodGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"hack.js\",\"server\":\"PS-25\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.grow(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQ3RELE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1FBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGxldCB0YXJnZXQgPSBcIm4wMGRsZXNcIjtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBucy5hcmdzWzBdID09PSBcInN0cmluZ1wiKVxyXG4gICAgdGFyZ2V0ID0gbnMuYXJnc1swXTtcclxuXHJcbiAgbGV0IG1zID0gMDtcclxuICBpZiAobnMuYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBucy5hcmdzWzFdID09PSBcIm51bWJlclwiKSBtcyA9IG5zLmFyZ3NbMV07XHJcblxyXG4gIGF3YWl0IG5zLmdyb3codGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"grow.js\",\"server\":\"PS-25\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = \\\"n00dles\\\";\\r\\n    if (ns.args.length > 0 && typeof ns.args[0] === \\\"string\\\")\\r\\n        target = ns.args[0];\\r\\n    let ms = 0;\\r\\n    if (ns.args.length > 1 && typeof ns.args[1] === \\\"number\\\")\\r\\n        ms = ns.args[1];\\r\\n    await ns.weaken(target, { additionalMsec: ms });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUN0RCxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUTtRQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgdGFyZ2V0ID0gXCJuMDBkbGVzXCI7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgbnMuYXJnc1swXSA9PT0gXCJzdHJpbmdcIilcclxuICAgIHRhcmdldCA9IG5zLmFyZ3NbMF07XHJcblxyXG4gIGxldCBtcyA9IDA7XHJcbiAgaWYgKG5zLmFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJudW1iZXJcIikgbXMgPSBucy5hcmdzWzFdO1xyXG5cclxuICBhd2FpdCBucy53ZWFrZW4odGFyZ2V0LCB7IGFkZGl0aW9uYWxNc2VjOiBtcyB9KTtcclxufVxyXG4iXX0=\",\"filename\":\"weaken.js\",\"server\":\"PS-25\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":70.3426,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":388730.39603642083}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":436.9886,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":99.9794,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":62.944,\"discovery\":\"known\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":95.1451,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":15.9237,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":103.6138,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{\"ll\":\"run ll.js\",\"ka\":\"./ka.js\",\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV2.exe; buy AutoLink.exe; buy Formulas.exe\",\"peek\":\"./execute.js PEEK\",\"sh\":\"./super-hack.js\",\"sa\":\"scan-analyze 10\",\"t\":\"./test.js\",\"kh\":\"./kh.js\",\"eval\":\"./eval.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#FFF\",\"primary\":\"#F8F8F2\",\"primarydark\":\"#FAFAEB\",\"successlight\":\"#ADE146\",\"success\":\"#A6E22E\",\"successdark\":\"#98E104\",\"errorlight\":\"#FF69A0\",\"error\":\"#F92672\",\"errordark\":\"#D10F56\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E1D992\",\"warning\":\"#E6DB74\",\"warningdark\":\"#EDDD54\",\"infolight\":\"#92E1F1\",\"info\":\"#66D9EF\",\"infodark\":\"#31CDED\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#F92672\",\"money\":\"#E6DB74\",\"hack\":\"#A6E22E\",\"combat\":\"#75715E\",\"cha\":\"#AE81FF\",\"int\":\"#66D9EF\",\"rep\":\"#E69F66\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#272822\",\"backgroundsecondary\":\"#1B1C18\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"JetBrainsMonoNL NF, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":1,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"JetBrainsMono NFP\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"","LastExportBonus":"1701560468946","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}